const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":705,\"nextId\":705,\"documentIds\":{\"0\":\"1\",\"1\":\"1#功能禁用\",\"2\":\"2\",\"3\":\"2#jdbc-api\",\"4\":\"2#drivermanager\",\"5\":\"2#connection\",\"6\":\"2#statement\",\"7\":\"2#resultset\",\"8\":\"2#preparedstatement\",\"9\":\"2#preparedstatement原理\",\"10\":\"2#数据库连接池\",\"11\":\"2#driud使用步骤\",\"12\":\"2#测试代码\",\"13\":\"2@0\",\"14\":\"2@1\",\"15\":\"3\",\"16\":\"3#java8新特性\",\"17\":\"3#lamda表达式的使用\",\"18\":\"3@0\",\"19\":\"3@1\",\"20\":\"4\",\"21\":\"4#布局\",\"22\":\"4#缩小图标\",\"23\":\"4#顶级容器jframe\",\"24\":\"4#gridbaglayout布局\",\"25\":\"4#无布局\",\"26\":\"4#动作监听\",\"27\":\"4#鼠标监听\",\"28\":\"4#键盘监听机制\",\"29\":\"4#文本框\",\"30\":\"4@0\",\"31\":\"4@1\",\"32\":\"5\",\"33\":\"5#前端相关\",\"34\":\"5#html\",\"35\":\"5#css\",\"36\":\"5#布局标签\",\"37\":\"5#js\",\"38\":\"5#js语法\",\"39\":\"5#js函数\",\"40\":\"5#js对象\",\"41\":\"5#js事件监听\",\"42\":\"5#vue\",\"43\":\"5#vue中的常用指令\",\"44\":\"5#vue的声明周期\",\"45\":\"5#ajax\",\"46\":\"5#yapi-api管理平台\",\"47\":\"5#前端开发工程化\",\"48\":\"5#_1-环境准备\",\"49\":\"5#_2-vue项目简介\",\"50\":\"5#vue组件库element\",\"51\":\"5#常用组件\",\"52\":\"5#vue路由\",\"53\":\"5#打包部署\",\"54\":\"5#web开发\",\"55\":\"5#maven\",\"56\":\"5#安装\",\"57\":\"5#idea集成maven\",\"58\":\"5#maven坐标\",\"59\":\"5#maven依赖管理\",\"60\":\"5#web后端开发\",\"61\":\"5#springbootweb入门\",\"62\":\"5#http协议\",\"63\":\"5#请求协议\",\"64\":\"5#响应协议\",\"65\":\"5#web服务器-tomacat\",\"66\":\"5#tomcat入门程序\",\"67\":\"5#请求响应\",\"68\":\"5#请求\",\"69\":\"5#响应\",\"70\":\"5#分层解耦\",\"71\":\"5#三层架构\",\"72\":\"5#分层解耦-1\",\"73\":\"5#ioc-di-入门\",\"74\":\"5#ioc详解\",\"75\":\"5#di详解\",\"76\":\"5#mybatis\",\"77\":\"5#配置sql提示\",\"78\":\"5#数据库连接池\",\"79\":\"5#lombok\",\"80\":\"5#mybatis基础操作\",\"81\":\"5#占位符\",\"82\":\"5#xml映射文件\",\"83\":\"5#mybatisx插件\",\"84\":\"5#mybatis动态sql-if\",\"85\":\"5#foreach\",\"86\":\"5#sql-include\",\"87\":\"5#文件上传\",\"88\":\"5#基础登录功能\",\"89\":\"5#会话技术\",\"90\":\"5#cookie\",\"91\":\"5#session\",\"92\":\"5#令牌技术-主流\",\"93\":\"5#过滤技术filter\",\"94\":\"5#拦截器interceptor\",\"95\":\"5#登录校验\",\"96\":\"5#异常处理\",\"97\":\"5#事务管理\",\"98\":\"5#事务进阶\",\"99\":\"5#aop\",\"100\":\"5#aop快速入门\",\"101\":\"5#aop核心概念\",\"102\":\"5#aop进阶\",\"103\":\"5@0\",\"104\":\"5@1\",\"105\":\"6\",\"106\":\"6#前言\",\"107\":\"6#java的注释\",\"108\":\"6#java的输出\",\"109\":\"6#java的输入\",\"110\":\"6#java的命名规则\",\"111\":\"6#java的数据类型\",\"112\":\"6#基本数据类型\",\"113\":\"6#引用数据类型\",\"114\":\"6#强制数据类型转换\",\"115\":\"6#运算符\",\"116\":\"6#位运算符\",\"117\":\"6#自增自减运算符\",\"118\":\"6#逻辑运算符\",\"119\":\"6#三元运算符\",\"120\":\"6#转义字符\",\"121\":\"6#程序流程控制\",\"122\":\"6#跳出循环\",\"123\":\"6#数组\",\"124\":\"6#三种定义数组的方法\",\"125\":\"6#算法-将二位数组的行列颠倒\",\"126\":\"6#数组的排序\",\"127\":\"6#构造方法-构造器\",\"128\":\"6#this关键字\",\"129\":\"6#super关键字\",\"130\":\"6#static关键字\",\"131\":\"6#final关键字\",\"132\":\"6#初始化块-代码块\",\"133\":\"6#重载\",\"134\":\"6#面向对象的特征\",\"135\":\"6#封装和隐藏\",\"136\":\"6#继承\",\"137\":\"6#方法的覆盖重写\",\"138\":\"6#抽象类abstract-class\",\"139\":\"6#接口\",\"140\":\"6#默认方法\",\"141\":\"6#接口静态方法\",\"142\":\"6#默认方法私有化\",\"143\":\"6#接口中的常量\",\"144\":\"6#接口总结\",\"145\":\"6#多态\",\"146\":\"6#对象转型\",\"147\":\"6#用instanceof关键字进行类判断\",\"148\":\"6#内部类\",\"149\":\"6#成员内部类\",\"150\":\"6#局部内部类\",\"151\":\"6#匿名内部类\",\"152\":\"6#java异常处理\",\"153\":\"6#如何处理异常exception\",\"154\":\"6#处理的方式一\",\"155\":\"6#处理方式二\",\"156\":\"6#了解一下\",\"157\":\"6#math\",\"158\":\"6#biglnteger类\",\"159\":\"6#以下比较常用\",\"160\":\"6#random类\",\"161\":\"6#日期类\",\"162\":\"6#java-util-data类\",\"163\":\"6#simpledateformat类\",\"164\":\"6#calendar类\",\"165\":\"6#string类\",\"166\":\"6#字符串的常用的方法\",\"167\":\"6#stringbuffer类\",\"168\":\"6#stringbuilder\",\"169\":\"6#包装类\",\"170\":\"6#collection接口\",\"171\":\"6#arraylist-list的主要实现类\",\"172\":\"6#set的主要实现类-hashset\",\"173\":\"6#listhashset\",\"174\":\"6#treeset\",\"175\":\"6#treeset定制排序\",\"176\":\"6#treeset练习\",\"177\":\"6#map接口\",\"178\":\"6#treemap\",\"179\":\"6#hashtable\",\"180\":\"6#collections工具类的使用\",\"181\":\"6#注意\",\"182\":\"6#file类\",\"183\":\"6#fileinputstream\",\"184\":\"6#fileoutputstream\",\"185\":\"6#fileinputoutputstream复制\",\"186\":\"6#filereader\",\"187\":\"6#对象流\",\"188\":\"6#javaio相关代码\",\"189\":\"6#网络编程相关\",\"190\":\"6#socket类\",\"191\":\"6#socket相关api\",\"192\":\"6#聊天室项目\",\"193\":\"6#创建和启动线程\",\"194\":\"6#方式一-继承thread类\",\"195\":\"6#方式二-实现runnable接口\",\"196\":\"6#线程的常用结构\",\"197\":\"6#线程安全问题及解决\",\"198\":\"6@0\",\"199\":\"6@1\",\"200\":\"7\",\"201\":\"7#socket类\",\"202\":\"7#socket相关api\",\"203\":\"7#聊天室项目\",\"204\":\"7#创建和启动线程\",\"205\":\"7#方式一-继承thread类\",\"206\":\"7#方式二-实现runnable接口\",\"207\":\"7#线程的常用结构\",\"208\":\"7#线程安全问题及解决\",\"209\":\"7@0\",\"210\":\"7@1\",\"211\":\"8\",\"212\":\"8#aop实现\",\"213\":\"8#获取通知细节\",\"214\":\"8#切面表达式语法\",\"215\":\"8#切面表达式提取和复用\",\"216\":\"8#around\",\"217\":\"8#切面优先级\",\"218\":\"8#cglib动态代理生效\",\"219\":\"8#xml方式实现-了解\",\"220\":\"9\",\"221\":\"10\",\"222\":\"10#基于静态工厂实例化\",\"223\":\"10#基于实例工厂实例化\",\"224\":\"10#构造器带参数的注入\",\"225\":\"10#基于setter方法的注入\",\"226\":\"10#如何实例化ioc容器\",\"227\":\"10#周期管理\",\"228\":\"10#组件作用域\",\"229\":\"10#factorybean\",\"230\":\"10#factorybean和beanfactory区别\",\"231\":\"10#引入配置文件-并使用其值\",\"232\":\"10#作用域和周期方法\",\"233\":\"10#引用类型自动装配-di\",\"234\":\"10#基本属性赋值\",\"235\":\"10#引入配置文件并使用其值\",\"236\":\"10#bean定义组件\",\"237\":\"10#高级特性-bean注解细节\",\"238\":\"10#bean方法之间的依赖\",\"239\":\"10#import多个配置类合并\",\"240\":\"10#_4-5-1-xml方式配置总结\",\"241\":\"10#_4-5-2-xml-注解方式配置总结\",\"242\":\"10#_4-5-3-完全注解方式配置总结\",\"243\":\"11\",\"244\":\"11#配置\",\"245\":\"11#事务属性-只读\",\"246\":\"11#事务属性-操作时间\",\"247\":\"11#事务异常\",\"248\":\"11#事务隔离级别\",\"249\":\"11#事务的传播行为\",\"250\":\"12\",\"251\":\"12#请求报文\",\"252\":\"12#响应报文\",\"253\":\"12#get请求\",\"254\":\"12#post请求\",\"255\":\"13\",\"256\":\"13#flex布局父项常见属性\",\"257\":\"13#flex-direction\",\"258\":\"13#justify-content\",\"259\":\"13#flex-wrap\",\"260\":\"13#align-items-设置侧轴上的子元素排列方式-单行\",\"261\":\"13#aligin-content-设置侧轴上子元素的排列方式-多行\",\"262\":\"13#flex-flow\",\"263\":\"13#flex布局子项常见属性\",\"264\":\"13#flex属性\",\"265\":\"13#align-self\",\"266\":\"13@0\",\"267\":\"13@1\",\"268\":\"14\",\"269\":\"15\",\"270\":\"16\",\"271\":\"16#一些常用命令\",\"272\":\"16#更改密码\",\"273\":\"16#后台运行\",\"274\":\"16#传输下载文件\",\"275\":\"16#快捷键\",\"276\":\"16#关于centos防火墙\",\"277\":\"16#安装数据库\",\"278\":\"16#终端美化相关\",\"279\":\"16#cowsay相关\",\"280\":\"16#名人名言\",\"281\":\"16#彩色的牛\",\"282\":\"16#添加到配置文件中\",\"283\":\"16#nginx\",\"284\":\"16#安装软件\",\"285\":\"16#ssh\",\"286\":\"16#vim配置及其命令\",\"287\":\"16#一些命令\",\"288\":\"16#拿到一台崭新的ubuntu服务器你会做什么\",\"289\":\"16@0\",\"290\":\"16@1\",\"291\":\"17\",\"292\":\"17#基础知识\",\"293\":\"17#关于注释\",\"294\":\"17#python中的保留字\",\"295\":\"17#常用类型转换函数\",\"296\":\"17#python中的输入\",\"297\":\"17#位运算符\",\"298\":\"17#f-string字符串格式化\",\"299\":\"17#条件表达式\",\"300\":\"17#程序控制语句\",\"301\":\"17#if-else语句\",\"302\":\"17#while循环\",\"303\":\"17#for循环\",\"304\":\"17#break-continue-pass\",\"305\":\"17#列表与元组\",\"306\":\"17#切片\",\"307\":\"17#列表\",\"308\":\"17#列表的操作\",\"309\":\"17#添加元素\",\"310\":\"17#修改与删除元素\",\"311\":\"17#其他操作\",\"312\":\"17#元组\",\"313\":\"17#元组与列表区别\",\"314\":\"17#字典与集合\",\"315\":\"17#字典的创建\",\"316\":\"17#集合\",\"317\":\"17#字符串\",\"318\":\"17#格式化字符\",\"319\":\"17#python中使用正则表达式\",\"320\":\"17#match\",\"321\":\"17#search-方法\",\"322\":\"17#findall-方法\",\"323\":\"17#sub-方法\",\"324\":\"17#split\",\"325\":\"17#函数\",\"326\":\"17#匿名函数\",\"327\":\"17#面向对象程序设计\",\"328\":\"17#属性\",\"329\":\"17#继承\",\"330\":\"17#模块\",\"331\":\"17#模块搜索\",\"332\":\"17#python中的包\",\"333\":\"17#python的内置函数\",\"334\":\"17#以前的\",\"335\":\"17@0\",\"336\":\"17@1\",\"337\":\"18\",\"338\":\"18#应用视角的操作系统\",\"339\":\"18@0\",\"340\":\"18@1\",\"341\":\"19\",\"342\":\"19@0\",\"343\":\"19@1\",\"344\":\"20\",\"345\":\"20#匹配单个字符\",\"346\":\"20#匹配多个字符\",\"347\":\"20#常用的总结\",\"348\":\"20@0\",\"349\":\"20@1\",\"350\":\"21\",\"351\":\"21#urllib库使用\",\"352\":\"21#下载\",\"353\":\"21#请求对象的定制\",\"354\":\"21#编解码\",\"355\":\"21#百度翻译\",\"356\":\"21#ajax的get请求\",\"357\":\"21#ajax的post请求\",\"358\":\"21@0\",\"359\":\"21@1\",\"360\":\"22\",\"361\":\"22#爬取百度翻译\",\"362\":\"22@0\",\"363\":\"22@1\",\"364\":\"23\",\"365\":\"24\",\"366\":\"24#代码\",\"367\":\"24#使用数组模拟队列-代码\",\"368\":\"24#测试main方法\",\"369\":\"24#问题\",\"370\":\"24#环形队列\",\"371\":\"24#单链表常见面试题\",\"372\":\"24@0\",\"373\":\"24@1\",\"374\":\"25\",\"375\":\"25#题目描述\",\"376\":\"25#输入格式\",\"377\":\"25#输出格式\",\"378\":\"25#样例-1\",\"379\":\"25#样例输入-1\",\"380\":\"25#样例输出-1\",\"381\":\"25@0\",\"382\":\"25@1\",\"383\":\"27\",\"384\":\"27#目录\",\"385\":\"27#一、maven简介\",\"386\":\"27#_1、为什么学习maven\",\"387\":\"27#_1-1、maven是一个依赖管理工具\",\"388\":\"27#_1-2、maven是一个构建工具\",\"389\":\"27#_1-3、结论\",\"390\":\"27#_2-maven介绍\",\"391\":\"27#_3-maven软件工作原理模型图-了解\",\"392\":\"27#二、maven安装和配置\",\"393\":\"27#_1-maven安装\",\"394\":\"27#_2-maven环境配置\",\"395\":\"27#_3-maven功能配置\",\"396\":\"27#_4-idea配置本地maven软件\",\"397\":\"27#三、基于idea创建maven工程\",\"398\":\"27#_1-概念梳理maven工程的gavp\",\"399\":\"27#_2-idea构建maven-java-se工程\",\"400\":\"27#_3-idea构建maven-java-web工程\",\"401\":\"27#_4-maven工程项目结构说明\",\"402\":\"27#四、基于idea进行maven工程构建\",\"403\":\"27#_1-构建概念和构建过程\",\"404\":\"27#_2-命令方式项目构建\",\"405\":\"27#_3-可视化方式项目构建\",\"406\":\"27#_4-构建插件、命令、生命周期命令之间关系\",\"407\":\"27#五、基于idea-进行maven依赖管理\",\"408\":\"27#_1-依赖管理概念\",\"409\":\"27#_2-maven工程核心信息配置和解读-gavp\",\"410\":\"27#_3-maven工程依赖管理配置\",\"411\":\"27#_4-依赖范围\",\"412\":\"27#_5-maven工程依赖下载失败错误解决-重点\",\"413\":\"27#_6-maven工程build构建配置\",\"414\":\"27#六、maven依赖传递和依赖冲突\",\"415\":\"27#_1-maven依赖传递特性\",\"416\":\"27#_2-maven依赖冲突特性\",\"417\":\"27#七、maven工程继承和聚合关系\",\"418\":\"27#_1-maven工程继承关系\",\"419\":\"27#_2-maven工程聚合关系\",\"420\":\"27#八、maven私服\",\"421\":\"27#_1-maven私服简介\",\"422\":\"27#_2-nexus下载安装\",\"423\":\"27#_3-初始设置\",\"424\":\"27#_4-nexus上的各种仓库\",\"425\":\"27#_5-通过-nexus-下载-jar-包\",\"426\":\"27#_6-将-jar-包部署到-nexus\",\"427\":\"27#_7-引用别人部署的-jar-包\",\"428\":\"27#九、maven综合案例\",\"429\":\"27#_1-项目需求和结构分析\",\"430\":\"27#_2-项目搭建和统一构建\",\"431\":\"27#_1父模块-micro-shop\",\"432\":\"27#_2通用模块-common-service\",\"433\":\"27#_3用户模块-user-service\",\"434\":\"27#_4订单模块-order-service\",\"435\":\"28\",\"436\":\"28#目录\",\"437\":\"28#一、maven简介和快速入门\",\"438\":\"28#_1-1-maven介绍\",\"439\":\"28#_1-2-maven主要作用理解\",\"440\":\"28#_1-3-maven安装和配置\",\"441\":\"28#二、基于idea的maven工程创建\",\"442\":\"28#_2-1梳理maven工程gavp属性\",\"443\":\"28#_2-2-idea构建maven-javase工程\",\"444\":\"28#_2-3-idea构建maven-javaee工程\",\"445\":\"28#_2-4-maven工程项目结构说明\",\"446\":\"28#三、maven核心功能依赖和构建管理\",\"447\":\"28#_3-1-依赖管理和配置\",\"448\":\"28#_3-2依赖传递和冲突\",\"449\":\"28#_3-3-依赖导入失败场景和解决方案\",\"450\":\"28#_3-4-扩展构建管理和插件配置\",\"451\":\"28#四、maven继承和聚合特性\",\"452\":\"28#_4-1-maven工程继承关系\",\"453\":\"28#_4-2-maven工程聚合关系\",\"454\":\"28#五、maven实战案例-搭建微服务maven工程架构\",\"455\":\"28#_5-1-项目需求和结构分析\",\"456\":\"28#_5-2项目搭建和统一构建\",\"457\":\"28#六、maven核心掌握总结\",\"458\":\"29\",\"459\":\"29#目录\",\"460\":\"29#_1-1-简介\",\"461\":\"29#_1-2-快速入门\",\"462\":\"29#_2-1-基于mapper接口crud\",\"463\":\"29#insert方法\",\"464\":\"29#delete方法\",\"465\":\"29#update方法\",\"466\":\"29#select方法\",\"467\":\"29#自定义和多表映射\",\"468\":\"29#_2-2-基于service接口crud\",\"469\":\"29#对比mapper接口crud区别\",\"470\":\"29#使用iservice接口方式\",\"471\":\"29#crud方法介绍\",\"472\":\"29#_2-3-分页查询实现\",\"473\":\"29#_2-4-条件构造器使用\",\"474\":\"29#_2-4-1-条件构造器作用\",\"475\":\"29#_2-4-2-条件构造器继承结构\",\"476\":\"29#_2-4-3-基于querywrapper-组装条件\",\"477\":\"29#_2-3-4-基于-updatewrapper组装条件\",\"478\":\"29#_2-3-5-基于lambdaquerywrapper组装条件\",\"479\":\"29#_2-3-6-基于lambdaupdatewrapper组装条件\",\"480\":\"29#_2-5-核心注解使用\",\"481\":\"29#_3-1-逻辑删除实现\",\"482\":\"29#_3-2-乐观锁实现\",\"483\":\"29#_3-2-1-悲观锁和乐观锁场景和介绍\",\"484\":\"29#_3-2-2-使用mybatis-plus数据使用乐观锁\",\"485\":\"29#_3-3-防全表更新和删除实现\",\"486\":\"29#_4-1-mybatisx插件逆向工程\",\"487\":\"29#_4-2-mybatisx快速代码生成\",\"488\":\"30\",\"489\":\"30#目录\",\"490\":\"30#一、mybatis简介\",\"491\":\"30#_1-1-简介\",\"492\":\"30#_1-2-持久层框架对比\",\"493\":\"30#_1-3-快速入门-基于mybatis3方式\",\"494\":\"30#二、mybatis基本使用\",\"495\":\"30#_2-1-向sql语句传参\",\"496\":\"30#_2-1-1-mybatis日志输出配置\",\"497\":\"30#_2-1-2-形式\",\"498\":\"30#_2-1-3-形式\",\"499\":\"30#_2-2-数据输入\",\"500\":\"30#_2-2-1-mybatis总体机制概括\",\"501\":\"30#_2-2-2-概念说明\",\"502\":\"30#_2-2-3-单个简单类型参数\",\"503\":\"30#_2-2-4-实体类类型参数\",\"504\":\"30#_2-2-5-零散的简单类型数据\",\"505\":\"30#_2-2-6-map类型参数\",\"506\":\"30#_2-3数据输出\",\"507\":\"30#_2-3-1-输出概述\",\"508\":\"30#_2-3-2-单个简单类型\",\"509\":\"30#_2-3-3-返回实体类对象\",\"510\":\"30#_2-3-4-返回map类型\",\"511\":\"30#_2-3-5-返回list类型\",\"512\":\"30#_2-3-6-返回主键值\",\"513\":\"30#_2-3-7-实体类属性和数据库字段对应关系\",\"514\":\"30#_2-4-crud强化练习\",\"515\":\"30#_2-5-mapperxml标签总结\",\"516\":\"30#三、mybatis多表映射\",\"517\":\"30#_3-1-多表映射概念\",\"518\":\"30#_3-2-对一映射\",\"519\":\"30#_3-3-对多映射\",\"520\":\"30#_3-4-多表映射总结\",\"521\":\"30#_3-4-1-多表映射优化\",\"522\":\"30#_3-4-2-多表映射总结\",\"523\":\"30#四、mybatis动态语句\",\"524\":\"30#_4-1-动态语句需求和简介\",\"525\":\"30#_4-2-if和where标签\",\"526\":\"30#_4-3-set标签\",\"527\":\"30#_4-4-trim标签-了解\",\"528\":\"30#_4-5-choose-when-otherwise标签\",\"529\":\"30#_4-6-foreach标签\",\"530\":\"30#_4-7-sql片段\",\"531\":\"30#五、mybatis高级扩展\",\"532\":\"30#_5-1-mapper批量映射优化\",\"533\":\"30#_5-2-插件和分页插件pagehelper\",\"534\":\"30#_5-2-1-插件机制和pagehelper插件介绍\",\"535\":\"30#_5-2-2-pagehelper插件使用\",\"536\":\"30#_5-3-逆向工程和mybatisx插件\",\"537\":\"30#_5-3-1-orm思维介绍\",\"538\":\"30#_5-3-2-逆向工程\",\"539\":\"30#_5-3-3-逆向工程插件mybatisx使用\",\"540\":\"30#六、mybatis总结\",\"541\":\"31\",\"542\":\"31#目录\",\"543\":\"31#一、技术体系结构\",\"544\":\"31#_1-1-总体技术体系\",\"545\":\"31#_1-2-框架概念和理解\",\"546\":\"31#二、springframework介绍\",\"547\":\"31#_2-1-spring-和-springframework概念\",\"548\":\"31#_2-2-springframework主要功能模块\",\"549\":\"31#_2-3-springframework-主要优势\",\"550\":\"31#三、spring-ioc容器和核心概念\",\"551\":\"31#_3-1-组件和组件管理概念\",\"552\":\"31#_3-2-spring-ioc容器和容器实现\",\"553\":\"31#_3-3-spring-ioc-di概念总结\",\"554\":\"31#四、spring-ioc实践和应用\",\"555\":\"31#_4-1-spring-ioc-di-实现步骤\",\"556\":\"31#_4-2-基于xml配置方式组件管理\",\"557\":\"31#_4-2-1-实验一-组件-bean-信息声明配置-ioc\",\"558\":\"31#_4-2-2-实验二-组件-bean-依赖注入配置-di\",\"559\":\"31#_4-2-3-实验三-ioc容器创建和使用\",\"560\":\"31#_4-2-4-实验四-高级特性-组件-bean-作用域和周期方法配置\",\"561\":\"31#_4-2-5-实验五-高级特性-factorybean特性和使用\",\"562\":\"31#_4-2-6-实验六-基于xml方式整合三层架构组件\",\"563\":\"31#_4-3-基于-注解-方式管理-bean\",\"564\":\"31#_4-3-1-实验一-bean注解标记和扫描-ioc\",\"565\":\"31#_4-3-2-实验二-组件-bean-作用域和周期方法注解\",\"566\":\"31#_4-3-3-实验三-bean属性赋值-引用类型自动装配-di\",\"567\":\"31#_4-3-4-实验四-bean属性赋值-基本类型属性赋值-di\",\"568\":\"31#_4-3-5-实验五-基于注解-xml方式整合三层架构组件\",\"569\":\"31#_4-4-基于-配置类-方式管理-bean\",\"570\":\"31#_4-4-1-完全注解开发理解\",\"571\":\"31#_4-4-2-实验一-配置类和扫描注解\",\"572\":\"31#_4-4-3-实验二-bean定义组件\",\"573\":\"31#_4-4-4-实验三-高级特性-bean注解细节\",\"574\":\"31#_4-4-5-实验四-高级特性-import扩展\",\"575\":\"31#_4-4-6-实验五-基于注解-配置类方式整合三层架构组件\",\"576\":\"31#_4-5-三种配置方式总结\",\"577\":\"31#_4-5-1-xml方式配置总结\",\"578\":\"31#_4-5-2-xml-注解方式配置总结\",\"579\":\"31#_4-5-3-完全注解方式配置总结\",\"580\":\"31#_4-6-整合spring5-test5搭建测试环境\",\"581\":\"31#五、spring-aop面向切面编程\",\"582\":\"31#_5-1-场景设定和问题复现\",\"583\":\"31#_5-2-解决技术代理模式\",\"584\":\"31#_5-3-面向切面编程思维-aop\",\"585\":\"31#_5-4-spring-aop框架介绍和关系梳理\",\"586\":\"31#_5-5-spring-aop基于注解方式实现和细节\",\"587\":\"31#_5-5-1-spring-aop底层技术组成\",\"588\":\"31#_5-5-2-初步实现\",\"589\":\"31#_5-5-3-获取通知细节信息\",\"590\":\"31#_5-5-4-切点表达式语法\",\"591\":\"31#_5-5-5-重用-提取-切点表达式\",\"592\":\"31#_5-5-6-环绕通知\",\"593\":\"31#_5-5-7-切面优先级设置\",\"594\":\"31#_5-5-8-cglib动态代理生效\",\"595\":\"31#_5-5-9-注解实现小结\",\"596\":\"31#_5-6-spring-aop基于xml方式实现-了解\",\"597\":\"31#_5-7-spring-aop对获取bean的影响理解\",\"598\":\"31#_5-7-1-根据类型装配-bean\",\"599\":\"31#_5-7-2-使用总结\",\"600\":\"31#六、spring-声明式事务\",\"601\":\"31#_6-1-声明式事务概念\",\"602\":\"31#_6-1-1-编程式事务\",\"603\":\"31#_6-1-2-声明式事务\",\"604\":\"31#_6-1-3-spring事务管理器\",\"605\":\"31#_6-2-基于注解的声明式事务\",\"606\":\"31#_6-2-1-准备工作\",\"607\":\"31#_6-2-2-基本事务控制\",\"608\":\"31#_6-2-3-事务属性-只读\",\"609\":\"31#_6-2-4-事务属性-超时时间\",\"610\":\"31#_6-2-5-事务属性-事务异常\",\"611\":\"31#_6-2-6-事务属性-事务隔离级别\",\"612\":\"31#_6-2-7-事务属性-事务传播行为\",\"613\":\"31#七、spring核心掌握总结\",\"614\":\"32\",\"615\":\"32#目录\",\"616\":\"32#一、ssm整合理解\",\"617\":\"32#_1-1-什么是ssm整合\",\"618\":\"32#_1-2-ssm整合核心问题明确\",\"619\":\"32#_1-2-1-第一问-ssm整合需要几个ioc容器\",\"620\":\"32#_1-2-2-第二问-每个ioc容器对应哪些类型组件\",\"621\":\"32#_1-2-3-第三问-ioc容器之间关系和调用方向\",\"622\":\"32#_1-2-4-第四问-具体多少配置类以及对应容器关系\",\"623\":\"32#_1-2-5-第五问-ioc初始化方式和配置位置\",\"624\":\"32#二、ssm整合配置实战\",\"625\":\"32#_2-1-依赖整合和添加\",\"626\":\"32#_2-2-控制层配置编写-springmvc整合\",\"627\":\"32#_2-3-业务层配置编写-aop-tx整合\",\"628\":\"32#_2-4-持久层配置编写-mybatis整合\",\"629\":\"32#_2-5-容器初始化配置类\",\"630\":\"32#_2-6-整合测试\",\"631\":\"32#三、《任务列表案例》前端程序搭建和运行\",\"632\":\"32#_3-1-整合案例介绍和接口分析\",\"633\":\"32#_3-1-1-案例功能预览\",\"634\":\"32#_3-1-2接口分析\",\"635\":\"32#_3-2-前端工程导入\",\"636\":\"32#_3-2-1-前端环境搭建\",\"637\":\"32#_3-2-2-导入前端程序\",\"638\":\"32#_3-3-启动测试\",\"639\":\"32#四、《任务列表案例》后端程序实现和测试\",\"640\":\"32#_4-1-准备工作\",\"641\":\"32#_4-2-功能实现\",\"642\":\"32#_4-3-前后联调\",\"643\":\"33\",\"644\":\"33#目录\",\"645\":\"33#一、微头条案例介绍\",\"646\":\"33#微头条业务简介\",\"647\":\"33#技术栈介绍\",\"648\":\"33#功能展示\",\"649\":\"33#二、微头条前端搭建\",\"650\":\"33#三、基于springboot搭建项目基础架构\",\"651\":\"33#_1-数据库脚本执行\",\"652\":\"33#_2-搭建sprintboot工程\",\"653\":\"33#_3-mybatisx逆向工程\",\"654\":\"33#四、后台功能开发\",\"655\":\"33#_4-1-用户模块开发\",\"656\":\"33#_4-2-首页模块开发\",\"657\":\"33#_4-3-头条模块开发\",\"658\":\"33#五、前后端联调\",\"659\":\"34\",\"660\":\"34#目录\",\"661\":\"34#一、springboot3介绍\",\"662\":\"34#_1-1-springboot3简介\",\"663\":\"34#_1-2-系统要求\",\"664\":\"34#_1-3-快速入门\",\"665\":\"34#_1-4-入门总结\",\"666\":\"34#二、springboot3配置文件\",\"667\":\"34#_2-1-统一配置管理概述\",\"668\":\"34#_2-2-属性配置文件使用\",\"669\":\"34#_2-3-yaml配置文件使用\",\"670\":\"34#_2-4-批量配置文件注入\",\"671\":\"34#_2-5-多环境配置和使用\",\"672\":\"34#三、springboot3整合springmvc\",\"673\":\"34#_3-1-实现过程\",\"674\":\"34#_3-2-web相关配置\",\"675\":\"34#_3-3-静态资源处理\",\"676\":\"34#_3-4-自定义拦截器-springmvc配置\",\"677\":\"34#四、springboot3整合druid数据源\",\"678\":\"34#五、springboot3整合mybatis\",\"679\":\"34#_5-1-mybatis整合步骤\",\"680\":\"34#_5-2-mybatis整合实践\",\"681\":\"34#_5-3-声明式事务整合配置\",\"682\":\"34#_5-4-aop整合配置\",\"683\":\"34#六、springboot3项目打包和运行\",\"684\":\"34#_6-1-添加打包插件\",\"685\":\"34#_6-2-执行打包\",\"686\":\"34#_6-3-命令启动和参数说明\",\"687\":\"35\",\"688\":\"36\",\"689\":\"37\",\"690\":\"38\",\"691\":\"39\",\"692\":\"40\",\"693\":\"41\",\"694\":\"42\",\"695\":\"43\",\"696\":\"44\",\"697\":\"45\",\"698\":\"46\",\"699\":\"47\",\"700\":\"48\",\"701\":\"49\",\"702\":\"50\",\"703\":\"51\",\"704\":\"52\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,71],\"1\":[1,79],\"2\":[1,9],\"3\":[2,5],\"4\":[1,2],\"5\":[1,36],\"6\":[1,13],\"7\":[1,28],\"8\":[1,47],\"9\":[1,32],\"10\":[1,30],\"11\":[1,112],\"12\":[1,77],\"13\":[null,null,1],\"14\":[null,null,1],\"15\":[1,14],\"16\":[1,53],\"17\":[1,156],\"18\":[null,null,1],\"19\":[null,null,1],\"20\":[1],\"21\":[1,43],\"22\":[1,57],\"23\":[1,119],\"24\":[1,62],\"25\":[1,69],\"26\":[1,86],\"27\":[1,72],\"28\":[1,179],\"29\":[1,70],\"30\":[null,null,1],\"31\":[null,null,1],\"32\":[1,27],\"33\":[1,3],\"34\":[1,290],\"35\":[1,45],\"36\":[1,45],\"37\":[1,28],\"38\":[1,114],\"39\":[1,18],\"40\":[1,231],\"41\":[1,43],\"42\":[1,42],\"43\":[1,99],\"44\":[1,34],\"45\":[1,89],\"46\":[2,8],\"47\":[1,4],\"48\":[2,14],\"49\":[2,41],\"50\":[1,40],\"51\":[1,14],\"52\":[1,33],\"53\":[1,27],\"54\":[1],\"55\":[1,17],\"56\":[1,38],\"57\":[1,27],\"58\":[1,29],\"59\":[1,119],\"60\":[1,7],\"61\":[1,26],\"62\":[1,16],\"63\":[1,40],\"64\":[1,67],\"65\":[2,23],\"66\":[1,9],\"67\":[1,15],\"68\":[1,130],\"69\":[1,31],\"70\":[1],\"71\":[1,20],\"72\":[1,27],\"73\":[3,12],\"74\":[1,42],\"75\":[1,12],\"76\":[1,38],\"77\":[1,3],\"78\":[1,42],\"79\":[1,44],\"80\":[1,48],\"81\":[1,116],\"82\":[1,69],\"83\":[1,3],\"84\":[2,44],\"85\":[1,38],\"86\":[1,12],\"87\":[1],\"88\":[1],\"89\":[1,17],\"90\":[1,48],\"91\":[1,35],\"92\":[3,138],\"93\":[1,131],\"94\":[1,74],\"95\":[1,48],\"96\":[1,26],\"97\":[1,36],\"98\":[1,57],\"99\":[1,14],\"100\":[1,60],\"101\":[1,20],\"102\":[1,15],\"103\":[null,null,1],\"104\":[null,null,1],\"105\":[1,2],\"106\":[1,37],\"107\":[1,17],\"108\":[2,42],\"109\":[2,39],\"110\":[1,25],\"111\":[1],\"112\":[2,99],\"113\":[2,10],\"114\":[1,73],\"115\":[2],\"116\":[2,56],\"117\":[1,48],\"118\":[1,12],\"119\":[1,20],\"120\":[1,21],\"121\":[1,55],\"122\":[1,34],\"123\":[1],\"124\":[1,54],\"125\":[2,25],\"126\":[1,100],\"127\":[3,39],\"128\":[1,17],\"129\":[1,8],\"130\":[1,122],\"131\":[1,29],\"132\":[3,36],\"133\":[1,7],\"134\":[1,4],\"135\":[1,80],\"136\":[1,25],\"137\":[1,29],\"138\":[2,108],\"139\":[1,64],\"140\":[1,19],\"141\":[1,21],\"142\":[1,21],\"143\":[1,30],\"144\":[1,38],\"145\":[1,100],\"146\":[1,102],\"147\":[1,73],\"148\":[1,11],\"149\":[1,53],\"150\":[1,70],\"151\":[1,71],\"152\":[1,36],\"153\":[1,17],\"154\":[2,75],\"155\":[1,84],\"156\":[1],\"157\":[1,4],\"158\":[1,9],\"159\":[1],\"160\":[1,43],\"161\":[1,8],\"162\":[3,38],\"163\":[1,62],\"164\":[1,37],\"165\":[1,44],\"166\":[1,66],\"167\":[1,49],\"168\":[1,4],\"169\":[1,134],\"170\":[1,130],\"171\":[2,55],\"172\":[2,36],\"173\":[1,7],\"174\":[1,49],\"175\":[1,37],\"176\":[1,147],\"177\":[1,114],\"178\":[1,62],\"179\":[1,10],\"180\":[1,63],\"181\":[1,47],\"182\":[1,74],\"183\":[1,66],\"184\":[1,47],\"185\":[1,73],\"186\":[1,70],\"187\":[1,123],\"188\":[1,156],\"189\":[1,74],\"190\":[1,27],\"191\":[1,99],\"192\":[1,162],\"193\":[1,12],\"194\":[2,56],\"195\":[2,35],\"196\":[1,91],\"197\":[1,131],\"198\":[null,null,1],\"199\":[null,null,1],\"200\":[1,74],\"201\":[1,27],\"202\":[1,99],\"203\":[1,162],\"204\":[1,12],\"205\":[2,56],\"206\":[2,35],\"207\":[1,91],\"208\":[1,53],\"209\":[null,null,1],\"210\":[null,null,1],\"211\":[1,117],\"212\":[1,54],\"213\":[1,57],\"214\":[1,29],\"215\":[1,29],\"216\":[1,43],\"217\":[1,9],\"218\":[1,14],\"219\":[3,63],\"220\":[1,205],\"221\":[1,79],\"222\":[1,26],\"223\":[1,42],\"224\":[1,100],\"225\":[1,35],\"226\":[1,66],\"227\":[1,24],\"228\":[1,65],\"229\":[1,82],\"230\":[1,58],\"231\":[2,156],\"232\":[1,30],\"233\":[3,74],\"234\":[1,7],\"235\":[1,69],\"236\":[2,122],\"237\":[2,95],\"238\":[1,56],\"239\":[1,45],\"240\":[4,15],\"241\":[4,16],\"242\":[4,95],\"243\":[1,68],\"244\":[1,106],\"245\":[2,18],\"246\":[2,13],\"247\":[1,55],\"248\":[1,107],\"249\":[1,58],\"250\":[1,18],\"251\":[1,14],\"252\":[1,69],\"253\":[1,116],\"254\":[1,21],\"255\":[1,27],\"256\":[1,18],\"257\":[2,16],\"258\":[2,20],\"259\":[2,17],\"260\":[5,17],\"261\":[5,18],\"262\":[2,8],\"263\":[1,6],\"264\":[1,7],\"265\":[2,16],\"266\":[null,null,1],\"267\":[null,null,1],\"268\":[1,3],\"269\":[1,13],\"270\":[1,3],\"271\":[1,15],\"272\":[1,3],\"273\":[1,10],\"274\":[1,6],\"275\":[1,5],\"276\":[1,30],\"277\":[1,79],\"278\":[1],\"279\":[1,10],\"280\":[1,7],\"281\":[1,9],\"282\":[1,3],\"283\":[1,35],\"284\":[1],\"285\":[1,6],\"286\":[1,20],\"287\":[1,6],\"288\":[1,15],\"289\":[null,null,1],\"290\":[null,null,1],\"291\":[1,7],\"292\":[1,18],\"293\":[1,14],\"294\":[1,38],\"295\":[1,26],\"296\":[1,8],\"297\":[1,13],\"298\":[2,16],\"299\":[1,13],\"300\":[1],\"301\":[2,10],\"302\":[1,3],\"303\":[1,5],\"304\":[3,4],\"305\":[1,32],\"306\":[1,14],\"307\":[1,37],\"308\":[1],\"309\":[1,10],\"310\":[1,16],\"311\":[1,47],\"312\":[1,40],\"313\":[1,13],\"314\":[1,12],\"315\":[1,76],\"316\":[1,48],\"317\":[1,143],\"318\":[1,21],\"319\":[1,2],\"320\":[1,66],\"321\":[2,12],\"322\":[2,10],\"323\":[2,15],\"324\":[2,23],\"325\":[1,72],\"326\":[1,14],\"327\":[1,48],\"328\":[1,40],\"329\":[1,28],\"330\":[1,33],\"331\":[1,13],\"332\":[1],\"333\":[1,29],\"334\":[1,802],\"335\":[null,null,1],\"336\":[null,null,1],\"337\":[1,5],\"338\":[1,66],\"339\":[null,null,1],\"340\":[null,null,1],\"341\":[1,18],\"342\":[null,null,1],\"343\":[null,null,1],\"344\":[1,5],\"345\":[1,75],\"346\":[1,24],\"347\":[1,28],\"348\":[null,null,1],\"349\":[null,null,1],\"350\":[1,4],\"351\":[1,48],\"352\":[1,29],\"353\":[1,71],\"354\":[1,64],\"355\":[1,64],\"356\":[1,67],\"357\":[1],\"358\":[null,null,1],\"359\":[null,null,1],\"360\":[1],\"361\":[1,66],\"362\":[null,null,1],\"363\":[null,null,1],\"364\":[1,6],\"365\":[1,73],\"366\":[2,62],\"367\":[3,63],\"368\":[1,65],\"369\":[1,6],\"370\":[1,233],\"371\":[1,214],\"372\":[null,null,1],\"373\":[null,null,1],\"374\":[1],\"375\":[1,12],\"376\":[1,12],\"377\":[1,4],\"378\":[2],\"379\":[2,5],\"380\":[2,5],\"381\":[null,null,1],\"382\":[null,null,1],\"383\":[1],\"384\":[1,2],\"385\":[2],\"386\":[2],\"387\":[2,301],\"388\":[3,15],\"389\":[3,8],\"390\":[2,61],\"391\":[4],\"392\":[2],\"393\":[2,43],\"394\":[2,13],\"395\":[2,87],\"396\":[2,25],\"397\":[2],\"398\":[2,104],\"399\":[4,22],\"400\":[4,45],\"401\":[2,85],\"402\":[2],\"403\":[2,19],\"404\":[2,52],\"405\":[2,13],\"406\":[4,78],\"407\":[3],\"408\":[2,20],\"409\":[4,43],\"410\":[2,61],\"411\":[2,82],\"412\":[4,107],\"413\":[2,111],\"414\":[2],\"415\":[2,88],\"416\":[2,76],\"417\":[2],\"418\":[2,94],\"419\":[2,48],\"420\":[2],\"421\":[2,81],\"422\":[2,24],\"423\":[2,31],\"424\":[2,32],\"425\":[6,109],\"426\":[5,104],\"427\":[4,24],\"428\":[2],\"429\":[2,36],\"430\":[2],\"431\":[4,132],\"432\":[4,103],\"433\":[4,77],\"434\":[4,84],\"435\":[3],\"436\":[1,34],\"437\":[2],\"438\":[2,27],\"439\":[3,45],\"440\":[3,150],\"441\":[2],\"442\":[2,108],\"443\":[3,8],\"444\":[4,37],\"445\":[3,84],\"446\":[2],\"447\":[3,121],\"448\":[2,109],\"449\":[2,62],\"450\":[3,91],\"451\":[2],\"452\":[3,93],\"453\":[3,43],\"454\":[3],\"455\":[3,37],\"456\":[2,151],\"457\":[2,24],\"458\":[4],\"459\":[1,47],\"460\":[2,137],\"461\":[3,261],\"462\":[3,13],\"463\":[1,13],\"464\":[1,45],\"465\":[1,34],\"466\":[1,69],\"467\":[1,58],\"468\":[2,19],\"469\":[2,2],\"470\":[1,14],\"471\":[1,103],\"472\":[3,82],\"473\":[3],\"474\":[4,47],\"475\":[3,24],\"476\":[5,124],\"477\":[5,68],\"478\":[4,170],\"479\":[4,40],\"480\":[3,192],\"481\":[3,116],\"482\":[3],\"483\":[4,101],\"484\":[4,68],\"485\":[2,48],\"486\":[3,15],\"487\":[3,8],\"488\":[3],\"489\":[1,67],\"490\":[2],\"491\":[2,44],\"492\":[3,38],\"493\":[5,323],\"494\":[2],\"495\":[3],\"496\":[2,63],\"497\":[2,3],\"498\":[3,34],\"499\":[2],\"500\":[2],\"501\":[1,31],\"502\":[2,32],\"503\":[2,31],\"504\":[2,24],\"505\":[2,73],\"506\":[2],\"507\":[4,13],\"508\":[3,144],\"509\":[3,64],\"510\":[4,59],\"511\":[4,47],\"512\":[4,130],\"513\":[4,73],\"514\":[3,258],\"515\":[3,161],\"516\":[2],\"517\":[3,207],\"518\":[3,121],\"519\":[2,104],\"520\":[3],\"521\":[4,58],\"522\":[4,11],\"523\":[2],\"524\":[3,42],\"525\":[3,57],\"526\":[3,38],\"527\":[4,69],\"528\":[5,53],\"529\":[3,89],\"530\":[3,21],\"531\":[2],\"532\":[3,35],\"533\":[3],\"534\":[4,67],\"535\":[3,88],\"536\":[3],\"537\":[4,71],\"538\":[4,37],\"539\":[3,63],\"540\":[2,19],\"541\":[2],\"542\":[1,110],\"543\":[2],\"544\":[2,33],\"545\":[3,86],\"546\":[2],\"547\":[5,55],\"548\":[2,19],\"549\":[4,62],\"550\":[3],\"551\":[3,68],\"552\":[4,162],\"553\":[4,48],\"554\":[3],\"555\":[6,126],\"556\":[3],\"557\":[9,145],\"558\":[8,142],\"559\":[5,76],\"560\":[7,131],\"561\":[6,159],\"562\":[5,295],\"563\":[6],\"564\":[7,246],\"565\":[7,83],\"566\":[7,262],\"567\":[7,53],\"568\":[5,250],\"569\":[5],\"570\":[3,18],\"571\":[4,121],\"572\":[4,121],\"573\":[4,164],\"574\":[5,42],\"575\":[4,219],\"576\":[3],\"577\":[4,14],\"578\":[4,16],\"579\":[4,37],\"580\":[4,57],\"581\":[3],\"582\":[3,111],\"583\":[3,179],\"584\":[5,193],\"585\":[4,16],\"586\":[3],\"587\":[4,16],\"588\":[3,218],\"589\":[3,108],\"590\":[3,102],\"591\":[4,81],\"592\":[3,66],\"593\":[3,25],\"594\":[3,40],\"595\":[3,1],\"596\":[6,93],\"597\":[4],\"598\":[5,51],\"599\":[4,6],\"600\":[3],\"601\":[3],\"602\":[3,47],\"603\":[4,12],\"604\":[4,31],\"605\":[3],\"606\":[4,146],\"607\":[3,82],\"608\":[5,74],\"609\":[5,94],\"610\":[5,61],\"611\":[4,107],\"612\":[5,148],\"613\":[2,20],\"614\":[3],\"615\":[1,47],\"616\":[2],\"617\":[3,25],\"618\":[3],\"619\":[5,30],\"620\":[5,17],\"621\":[6,72],\"622\":[6,22],\"623\":[6,37],\"624\":[2],\"625\":[3,308],\"626\":[4,38],\"627\":[6,45],\"628\":[5,368],\"629\":[3,24],\"630\":[3,86],\"631\":[3],\"632\":[3],\"633\":[3],\"634\":[3,49],\"635\":[3],\"636\":[4,68],\"637\":[3,5],\"638\":[2,6],\"639\":[3],\"640\":[3,105],\"641\":[3,133],\"642\":[3,2],\"643\":[3],\"644\":[1,23],\"645\":[2],\"646\":[1,9],\"647\":[1,28],\"648\":[1,7],\"649\":[2,15],\"650\":[2],\"651\":[2,675],\"652\":[2,283],\"653\":[2,32],\"654\":[2],\"655\":[3,392],\"656\":[3,248],\"657\":[3,192],\"658\":[2],\"659\":[3],\"660\":[1,39],\"661\":[2],\"662\":[2,58],\"663\":[3,16],\"664\":[3,143],\"665\":[3,158],\"666\":[2],\"667\":[3,44],\"668\":[2,93],\"669\":[3,173],\"670\":[3,73],\"671\":[3,87],\"672\":[2],\"673\":[3,128],\"674\":[3,68],\"675\":[2,87],\"676\":[5,71],\"677\":[2,255],\"678\":[2],\"679\":[3,34],\"680\":[3,196],\"681\":[3,38],\"682\":[3,33],\"683\":[2],\"684\":[3,27],\"685\":[3,2],\"686\":[3,47],\"687\":[1,3],\"688\":[1],\"689\":[1],\"690\":[1],\"691\":[1],\"692\":[1],\"693\":[1],\"694\":[1],\"695\":[1],\"696\":[1],\"697\":[4],\"698\":[1],\"699\":[5],\"700\":[4],\"701\":[3],\"702\":[3],\"703\":[4],\"704\":[4]},\"averageFieldLength\":[2.036834078007021,61.38446180361328,0.3371902823482692],\"storedFields\":{\"0\":{\"h\":\"ABOUT ME\",\"t\":[\"未经允许，禁止转载 查看官方配置文档博客主页。 或者查看\",\"本博客网站使用vuepress搭建，主题使用了vuepress-theme-hope\",\"网站内可搭建幻灯片演示\",\"博客内图标设置链接直接复制名字使用\",\"图标也可以在阿里图标库下载svg文件导入使用\",\"本博客所有笔记内容仅供参考。 如有侵权请联系邮箱\",\"尚硅谷文件夹内笔记由尚硅谷官方而来。\",\"注: 站内文章更新时间仅为上传时间\",\"w3school在线教程\",\"Axios中文文档 | Axios中文网 (axios-http.cn)\",\"尚硅谷全新ssm教程,课件连接\",\"--- # 这是文章的标题 title: 页面配置 # 你可以自定义封面图片 # cover: /assets/images/cover1.jpg # 这是页面的图标 icon: file # lock 加锁图标 # 这是侧边栏的顺序 order: 3 # 设置作者 author: Ms.Hope # 设置写作时间 date: 2020-01-01 # 一个页面可以有多个分类 category: - 使用指南 # 一个页面可以有多个标签 tag: - 页面配置 - 使用指南 # 此页面会在文章列表置顶 sticky: true # 此页面会出现在星标文章中 star: true # 你可以自定义页脚 footer: 这是测试显示的页脚 # 你可以自定义版权信息 copyright: 无版权 --- `more` 注释之前的内容被视为文章摘要。 <!-- more -->\"]},\"1\":{\"h\":\"功能禁用\",\"t\":[\"--- title: 布局与功能禁用 icon: gears order: 4 category: - 使用指南 tag: - 禁用 navbar: false sidebar: false breadcrumb: false pageInfo: false contributors: false editLink: false lastUpdated: false prev: false next: false comment: false footer: false backtotop: false --- 你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。 <!-- more --> 上面就是一个示例，禁用了如下功能: - 导航栏 - 侧边栏 - 路径导航 - 页面信息 - 贡献者 - 编辑此页链接 - 更新时间 - 上一篇/下一篇 链接 - 评论 - 页脚 - 返回顶部按钮\",\"projects: - icon: project name: 项目名称 desc: 项目详细描述 link: https://你的项目链接 - icon: link name: 链接名称 desc: 链接详细描述 link: https://链接地址 - icon: book name: 书籍名称 desc: 书籍详细描述 link: https://你的书籍链接 - icon: article name: 文章名称 desc: 文章详细描述 link: https://你的文章链接 - icon: friend name: 伙伴名称 desc: 伙伴详细介绍 link: https://你的伙伴链接 - icon: https://theme-hope-assets.vuejs.press/logo.svg name: 自定义项目 desc: 自定义详细介绍 link: https://你的自定义链接\"]},\"2\":{\"h\":\"JDBC\",\"t\":[\"创建工程，导入驱动jar包\",\"注册驱动\",\"获取连接\",\"定义sql语句\",\"获取执行sql对象\",\"执行sql\",\"处理返回结果\",\"释放资源\"]},\"3\":{\"h\":\"JDBC API\",\"t\":[\"DriverManager\",\"Connection\",\"Statement\",\"ResultSet\",\"PreparedStatement\"]},\"4\":{\"h\":\"DriverManager\",\"t\":[\"注册驱动\",\"获取数据库的连接\"]},\"5\":{\"h\":\"Connection\",\"t\":[\"获取执行SQl对象\",\"普通执行SQl对象 Statement createStatement()\",\"预编译SQL的执行对象：防止SQL注入 PreparedStatement prepareStatement(sql)\",\"执行存储过程的对象 CallableStatement prepareCall(sql)\",\"事物管理\",\"MySQl事务管理 开启事事务 BEFIN;/START TRANSACTION提交事务 COMMIT;回滚事务 ROLLBACK; MySQL默认自动提交事务 当写的多条代码出错时防止运行了前面几条，回滚到都未运行的状态 用异常处理机制\",\"JDBC事务管理 Connection接口定义了3个对应的方法 开启事务 setAutoCommit(boolean autoCommit()) true为自动提交事务 false为手动提交事务提交事务 commit()回滚事务 rollback()\"]},\"6\":{\"h\":\"Statement\",\"t\":[\"作用：\",\"执行数据库\",\"执行SQL语句\",\"int executeQuery(sql):执行DML,DDL语句 DML返回影响的行数 DDL语句执行成功也可能返回0\",\"ResultSet executeQuery(sql) 执行DDL语句 返回ResultSet结果集对象\"]},\"7\":{\"h\":\"ResultSet\",\"t\":[\"ResultSet(结果集对象)\",\"ResultSet stmt.executeQuery(sdl)执行DQL语句，返回ReSultSet对象\",\"获取查询结果\",\"boolean next()将光标从当前位置向前移动一行，判断当前行是否为有效行 true 有效行 当前行有数据false 无效行 当前行没有数据\",\"getXxx(参数) 获取数据 xxx 数据类型 如int getint(参数) 参数: int 列的编号从1开始 String 列的名称\"]},\"8\":{\"h\":\"PreparedStatement\",\"t\":[\"作用 预编译SQL语句并执行：预防SQL注入问题 SQL注入\",\"SQL注入是通过操作输入来修改事先定义好的SQL语句，用来达到执行代码对服务器进行攻击的方法\",\"获取PreparedStatement\",\"//SQL语句中的参数值，使用？占位符替代 String sql = \\\"select * from user where usename = ? and password =?\\\"; //通过Connection对象获取，并传入对应的sql语句 PreparedStatement patmt = conn.prepareStatement(sql);\",\"设置参数值\",\"PreparedStatement对象 :setXxx(参数1，参数2):给?赋值 Xxx 数据类型，如setint(参数1,参数 2); 参数1: ?的位置编号，从1开始 参数2: ?的值\",\"执行SQl executeUpdate();或executeQuery();:不需要再传递sql\",\"会转义/从而阻止SQL注入\"]},\"9\":{\"h\":\"PreparedStatement原理\",\"t\":[\"好处：\",\"预编译SQL，性能更高\",\"防止SQL注入，将敏感字符转义 PreparedStatement预编译功能开启 useServerPreStmls=true+&传入URL中 配置MySql执行日志(重启mysql服务后生效) 通过查看日志来看内部如何实现的\",\"log=output=FILE gengral-log=1 general_log_file=\\\"D:\\\\mysql.log\\\" slow_query-log=1 slow_query_log_file=\\\"D:\\\\mysql_slow.log\\\" long_query_time=2\",\"原理\",\"在获取PreparedStatement对象时，将sql语句发送给mysql服务器进行检查，编译(这些步骤很耗时)\",\"执行时就不用再进行这些步骤了，速度更快\",\"如果sql模板一样，则只需要进行一次检查，编译\"]},\"10\":{\"h\":\"数据库连接池\",\"t\":[\"数据库连接池是个容器，负责分配，管理数据库连接（Connection）\",\"它允许应用程序重复使用一个现有的数据库连，而不是再重新建立一个\",\"释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏\",\"好处\",\"资源重用\",\"提升系统响应速度\",\"避免数据库连接遗漏 数据库连接池的实现\",\"标准接口 DataSource\",\"官方(SUN)提供的数据库连接池标准接口,由第三方组织实现此接口\",\"功能：获取连接 Connection getConnection()\",\"常见的数据库连接池\",\"DBCP\",\"C3P0\",\"Druid\",\"Druid(德鲁伊)\",\"Druid连接池是由阿里巴巴开源的数据库连接池项目\",\"功能强大，性能优秀，是java语言最好的数据库连接池之一\"]},\"11\":{\"h\":\"Driud使用步骤\",\"t\":[\"导入jar包 druid-1.1.12.jar\",\"定义配置文件\",\"加载配置文件\",\"获取数据库连接池对象\",\"获取连接\",\"获取列的属性\",\"package com.wzy.java; import java.sql.*; public class Demo1 { public static void main(String[] args) throws SQLException { String driverName = \\\"com.microsoft.sqlserver.jdbc.SQLServerDriver\\\"; String dbURL = \\\"jdbc:sqlserver://localhost:1433;DatabaseName=edcu;encrypt=false\\\"; String userName = \\\"sa\\\"; String userPwd = \\\"kdyq1108\\\"; Connection conn = DriverManager.getConnection(dbURL, userName, userPwd); String sql = \\\"select *from SC where 成绩=90\\\"; Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql); ResultSetMetaData metaData = rs.getMetaData(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; i++) { String columnName = metaData.getColumnName(i); int type = metaData.getColumnType(i); String typeName = metaData.getColumnTypeName(i); boolean isNullable = metaData.isNullable(i) != ResultSetMetaData.columnNoNulls; System.out.println(\\\"列名: \\\" + columnName); System.out.println(\\\"数据类型: \\\" + type); System.out.println(\\\"数据类型名: \\\" + typeName); System.out.println(\\\"是否可以为NULL: \\\" + isNullable); System.out.println(\\\"---------------------\\\"); } while (rs.next()) { System.out.println(rs.getString(\\\"学号\\\") + \\\" \\\" + rs.getString(\\\"课程号\\\") + \\\" \\\" + rs.getString(\\\"成绩\\\")); // Array array=rs.getArray(1); } // 释放资源 rs.close(); stmt.close(); conn.close(); } }\",\"sql防注入，并打印返回的值\",\" public static void main(String[] args) throws SQLException { String driverName = \\\"com.microsoft.sqlserver.jdbc.SQLServerDriver\\\"; String dbURL = \\\"jdbc:sqlserver://localhost:1433;DatabaseName=edcu;encrypt=false\\\"; String userName = \\\"sa\\\"; String userPwd = \\\"kdyq1108\\\"; Connection conn = DriverManager.getConnection(dbURL, userName, userPwd); String sql = \\\"select *from Student where 性别= ?\\\";//预防sql注入 PreparedStatement patmt = conn.prepareStatement(sql); patmt.setString(1, \\\"男\\\"); ResultSet rs = patmt.executeQuery();//返回ResultSet结果集 ResultSetMetaData metaData = rs.getMetaData(); int columnCount = metaData.getColumnCount();//返回列的数量 //打印查询结果 while(rs.next()) { System.out.println(rs.getString(1)+\\\" \\\"+rs.getString(2)+\\\" \\\"+rs.getString(3)+\\\" \\\"+rs.getString(4)); } conn.close(); }\"]},\"12\":{\"h\":\"测试代码\",\"t\":[\"sql serve\",\"package com.wzy.java; //import java.sql.Connection; //import java.sql.DriverManager; import java.sql.*; public class Demo1 { public static void main(String[] args) throws SQLException { String driverName = \\\"com.microsoft.sqlserver.jdbc.SQLServerDriver\\\"; String dbURL = \\\"jdbc:sqlserver://localhost:1433;DatabaseName=edcu;encrypt=false\\\"; String userName = \\\"sa\\\"; String userPwd = \\\"kdyq1108\\\"; Connection conn = DriverManager.getConnection(dbURL, userName, userPwd); // 3,定义sql String sql = \\\"update Student set 系别 = 666 where 姓名='赵亦'\\\"; // 4,执行sql的对象Statement Statement stmt = conn.createStatement(); // 5,执行sql int i = stmt.executeUpdate(sql);// 返回受影响的行数 // 6,处理结果 System.out.println(i); // 7,释放资源 stmt.close(); conn.close(); } }\",\"mysql\",\" public static void main(String[] args) throws SQLException { String url = \\\"jdbc:mysql://127.0.0.1:3306/java\\\"; String username = \\\"用户名\\\"; String password = \\\"密码\\\"; //全局相关资源定义 Connection conn = DriverManager.getConnection(url, username, password); conn.close(); }\"]},\"13\":{\"c\":[\"java\"]},\"14\":{\"c\":[\"JDBC\"]},\"15\":{\"h\":\"java8\",\"t\":[\"笔记根据视频2019-尚硅谷-宋红康系列-java8新特性个人总结，仅供参考。\",\"学习的思维方式:\",\"\\\"大处着眼，小处着手\\\"\",\"逆向思维，反证法\",\"透过现象看本质\",\"两句话:\",\"小不忍则乱大谋\",\"识时务者为俊杰\"]},\"16\":{\"h\":\"JAVA8新特性\",\"t\":[\"Java8于2014年3月发布，可以看成是自Java5以来最具革命性的版本。Java8为Java语言，编译器，类库，开发工具与JVM带来了大量的新特性。\",\"速度更快\",\"代码更少\",\"强大的Stream API\",\"便于并行\",\"最大化减少空指针异常:Optional\",\"Nashorm引擎，允许JVM上运行JS应用\",\"Lambda是一个匿名函数。\",\" public void test1(){ Runnable r1 = new Runnable() { public void run() { System.out.println(\\\"hello world!\\\"); } }; r1.run(); System.out.println(\\\"*****************\\\"); Runnable r2 = () -> System.out.println(\\\"世界你好!\\\"); r2.run(); }\",\" public void test1(){ Comparator<Integer> com1 = new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { return Integer.compare(o1,o2); } }; int compara1 = com1.compare(12,21); System.out.println(compara1);//-1 System.out.println(\\\"------------\\\");//lambda表达式写法 Comparator<Integer> com2 = (o1,o2) -> Integer.compare(o1,o2); int compara2 = com2.compare(32,21); System.out.println(compara2);//1 System.out.println(\\\"---------\\\");//方法引用 Comparator<Integer> com3 = Integer :: compare; int compare3 = com3.compare(32,21); System.out.println(compare3);//1 }\"]},\"17\":{\"h\":\"Lamda表达式的使用\",\"t\":[\"举例:(o1,o2) -> Integer.compare(o1,o2);\",\"格式；\",\"->:lambda操作符 或 箭头操作符\",\"->左边:lambda形参列表(其实就是接口中的抽象方法的形参列表)\",\"->右边:lambda体(其实就是重写的抽象方法的方法体)\",\"lambda使用(分为六种情况)\",\"lambda表达式的本质:作为接口的实例\",\"格式1:无参数,无返回值\",\"Runnable r1 = () -> {system.out.println(\\\"hello lambda\\\");};\",\"格式2:Lambda需要一个参数,但没有返回值\",\"Consumer<String> con = (String str) -> {System.out,println(str);};\",\"格式3:数据类型可以省略,因为可以由编译器推断得出,称类型推断\",\"Consumer<String> con = (str) -> {System.out.println(str);};\",\"格式4:lambda若只需要一个参数时,参数的小括号可以省略\",\"Consumer<String> con = str -> {System.out,println(str);};\",\"格式5:lambda需要两个或以上的参数,多条执行语句,并且可以有返回值\",\"Comparator<Integer> com = (x,y) ->{//多条语句，可带返回值}\",\" public void test1(){ Comparator<Integer> com1 = new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { System.out.println(o1); System.out.println(o2); return o1.compareTo(o2); } }; System.out.println(com1.compare(12,21)); System.out.println(\\\"---------------\\\"); Comparator<Integer> com2 = (o1,o2) -> { System.out.println(o1); System.out.println(o2); return o1.compareTo(o2); }; System.out.println(com2.compare(12,21)); }\",\"格式6:当lambda体只有一条语句时,return与大括号若有,都可以省略\",\"Comparator<Integer> com = (x,y) -> Integer.compare(x,y);\",\"总结\",\"->左边:lambda形参列表的参数类型可以省略(类型推断),如果参数列表只有一个参数,其一对()也可以省略,\",\"->右边:lambda体应该使用一对{}包裹,如果lambda体只有一条执行语句(可能时return语句),省略这一对{}和return,\",\"lambda表达式的本质:作为函数式接口的实例\",\"只包含一个抽象方法的接口,成为函数式接口。\",\"函数式接口\",\"参数类型\",\"返回类型\",\"用途\",\"Consumer<T>消费型接口\",\"T\",\"void\",\"对类型为T的对象应用操作,包含方法void accept(T t)\",\"Supplier<T>供给型接口\",\"无\",\"T\",\"返回类型T的对象,包含方法T get()\",\"Function<T,R>函数型接口\",\"T\",\"R\",\"对类型为T的对象应用操作,并返回结果,结果是R类型的对象,包含方法R apply(T t)\",\"Predicate<T>断定式接口\",\"T\",\"boolean\",\"确定类型T的对象对否满足某约束,返回boolean包含方法boolean test(T t)\",\"还有很多其他函数式接口....\",\"消费型\",\"原来的写法\",\"@Test public void test1(){ happyTime(500, new Consumer<Double>() { @Override public void accept(Double aDouble) { System.out.println(aDouble+\\\"元\\\"); } }); } public void happyTime(double money, Consumer<Double> con){ con.accept(money); }\",\"lambda写法\",\" @Test public void test1(){ happyTime(500, money -> System.out.println(money+\\\"元\\\")); } public void happyTime(double money, Consumer<Double> con){ con.accept(money); }\",\"断定式\",\" @Test public void test2(){ List<String> list = Arrays.asList(\\\"北京\\\",\\\"南京\\\",\\\"西京\\\",\\\"河南\\\"); // List<String> list2 = filterString(list, new Predicate<String>() { // @Override // public boolean test(String string) { // return string.contains(\\\"京\\\"); // } // }); List<String> list2 = filterString(list,str -> str.contains(\\\"京\\\")); System.out.println(list2); } //根据给定的规则过滤集合中的字符串,此规则由Predicate的方法决定 public List<String> filterString(List<String> list, Predicate<String> pre){ ArrayList<String> filterList = new ArrayList<>(); for(String s:list){ if(pre.test(s)){ filterList.add(s); } } return filterList; }\"]},\"18\":{\"c\":[\"后端\"]},\"19\":{\"c\":[\"Java\"]},\"20\":{\"h\":\"javaGUi\"},\"21\":{\"h\":\"布局\",\"t\":[\"//无布局格式 // 创建窗口 jf = new JFrame(); jf.setTitle(\\\"公共聊天室\\\");//窗口标题 jf.setBounds(0,0,600,400);//设置宽高 jf.setLocationRelativeTo(null);//设置页面剧中 jf.setLayout(null);//可以按照xy轴坐标添加组件 一定要设置这个，所有GUI均采用无布局格式 jf.setDefaultCloseOperation(3);//关闭一个窗口就停止运行 jf.setResizable(false);//设置窗口不可调整 jf.setResizable(false);//设置窗口不可拖拽 //jf.getContentPane().setBackground(Color.BLUE);//设置背景颜色 // 显示窗口 jf.setVisible(true); //采用无布局格式后，要添加按钮，文本框，均需要绑定 jf.getContentPane().add(对象);\"]},\"22\":{\"h\":\"缩小图标\",\"t\":[\"有时候插入的图标太大了需要缩小以下\",\"//调用 ImageIcon imageLogin = reduceIcon(\\\"学生成绩管理系统\\\\\\\\登陆页面\\\\\\\\login.png\\\",4); JLabel login = new JLabel(imageLogin);//登陆图标\",\"下面提供一个缩小的方法来实现\",\" public ImageIcon reduceIcon(String path,int multiple){ ImageIcon originalIcon = new ImageIcon(path); Image originalImage = originalIcon.getImage();//获取图像对象 // 获取原始图像的尺寸 int originalWidth = originalImage.getWidth(null); int originalHeight = originalImage.getHeight(null); // 计算新的尺寸 int newWidth = originalWidth / multiple; //缩小multiple倍 int newHeight = originalHeight / multiple;//缩小multiple倍 // 等比例缩小图像 Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH); // 创建缩放后的 ImageIcon ImageIcon scaledIcon = new ImageIcon(scaledImage); // 创建 JLabel 并设置缩放后的图标 //JLabel label = new JLabel(scaledIcon); return scaledIcon;//返回一个缩小后的ICon对象 }\",\"GUI : Graphcis User interface AWT : Abstract Window toolkits Swing :\"]},\"23\":{\"h\":\"顶级容器JFrame\",\"t\":[\"JFram\",\"JFrame 窗口 JDialog 对话框 BorderLayout 边界布局 FlowLayout和GridLayout布局 NullLayoutFrm 无布局\",\"public class jframe extends JFrame { public static void createWindow(){ JFrame frm = new JFrame(\\\"我的第一个窗口\\\");//窗口标题 // frm.setTitle(\\\"你好\\\");更改窗口标题名字 frm.setSize(640,480);//尺寸 //frm.setResizable(false);//设置窗口不可调整 frm.setMinimumSize(new Dimension(640,480));//设置窗口最小可以调为多少 frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//设置x点击退出 不再运行程序 //frm.setLocation(10,10);//设置窗口初始位置左上角距离(0,0) frm.setLocationRelativeTo(null);//传入null相对整个窗口居中 frm.setVisible(true);//可视 } public static void main(String[] args) { jframe.createWindow(); //JDk8之后流式操作 也可以正常调用 SwingUtilities.invokeLater(jframe::createWindow); } }\",\"顶级容器JDialog\",\"public class jdialog extends JDialog { public jdialog(){ this.setSize(480,320); this.setResizable(false);//设置对话框不可调大小 //在当前工作目录下新建一个images文件里面放了book.png图标 this.setIconImage(new ImageIcon(\\\"images/book.png\\\").getImage());//在标题左边加载图片 this.setTitle(\\\"这是一个对话框\\\");//没有最大最小化按钮 this.setLocationRelativeTo(null);//居中 this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE); this.setVisible(true); } public static void main(String[] args) { new jdialog(); } }\",\"BorderLayout布局\",\"public class jframe extends JFrame { public static void createWindow(){ JFrame frm = new JFrame(\\\"我的第一个窗口\\\");//窗口标题 //JFrame 默认使用BorderLayout 边界布局 //什么也不写，默认在中间 默认使用BorderLayout JButton btnFirst = new JButton(\\\"第一个按钮\\\"); frm.add(btnFirst);//将这个按钮加入当前 JButton bt2 = new JButton(\\\"第二个按钮\\\"); frm.add(bt2,BorderLayout.NORTH);//将按钮放在北边 JButton bt3 = new JButton(\\\"第3个按钮\\\"); frm.add(bt3,BorderLayout.SOUTH);//南 JButton bt4 = new JButton(\\\"第4个按钮\\\"); frm.add(bt4,BorderLayout.WEST);//西 JButton bt5 = new JButton(\\\"第5个按钮\\\"); frm.add(bt5,BorderLayout.EAST);//东 // frm.setTitle(\\\"你好\\\");更改窗口标题名字 frm.setSize(640,480);//尺寸 //frm.setResizable(false);//设置窗口不可调整 frm.setMinimumSize(new Dimension(640,480));//设置窗口最小可以调为多少 frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//设置x点击退出 不再运行程序 //frm.setLocation(10,10);//设置窗口初始位置左上角距离(0,0) frm.setLocationRelativeTo(null);//传入null相对整个窗口居中 frm.setVisible(true);//可视 } public static void main(String[] args) { //jframe.createWindow(); SwingUtilities.invokeLater(jframe::createWindow); } }\",\"FlowLayout和GridLayout布局\",\"public class jframe extends JFrame { public static void createWindow(){ JFrame frm = new JFrame(\\\"我的第一个窗口\\\");//窗口标题 //frm.setLayout(new FlowLayout());// 使用流式布局 默认居中对齐 //frm.setLayout(new FlowLayout(FlowLayout.LEFT));//按钮左对齐 frm.setLayout(new GridLayout(3,2,5,5));//网格布局 //后面两个5可去，带上表示间距5,5 JButton btnFirst = new JButton(\\\"第一个按钮\\\"); frm.add(btnFirst);//将这个按钮加入当前 JButton bt2 = new JButton(\\\"第二个按钮\\\"); frm.add(bt2); JButton bt3 = new JButton(\\\"第3个按钮\\\"); frm.add(bt3); JButton bt4 = new JButton(\\\"第4个按钮\\\"); frm.add(bt4); JButton bt5 = new JButton(\\\"第5个按钮\\\"); frm.add(bt5); JButton bt6 = new JButton(\\\"第6个按钮\\\"); frm.add(bt6); frm.setSize(640,480);//尺寸 // frm.setMinimumSize(new Dimension(640,480));//设置窗口最小可以调为多少 frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//设置x点击退出 不再运行程序 frm.setLocationRelativeTo(null);//传入null 相对整个窗口居中 frm.setVisible(true);//可视 } public static void main(String[] args) { //jframe.createWindow(); SwingUtilities.invokeLater(jframe::createWindow); } }\"]},\"24\":{\"h\":\"GridBagLayout布局\",\"t\":[\"public class MyGridBagLayoutFrm extends JFrame { public MyGridBagLayoutFrm(){ GridBagLayout layout = new GridBagLayout(); this.setLayout(layout); GridBagConstraints c = new GridBagConstraints();//定义权重 c.fill = GridBagConstraints.BOTH; c.weightx = 1;//权重 两个值加起来占的比值 c.weighty = 1; this.add(new JButton(\\\"btn1\\\"),c); this.add(new JButton(\\\"btn2\\\"),c); this.add(new JButton(\\\"btn3\\\"),c); c.gridwidth = GridBagConstraints.REMAINDER;//填充剩余部分 this.add(new JButton(\\\"btn4\\\"),c); c.weightx = 0; c.weighty = 0; this.add(new JButton(\\\"btn5\\\"),c);//没有权重不会去分，在最下面 c.gridwidth = 1; this.add(new JButton(\\\"btn6\\\"),c); // c.gridwidth = 2;//占两个格子 c.gridwidth = GridBagConstraints.REMAINDER;//把后面的格子填充满了 this.add(new JButton(\\\"btn7\\\"),c); c.gridwidth = 2; c.gridheight = 1; c.weightx = 1; c.weighty = 1; this.add(new JButton(\\\"btn8\\\"),c); c.gridwidth = GridBagConstraints.REMAINDER; c.gridheight = 1; this.add(new JButton(\\\"btn9\\\"),c); this.add(new JButton(\\\"btn10\\\"),c); this.setSize(480,320); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setTitle(\\\"网格袋布局\\\"); this.setLocationRelativeTo(null); this.setVisible(true); } public static void main(String[] args) { new MyGridBagLayoutFrm(); } }\"]},\"25\":{\"h\":\"无布局\",\"t\":[\"鼠标停留 文字提示 图标按钮\",\"public class NullLayoutFrm extends JFrame { public NullLayoutFrm(){ this.setLayout(null);//界面无布局 JButton btn1 = new JButton(\\\"btn1\\\"); btn1.setBounds(10,10,120,30);// this.add(btn1); JButton btn2 = new JButton();//图片按钮一般没有文字 btn2.setBounds(200,30,220,220);// btn2.setIcon(new ImageIcon(\\\"images/book.png\\\")); btn2.setToolTipText(\\\"图书信息管理\\\");//鼠标放上有提示 this.add(btn2); this.setTitle(\\\"按位置布局\\\"); this.setSize(480,320); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setLocationRelativeTo(null); this.setVisible(true); } public static void main(String[] args) { new NullLayoutFrm(); } }\",\"事件源：按钮，图片，窗体 事件：某些操作，如鼠标点击，鼠标划入 绑定监听：当事件源上发生了某个事件，则执行某段代码 KeyListener 键盘监听 MouseListener 鼠标监听 ActionListener 动作监听 -> 精简版\"]},\"26\":{\"h\":\"动作监听\",\"t\":[\"public class TestGui2 extends JFrame{ public TestGui2(){ this.setTitle(\\\"事件演示\\\"); this.setSize(603,680); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//点击x停止运行 this.setAlwaysOnTop(true);//设置页面置顶 盖住其他窗口 this.setLocationRelativeTo(null);//设置页面居中 //取消默认的居中放置 this.setLayout(null); //创建一个按钮对象 JButton jtb = new JButton(\\\"点我啊\\\"); jtb.setBounds(0,0,100,50); //给按钮添加动作监听 //jtb:组件对象，表示你要给那个组件添加事件 //addActionListener ： 表示我要给组件添加哪个事件监听（动作监听鼠标左键点击，空格也会被识别） //参数：表示事件被触发之后要执行的代码 jtb.addActionListener((e1) -> System.out.println(\\\"按钮被点击了\\\"));//lambda表达式 实现了那个接口 //把按钮添加到界面当中 this.getContentPane().add(jtb); this.setVisible(true); } public static void main(String[] args) { new TestGui2(); } }\",\"public class TestGui2 extends JFrame implements ActionListener{ JButton jtb1; JButton jtb2; public TestGui2(){ this.setTitle(\\\"事件演示\\\"); this.setSize(603,680); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//点击x停止运行 this.setAlwaysOnTop(true);//设置页面置顶 盖住其他窗口 this.setLocationRelativeTo(null);//设置页面居中 //取消默认的居中放置 this.setLayout(null); //创建一个按钮对象 jtb1 = new JButton(\\\"按钮1\\\"); jtb1.setBounds(0,0,100,50); //给按钮添加动作监听 //jtb:组件对象，表示你要给那个组件添加事件 //addActionListener ： 表示我要给组件添加哪个事件监听（动作监听鼠标左键点击，空格也会被识别） //参数：表示事件被触发之后要执行的代码 jtb1.addActionListener(this);//lambda表达式 实现了那个接口 jtb2 = new JButton(\\\"按钮2\\\"); jtb2.setBounds(100,0,100,50); jtb2.addActionListener(this); //把按钮添加到界面当中 this.getContentPane().add(jtb1); this.getContentPane().add(jtb2); this.setVisible(true); } @Override public void actionPerformed(ActionEvent e) { //对当前按钮进行判断 //获取当前被操作的那个按钮对象 Object source = e.getSource(); if(source == jtb1){ jtb1.setSize(200,200); }else if(source == jtb2){ Random r = new Random(); jtb2.setLocation(r.nextInt(500),r.nextInt(500)); } } public static void main(String[] args) { new TestGui2(); } }\"]},\"27\":{\"h\":\"鼠标监听\",\"t\":[\"划入动作 按下动作 松开动作 划出动作 如果想监听一个按钮的单击事件可以用以下几种方式\",\"动作监听\",\"鼠标监听中的单击事件\",\"鼠标监听中的松开事件\",\"public class TestGui2 extends JFrame implements MouseListener { JButton jtb1 = new JButton(\\\"按钮1\\\"); public TestGui2(){ this.setTitle(\\\"事件演示\\\"); this.setSize(603,680); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//点击x停止运行 this.setAlwaysOnTop(true);//设置页面置顶 盖住其他窗口 this.setLocationRelativeTo(null);//设置页面居中 //取消默认的居中放置 this.setLayout(null); jtb1.setBounds(0,0,100,50); //给按钮绑定一个鼠标事件 jtb1.addMouseListener(this); //把按钮添加到界面当中 this.getContentPane().add(jtb1); this.setVisible(true); } public static void main(String[] args) { new TestGui2(); } @Override public void mouseClicked(MouseEvent e) { System.out.println(\\\"单击\\\"); } @Override public void mousePressed(MouseEvent e) { System.out.println(\\\"按下\\\"); } @Override public void mouseReleased(MouseEvent e) { System.out.println(\\\"松开\\\"); } @Override public void mouseEntered(MouseEvent e) { System.out.println(\\\"划入\\\"); } @Override public void mouseExited(MouseEvent e) { System.out.println(\\\"划出\\\"); } }\"]},\"28\":{\"h\":\"键盘监听机制\",\"t\":[\"keyPressed(KeyEvent e) 按下键时调用 keyReleased(KeyEvent e) 当键已被释放时调用 keyTyped(KeyEvent e) 键入键时调用\",\"小细节\",\"如果我们按下一个按键没有松开，那么会重复的去调用keyPressed方法\",\"键盘里面那么多按键如进行区分\",\"public class TestGui2 extends JFrame implements KeyListener { public TestGui2(){ this.setTitle(\\\"事件演示\\\"); this.setSize(603,680); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//点击x停止运行 this.setAlwaysOnTop(true);//设置页面置顶 盖住其他窗口 this.setLocationRelativeTo(null);//设置页面居中 //取消默认的居中放置 this.setLayout(null); //给整个窗口添加键盘监听 //调用者this 本类对象 当前的界面对象 表示我要给整个界面添加监听 //addKeyListener 表示要给本界面添加键盘监听 //参数this 当事件被触发之后，会执行本类中的对应代码 this.addKeyListener(this); this.setVisible(true); } public static void main(String[] args) { new TestGui2(); } @Override public void keyTyped(KeyEvent e) { System.out.println(\\\"不用管这个\\\"); } @Override public void keyPressed(KeyEvent e) { System.out.println(\\\"按下不松\\\"); } @Override public void keyReleased(KeyEvent e) { System.out.println(\\\"松开按键\\\"); //获取键盘上每一个按键的编号 int code = e.getKeyCode(); System.out.println(code); //可以之后加上if判断执行相应的程序 } }\",\"先加载的图片在上面，后加载的图片反而在下面\",\"刷新页面 this.getContentPane().repaint()\",\"清空原本已经出现的所有图片this.getContentPane().removeAll()\",\"Test\",\"public class TestGUI extends JFrame { /** * 这里写登录页面 */ //只需要在main函数里面new对象就可以调用 public TestGUI(){ initJFrame();//初始化页面 initJMenuBar();//初始化菜单那 initImage(); this.setVisible(true);//让界面显示出来，放在最后 } private void initImage() { //创建一个图片ImageIco的对象 ImageIcon icon = new ImageIcon(\\\"C:\\\\\\\\Users\\\\\\\\菜鸟拯救世界\\\\\\\\IdeaProjects\\\\\\\\GUI\\\\\\\\images\\\\\\\\book.png\\\"); //创建一个Jlabel的对象 (管理容器) JLabel jLabel = new JLabel(icon); //指定图片位置 jLabel.setBounds(0,0,242,200);//没有按照xy放置还需要在initJFrame()取消默认居中 //把管理容器添加到页面中 //this.add(jLabel);//默认放在正中央 this.getContentPane().add(jLabel);//这样图片才会按照xy轴放置 } private void initJMenuBar() { //创建整个菜单对象 JMenuBar jMenuBar = new JMenuBar(); //创建菜单上面两个选项的对象(功能，关于我们) JMenu functionIJMenu = new JMenu(\\\"功能\\\"); JMenu aboutJMenu = new JMenu(\\\"关于我们\\\"); //创建选项下面的条目对象 JMenuItem replatItem = new JMenuItem(\\\"重新游戏\\\"); JMenuItem reLoginIteam = new JMenuItem(\\\"重新登录\\\"); JMenuItem closeItem = new JMenuItem(\\\"关闭游戏\\\"); JMenuItem accountIteam = new JMenuItem(\\\"公众号\\\"); //将每一个选项下的条目添加到选项当中 functionIJMenu.add(replatItem); functionIJMenu.add(reLoginIteam); functionIJMenu.add(closeItem); aboutJMenu.add(accountIteam); //将菜单里面的两个选项添加到菜单当中 jMenuBar.add(functionIJMenu); jMenuBar.add(aboutJMenu); //给整个界面设置菜单 this.setJMenuBar(jMenuBar); } private void initJFrame() { this.setTitle(\\\"学生登录管理系统\\\"); this.setSize(603,680); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//点击x停止运行 //this.setDefaultCloseOperation(0);//带x什么都不做 //this.setDefaultCloseOperation(1);//默认的，点击x不会停止运行 //this.setDefaultCloseOperation(2);//多个界面全部关闭才会停止运行 所有界面都要这样设置才会有效 //因为程序中通常只会显示一个页面，所以下面这个比较常用 //this.setDefaultCloseOperation(3);//只要关闭一个窗口虚拟机就会停止运行 所有界面都要这样设置 this.setAlwaysOnTop(true);//设置页面置顶 盖住其他窗口 this.setLocationRelativeTo(null);//设置页面居中 //取消默认的居中放置，只有取消了才会按照Xy轴的形式添加组件 this.setLayout(null); } public static void main(String[] args) { new TestGUI(); } }\",\"public class TestGUI extends JFrame implements ActionListener, MouseListener { /** * 这里写登录页面 */ //只需要在main函数里面new对象就可以调用 public TestGUI(){ initJFrame();//初始化页面 initJMenuBar();//初始化菜单 initImage(); this.setVisible(true);//让界面显示出来，放在最后 } private void initImage() { //创建一个图片ImageIco的对象 ImageIcon icon = new ImageIcon(\\\"C:\\\\\\\\Users\\\\\\\\菜鸟拯救世界\\\\\\\\IdeaProjects\\\\\\\\GUI\\\\\\\\images\\\\\\\\book.png\\\"); //创建一个Jlabel的对象 (管理容器) JLabel jLabel = new JLabel(icon); //指定图片位置 jLabel.setBounds(0,0,242,200);//没有按照xy放置还需要在initJFrame()取消默认居中 JLabel str = new JLabel(\\\"步数\\\");//也可以设置文字 str.setBounds(200,200,100,200); this.getContentPane().add(str); //把管理容器添加到页面中 //this.add(jLabel);//默认放在正中央 this.getContentPane().add(jLabel);//这样图片才会按照xy轴放置 } //创建选项下面的条目对象 JMenuItem replatItem = new JMenuItem(\\\"重新游戏\\\"); JMenuItem reLoginIteam = new JMenuItem(\\\"重新登录\\\"); JMenuItem closeItem = new JMenuItem(\\\"关闭游戏\\\"); JMenuItem accountIteam = new JMenuItem(\\\"公众号\\\"); private void initJMenuBar() { //创建整个菜单对象 JMenuBar jMenuBar = new JMenuBar(); //创建菜单上面两个选项的对象(功能，关于我们) JMenu functionIJMenu = new JMenu(\\\"功能\\\"); JMenu aboutJMenu = new JMenu(\\\"关于我们\\\"); //将每一个选项下的条目添加到选项当中 functionIJMenu.add(replatItem); functionIJMenu.add(reLoginIteam); functionIJMenu.add(closeItem); //绑定事件 aboutJMenu.add(accountIteam); functionIJMenu.add(replatItem); functionIJMenu.add(reLoginIteam); functionIJMenu.add(closeItem); //将菜单里面的两个选项添加到菜单当中 jMenuBar.add(functionIJMenu); jMenuBar.add(aboutJMenu); //给条目绑定事件 replatItem.addActionListener(this);//点击后执行这个抽象方法 reLoginIteam.addActionListener(this); closeItem.addActionListener(this); accountIteam.addActionListener(this); //给整个界面设置菜单 this.setJMenuBar(jMenuBar); } private void initJFrame() { this.setTitle(\\\"学生登录管理系统\\\"); this.setSize(603,680); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//点击x停止运行 //this.setDefaultCloseOperation(0);//带x什么都不做 //this.setDefaultCloseOperation(1);//默认的，点击x不会停止运行 //this.setDefaultCloseOperation(2);//多个界面全部关闭才会停止运行 所有界面都要这样设置才会有效 //因为程序中通常只会显示一个页面，所以下面这个比较常用 //this.setDefaultCloseOperation(3);//只要关闭一个窗口虚拟机就会停止运行 所有界面都要这样设置 this.setAlwaysOnTop(true);//设置页面置顶 盖住其他窗口 this.setLocationRelativeTo(null);//设置页面居中 //取消默认的居中放置，只有取消了才会按照Xy轴的形式添加组件 this.setLayout(null); } public static void main(String[] args) { new TestGUI(); } @Override public void actionPerformed(ActionEvent e) { //组件点击之后 //获取当前被点击的条目对象 Object obj = e.getSource(); if(obj == replatItem){ System.out.println(\\\"重新游戏\\\"); }else if(obj == reLoginIteam){ System.out.println(\\\"重新登录\\\"); }else if(obj == closeItem){ System.out.println(\\\"关闭游戏\\\"); }else if(obj == accountIteam){ System.out.println(\\\"公众号\\\"); } } @Override public void mouseClicked(MouseEvent e) { } @Override public void mousePressed(MouseEvent e) { } @Override public void mouseReleased(MouseEvent e) { } @Override public void mouseEntered(MouseEvent e) { } @Override public void mouseExited(MouseEvent e) { } }\"]},\"29\":{\"h\":\"文本框\",\"t\":[\"输入框 JTestFiled 明文显示的输入框 输入框 JPasswordFiled 密文显示的输入框\",\"public class TestGui2 extends JFrame implements ActionListener { JTextField id; JPasswordField pass; public TestGui2(){ this.setTitle(\\\"事件演示\\\"); this.setSize(603,680); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//点击x停止运行 this.setAlwaysOnTop(true);//设置页面置顶 盖住其他窗口 this.setLocationRelativeTo(null);//设置页面居中 //取消默认的居中放置 this.setLayout(null); //输入账户 id = new JTextField(6); //设置文本框大小为6个字符 id.setBounds(0,0,120,30); this.getContentPane().add(id); //输入密码 pass = new JPasswordField();//看不见输入的啥 pass.setBounds(0,40,120,30); this.getContentPane().add(pass); JButton jbt = new JButton(\\\"登陆\\\"); jbt.setBounds(0,80,120,30); this.getContentPane().add(jbt); jbt.addActionListener(this); this.setVisible(true); } public static void main(String[] args) { new TestGui2(); } @Override public void actionPerformed(ActionEvent e) { System.out.println(id.getText()); System.out.println(pass.getText()); } }\"]},\"30\":{\"c\":[\"java\"]},\"31\":{\"c\":[\"javaGUI\"]},\"32\":{\"h\":\"javaWeb\",\"t\":[\"[TOC]\",\"前言:\",\"本笔记根据哔哩哔哩黑马教学视频来的，在这里仅仅大致了解一下开发流程，仅供参考。\",\"学习路线\",\"HTML,CSS,JS Ajax,Axios Vue,Element 前端工程化 Maven SpringBott基础 SpringBoot,SpringMVC基础 Mysql JDBC,Mybatis Web案例 会话跟踪技术 Filter,Interceptor AOP\"]},\"33\":{\"h\":\"前端相关\",\"t\":[\"HTML负责网页的结构 CSS负责网页的表现 JS负责网页的行为\"]},\"34\":{\"h\":\"HTMl\",\"t\":[\"可以查看文档 网站 w3school\",\"HTML不区分大小写 单双引号都可以使用 html语法结构松散不严格\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>HTML学习</title> <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\"> <!--使用外部css--> </head> <body style=\\\"background-color:rgb(223, 223, 222)\\\"> <h1 style=\\\"text-align:center\\\">一级标题</h1> <p>第一段落</p> <body>第二段落</p> <a href=\\\"http://www.w3school.com.cn\\\">这是学习文档的连接</a> <!--target=\\\"-self\\\"当前页面 target=\\\"-blank\\\" 空白页面--> <img src=\\\"2.jpg\\\" width=\\\"900px\\\" height=\\\"526px\\\" />这是一张图片 <!--可以不设置高度，自动缩放，px可以换成%半分比--> <br/> <!--换行--> <hr/> <!--水平线--> 一行小字 <hr/> <h2 style=\\\"background-color:red\\\">标题</h2> <p style=\\\"background-color:green\\\">段落.</p> <h1 style=\\\"font-family:verdana\\\">又一个标题</h1> <p style=\\\"font-family:arial;color:rgb(9, 6, 222);font-size:20px;\\\">又一个段落.</p> <b>粗体</b> <sub>下标字</sub> <sup>上标字</sup> <ins>插入字</ins> <del>删除字</del> <p><abbr title=\\\"World Health Organization\\\">WHO</abbr> 成立于 1948 年。</p> <!--鼠标悬停显示信息--> <details> <summary>未来世界中心（Epcot Center）</summary> <p>Epcot 是华特迪士尼世界度假区的主题公园，拥有令人兴奋的景点、国际展馆、屡获殊荣的烟花和季节性活动。</p> </details> <p><cite>The Scream</cite>是一本书</p><!--city定义著作的标题--> <address><!--定义文档的联系信息，斜体--> 2024,5,20<br/> 于宿舍<br/> </address> <span>没有任何语义的标签，可以用来设置样式</span> </body> </html>\",\"列表\",\" <ol> <li>我是第一项</li> <li>我是第二项</li> <li>我是第三项</li> </ol> <ul> <li>我是无序的1</li> <li>我是无序的2</li> <li>我是无序的3</li> </ul>\",\"表格<table>定义表格整体，可以包裹多个<tr>border 规定表格边框的宽度 width 规定表格的宽度 cellspacing 规定单元之间的空间 <tr> 表格的行 可以包裹多个<td><td> 表格单元格，可以包裹内容 如果是表头单元格可以为<th>\",\" <table border=\\\"1\\\" cellspacing=\\\"0\\\"> <th>第一行</th> <th>第二行</th> <th>第三行</th> <tr> <td>111</td> <td>222</td> <td>333</td> </tr> <tr> <td>444</td> <td>555</td> <td>666</td> </tr> <tr> <td>777</td> <td>888</td> </tr> </table>\",\"表单标签<form> 场景 在网页中主要负责数据采集功能，如注册，登录等数据采集\",\"表单项 不同类型的input元素，下拉列表，文本域等。\",\"<input> 定义表单项，通过type属性控制输入形式\",\"<select> 定义下拉列表\",\"<textarea> 定义文本域\",\"input后面的type可以跟text 默认值，定义单行输入的字段 password 密码字段 \",\"radio 单选按钮\",\"checkbox 定义复选框\",\"file 定义文件上传按钮data/time/datetime-local 定义日期/时间/日期时间number 定义数字输入框email 定义邮件输入框hidden 定义隐藏域submit/reset/button 定义提交按钮/重置按钮/可点击按钮\",\" <form action=\\\"\\\" method=\\\"post\\\"> <label><input type=\\\"radio\\\" name=\\\"gender\\\" value=\\\"1\\\" >男</label> <label><input type=\\\"radio\\\" name=\\\"gender\\\" value=\\\"2\\\" >女</label> </form> <form> <select name=\\\"degree\\\"> <option value=\\\"1\\\">大专</option> <option value=\\\"2\\\">本科</option> <option value=\\\"3\\\">硕士</option> </select> </form> <form> <textarea name=\\\"description\\\" cols=\\\"30\\\" rows=\\\"10\\\"></textarea> <br/> </form>\",\"加上laber标签之后，点击标签内的文字就可以聚焦 属性ation 规定当提交表单时向何处发送表单数据，URL 如果不指定，默认提交到当前页面 method 规定用于发送表单数据的方式 GET，POST\",\" <form action=\\\"\\\" method=\\\"post\\\"> <!--在url后面拼接表单数据，比如?user=TOm&age=12,URl长度有限制的--> <!--换成post 在消息体中(请求体)传递，参数大小无限制的 --> 用户名: <input type=\\\"text\\\" name=\\\"username\\\"> 年龄: <input type=\\\"text\\\" name=\\\"age\\\"> <input type=\\\"submit\\\" value=\\\"提交\\\"> </form>\"]},\"35\":{\"h\":\"CSS\",\"t\":[\"引入CSS样式 行内样式: 写在标签的style属性中，不推荐 内嵌样式: 卸载style标签中,可以写在页面任何位置，但通常约定写在head标签中 外联样式: 卸载一个单独的.css文件中，需要通过link标签在网页中引入\",\"css选择器 元素选择器 h1 {} <h1>sss</h1> id选择器 #id属性值 {} <h1 id=\\\"id\\\"> </h1> 类选择器 .class属性值{} <h1 class=\\\"cls\\\"> </h1>\",\"css中的盒子模型 盒子:页面中的所有元素（标签），都可以看作是一个盒子，由盒子将页面中的元素包含在一个矩形区域内 通过盒子的视角更方便的进行页面布局 盒子模型的组成: 内容区域(content) 内边距区域(padding) 边框区域(border) 外边距区域(margin)\",\"上面的是从小到大的\"]},\"36\":{\"h\":\"布局标签\",\"t\":[\"布局标签：实际开发网页中，会频繁的使用div和span这两个没有语义的布局标签\",\"div 一行只显示一个(独占一行) 宽度默认是父元素的宽度，高度默认由内容撑开 可以设置宽高\",\"span 一行可以显示多个 宽度和高度默认由内容撑开 不可以设置宽高\",\"<style> div { width: 200px; height: 200px; box-sizing: border-box;/*指定width height为盒子的高度*/ background-color:aquamarine; /*背景色*/ padding: 20px;/*内边距 上 右下左*/ border: 10px solid red;/*边框 宽度 线条类型 颜色*/ margin: 30px;/*外边距 上 右下左*/ /*auto 自动计算页边距*/ } </style>\"]},\"37\":{\"h\":\"JS\",\"t\":[\"跨平台面向对象的脚本语言 不编译 是用来控制网页行为的，它能使网页可交互\",\"引入方式 内部脚本:将js代码定义在HTML页面中\",\"JacaScript代码必须位于<script></script>标签之间\",\"在HTML文档中，可以在任意地方，放置任意数量的<script>\",\"一般会把脚本置于<body>元素的底部,可改善显示速度\",\" <script> alert(\\\"hello js\\\"); 显示警告框 </script>\",\"外部脚本\",\"将js代码定义在外部JS文件中，然后引入到HTML页面中\",\"外部js文件中，只包含js代码，不包含<script>标签\",\"<script>标签不能自闭合\"]},\"38\":{\"h\":\"JS语法\",\"t\":[\"区分大小写\",\"结尾分号可有可无 建议加上\",\"单行注释// 多行注释/**/\",\"大括号代表代码块\",\"输出语句\",\"window.alert(\\\"hello,js\\\"); //浏览器弹出警告 document.write(\\\"你好,js\\\");//写入HTML在浏览器展示 console.log(\\\"hello,js\\\");//写入浏览器控制台\",\"变量 var关键字来声明变量 是全局变量 js时一门弱类型语言，变量可以存放不同类型的值 变量名需要遵循的规则\",\"组成字符可以是任何字母，下划线，或美元符号\",\"数字不能开头\",\"建议使用驼峰命名\",\"ES6中新增了let关键字，他的用法类似var，只在let关键字所在的代码块内有效，且不允许重复声明\",\"ES6新增了const关键字，用来声明一个只读的常量，一旦声明，常量的值就不能改变\",\"数据类型，运算符，流程控制语句\",\"数据类型分为：原始数据类型和引用数据类型 原始类型 number 数字（整数，小数，NaN(Not a Number)） string 字符串 单双引皆可 boolean 布尔，true false null 对象为空 underfined 当声明的变量未初始化时，该变量的默认值是undefined\",\"使用typeof运算符可以获取数据类型 alert(typeof 3.14); null的数据类型是object 使用var没有初始化 类型是underfined 运算符 算数运算符+ - * / % ++ -- 赋值运算符= += -+ *= /= %= 比较运算符> < >= <= != == === == 会进行类型转化 === 不会进行类型转换 逻辑运算符 && || ! 三元运算符条件表达式?true_value:false_value\",\"类型转换 字符串类型转数字\",\"将字符串字面值转为数字，如果字面值不是数字，则转为NaN parseInt(字符串);字符串转化为数字 parseInt(\\\"123A13\\\");//转化为123 parseInt(\\\"A123\\\");//NaN\",\"其他类型转boolean Number： 0和NaN为false 其他均为true String 空字符串为false其他均为true Null和undefined 均转为false\",\"流程控制 if...else.. if..else switch.. for.. while.. do ..while..\"]},\"39\":{\"h\":\"JS函数\",\"t\":[\"格式\",\"function functionName(参数1，参数2){ 要执行的代码 } 方式2 var functionName=function(参数1,参数2){ 要执行的代码 }\",\"注意\",\"形式参数不需要类型，因为javaScript是弱类型语言\",\"返回值也不需要定义类型，可以在函数内部直接使用return返回即可\",\"调用: 函数名称(实际参数列表)\",\"在js中函数调用可以传递任意个数的参数\"]},\"40\":{\"h\":\"JS对象\",\"t\":[\"Array数组 Array对象用于定义数组 定义\",\"var 变量名= new Array(元素列表);\",\"var 变量名=[元素列表]; 访问 arr[索引]=值\",\"特点:长度可变，类型可变\",\"属性 length 设置或返回数组中元素的数量 方法: forEach() 遍历数组中每个有值的元素，并调用一次传入的函数 push() 将新元素添加到数组的末尾，并返回新的长度 splice(3,2) 从数组中删除元素从3开始删除2个 返回删除后的 arr.forEach(function(e){console.log(e)}); 简化 arr.forEach((e) => {console.log(e)}); for循环不管有值无值都遍历 forEach() 只遍历有值的\",\"String字符串 创建字符串的方式有两种 var 变量名=new String(\\\"\\\");//方式一 var 变量名=\\\"-\\\";//方式二\",\"属性和方法 length 字符串的长度\",\"charAt() 返回指定位置的字符 indexOf() 检索字符串位置 trim() 去除字符串两边的空格 substring(start,end) 提取字符串中指定的索引号之间的字符 含头不含尾 JSON js中自定义对象\",\"var 对象名={ 属性1:属性值1, 属性2:属性值2, 属性3:属性值3, 函数名称:function(形参列表){} 函数名称(){} };\",\"调用格式: 对象名.属性名; 对象名.函数名();\",\"什么是JSON json是通过js对象标记法书写的文本; 由于语法结构简单，层次结构鲜明，现多用于作为数据载体， 在网络中进行传输\",\"定义 var 变量名 = '{\\\"key\\\":value1,\\\"key2\\\":value2}'; eg var userStr = '{\\\"name\\\":\\\"Jerry\\\",\\\"age\\\":18,\\\"addr\\\":[\\\"北京\\\",\\\"上海]};' value 的数据类型为 数字（整数或浮点数），字符串（在双引号中），逻辑值（true或false），数组（在方括号中），对象（在花括号中），null\",\"js对象转为JSON对象 var jsObject = JSON.parse(userStr); JS对象转为JSON字符串 var jsonStr = JSON.stringify(jsObject);\",\"BOM 概念:Browser Object Model 浏览器对象模型，允许javaScript与浏览器对话，javaScript将浏览器的各个组成部分封装成对象。\",\"组成\",\"Window；浏览器窗口对象\",\"Navigator: 浏览器对象\",\"Screen: 屏幕对象\",\"History 历史记录对象\",\"Location 地址栏对象\",\"Window 浏览器窗口对象 获取: 直接使用window. 可以省略 属性\",\"history 对history对象的只读引用\",\"location 用于窗口或框架location对象\",\"navigator 对navigator对象的只读引用\",\"方法\",\"alert() 显示带有一段消息和一个确认按钮的警告框\",\"confirm() 显示带有一段消息和确认按钮的警告框， 有返回值的，点击确定返回true 取消false\",\"setlnterval() 按照指定的周期(以毫秒计)来调用函数或计算表达式 传递两个参数 (函数 时间)\",\"setTimeout() 在指定的毫秒数后调用函数或计算表达式 延迟指定时间执行一次(函数 时间),会延迟指定时间后执行一次函数\",\"Location window.location.属性 location.属性 属性 href: 设置或返回完整的URL location.hreflocation.href = \\\"https://www.baidu.cn\\\" 设置后会跳转到指设置的url\",\"DOM对象 概念 Document Object Model 文档对象模型 将标记语言（html）的各个部分封装成对应的对象\",\"Document 整个文档对象\",\"ELemen 元素对象\",\"Attribute 属性对象\",\"Text 文本对象\",\"Comment 注释对象\",\"JS通过DOM，就能对HTML进行操作\",\"改变HTML元素的内容\",\"改变HTML元素的样式(CSS)\",\"对HTML DOM事件做出反应\",\"添加和删除HTML元素\",\"DOM是W3C的标准，定义了访问HTML和XML文档的标准，分为三个不同的部分\",\"Core DOM 所有文档类型的标准模型\",\"Document 整个文档对象\",\"ELemen 元素对象\",\"Attribute 属性对象\",\"Text 文本对象\",\"Comment 注释对象\",\"XML DOM-XML文档标准模型\",\"HTML DOM-HTML文档的标准模型\",\"image:<img>\",\"Button:<input type=\\\"butoon\\\">\",\"HTML中的Element对象可以通过Document对象获得，而Document对象是通过windows对象获得的。 Document对象中提供了以下获取Element对象的函数\",\"根据id属性值获取，返回单个Element对象 var h1 = document.getElementById('h1')\",\"根据标签名称获取，返回Element对象数组 var divs = documnet.getElementsByTagName('div');\",\"根据name属性值获取，返回Element对象数组 var hobbys = document.getElementByName('hobby');\",\"根据class属性值获取，返回Element对象数组 var class = documnent.getElementsByClassName('cls');\",\"然后查操作手册w3school，属性，方法\"]},\"41\":{\"h\":\"JS事件监听\",\"t\":[\"js可以在事件被检测到时执行代码\",\"事件绑定 方式一 通过HTML标签中的事件属性进行绑定\",\"<input type=\\\"button\\\" onclick=\\\"on()\\\" value=\\\"按钮1\\\"> <script> function on(){ alert(\\\"我被点击了\\\"); } </script>\",\"方式二 通过DOM元素属性绑定\",\"<input type=\\\"button\\\" id=\\\"btn\\\" value=\\\"按钮2\\\"> <script> document.getElementById('btn').onclick=function(){ alert(\\\"我被点击了\\\"); } </script>\",\"常见事件\",\"onclick 鼠标单击事件 onblur 元素失去焦点 onfocus 元素获得焦点 onload 某个页面或图像被完成加载 onsubmit 当表单提交时触发该事件 onkyrdown 某个键盘的键被按下 onmouseover 鼠标被移到某元素之上 onmouseout 鼠标从某元素移开\"]},\"42\":{\"h\":\"VUE\",\"t\":[\"vue是一套前端框架，免除原生的JS中的DOM操作,简化书写. 基于MVVM思想，实现数据的双向绑定，将编程的关注点放在数据上 新建HTML页面引入Vue.js文件 <script src=\\\"js/vue.js\\\"></script> 在JS代码区域,创建Vue核心对象,定义数据模型\",\"<script> new Vue({ e1:\\\"#app\\\" data: { message:\\\"hello Vue!\\\" } }) </script>\",\"编写视图\",\"<div id=\\\"app\\\"> <input type=\\\"text\\\" v-model=\\\"message\\\"> {{message}} </div>\",\"{{}} 插值表达式 内容可以是\",\"变量\",\"三元运算符\",\"函数调用\",\"算数运算\"]},\"43\":{\"h\":\"Vue中的常用指令\",\"t\":[\"v-bind 为HTML标签绑定属性值，如设置href,css样式 v-model 在表单元素上创建双向数据绑定 v-on 为HTML标签绑定事件 v-if v-else-if 条件性的渲染某元素，判定为true时渲染，否则不渲染 v-else v-show 根据条件展示某元素，区别在于切换的是display属性的值 v-for 列表渲染，遍历容器的元素或者对象的属性\",\"<body> <div id=\\\"app\\\"> <a v-bond:href=\\\"url\\\">链接1</a> <a:href=\\\"url\\\">链接2</a> <input type=\\\"text\\\" v-model=\\\"url\\\">/*改变文本框内容，链接也会变*/ </div> </body> <script> new Vue({ e1:\\\"#app\\\" data:{ url=\\\"https://www.baidu.com\\\" } }) </script>\",\"通过v-bind 后者v-model 绑定的变量，必须在数据模型中声明\",\"v-on\",\"<body> <div id=\\\"app\\\"> <input type=\\\"button\\\" value=\\\"点我一下\\\" v-on:click=\\\"handle()\\\"> </div> </body> <script> new Vue({ e1:\\\"#app\\\" data:{ } methods:{ handle:function(){ alert(\\\"你点我了一下\\\"); } } }) </script>\",\"v-else-if v-show\",\"<span v-if=\\\"age <=35\\\">年轻人</span> <span v-else-if=\\\"age>35 && age <60\\\">中年人</span> <span v-else>老年人 <span v-show=\\\"age <35\\\">年轻人</span>\",\"<body> <div id=\\\"app\\\"> 年龄<input type=\\\"text\\\" v-model=\\\"age\\\">经判定，为 <span v-if=\\\"age<=35\\\">年轻人</spqn> <span v-else-if=\\\"age>35&&age<60\\\">中年人</spqn> <span v-else>老年人</spqn> <br><br> </div> </body> <script> new Vue({ e1:\\\"#app\\\" data:{ age:20 } methods:{ } }) </script>\",\"v-for\",\"<div v-for=\\\"addr in addrs\\\">{{addr}}</div> <div v-for=\\\"(addr,index) in addrs\\\">{{index + 1}} : {{addr}}</div> index是下标 索引 data:{ ... addrs:[\\\"北京\\\",\\\"上海\\\",\\\"成都\\\"] },\",\"通过vue完成表格数据的渲染展示\"]},\"44\":{\"h\":\"Vue的声明周期\",\"t\":[\"生命周期:指一个对象从创建到销毁的整个过程 声明周期的八个阶段: 每触发一个生命周期事件,会自动执行一个生命周期方法（钩子）\",\"beforeCreate 创建前 created 创建后 beforeMount 挂载前 mounted 挂载完成 beforeUpdate 更新前 uodated 更新后 beforeDestroy 销毁前 destroyed 销毁后\",\" <script> new Vue({ e1: \\\"#app\\\" data:{ }, methods: { }, mounted() { alert(\\\"vue挂载完成，发送请求到服务端\\\") } }) </script>\"]},\"45\":{\"h\":\"Ajax\",\"t\":[\"Asynchronous JavaScript And XML 异步的JavaScript和XML 作用\",\"数据交换,通过Ajax可以给服务器发送请求,并获取服务器响应的数据\",\"异步交互,可以在不重新加载整个页面的情况下,与服务器交换并更新部分网页的技术,如搜索联想,用户名是否可用的校验等等.\",\"原生Ajax(已经基本不用)\",\"准备数据地址(该地址返回一个json数据，视频中地址已失效)\",\"创建一个XMLHttpReuest对象,用于和服务器交换数据\",\"向服务器发送请求\",\"获取服务器响应数据\",\"<script> function getData(){ //1.创建XMLHttpRequest var xmlHttpRequest = new XMLHttpRequest(); //2. 发送异步请求 xmlHttpRequest.open('GET','返回json数据的网址'); xmlHttpRequest.send();//发送请求 //3.获取服务响应数据 xmlHttpRequest.onreadystatechange = function(){ if(xmlHttpRequest.readyState == 4 && xmlHttpRequest.status == 200){ document.getElementById('div1').innerHTML = xmlHttpRequest.responseText; } } } </script>\",\"Axios\",\"对原生Ajax进行了封装\",\"Axios中文文档 | Axios中文网 (axios-http.cn)\",\"步骤\",\"引入Axios的js文件\",\"<script src=\\\"js/axios-0.18.0.js\\\"></script>\",\"使用Axios发送请求，并获取响应结果\",\"axios({ method:\\\"get\\\" url:\\\"\\\" }).then((result)=>{ console.log(result.data); })\",\"请求方式别名\",\"axios.get(url,[,config])\",\"axios.delete(url,[,config])\",\"axios.post(url,[,data[,config]])\",\"axios.put(url,[,data[,config]])\",\"axios.get(\\\"url\\\").then((result)=>{ console.log(result.data); })\"]},\"46\":{\"h\":\"YAPI-API管理平台\",\"t\":[\"YAPI是高效，易用，功能强大的api管理平台，旨在为开发，\",\"产品，测试人员提供更优雅的接口管理服务。\",\"自行百度一下官网地址。\"]},\"47\":{\"h\":\"前端开发工程化\",\"t\":[\"模块化\",\"组件化\",\"规范化\",\"自动化\"]},\"48\":{\"h\":\"1. 环境准备\",\"t\":[\"Vue-cli是Vue官方提供的一个脚手架，用于快速生成一个Vue的项目模板。\",\"Vue-cli提供了如下功能\",\"统一的目录结构\",\"本地调试\",\"热部署\",\"单元测试\",\"继承打包上线\",\"依赖环境；NodeJs\",\"需要安装：vue-cli\"]},\"49\":{\"h\":\"2. Vue项目简介\",\"t\":[\"Vue项目-创建\",\"命令行vue create vue-project01\",\"图形化页面vue vi\",\"vue项目-目录结构\",\"基于Vue脚手架创建出来的工程，有标准的目录结构\",\"node_modules 整个项目的依赖包\",\"public存放项目的静态文件\",\"src存放项目的源代码\",\"package.json模块的基本信息，项目开发所需要模块，版本信息\",\"vue.config.js保存cue配置的文件，如：代理，端口的配置等。\",\"src下的文件\",\"assets静态资源\",\"components可重用的组件\",\"route路由配置\",\"views视图组件(页面)\",\"App.vue入口组件(跟组件)\",\"main.js入口js文件\",\"运行\",\"npm run serve\"]},\"50\":{\"h\":\"Vue组件库Element\",\"t\":[\"Element:是饿了么团队研发的，一套为开发者，设计师，和产品经理准备的基于Vue2.0的桌面端组件库。\",\"组件:组成网页的部件，例如，超链接，按钮，图片，表格，表单等\",\"安装ElementUi组件库(在当前工程的目录下)，在命令行执行指令\",\"npm install element-ui@2.15.3\",\"在main.js中引入ElementUI组件库\",\"import ElementUI from 'element-ui'; import 'element-ui/lib/theme-chalk/index.css'; Vue.use(ElemnetUI)\",\"访问官网，复制组件代码。\"]},\"51\":{\"h\":\"常用组件\",\"t\":[\"表格组件\",\"分页组件\",\"Dialog对话框组件\",\"表单组件\",\"Vue项目中使用Axios;\",\"在项目目录下安装axios:npm install axios;\",\"需要使用axios时，导入axiosimport axios from 'axois';\"]},\"52\":{\"h\":\"Vue路由\",\"t\":[\"前端路由:URL中的hash(#号)与组件之间的对应关系\",\"VueRouter是Vue的官方路由。\",\"组成\",\"VueRouter:路由器类，根据路由请求在路由视图中动态渲染选中的组件\",\"<router-link>:请求链接组件，浏览器会解析成<a>\",\"<router-view>:动态视图组件，用来渲染展示与路由路径对应的组件\",\"安装(创建项目时已选择)\",\"npm install vue-route@3.5.1\",\"定义路由\",\"在router下的index.js配置路由信息。\",\"在main.js里是否导入了路由import router from './router'\"]},\"53\":{\"h\":\"打包部署\",\"t\":[\"使用nginx部署\",\"nginx配置(服务器上的配置)\",\"events{} http { include /etc/nginx/mime.types; include /etc/nginx/conf.d/*.conf; server { listen 80; server_name localhost; location / { root /root/blog/; index index.html index.htm; try_files $uri $uri/ /index.html; } } }\"]},\"54\":{\"h\":\"Web开发\"},\"55\":{\"h\":\"Maven\",\"t\":[\"Maven时apache旗下的一个开源项目,是一款用于管理和构建java项目的工具。\",\"Maven的作用\",\"依赖管理，避免版本冲突问题\",\"统一项目结构，各idea文件目录统一\",\"标准跨平台自动化项目构建方式\",\"仓库\",\"本地仓库,自己计算机上的一个目录\",\"中央仓库:由Mave团队维护的全球唯一的。地址\",\"远程仓库(私服):一般由公司团队搭建的私有仓库\"]},\"56\":{\"h\":\"安装\",\"t\":[\"解压apache-maven-3.6.1-bin.zip\",\"配置本地仓库:修改conf/setting.xml中的<localRepository>为指定一个目录\",\"配置阿里云私服:修改conf/setting.xml中的<mirrors>标签，为其添加如下子标签\",\"<mirror> <id>alimaven</id> <name>aliyun maven</name> <url>http://maven.aliyun.com/nexus/content/groups/public/</url> <mirrorOf>central</mirrorOf> </mirror>\",\"配置环境变量:MAVEN_HOME为maven的解压目录，并将其bin目录加入PATH环境变量。\",\"mvn -v\"]},\"57\":{\"h\":\"IDEA集成Maven\",\"t\":[\"创建Maven环境\",\"选择IDEA中file-->Settings-->Build,Execution,Deployment-->Build Tools-->Maven\",\"设置IDEA使用本地安装的Maven,并修改配置文件及本地仓库路径\",\"也可全局配置:自行百度\",\"创建Maven项目\",\"创建模块，选择Maven，点击Next\",\"填写模块名称，坐标信息，点击finish，创建完成\",\"导入Maven项目\",\"打开IDEA，选择右侧Maven面板，点击+号，选中对应项目的pom.xml文件，双击导入\"]},\"58\":{\"h\":\"Maven坐标\",\"t\":[\"什么是坐标?\",\"Maven中的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置\",\"使用坐标来定义项目或引入项目中需要的依赖\",\"Maven坐标的主要组成?\",\"groupld:定义当前Maven项目隶属组织名称(通常是域名反写，例如:com.itheima)\",\"artifactld:定义当前Maven项目名称(通常是模块名称，例如:order-service,goods-service)\",\"version:定义当前项目版本号\",\" <groupId>org.example</groupId> <artifactId>java_maven</artifactId> <version>1.0-SNAPSHOT</version>\"]},\"59\":{\"h\":\"Maven依赖管理\",\"t\":[\"依赖配置\",\"依赖传递\",\"依赖范围\",\"生命周期\",\"依赖配置\",\"依赖:指当前项目运行所需要的jar包，一个项目中可以引入多个依赖。\",\"配置:\",\"在pom.xml中编写<dependencies>标签\",\"在<dependencies>标签中使用<dependency>引入坐标\",\"定义坐标的groupid,artifactld,version\",\"点击刷新按钮，引入最新加入的坐标\",\"如果引入的依赖本地不存在将会远程仓库/中央仓库下载\",\"不知道坐标信息可以在这里查询\",\" <dependencies> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>1.2.3</version> </dependency> </dependencies>\",\"依赖传递\",\"依赖具有传递性\",\"直接依赖:在当前项目中通过依赖配置建立的依赖关系\",\"间接依赖；被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源\",\"排除依赖\",\"排除依赖指主动断开依赖的资源,被排除的资源无需指定版本。\",\" <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>1.2.3</version> <!--排除依赖--> <exclusions> <exclusion> <groupId>junit</groupId> <artifactId>junit</artifactId> </exclusion> </exclusions>> </dependency>\",\"依赖范围\",\"依赖的jar包，默认情况下，可以在任何地方使用。可以通过<scope>..</scope>\",\"设置其作用范围。\",\"作用范围:\",\"主程序范围有效。(main文件夹范围内)\",\"测试程序有效。(test文件范围内)\",\"是否参与打包运行。(package指令范围内)\",\"scope值\",\"主程序\",\"测试程序\",\"打包(运行)\",\"范例\",\"compile(默认)\",\"Y\",\"Y\",\"Y\",\"log4j\",\"test\",\"-\",\"Y\",\"-\",\"junit\",\"provided\",\"Y\",\"Y\",\"-\",\"servelt-api\",\"runtime\",\"-\",\"Y\",\"Y\",\"jdbc驱动\",\" <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.10</version> <scope>test</scope> </dependency>\",\"生命周期\",\"Maven的生命周期就是为了对所有的Maven项目构建过程进行抽象和统一。\",\"Maven中有三套项目独立的生命周期\",\"clean:清理工作\",\"defaultL:核心工作，如:编译，测试，打包，安装，部署等。\",\"site：生成报告，发布站点等。\",\"每套生命周期包含一些阶段(phase),阶段是有顺序的吗，后面的阶段依赖于前面的阶段。\",\"clean:移除上一次构建生成的文件\",\"compile:编译项目源代码\",\"test:使用合适的单元测试框架运行测试(junit)\",\"package:将编译后的文件打包，如:jar,war等\",\"install:安装项目到本地仓库\",\"执行指定生命周期的两种方式\",\"在idea中，右侧的maven工具栏，选中对应的生命周期，双击执行\",\"在命令行中，通过命令执行eg:mvn compile\"]},\"60\":{\"h\":\"Web后端开发\",\"t\":[\"Spring\",\"官网\",\"Spring发展到今天已经形成了一开发生态圈，Spring提供了若干个子项目，每个项目用于完成特定的功能。\",\"Spring Boot简化了Spring配置，开发\"]},\"61\":{\"h\":\"SpringBootWeb入门\",\"t\":[\"需求:使用SpringBoot开发一个web应用，浏览器发起请求/hello后，给浏览器返回字符串\\\"hello world~\\\"\",\"创建springboot工程，并勾选web开发相关依赖\",\"定义HeloController类，添加方法hello，并添加注解\",\"运行测试\",\"@RestController public class Hello { @RequestMapping(\\\"/hello\\\") public String hello(){ System.out.println(\\\"hello,world\\\"); return \\\"hello world\\\"; } }\",\"运行自带的主类在浏览器访问/hello即可看到结果\"]},\"62\":{\"h\":\"HTTP协议\",\"t\":[\"HTTP超文本传输协议，规定了浏览器和服务器之间数据传输的规则。\",\"特点：\",\"基于TCP协议：面向连接，安全\",\"基于请求-响应模型的；一次请求对应一次响应\",\"HTTP协议是无状态的协议:对于事务处理没有记忆能力。每次请求都是独立的。\",\"缺点:多次请求间不能共享数据\",\"优点:速度快\"]},\"63\":{\"h\":\"请求协议\",\"t\":[\"请求行(请求方式,资源路径,协议)\",\"请求头(格式key:value)\",\"请求体\",\"key\",\"value\",\"Host\",\"请求的主机名\",\"User-Agent\",\"浏览器版本\",\"Accept\",\"浏览器能接收资源类型\",\"Accept-Language\",\"浏览器偏好语言，服务器可根据此返回不同语言的网页\",\"Accept-Encoding\",\"表示浏览器可以支持的压缩类型，例如gzip,deflate等\",\"Content-Type\",\"请求主体的数据类型\",\"Content-length\",\"请求主体的大小(单位:字节)\",\"GET请求:请求参数在请求行中，没有请求体，如/brand/findAll?name=OPPO&status=1请求大小有限制\",\"请求参数在请求体中，POST请求大小没有限制\"]},\"64\":{\"h\":\"响应协议\",\"t\":[\"响应行(响应数据第一行(协议，状态码，描述))\",\"响应头(第二行开始,格式key:value)\",\"响应体(最后一部分，存放响应数据)\",\"1xx响应中-临时状态码。表示请求已经接收，告诉客户端应该继续请求或者它已经完成则忽略它\",\"2xx成功-表示请求已经被成功接受，处理已完成\",\"3xx重定向-重定向到其他地方，让客户端在发起一次请求以完成整个处理\",\"4xx客户端错误-处理发生错误，责任在客户端，如:请求了不存在的资源，客户端未被授权禁止访问等\",\"5xx服务器错误-处理发生错误，责任在服务端。如程序抛出异常等\",\"200请求成功\",\"404资源不存在，一般是url输入错误或者资源被删\",\"500服务器发生不可预期的错误\",\"[状态码大全](HTTP 状态码 | 菜鸟教程 (runoob.com))\",\"常见的响应头\",\"type\",\"意思\",\"ConTent-Type\",\"表示该响应内容的类型，egtest/html,application/json \",\"Content-Length\",\"表示该响应内容的长度(字节数)\",\"Content-Encoding\",\"表示该响应压缩算法，eg gzip \",\"Cache-Control\",\"指示客户端应如何缓存，eg:max-age=300表示最多缓存300秒\",\"Set-Cookie\",\"告诉浏览器为当前页面所在的域设置cookie\"]},\"65\":{\"h\":\"Web服务器-Tomacat\",\"t\":[\"Web服务器是一个软件程序，对http协议的操作进行封装，使得程序员不必直接对协议进行操作，让web开发更加便捷。\",\"主要功能是\\\"提供网上信息浏览服务\\\"。\",\"Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级web服务器\",\"Tomcat也被称为Web容器，Servelt容器，servlet程序需要依赖于Tomcat才能运行\",\"配置Tomcat端口号(conf/server.xml)\",\"HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。\",\"Tomcat部署项目:\",\"将项目放置到webapps目录下，即部署完后。\"]},\"66\":{\"h\":\"Tomcat入门程序\",\"t\":[\"起步依赖:\",\"spring-boot0starter-web:包含了web应用开发所需要的常见依赖\",\"spring-boot-starter-test:包含了单元测试所需要的常见依赖\"]},\"67\":{\"h\":\"请求响应\",\"t\":[\"请求(HttpServetRequest):获取请求数据\",\"响应(HttpServletResponse):设置响应数据\",\"BS架构:Browser/Server,浏览器/服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。\",\"CS架构，客户端/服务器架构模式\"]},\"68\":{\"h\":\"请求\",\"t\":[\"@RestController类最前边。\",\"postman\",\"Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件\",\"作用:常用于进行接口测试\",\"简单参数\",\"原始方式\",\"在原始的web程序中，获取请求参数，需要通过HttpServletRquest对象手动获取。\",\" @RequestMapping(\\\"/simpleParam\\\") public String simpleParam(HttpServletRequest request){ //获取请求参数 String name = request.getParameter(\\\"name\\\"); String ageStr = request.getParameter(\\\"age\\\"); int age = Integer.parseInt(ageStr); System.out.println(name+\\\" \\\"+age); return \\\"OK\\\"; }\",\"SpringBoot方式\",\" @RequestMapping(\\\"/simpleParam\\\") public String simpleParam(String name , Integer age){ System.out.println(name+\\\" \\\"+age); return \\\"OK\\\"; }\",\"要保持请求参数命名一致。参数对应不一致可以使用@RequestParam完成映射\",\"public String simpleParam(@RequestParam(name=\\\"name\\\",required=false)String username , Integer age){\",\"声明了这个默认required是true不传参数会报错，可以改为false不报错\",\"post请求参数写在请求体里面即可。\",\"实体参数\",\"简单实体对象:请求参数名与形参对象属性名相同，定义POJO接收即可\",\" @RequestMapping(\\\"/simplePojo\\\") public String simplePojo(User user){//User是一个类，需要与这个类里的属性名对应 System.out.println(user); return \\\"Ok\\\"; }\",\"复杂实体对象:请求参数与形参对象属性名相同，按照对象层次结构关系即可接受嵌套POJO属性参数\",\"一个类里面的属性是另一个类。\",\"记得写对应的set和get和tostring方法\",\"那么传递参数时需要http://localhost:8080/simplePojo?name=TOM&age=100&adress.city=北京这样传递。\",\"数组集合参数\",\"数组参数:请求参数名与参数组名称相同，且请求参数为多个，定义数组类型形参即可接收参数。\",\"eg:爱好有多个，传输多个爱好.\",\"可以使用数组进行接收\",\"集合参数:请求参数名与形参集合名称相同且请求参数为多个。@RequestParam绑定参数关系。\",\"@RequestMapping(\\\"/listParam\\\") public String listParam(@RequestParam List<String> hobby){ System.out.println(hobby); return \\\"OK\\\"; }\",\"日期参数\",\"日期参数:使用@DateTimeFormat注解完成日期参数格式转换\",\"@RequestMapping(\\\"/dateParam\\\") public String dateParam(@DateTimeFormat(pattern=\\\"yyyy-MM-dd HH:mm:ss\\\")LocalDateTime updateTime){ System.out.println(updateTime); return \\\"OK\\\"; }\",\"Json参数\",\"Json参数:Json数据键名与形参对象属性名相同,定义POJO类型形参即可接受参数,需要使用@RequestBody标识\",\"{ \\\"name\\\":\\\"\\\", \\\"age\\\":16, \\\"address\\\":{ \\\"province\\\":\\\"beijing\\\", \\\"city\\\":\\\"beijing\\\" } }\",\" @RequestMapping(\\\"/jsonParam\\\") public String jsonParam(@RequestBody User user){ System.out.println(user); return \\\"OK\\\"; }\",\"User是一个类，有属性name和age和Address(类)\",\"路径参数\",\"路径参数:通过请求URL直接传递参数，使用{...}来标识该路径参数，需要使用@PathVariable获取路径参数\",\" @RequestMapping(\\\"/path/{id}\\\") public String pathParam(@PathVariable Integer id){ System.out.println(id); return \\\"OK\\\"; }\",\"​\",\"@RequestMapping(\\\"/path/{id}\\\",method = RequestMethod.GET)指定请求方式为GET\",\"也可以写为(更加简单)\",\"GetMapping(\\\"/path/{id}\\\")\",\"PostMapping(\\\"\\\")等等...\",\"可以有多个路径参数\",\" @RequestMapping(\\\"/path/{id}/{name}\\\") public String pathParam2(@PathVariable Integer id,@PathVariable String name){ System.out.println(id+\\\" \\\"+name); return \\\"OK\\\"; }\"]},\"69\":{\"h\":\"响应\",\"t\":[\"'@ResponseBody'\",\"类型:方法注解，类注解\",\"位置:Controller方法上/类上\",\"作用:将方法返回值直接响应，如果返回值类型是实体对象/集合，将会转换为JSON格式响应\",\"说明:@RestController=@Controller+@ResponseBody;\",\"同一的响应结果\",\"定义一个Result的类，使其有统一的fan\",\"private Integer code;响应码,1代表成功，0代表失败\",\"private String msg;提示信息\",\"private Object data;返回的数据\"]},\"70\":{\"h\":\"分层解耦\"},\"71\":{\"h\":\"三层架构\",\"t\":[\"controller:控制层，接收前端发送的请求，对请求进行处理，并响应数据。\",\"service:业务逻辑层，处理具体的业务逻辑\",\"dao:数据访问层(Data Access Object)(持久层)，负责数据访问操作，包括数据的增，删，改，查。\"]},\"72\":{\"h\":\"分层解耦\",\"t\":[\"内聚:软件中各个功能模块内部的功能联系。\",\"耦合:衡量软件中各个层/模块之间的依赖，关联的程度。\",\"软件设计原则高内聚低耦合\",\"控制反转:inversion Of Control,简称IOC。对象的创建控制权由程序自身转移到外部(容器),这种思想成为控制反转。\",\"依赖注入:Dependency Injection,简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。\",\"Bean对象:IOC容器中创建，管理的对象，称之为bean.\"]},\"73\":{\"h\":\"IOC & DI 入门\",\"t\":[\"Service层及Dao层的实现类，交给ICO容器管理。\",\"为Controller及Service注入运行时，依赖的对象。\",\"启动测试\",\"在类的上面加上注解@Component将当前类交给IOC容器管理，成为IOC容器中的bean。\",\"在类里面加上注解Autowired运行时，IOC容器为提供该类型的bean对象，并赋值给该变量--依赖注入\"]},\"74\":{\"h\":\"IOC详解\",\"t\":[\"Bean的声明:\",\"要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一:\",\"注解\",\"说明\",\"位置\",\"@Component\",\"声明bean的基础注解\",\"不属于以下三类时，用此注解\",\"@Controller\",\"@Component的衍生注解\",\"标注在控制器类上\",\"@Service\",\"@Component的衍生注解\",\"标注在业务类上\",\"@Repository\",\"@Component的衍生注解\",\"标注在数据访问类上(由于与mybatis整合，用的少i)\",\"Controller(请求处理，响应数据)---->Service(逻辑处理)---->Dao(数据访问)\",\"声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。\",\"使用以上四个注解都可以声明bean，但在springboot集成web开发中，声明控制器bean只能用@Controller\",\"Bean的组件扫描\",\"前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ComponentScan扫描\",\"@ComponentScan注解虽然没有显示配置，但是实际上已经包含在了启动类声明注解@SpringBootApplocation中，默认扫描的范围时启动类所在包及其子包。\"]},\"75\":{\"h\":\"DI详解\",\"t\":[\"@Autowire注解，默认是按照类型进行的，如果存在多个相同类型的bean，将会报出如下错误:\",\"通过一下几种方案来解决:\",\"@Primary 设置优先级\",\"@Qualifier 指定bean的名字 默认是类名首字母小写\",\"@Resourcename=名字 \"]},\"76\":{\"h\":\"Mybatis\",\"t\":[\"MyBatis是一款优秀的持久层框架，用于简化JDBC的开发 ……\",\"引入依赖，配置相关信息(application.properties)\",\"# 配置数据库的连接信息- 四要素 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # 连接数据库的url spring.datasource.url=jdbc:mysql://localhost:3306/tem # 连接数据库的用户名 spring.datasource.username=root #连接数据库的密码 spring.datasource.password=kdyq1108\",\"编写SQL语句\",\"@Mapper public interface UserMapper { @Select(\\\"select * from user\\\") public List<User> list(); }\"]},\"77\":{\"h\":\"配置SQl提示\",\"t\":[\"idea和数据库没有建立连接，不识别表的信息，\",\"在idea中高配置mysql数据库连接\"]},\"78\":{\"h\":\"数据库连接池\",\"t\":[\"数据库连接池是个容器，负责分配，管理数据库连接(Connection)\",\"它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。\",\"释放空间时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏。\",\"标准接口:DataSource\",\"官方(sun)提供的数据库连接池接口，由第三方组织实现此接口。\",\"功能:获取连接,Connection getConnection() throws SQLException\",\"常见产品:Druid,Hikari\",\"切换Druid数据库连接池:\",\"引入起步依赖\",\" <!--druid连接池--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-3-starter</artifactId> <version>1.2.22</version> </dependency>\"]},\"79\":{\"h\":\"lombok\",\"t\":[\"lombok是一个实用的java类库,能通过注解的形式自动生成构造器,getter/setter,equals,hashcode,toString等方法,并可以自动化生成日志变量，简化java开发，提高效率。、\",\"注解\",\"作用\",\"@Getter/@Setter\",\"为所有属性提供get/set方法\",\"@ToString\",\"会给类自动生成易于阅读的toString方法\",\"@EqualsAndHashCode\",\"根据类所拥有的非静态字段自动重写equals方法和hashCode方法\",\"@NoArgsConstructor\",\"为实体类生成无参的构造器方法\",\"@AllArgsConstructor\",\"为实体类生成除了static修饰的字段之外带有各参数的构造器方法。\",\"@Data \",\"提供了更综合的生成代码功能(@Getter+@Setter+@ToString+@EqualsAndHashCode)\",\"pom配置\",\" <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency>\",\"Lombok会在编译时,自动生成对应的java代码,我们使用lombok时,还需要安装一个lombok的插件(idea自带)\"]},\"80\":{\"h\":\"Mybatis基础操作\",\"t\":[\"准备\",\"准备数据表emp\",\"创建一个新的springboot工程,选择引入对应的起步依赖(mybatis,mysql,lmbok)\",\"application.properties中引入数据库连接信息\",\"创建对应的实体类Emp(实体类属性采用驼峰命名)\",\"准备Mapper接口EmpMapper\",\"删除\",\"@Mapper public interface UserMapper { @Delete(\\\"delete from user where id = #{id}\\\")//#{}占位符 public int delete(Integer id);//返回值表示删除的记录数 }\",\"日志输出\",\"可以在application.properties中,打开mybatis的日志,并指定输出到控制台。\",\"#配置mybatis的日志,指定输出到控制台 mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\",\"预编译SQL(?占位符):\",\"性能更高\",\"更安全(防止SQL注入)\"]},\"81\":{\"h\":\"占位符\",\"t\":[\"#\",\"执行SQl时，会将#{..}替换为?,生成预编译SQl,会自动设置参数值。\",\"使用时机:参数传递,都使用#\",\"$\",\"拼接SQL。直接将参数拼接在SQL语句中,存在SQL注入问题\",\"使用时机:如果对表名，列表进行动态设置时使用。\",\"插入\",\"使用实体类将多个参数封装起来。\",\" @Insert(\\\"insert into user(id, name, age, gender, phone) values(#{id},#{name},#{age},#{gender},#{phone});\\\") public int insert(User user);\",\"主键返回\",\":在数据添加成功后,需要获取插入数据库数据的主键。\",\"如:在添加套餐数据时,还需要维护套餐菜品关系表数据。\",\"插入数据的时候不设置id,使用这个返回主键.\",\" @Options(useGeneratedKeys = true,keyProperty = \\\"id\\\")#获取返回的主键\",\"更新\",\" @Update(\\\"update user set name=#{name},age=#{age},gender=#{gender},phone=#{phone} where id =#{id}\\\") public void update(User user);\",\"查询\",\" @Select(\\\"select * from user where id=#{id};\\\") public User getById(Integer id);\",\"数据封装:\",\"实体类属性名和数据库表查询返回结果一致,mybatis会自动封装。\",\"如果实体类属性名和数据库表查询返回的字段名不一致,不能自动封装。\",\"方案一:给字段起别名,让别名与实体类属性一致。\",\"select dept_id depId from emp where id = #{id}\",\"方案二:通过@Results,@Result注解手动映射封装\",\"@Results({ @Result(column = \\\"dept_id\\\",property = \\\"deptId\\\") }) @Select(select dept_id depId from emp where id = #{id})\",\"方案三:开启mybatis的驼峰命名自动映射开关 ---a_cloumn --->aColumn\",\"在application.properties中\",\"mybatis.configuration.map-underscore-to-camel-case=true\",\"条件查询\",\"思考一下为什么使用$\",\" @Select(\\\"select * from user where name like '%${name}%' and gender = #{gender} order by gender desc\\\") public List<User> list(String name,short gender);\",\"concat字符串拼接函数\",\"select concat('hello','world');拼接成helloworld,\",\"可以使用这个方法解决上面的问题。\",\"@Select(\\\"select * from user where name like concat('%',#{name},'%') and gender = #{gender} order by gender desc\\\")\",\"参数名说明,在springBoot的1.x版本/单独使用mybatis中在接口中的每个属性上加@Param\"]},\"82\":{\"h\":\"XML映射文件\",\"t\":[\"规范\",\"XML映射文件的名称与Mapper接口名称一致,并且将XML映射文件和Mapper接口放置在相同包下(同包同名)\",\"XML映射文件的namespace属性为Mapper接口全限定名一致\",\"XML映射文件中sql语句的id与Mapper接口中的方法名一致,并保持返回类型一致。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"com.example.database.UserMapper\\\"> <select id=\\\"list\\\" resultType=\\\"com.wzy.User\\\"> select * from user where name like concat('%', #{name}, '%') and gender = #{gender} order by gender desc </select> </mapper>\",\"目录结构:\",\"使用注解来映射简单语句会使代码显得更加整洁,但对于稍微复杂一点的语句,Java注解不仅力不从心,还会让你本就复杂的SQL语句更加混乱不堪,因此，如果你需要做一些很复杂的操作,最好用XML来映射语句。\",\"选择何种方式来配置映射,以及认为是否应该要统一映射语句定义的形式,完全取决于你和你的团队,换句话说,永远不要拘泥于一种方式,你可以很轻松的在基于注解和XML的语句映射方式间自由移植和切换。\"]},\"83\":{\"h\":\"Mybatisx插件\",\"t\":[\"一款基于IDEA的快速开发Mybatis的插件,为效率而生。\"]},\"84\":{\"h\":\"Mybatis动态SQL-if\",\"t\":[\"随着用户的输入或外部条件的变化而变化的SQL语句,我们称为动态SQL.\",\"<if>&<where>\",\"<if>用于判断条件是否成立,使用test属性进行条件判断,如果条件为true,则拼接SQl。\",\"<where>元素只会在子元素有内容的情况下才插入where字句,而且会自动去除字句开头的AND或OR.\",\" <select id=\\\"list\\\" resultType=\\\"com.wzy.User\\\"> select * from user <where> <if test=\\\"name!=null\\\"> name like concat('%', #{name}, '%') </if> <if test=\\\"gender!=null\\\"> and gender = #{gender} </if> </where> order by gender desc </select>\",\"更新操作也要设置为动态的SQL\",\"动态更新员工信息,如果更新时有值传递更新有值的。\",\"<set>动态地在行首插入SET关键字,并会删掉额外的逗号.(用在update语句中)\"]},\"85\":{\"h\":\"\",\"t\":[\"批量删除\",\"delete from user where id in(1,2);\",\"-- co llection:遍历的集合 -- item:遍历出来的元素 -- separator:分隔符 -- open:遍历开始前拼接的SQL片段 -- close:遍历结束后拼接的SQL片段 <delete id=\\\"deleteById\\\"> delete from user where id in <foreach collection=\\\"ids\\\" item=\\\"id\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\"> #{id} </foreach> </delete>\",\" public void deleteById(List<Integer> ids);\"]},\"86\":{\"h\":\"\",\"t\":[\"<sql>定义可重用的SQL片段\",\"<include>通过属性refid,指定包含的sql片段\",\"<sql id=\\\"\\\"> </sql> ------- <include refid=\\\"\\\"/>\",\"@Slf4j日志小技巧\",\"分页查询依赖pageHelper\"]},\"87\":{\"h\":\"文件上传\"},\"88\":{\"h\":\"基础登录功能\"},\"89\":{\"h\":\"会话技术\",\"t\":[\"会话:用户打开浏览器,访问web服务器的资源,会话建立,直到有一方断开连接,会话结束.在一次会话中可以包含多次请求和响应。\",\"会话跟踪:一种维护浏览器状态的方法,服务器需要识别多次请求是否来自于同一浏览器,以便在同一次会话的多次请求间共享数据。\",\"会话跟踪方案:\",\"客户端会话跟踪技术:Cookie\",\"服务端会话跟踪技术:Session\",\"令牌技术\"]},\"90\":{\"h\":\"Cookie\",\"t\":[\" @GetMapping(\\\"/c1\\\")//设置cookie public Result cookie1(HttpServletResponse response) { response.addCookie(new Cookie(\\\"login_username\\\", \\\"itheima\\\")); return Result.success(); } @GetMapping(\\\"/c2\\\")//获取cookie public Result cookie2(HttpServletRequest request) { Cookie[] cookies = request.getCookies();//获取所有cookie for (Cookie cookie : cookies) { if (cookie.getName().equals(\\\"login_username\\\")) { System.out.println(\\\"login_username:\\\" + cookie.getValue()); } } return Result.success(); }\",\"优点:HTTP协议中支持的技术\",\"缺点:移动端APP无法使用Cookie\",\"不安全,用户可以自己禁用Cookie\",\"Cookie不能跨域，跨域区分三个维度:协议,ip/域名,端口\"]},\"91\":{\"h\":\"Session\",\"t\":[\" @GetMapping(\\\"/s1\\\")//往HttpSession中存储值 public Result session1(HttpSession session){ log.info(\\\"HttpSession-s1:{}\\\",session.hashCode()); session.setAttribute(\\\"loginUser\\\",\\\"tom\\\");//往Session中存储数据 return Result.success(); } @GetMapping(\\\"/s2\\\")//从HttpSession中获取值 public Result session2(HttpServletRequest request){ HttpSession session = request.getSession(); log.info(\\\"HttpSession-s2:{}\\\",session.hashCode()); Object loginUser = session.getAttribute(\\\"loginUser\\\");//从session中获取数据 login.info(\\\"loginUser:{}\\\",loginUser); return Result.success(loginUser); }\",\"优点:存储在服务端,安全\",\"缺点:\",\"服务器集群环境下无法直接使用Session\",\"Cookie的缺点\"]},\"92\":{\"h\":\"令牌技术(主流)\",\"t\":[\"优点:\",\"支持pc端,移动端\",\"解决集群环境下的认证问题\",\"减轻服务器端的存储压力\",\"缺点:需要自己实现\",\"全称:JSON web Token\",\"定义了一种简洁的,自包含的格式,用于在通信双方以json数据格式安全的传输信息,由于数字签名的存在,这些信息是可靠的。\",\"组成\",\"Header(头),记录令牌类型,签名算法等.eg:{\\\"alg\\\":\\\"HS256\\\",\\\"type\\\":\\\"JWT\\\"}\",\"Payload(有效载荷),携带一些自定义信息,默认信息等.eg:{\\\"id\\\":\\\"1\\\",\\\"username\\\":\\\"tom\\\"}\",\"Signature(签名),防止Token被篡改,确保安全性.将header,payload,并加入指定密钥,通过指定签名算法计算而来。\",\"Base64:是一种基于64个可打印字符(A-Z,a-z,0-9 +/)来表示二进制数据的编码格式\",\"引入依赖:\",\" <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> <version>0.9.1</version> </dependency>\",\"生成JWG令牌:\",\" @Test public void testJwt(){ Map<String ,Object> claims = new HashMap<>(); claims.put(\\\"id\\\",1); claims.put(\\\"name\\\",\\\"tom\\\"); String jwt = Jwts.builder() .signWith(SignatureAlgorithm.HS256,\\\"itheima\\\")//签名算法 .setClaims(claims)//自定义内容(载荷) .setExpiration(new Date(System.currentTimeMillis() + 3600*1000))//设置有效期为1h .compact(); System.out.println(jwt); }\",\"如果上面的报错,可以尝试引入依赖:\",\" <dependency> <groupId>javax.xml.bind</groupId> <artifactId>jaxb-api</artifactId> <version>2.3.1</version> </dependency>\",\"解析JWT令牌:\",\" @Test public void testParseJwt(){ Claims claims = Jwts.parser() .setSigningKey(\\\"itheima\\\") .parseClaimsJws(\\\"eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoidG9tIiwiaWQiOjEsImV4cCI6MTcyMDg5Njg3MH0.IY-phYW_l5Z04jMC-FxKpLFgTG0MubR9nTttQ158-og\\\") .getBody(); System.out.println(claims); }\",\"JWT校验时使用的签名密钥,必须和生成JWT令牌使用的密钥是配套的\",\"如果JWT令牌解析校验时错误,则说明JWT令牌被篡改或失效了,令牌非法。\",\"使用\",\"引入JWT令牌操作工具类\",\"登录完成后,调用工具类生成JWT令牌,并返回\",\"工具类对上面的生成和解析代码进行了封装。\",\"登录成功,生成令牌并返回(字符串类型)。\",\"登录失败,返回错误提示信息。\"]},\"93\":{\"h\":\"过滤技术Filter\",\"t\":[\"Filter过滤器,是javaWeb三大组件(Servlet,Filter,Listener)之一\",\"过滤器可以把对资源的请求拦截下来,从而实现一些特殊的功能\",\"过滤器一般完成一些通用的操作,比如:登录校验,同一编码处理,敏感字符处理等。\",\"定义Filter:定义一个类,实现Filter接口,并重写其所有方法。\",\"配置Filter:Filter类上面加@WebFilter注解,配置拦截资源路径。引导类上加@ServletComponentScan开启ServletComponentScan开启Servlet组件支持。\",\"初始化方法和销毁方法都只调用一次。doFilter可调用多次。\",\"@WebFilter(urlPatterns = \\\"/*\\\")//拦截所有请求 public class DemoFilter implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { Filter.super.init(filterConfig); } @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { } @Override public void destroy() { Filter.super.destroy(); } }\",\"在doFilter中添加filterChain.doFilter(servletRequest,servletResponse);放行。\",\"放行后访问对应资源,资源访问完成后,会返回到Filter中,继续执行放行后的逻辑。\",\"拦截路径:\",\"拦截具体路径:/login只有访问/login路径时,才会被拦截\",\"目录拦截:/emps/*访问/emps下的所有资源,都会被拦截\",\"拦截所有/*访问所有资源都会被拦截\",\"过滤器链 一个web应用中,配置多个过滤器,这多个过滤器就形成了一个过滤器链。\",\"优先级是按照过滤器类名的自然排序。\",\"登录校验功能 登录请求不需要校验令牌。 步骤:\",\"获取url\",\"判断请求url中是否包含login,如果包含,说明是登录操作,放行\",\"获取请求头中的令牌(token)\",\"判断令牌是否存在,如果不存在,返回错误结果(未登录)\",\"解析token,如果解析失败,返回错误结果(未登录)。\",\"放行\",\"doFilter中的request。\",\"HttpServletRequest req = (HttpServletRequest)request; HttpServletResponse resp = (HttpServletResponse)response; String url = req.getRequestURL().toString(); if(url.contains(\\\"login\\\")){ log.info(); chain.doFilter(request,response); return; } String jet = req.getHeader(\\\"token\\\"); if(!StringUtils.hasLength(jwt)){ Result error = Result.error(\\\"NOT_LOGIN\\\"); //手动转换-->阿里巴巴fastJson String notLogin = JSONNObject.toJSONObject.toString(error); resp.getWriter().write(notLogin); return; } //校验 try{ JetUtils.parseJWT(jwt); }catch(Exception e){ e.printStackTrace(); String notLogin = JSONNObject.toJSONObject.toString(error); resp.getWriter().write(notLogin); return; } chain.doFilter(request,response);\"]},\"94\":{\"h\":\"拦截器Interceptor\",\"t\":[\"概念:是一种动态拦截方法调用的机制,类似于过滤器。Spring框架中提供的,用来动态拦截控制器方法的执行。 作用:拦截请求,在指定的方法调用前后,根据业务需要执行预先设定的代码。\",\"使用\",\"定义拦截器,实现Handlerlntereptor接口,并重写其所有方法\",\"注册拦截器\",\"@Component public class LoginCheckInterceptor implements HandlerInterceptor { @Override//目标资源方法运行前运行,返回true放行 public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { //return HandlerInterceptor.super.preHandle(request, response, handler); return true; } @Override//目标方法运行后运行 public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { HandlerInterceptor.super.postHandle(request, response, handler, modelAndView); } @Override//视图渲染完毕后运行,最后运行 public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { HandlerInterceptor.super.afterCompletion(request, response, handler, ex); } }\",\" @Configuration//配置类 public class WebConfig implements WebMvcConfigurer { @Autowired private LoginCheckInterceptor loginCheckInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(loginCheckInterceptor).addPathPatterns(\\\"/**\\\");//加上.excludePathPatterns(\\\"/login\\\")不拦截的 } }\",\"/*一级路径\",\"/**任意级路径\",\"/depts/*/depts下的一级路径\",\"/depts/**dptes下的任意级路径\",\"两者的区别:\",\"接口规范不同:过滤器需要实现Filter接口,而拦截器需要实现HandlerInterceptor接口\",\"拦截范围不同:过滤器Filter会拦截所有的资源,而Interceptor只会拦截Spring环境中的资源。\"]},\"95\":{\"h\":\"登录校验\",\"t\":[\" public boolean preHandle(HttpServletRequest req, HttpServletResponse resp, Object handler) throws Exception { String url = req.getRequestURL().toString(); if(url.contains(\\\"login\\\")){ return true; } String jwt = req.getHeader(\\\"token\\\"); if(!StringUtils.hasLength(jwt)){ Result error = Result.error(\\\"NOT_LOGIN\\\"); //手动转换-->阿里巴巴fastJson String notLogin = JSONObject.toJSONString(error); resp.getWriter().write(notLogin); return false; } //校验 try{ JwtUtils.parseJWT(jwt); }catch(Exception e){ e.printStackTrace(); String notLogin = JSONNObject.toJSONObject.toString(error); resp.getWriter().write(notLogin); return false; } return true; }\"]},\"96\":{\"h\":\"异常处理\",\"t\":[\"程序开发过程中不可避免的会遇到异常现象。\",\"方案一:在Controller的方法中进行tyr..catch处理(不推荐)\",\"方案二:全局异常处理器。(推荐)\",\"@RestControllerAdvice//=@ControllerAdvice+@ResponseBody public class GlobalExceptionHandler { @ExceptionHandler(Exception.class)//捕获所有异常 public Result ex(Exception ex){ ex.printStackTrace(); return Result.error(\\\"操作失败,请联系管理员\\\"); } }\"]},\"97\":{\"h\":\"事务管理\",\"t\":[\"开启事务(一组操作开始前,开启事务):start tranction / begin;\",\"提交事务(这组操作全部成功后,提交事务):commit\",\"回滚事务(中间任何一个操作出现异常,回滚事务):rollback;\",\"Spring事务管理\",\"注解:@Transactional\",\"位置:业务(service)层的方法上,类上,接口上\",\"作用:将当前方法交给spring进行事务管理,方法执行前,开启事务,成功执行完毕,提交事务;出现异常,回滚事务。\",\"配置一下日志开关:(application.yml中)\",\"logging: level: org.springframework.jdbc.support.JdbxTransactionManage:debug\"]},\"98\":{\"h\":\"事务进阶\",\"t\":[\"rollbackFor\",\"propagation\",\"默认情况下,只有出现RuntimeException才回滚异常,rollbackFor属性用于控制出现何种异常类型,回滚事务。\",\"@Transactional(rollbackFor=Exception.class)\",\"propagation\",\"事务传播行为:指的就是当一个事务方法被另一个事务方法调用时,这个事务方法应该如何进行事务控制。\",\"属性值\",\"含义\",\"REQUIRED\",\"默认值,需要事务,有则加入,无则创建新事务\",\"REQUIRES_NEW\",\"需要新事务,无论有无,总是创建新事务\",\"SUPPORTS\",\"支持事务,有则加入,无则在无事务状态中运行\",\"NOT_SUPPORTED\",\"不支持事务,在无事务状态下运行,如果当前存在已有事务,则挂起当前事务\",\"MANDATORY\",\"必须有事务,否则抛异常\",\"NEVER\",\"必须没事务,否则抛异常\",\"两个方法共用一个事务,发生异常都会回滚。比如往表中插入日志操作,1号事务出现异常,2号事务也会回滚,不执行。\",\"@Transactional(propagation = Propagation.REQUIRES_NEW)在2号事务方法前加上。这样有了两个事务,第一个事务出错,第二个事务不会回滚。\",\"REQUIRES_NEW:当我们不希望事务之间相互影响时,可以使用该传播行为,比如:下订单前需要记录日志,不论订单保存成功与否,都需要日志记录能够记录成功。\"]},\"99\":{\"h\":\"AOP\",\"t\":[\"面向切面编程,面向方面编程.就是面向特定方法编程。\",\"场景:\",\"案例部分功能运行较慢,定位执行耗时较长的业务方法,此时需要统计每一个业务的执行耗时。\",\"实现:\",\"动态代理是面向切面编程最主流的实现,而SpringAOP是Spring框架的高级技术,旨在管理bean对象的过程中,主要通过底层的动态代理机制,对特定的方法进行编程。\"]},\"100\":{\"h\":\"AOP快速入门\",\"t\":[\"统计各个业务方法的执行耗时。\",\"导入依赖:在pom.xml中引入AOP依赖\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency>\",\"编写AOP程序:针对于特定方法根据业务需要进行编程。\",\"@Aspect//AOP类 @Component public class TimeAspect { @Around(\\\"execution(* com.wzy.controller.*.*(..))\\\")//切入点表达式 public Object recodeTime(ProceedingJoinPoint joinPoint) throws Throwable { //1.获取方法运行开始时间 long begin = System.currentTimeMillis(); //2.运行原始方法 Object result = joinPoint.proceed(); //3.获取方法运行结束时间,计算计算执行耗时 long end = System.currentTimeMillis(); System.out.println(joinPoint.getSignature()+\\\" 方法执行耗时:\\\"+(end-begin)); return result; } }\",\"记录操作日志\",\"权限控制\",\"事务管理\"]},\"101\":{\"h\":\"AOP核心概念\",\"t\":[\"连接点:JoinPoint,可以被AOP控制的方法(暗含方法执行时的相关信息)\",\"通知:Advice,指哪些重复的逻辑,也就是共性功能(最终体现为一个方法)\",\"切入点:PointCut,匹配连接点的条件,通知仅会在切入点方法执行时被应用\",\"切面:Aspect,描述通知与切入点的对应关系(通知+切入点)\",\"目标对象:Target,通知所应用的对象\"]},\"102\":{\"h\":\"AOP进阶\",\"t\":[\"通知类型\",\"@Around环绕通知.此注解标准的通知方法在目标方法前,后都被执行\",\"@Before前置通知,此注解标注的通知方法在目标方法前被执行\",\"@After后置通知,此注解标注的通知方法在目标方法后执行,无论是否有异常都会执行\",\"AfterReturning返回后通知,此注解标注的通知方法在目标方法后被执行,有异常不会执行\",\"AfterThrowing异常后通知,此注解标注的通知方法发生异常后执行\",\"未完待续~~~\"]},\"103\":{\"c\":[\"java\"]},\"104\":{\"c\":[\"javaweb\"]},\"105\":{\"h\":\"java基础\",\"t\":[\"[TOC]\"]},\"106\":{\"h\":\"前言\",\"t\":[\"java是一种纯粹的面向对象的编程语言\",\"jre:java Runtime Environment 运行环境\",\"JVM: 运行时所需要的核心类库java虚拟机\",\"JDK:Java Development 开发工具包\",\".java的源文件 经过编译后生成.class的字节码文件 这个文件可以被JVM读取 是一种二进制文件\",\"通过javac命令对java文件进行编译 通过java命令对class文件进行运行\",\"源程序(.java)——>编译器(javac)——>字节码(.class)——>JVM——>机器码\",\"即是解释性语言又是编译型语言 先编译 后解释\",\"UNicode编码 万国码\",\"c语言ASCCII码 1字节Byte=8bit\",\"在cmd命令中改变编码格式 javac -encoding utf8 Text.java\"]},\"107\":{\"h\":\"java的注释\",\"t\":[\"//java的注释语法 ctrl+/快捷键注释注释当前行 取消注释一样 /*java的另一种注释语法*/ ctrl+shit+/注释 ctrl+shit+\\\\取消注释 /**java特有的文档注释 快捷键 先敲出/**然后回车 @author 作者名字 @version v1版本号 */\"]},\"108\":{\"h\":\"java的输出:\",\"t\":[\"Alt+/ 弹出相关类或方法名称，选择想要的，所以不必记住全名，而System.out.println()的快捷键是\\\" sysout+Alt+/ \\\" 格式化输出保留两位小数 System.out.printf(\\\"f=%.2f\\\",f);\",\"public class text { public static void main(String[] args) { // TODO 自动生成的方法存根 System.out.print(\\\"nihao\\\");//println自带换行 int a=10; System.out.printf(\\\"x=%d\\\",a);//printf格式化输出 } } /*如果格式化输出错误 在项目 属性 java编辑器 配置工作空间设置 检查编辑器一致性是否为1.7 */\"]},\"109\":{\"h\":\"java的输入：\",\"t\":[\"import java.util.Scanner; public class text { public static void main(String[] args) { // TODO 自动生成的方法存根 Scanner scanner = new Scanner(System.in); int number = scanner.nextInt(); //scanner.nex;读取字符串 nextInt读取整数 //next读取直到空格 nextLine读取到换行符 //nextDoule读取浮点数 //hasNextInt检查输入的是不是整数 返回false/true //可以用来判断输入是否正确加个if语句 //hasNext hasNextDouble System.out.println(number); scanner.close();//关闭Scanner对象 } }\"]},\"110\":{\"h\":\"java的命名规则\",\"t\":[\"字母数字下划线开头 不能以数字开头 不能占用java的关键字和保留字.在java中严格区分大小写 多了一个$\",\"命名规则:\",\"包名 多单词组成所有单词用小写\",\"类名 ，接口名 多单词组成时所有单词首字母大写 大驼峰\",\"变量名，方法名 多单词组成时，第一个单词首字母小写，第二个单词开始首字母大写 （int myInt=12;） 小驼峰\",\"常量名 所有的字母都大写 多单词时每个单词用下划线连接\",\"😎只是规范 你也可以不遵守\"]},\"111\":{\"h\":\"java的数据类型\"},\"112\":{\"h\":\"基本数据类型：\",\"t\":[\"对于整数来说默认类型是int 对于浮点数来说默认是double\",\"java对于局部变量（可以理解为main里面的）来说必须手动赋值，而成员变量（main外边 class里面的）会自动赋默认值\",\"整数类型:\",\"byte(8位有符号整数 -128~127) 一字节\",\"short(16位有符号整数 -32768~32767) 两字节\",\"long型要在后面加L 8字节(加L是因为默认的是int类型)\",\"int(32位有符号整数) long(64位有符号整数) 4字节\",\"String 字符串\",\"int a=10;//十进制表示 int a=0b101;//0b/0B二进制表示 int a=012;//0八进制表示 int a=0x1f;//0x/0X表示十六进制\",\"浮点类型：float double float类型要在后面加F 因为默认的类型是double\",\"double x=0.123E2;//0.123*10的平方 可以进行科学计数法 //flaot a=3.3;这样就是错误的 因为默认是double\",\"浮点型无法精确存储的 一旦有浮点型参与运算得出的结果一定不要==比较\",\"double x=6.9; double y=3.0; double z=x/y;//这个结果是2.3000000000000003如果进行比较可以做差看误差大小\",\"字符类型; char 可以存储一个汉字 两字节\",\"布尔类型： boolean 只有两个可能的值 true false\",\"类型\",\"所占字节\",\"范围\",\"byte\",\"1字节=8bit\",\"-128~127(27)\",\"short\",\"2字节\",\"-215~215-1\",\"int\",\"4字节\",\"-231~231-1\",\"long\",\"8字节\",\"-263~263-1\",\"char\",\"2个字节\",\"0~65535\",\" byte num = 127; //byte -128 -127 for(int i=0;i<3;i++){ System.out.println(num); //结果分别为 //127 -128 127 num++;//越界了，回到负数下线那里 } }\"]},\"113\":{\"h\":\"引用数据类型:\",\"t\":[\"类(class) 接口(Interface) 数组(Arrary) 枚举等\",\"String是引用数据类型 可以用来存放字符串 并且提供了大量的方法来操作字符串\"]},\"114\":{\"h\":\"强制数据类型转换\",\"t\":[\"char,byte,short类型相互转化时（+）会自动转化为int类型\",\" short s1=2; //s1=s1+1;会报错 s1+=1;//不会报错 有特殊处理\",\"char,byte,short ——>int——>long——>float——>double\",\"对于字符串String的转化（+）只会转化为字符串\",\"String a = \\\"nihao\\\"; int b = 6; char c = 'a'; System.out.println(b+c+a);//打印出的结果是103nihao\",\"强制类型转换：java大容量无法直接转化为小容量 程序员必须手动加上强制类型转化符\",\"byte b=(byte)150;//这个结果是-106 因为砍掉了前三个（int）多出的字节 1字节=8bit byte是一字节八位的\",\"在java中，多种数据混合运算时，各自先转换成容量最大的类型，再做运算\",\"byte x=10/3;//不会报错因为直接得出了结果 int a=10; int b=3; byte=a/b;//会报错 因为编译器智能检测到结果时int类型 不 不能直接复制给byte类型变量 所以可以强制类型转换\",\"a对应的ASCII码97 A对应的ASII码65 0对应48\",\"编码是将字符转换为二进制数据的过程，解码是将二进制数据转换为字符的过程\",\"Java中的字符char 和字符串String都是采用Unicode编码 字符对应了Unicode码值\",\"常量(const)\",\"最终常量final 在类型前面加上final后这个变量的值就不能修改了\",\"当一个常数或字符串我们需要在程序里反复反复使用的时候，我们就可以把它定义为static final，这样内存就不用重复的申请和释放空间。\"]},\"115\":{\"h\":\"运算符：\"},\"116\":{\"h\":\"位运算符:\",\"t\":[\"与或非 异或（相同为0 不相同为1） 取反\",\" System.out.println(12 & 5);//4 //0000 1100(12) //0000 0101(5) 得出 0000 0100 就是4 System.out.println(12 | 5);//3 System.out.println(12 ^ 5);//9 //得出 0000 1001 就是9 System.out.println( ~ 12);//-13 //1111 1010\",\"交换两个数字的值\",\"int m=12; int n=5; m=m^n; n=m^n;// m=m^n;\",\"<<左移几位就相当于乘以2的几次方\",\"转化为二进制数字进行左移或者右移 缺的位数用0补\",\"3<<4; 相当于3乘以2的四次方 0000 0000 0000 0011 变成 0000 0000 0001 10000就是16+32=48 int是4字节32位的 69>>4;相当于69除以2的四次方 这里为了举例并未完全列出来 不要把里面存在的1也给移走了\",\"右移包括无符号右移\",\">>右移 看最高位是几 是0就补0 是1就补1\",\">>> 无符号右移 最高位都补0 这样负数补完以后就会变成正数\"]},\"117\":{\"h\":\"自增自减运算符\",\"t\":[\"前++：先自增1 后做运算谁在前先干嘛\",\"后++:先做运算 后自增\",\" short a=0; a=a+1;//这个会报错 a++; short s = 10; s+=1;//既可以实现运算又不会更改s的数据类型\",\" int x=0,y=1; if(++x==y-- & x++==1||--y==0) System.out.println(\\\"x=\\\"+x+\\\",y=\\\"+y);//y的结果为啥是0\",\" int num1=10; int num=num1++; System.out.println(num1);//11 System.out.println(num);//10 int num2=10; int n=++num2; System.out.println(num2);//11 System.out.println(n);//11\",\"除/ 整数除整数还是整数 小数部分舍弃\",\"%取余数 如果对负数取余数呢？？？👀结果的符号取决于被模数（前面的那个数字）\"]},\"118\":{\"h\":\"逻辑运算符\",\"t\":[\"& 与 && 的区别：\",\"& 不管左边是true还是false 右端都会进行运算\",\"&& 当左端为false时右端不再进行运算\",\"| 与 || 区别\",\"| 当左端为true时右端照样做运算\",\"|| 当左端为true时，右端不再进行运算\"]},\"119\":{\"h\":\"三元运算符\",\"t\":[\"在一定程度上可以与if else互换\",\"int a=9; int b=10; int c=b>a?b:a; String str = a>b?\\\"a大\\\":\\\"b大\\\";//后面那两个类型必须一致 System.out.println(str); System.out.println(c);\"]},\"120\":{\"h\":\"转义字符\",\"t\":[\"dev那个黑色输出框，宽度80列，每八列是一组\",\"\\\\t跳过了几列?跳过当前这一组\",\"printf(\\\"a\\\\t123\\\")结果是a后面8-1 7个空格\",\"\\\\n\",\"\\\\r\",\"跳回本行行首 (只有c语言这样)\",\"在java python中跟\\\\n 效果一样 在java中 %%转义为%\"]},\"121\":{\"h\":\"程序流程控制\",\"t\":[\"swithcase语句\",\"if-else语句\",\"java不是靠缩进的\",\" int m=0,n=3; if(m>0) if(n>2) System.out.println(\\\"a\\\"); else System.out.println(\\\"b\\\");//结果啥也没有\",\"从最后面的else往上开始找\",\"while循环和for循环可以相互转换\",\"for循环 先执行第一步然后第三步最后第二步\",\" int i = 0; for (printf(\\\"第一步\\\\n\\\"); i < 3; printf(\\\"第二步\\\\n\\\")) { printf(\\\"第三步 %d\\\\n\\\", i++); }\",\"/* i j k * 0 1 3 * * 1 2 2 * * * 2 3 1 * * * * 3 4 0 i j k * * * 0 3 1 * * 1 2 2 * 2 1 3 */ for(int i=0;i<4;i++){ for(int k=0;k<3-i;k++){ System.out.print(\\\" \\\"); }//打印一行的空格 for(int j=0;j<i+1;j++){ System.out.print(\\\"* \\\"); }//外循环行 内循环行里面的内容 System.out.println(); } for(int i=0;i<3;i++){ for(int k=0;k<i+1;k++){ System.out.print(\\\" \\\"); }//打印空格 for(int j=0;j<3-i;j++){ System.out.print(\\\"* \\\"); } System.out.println(); }\"]},\"122\":{\"h\":\"跳出循环\",\"t\":[\"break 使用在switch-case中或者循环中 如果使用在循环中，表示，结束“当前循环”就是离的最近的一个for循环\",\"continue 使用在循环结构中 表示，结束“当次循环”\",\"标签laber\",\" laber:for(int i=1;i<5;i++){ for(int j=1;j<=10;j++){ if(j%4 == 0){ //break laber;//结束laber标签所在的那个循环 结果为123 continue laber;//跳出laber那个标签所在的那个循环 } System.out.print(j); } System.out.println(); }\"]},\"123\":{\"h\":\"数组\"},\"124\":{\"h\":\"三种定义数组的方法\",\"t\":[\"String[] names; int scores[];\",\"静态初始化 初始化数组与给数组赋值同时进行\",\"names = new String[]{\\\"张三\\\",\\\"李四\\\",\\\"王五\\\"}\",\"动态初始化 初始化数组与给数组赋值分开进行\",\"scores = new int[2];\",\"scores[0] = 87;\",\"score[1] = 89\",\" //String[] arr = new String[]{\\\"ni\\\",\\\"hao\\\"}; //String[] arr ={\\\"ni\\\",\\\"hao\\\"}; String[] arr=new String[2]; arr[0]=\\\"ni\\\"; arr[1]=\\\"hao\\\";\",\"数组的长度\",\"//对于一维数组 int[] num = new int[]{2,3,4}; System.out.print(num.length);//结果是3 //对于二维数组 int[][] n= new int[][]{{2},{3,4,5},{6,6,6}}; System.out.println(n.length);//3 打印的是行数 初始化化是一定要给行数 System.out.println(n[0].length+\\\" \\\"+n[1].length+\\\" \\\"+n[2].length);//1 3 3\",\"数组的默认类型\",\"int 默认是0\",\"float double 默认是0.0\",\"char 默认为空格\",\"boolean 默认是false\",\"引用数据类型默认是null(如String)\"]},\"125\":{\"h\":\"算法：将二位数组的行列颠倒\",\"t\":[\" int temp=0; for(int i=0;i<3;i++){ for(int j=i;j<3;j++){ temp=arr[i][j]; arr[i][j]=arr[j][i]; arr[j][i]=temp; } }\",\"内存的基本结构\",\"栈static 存放局部变量，对象的引用\",\"堆heap new出来的东西\",\"方法区 常量池\",\"静态域\"]},\"126\":{\"h\":\"数组的排序\",\"t\":[\"java中有集成好的排序\",\"先导入import java.util.Arrays;\",\"Arrays.sort(arr)//传入arr数组进行排序\",\"冒泡排序\",\"int[] arr = new int[]{5,4,11,7,3,23,34,6}; for(int i=0;i<arr.length - 1;i++){//8个数比较7次 for(int j=0;j<arr.length-1-i;j++){ if(arr[j]>arr[j+1]){ int temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; } } }\",\"冒泡排序的优化\",\"//优化思路 设置一个哨兵 如果提前排序好了就不需要进行后面的比较 for(int i=0;i<arr.length-1;i++){ boolean flag=true; for(int j=0;j<arr.length-1-i;j++){ if(arr[j]>arr[j+1]){ int temp=arr[j]; arr[j]=arr[j+1]; arr[j+1]=temp; flag=false; } } if(flag){ System.out.println(\\\"跳出循环\\\"); break; } }\",\"直接选择排序\",\" for(int i=0;i<arr.length - 1;i++){ for(int j = i+1;j < arr.length;j++){//这里i有跟j相等的时候所以不能-1 +1是因为相等的不用比较 if(arr[i] > arr[j]){ int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } } //第一轮挑出来一个最小的 //第二轮再挑出来一个最小的 以此类推\",\"直接选择排序的优化\",\" for(int i=0;i<arr.length - 1;i++){ int t=i;//默认i是最小的 for(int j = i;j < arr.length;j++){ //一旦在i后发现存在比其小的元素，就记录那个元素的下角标 if(arr[t] > arr[j]){ t = j; } } if(t != i){ int temp = arr[t]; arr[t] = arr[i]; arr[i] = temp; } }\",\"属性 对应类中的成员变量\",\"行为 对应类中的成员方法\",\"类比作汽车设计图，对象就是是实实在在的汽车\",\"每个编译单元（文件）都只能有一个public类，这表示，每个编译单元都有单一的公共接口，用public类来表现。该接口可以按要求包含众多的支持包访问权限的类。如果在某个编译单元内有一个以上的public类，编译器就会给出错误信息。\",\"如何使用呢 1.导包\",\"import 包名称.类名称\",\"对于和当前类属于同一个包的情况，可以省略导包语句不写 2.创建，格式\",\"类名称 对象名 = new 类名称();\",\"使用\",\"使用成员变量 对象名.成员变量\",\"使用成员方法 对象名.成员方法名(参数)\"]},\"127\":{\"h\":\"构造方法(构造器)\",\"t\":[\"不能被重写\",\"构造方法的名称必须和所在类名称完一样\",\"构造方法不要写返回值类型，void的都不写\",\"构造方法不能return一个具体的返回值\",\"如果没有写任何构造函数，那么编译器将会默认赠送一个构造方法\",\"一旦编写了至少一个构造方法，编译器将不再赠送\",\"类的多个构造器之间构成重载 特点\",\"跟类同名 构造方法的权限修饰符跟所属类的修饰符一致\",\"public class cla { private String name; private int age; public cla(){//如果注释，就会执行下面的，不传参数会报错 System.out.println(\\\"无参数构造方法执行\\\"); } public cla(String name,int age){ this.name=name; this.age=age; System.out.println(\\\"有参构造方法执行\\\"); } public void setname(String name){ this.name=name; } public void setage(int age){ this.age=age; } public void print(){ System.out.println(name+\\\" \\\"+ age); } }\"]},\"128\":{\"h\":\"this关键字\",\"t\":[\"this.成员变量名\",\"谁调用的this，谁就是this 打印出来this和person地址相同\",\"在本类的成员方法中，访问本类的成员变量\",\"在本类的成员方法中，访问本类的另一个成员方法。\",\"在本类的构造方法中，访问本类的另一个构造方法。 \",\"在第三种用法要注意 A.this(...)调用也必须时构造方法时的第一个语句，唯一一个 B.super和this两种构造调用，不能同时使用\"]},\"129\":{\"h\":\"super关键字\",\"t\":[\"super关键字用来访问父类内容，而this关键字用来访问本类内容 三种用法 \",\"在子类的成员方法中，访问父类的成员变量。\",\"在子类的构造方法中，访问父类的成员方法。\",\"在子类的构造方法中，访问父类的构造方法\"]},\"130\":{\"h\":\"static关键字\",\"t\":[\"static 静态的，可以用来修饰属性，方法，*代码块(或初始化块)，*内部类\",\"static修饰属性（类变量）\",\"由类创建的所有对象，都共用这一个属性\",\"当其中一个对象对此属性进行修改，会导致其他对象对此属性的一个调用。vs 实例变量（非static修饰的属性，各个对象各自拥有一套副本）\",\"类变量随着类的加载而加载的，而且独一份\",\"静态的变量可以直接通过“类.类变量”的形式来调用（不是静态，要申请对象再.）\",\"类变量的加载要早于对象，所以当有对象以后，可以“对象.类变量”使用，但是“类.实例对象“是不行的\",\"类变量存在于静态域中。\",\"java中所有的类都继承了object类，在使用时可以将其重写，从而打印出类中的属性\",\"public class TextSportMan { public static void main(String[] args) { SportMan s1 = new SportMan(\\\"一号\\\", 23); SportMan s2 = new SportMan(\\\"二号\\\", 21); s1.name = \\\"花花\\\"; s1.nation = \\\"china\\\"; System.out.println(s1); System.out.println(s2); System.out.println(SportMan.nation); } } class SportMan{ //实例变量(随着对象的创建而被加载的) String name; int age; //类变量 static String nation;//共用 public SportMan(String name, int age) { super(); this.name = name; this.age = age; } public String toString() { return \\\"SportMan [name=\\\" + name + \\\", age=\\\" + age + \\\", nation=\\\" + nation + \\\"]\\\"; } }\",\"static 修饰方法（类方法）\",\"随着类的加载而加载，在内存中也是独一份\",\"可以直接通过\\\"类.类方法\\\"的方式调用\",\"内部可以调用静态的属性或静态的方法，而不能调用非静态的属性或方法。反之，非静态的方法可以调用静态的属性和方法。\",\"静态的方法内不可以有super和this关键字\",\"注：静态的结构（static的属性，方法，代码块，内部类）的生命周期要早于非静态的结构，同时被回收也要晚于非静态的结构。\",\"static的使用 不依赖于具体的对象，就可以设置成static 比如银行的最小存款数 不会发生改变 就可以设置为静态的\",\"使用静态的变量可以实现累加的效果，因为静态的变量在内存中独一份\",\"public class text { public static void main(String[] args) { Circle c1 = new Circle(2.0); Circle c2 = new Circle(2.1); System.out.println(Circle.getTotal()); Circle.show(); c1.setInfo(\\\"我是一个漂亮的圆\\\"); Circle.show(); } } class Circle{ private double radius; private static String info = \\\"我是一个圆\\\"; private static int total = 0;//因为total是static的，在内存中独一份，所以可以用来记录创建的对象的个数 public Circle(double radius){ this.radius = radius; total++; } public double getRadius(double rasius){ return rasius; } public void setRadius(double radius){ this.radius = radius; } public static String getInfo(){ return info; } public static void setInfo(String info){ Circle.info = info; } public static int getTotal(){ return total; } public static void show(){ System.out.println(info); } public String toString() { return \\\"Circle [radius=\\\" + radius + \\\"]\\\"; } }\"]},\"131\":{\"h\":\"final关键字\",\"t\":[\"在java中声明类，属性和方法时，可用关键字final来修饰，表示最终\",\"final修饰类，这个类就不能被继承，如String类，StringBuffer类，System类\",\"final修饰方法，不能被重写\",\"final修饰属性，此属性就是一个常量，一旦初始化后就不可再赋值，习惯上，常量用大写字符表示。\",\"此常量在哪里赋值（未直接初始化），①此常量不能使用默认初始化②可以是显式的赋值，代码块，构造器\",\"变量用static final修饰，全局变量\",\"当一个常数或字符串我们需要在程序里反复反复使用的时候，我们就可以把它定义为static final，这样内存就不用重复的申请和释放空间。\"]},\"132\":{\"h\":\"初始化块（代码块）\",\"t\":[\"格式为 { }\",\"代码块如果有修饰的话，那么只能用static\",\"分类 静态代码块 static{}\",\"可以有输出语句\",\"随着类的加载而加载，而且只被加载一次\",\"多个静态代码块之间按照顺序结构执行\",\"静态代码块的执行要早于非静态代码块的执行\",\"静态的代码块当中只能执行静态的结构（类属性，类方法）\",\"非静态代码块\",\"可以对类的属性（静态的非静态的都可以）进行初始化操作，同时也可以调用本类声明的方法（静态非静态都可以）\",\"里面可以有输出语句\",\"一个类中可以有多个非静态的代码块，多个代码块之间按照顺序结构执行\",\"每创建一个类的对象，非静态代码块就加载一次\",\"非静态代码块的执行要早于构造器\",\"关于属性赋值的操作，1.默认的初始化，2.显式的初始化或代码块初始化（此处两个结构按照顺序执行），3.构造器中，4.通过方法对对象的相应属性进行修改\"]},\"133\":{\"h\":\"重载\",\"t\":[\"方法的重载\",\"同一个类中，\",\"方法名必须相同\",\"方法的参数列表不同 \",\"参数的个数不同 参数的类型不同\",\"✨\"]},\"134\":{\"h\":\"面向对象的特征\",\"t\":[\"三大特征\",\"封装\",\"继承\",\"多态\"]},\"135\":{\"h\":\"封装和隐藏\",\"t\":[\"给属性赋值的时候加上一些限制，比如腿的个数不能为负数 这时候就可以加上封装隐藏来实现\",\"当创建了类的对象以后，如果直接通过“对像.属性”的方式对相应的对象赋值的话，可能会出现不满足实际情况的意外，我们考虑不让对象直接作用属性，而是通过“对象.方法”的形式，来控制对象对属性的访问，实际情况中，对属性的要求就可以通过方法来实现。\",\"private 私有化 修饰的属性只能在类中调用，可以通过方法赋值\",\"（1）.将类的属性私有化。（2）.提供公共的方法（setter&getter）来实现调用。 子类不能覆盖声明为private的方法\",\"权限修饰符，可以用来修饰属性，方法。\",\"访问控制符\",\"类内部\",\"同一个包\",\"不同包的子类\",\"同一个工程\",\"private\",\"yes\",\"default\",\"yes\",\"yes\",\"protected\",\"yes\",\"yes\",\"yes\",\"public\",\"yes\",\"yes\",\"yes\",\"yes\",\"public class demotext1 { public static void main(String[] args) { People people = new People(); people.print(); people.setage(-10); people.setname(\\\"张三\\\"); people.print(); } } class People{ private String name; private int age; public String getname(){ return this.name; } public int getage(){ return this.age; } public void setname(String name){ this.name = name; } public void setage(int age){ if(age > 0 && age < 100) this.age = age;//加个if语句来限制输入的条件 else throw new RuntimeException(\\\"您输入的数据有误！\\\");//报错时会提示这个 } public void print(){ System.out.println(\\\"name \\\"+name+\\\", age \\\"+age); } }\"]},\"136\":{\"h\":\"继承\",\"t\":[\"定义子类格式\",\"public class 子类名称 extends 父类名称{ }\",\"继承关系中，父子类构造方法的特点\",\"子类构造方法当中有一个默认隐含的\\\"super()\\\"调用，所以一定是先调用父类构造，后执行子类构造\",\"子类构造可以通过super()关键字来调用父类重载构造\",\"super父类构造调用，必须是子类构造方法第一个语句，不能一个子类构造调用多个super构造\",\"总结 子类必须调用父类的构造方法，不写则赠送super(),写了则用指定的super调用，super只能有一个，还必须是第一个。\"]},\"137\":{\"h\":\"方法的覆盖重写\",\"t\":[\"重写（Override）方法名称一样，参数列表也一样 重载(Overload)方法的名称一样，参数列表不一样\",\"方法覆盖重写特点，创建的是子类对象，则优先用子类方法\",\"@Override写在方法前面，用来检测是不是有效的正确覆盖重写 就算不写，只要满足要求，也是可以的\",\"子类方法的返回值必须小于等于父类方法的返回值范围 提示 java.long.Object类是所有类的公共最高类，java.long.String就是Object的子类 父类用Object子类也可以用Object和String，但反过来不行\",\"子类方法的权限必须大于等于父类方法的权限修饰符\",\"静态只能覆盖静态\",\"尽量不要修改老的类，可以用super继承，然后重写\"]},\"138\":{\"h\":\"抽象类abstract class\",\"t\":[\"随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。 类的设计应该保证父类和子类能够共享特征。有时将一个父类设计的非常抽象，以至于 它没有具体的实例，这样的类叫做抽象类。\",\"eg: 人可以说话，说话的内容由工人或学生决定 abstract:抽象的，可以用来修饰类，方法 abstract不能用来修饰属性，构造器，private,final,static\",\"abstract修饰类，抽象类 ①不可被实例化 ②抽象类有构造器（凡是类都有构造器） ③抽象方法所在的类一定是抽象类 ④抽象类中可以没有抽象方法\",\"abstract修饰方法，抽象方法 ①格式，没有方法体，包括{}，如public abstract void eat(); ②抽象方法只保留方法的功能，而具体的执行，交给继承抽象类的子类，由子类重写此抽象方法。 ③若子类继承抽象类并重写了所有的抽象方法，则此类是一个“实体类”，即可以实例化 ④若子类继承抽象类，没有重写所有抽象方法，意味着此类中仍有抽象方法，则此类必须声明为抽象的 抽象类是用来实现模型化那些父类无法确定全部实现，而是由其子类提供具体实现方法的对象的类。\",\"抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展， 改造，但子类总体上会保留抽象类的行为方式 解决的问题 当功能内部一部分实现是确定，一部分实现是不确定的，这时就可以把不确定的部分暴露出去，让子类去实现。 编写一个抽象父类，父类提供了多个子类的通用方法，并把一个或多个方法留给其子类实现，就是一种模板模式\",\"package com.wzy.Text; public class Text { public static void main(String[] args) { new SubTemplat().spendTime(); } } abstract class Template { public abstract void code(); public void spendTime() { long start = System.currentTimeMillis(); code(); long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间是\\\" + (end - start)); } } class SubTemplat extends Template{ public void code() { boolean flag = false; for(int i = 2;i <= 100000;i++) { for(int j = 2;j <= Math.sqrt(i);j++) { if(i % j ==0) { flag = true; break; } } if(!flag) { System.out.println(i); } flag = false; } } }\"]},\"139\":{\"h\":\"接口\",\"t\":[\"接口就是一种公共的规范标准， 只要符合规范标准，就可以大家通用。 接口是一种引用数据类型，最重要的内容就是其中的抽象方法。 为什么要引入接口这个概念呢(跟抽象类具体有什么区别)\",\"java中不允许多重继承，但使用接口就可以实现多重继承\",\"public interface 接口名称P{ //接口内容 }\",\"如果是java7，那么接口中可以包含的内容有：\",\"常量\",\"抽象方法\",\"如果是java8，还可以额外包括有： 3. 默认方法 4. 静态方法\",\"如果是java9，还可以额外包括 5. 私有方法\",\"注意事项：\",\"接口当中的抽象方法，修饰符必须是两个固定的关键字，public abstract\",\"这两个关键字修饰符，可以选择性地忽略。\",\"方法的三要素，可以随意定义。（方法名、参数列表、返回值。）\",\"接口使用步骤：\",\"接口不能直接使用，必须有一个“实现类”来“实现”该接口（不能直接new接口对象使用）(可以使用匿名内部类) 格式 : implements 执行，装备\",\"public class 实现类名称 implements 接口名称{ //... }\",\"接口的实现类必须覆盖重写（实现）接口中所有的抽象方法 实现，去掉abstract关键字，加上方法体大括号\",\"创建实现类的对象，进行使用\",\"注意事项 如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类 接口中没有构造器，接口可以继承接口\"]},\"140\":{\"h\":\"默认方法\",\"t\":[\"从java8开始，接口允许定义默认方法。 格式\",\"public default 返回值类型 方法名称（参数列表）{ }\",\"①接口的默认方法，可以通过接口实现类对象，直接调用 ②接口的默认方法，也可以被接口实现类进行覆盖重写 备注: 接口当中的默认方法，可以解决接口升级的问题 接口内添加抽象方法，而其他实现类不用重写 就可以新添一个默认方法\"]},\"141\":{\"h\":\"接口静态方法\",\"t\":[\"从java 开始，接口当中允许定义静态方法 格式：\",\"public staitic 返回值类型 方法名称（参数列表）{ }\",\"提示 就是将abstract或者的default换成static即可，带上方法体 注意事项 不能通过接口实现类的对象来调用接口当中的静态方法。 正确用法，通过接口名称，直接调用其中的静态方法。 格式 接口名称.静态方法名（参数）\"]},\"142\":{\"h\":\"默认方法私有化\",\"t\":[\"问题描述， 我们需要抽取一个公共方法，用来解决两个默认方法之间重复代码的问题， 但是这个共有方法不应该让实现类使用，应该是私有化的。 解决方案 从java9 开始，接口当中允许定义私有方法\",\"普通私有方法，解决多个默认方法之间重复代码问题 格式 private 返回值类型 方法名称（参数列表){方法体}\",\"静态私有方法，解决多个静态方法之间重复代码问题 格式 private static 返回值类型 方法名称(参数列表){方法体}\"]},\"143\":{\"h\":\"接口中的常量\",\"t\":[\"接口当中也可以定义“成员变量”但必须使用public static final 三个关键字进行修饰。 从效果上看，这其实就是接口的【常量】。 格式 public static final 数据类型 常量名称 = 数据值 备注： 一旦使用final关键字进行修饰，说明不可改变。 注意事项\",\"接口当中的常量，可以省略public static final，注意，不写也照样是这样。\",\"接口当中的常量，必须进行赋值，不能不赋值。\",\"接口当中常量的名称，使用完全大写的字母，用下划线进行分隔。（推荐命名规则）\"]},\"144\":{\"h\":\"接口总结\",\"t\":[\"成员变量其实是常量，格式 public static final 数据类型 常量名称 = 数据值 注意： 常量必须进行赋值，而且一旦赋值不能改变。 常量名称完全大写，用下划线进行分隔。\",\"接口中最重要的就是抽象方法，格式 public abstract 返回值类型 方法名称(参数列表); 注意： 实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类。\",\"从java8开始，接口允许定义默认方法，格式： public default 返回值类型 方法名称(参数列表){方法体} 注意：默认方法也可以被覆盖重写\",\"从java9 开始接口允许定义静态方法，格式： public static 返回值类型 方法名称(参数列表){方法体} 注意 应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法\",\"从java9开始，接口里允许定义私有方法，格式： 普通私有方法：private 返回值类型 方法名称(参数列表){方法体} 静态私有方法:private static 返回值类型 方法名称(参数列表){方法体} 注意;privated的方法只有接口自己才能调用，不能实现类或被别人使用。\"]},\"145\":{\"h\":\"多态\",\"t\":[\"继承或者接口实现类 面向对象三大特征：封装性，继承性，多态性 extends继承或者implements实现，是多态的前提。\",\"父类 人类 子类 学生 员工 小明是一个学生，同时也是一个人 小明是一个对象，这个对象既有学生形态，也有人类形态， 一个对象拥有多种形态，这就对象的多态性\",\"代码当中体现多态性，其实就是一句话：父类引用指向子类对象。 格式： 父类名称 对象名 = new 子类名称(); 或者 接口名称 对象名 = new 实现类名称();\",\"public class text2 { public static void main(String[] args) { fu obj = new zi(); obj.method(); obj.methodfu();//找不到就往上找 } } class fu{ public void method() { System.out.println(\\\"这是父类方法\\\"); } public void methodfu() { System.out.println(\\\"这是父类特有方法\\\"); } } class zi extends fu{ @Override public void method() { System.out.println(\\\"这是子类方法\\\"); } }\",\"访问成员变量的两种方式\",\"直接通过对象名称访问成员变量，看等号左边是谁，优先用谁，没有则向上找\",\"间接通过成员方法访问成员变量，看该方法属于谁，优先用谁，没有则向上找。\",\"在多态的代码当中成员方法的访问规则是\",\"看new的是谁，就优先用谁，没有则向上找。\",\"口诀：编译看左边，运行看右边。\",\"对比一下： 成员变量，编译看左边，运行还看左边。 直接调.成员变量用的是左边的通过成员方法访问成员变量，就近原则 成员方法，编译看左边，运行看右边。 编译时左边要有相应的方法，运行的时候运行的是右边的方法\",\"public class text2 { public static void main(String[] args) { fu obj = new zi();//多态 obj.method();//父子都有，优先用子 obj.methodfu();//子类没有，父类有向上找到父类 //编译看左，左边是fu，fu当中没有methodzi方法，所及编译器报错 // obj.methodzi();//错误写法 } } class fu{ int num = 10; public void showNum() { System.out.println(num); } public void method() { System.out.println(\\\"父类方法\\\"); } public void methodfu() { System.out.println(\\\"父类特有方法\\\"); } } class zi extends fu{ int num = 20; int age = 16; @Override public void showNum() { System.out.println(num); } @Override public void method() { System.out.println(\\\"子类方法\\\"); } public void methodzi() { System.out.println(\\\"这是子类特有方法\\\"); } }\",\"使用多态的好处 无论右边new的时候换成哪个子类对象，等号左边的调用方法都不会发生变化\"]},\"146\":{\"h\":\"对象转型\",\"t\":[\"①对象的向上转型 格式 父类名称 对象名 = new 子类名称(); 含义:右侧创建了一个子类对象，把它当作父类来看待使用 注意事项：向上转型一定是安全的，从小范围转向了大范围。\",\"不恰当的比喻：类似于强制类型转换 小范围可以转为大范围\",\"有弊端 对象一旦向上转型为父类，那么就无法调用子类原本特有的内容 （解决方案 用对象的向下转型（还原））\",\"②对象的向下转型 其实就是一个还原的动作 格式:子类名称 对象名 = （子类名称）父类对象 含义：将父类对象，【还原】成为本来的子类对象 注意事项：\",\"必须保证对象本来创建的时候，就是猫，才能向下转型成为猫\",\"如果对象创建的时候本来不是猫，现在非要向下转型成为猫，就会报错。\",\"但是你怎么知道父类的引用，本来是什么子类? 看下一节\",\"类似于：\",\"int num = (int)10.0;//可以 int num = (int)10,5;//会精度损失\",\"public class text2 { public static void main(String[] args) { //向上转型 Animal animal = new Cat(); animal.eat();//猫吃鱼 //animal.catchMouse(); 错误写法 //向下转型，进行“还原”动作 Cat cat =(Cat)animal; cat.catchMouse();//猫抓老鼠 //错误的向下转型 本来new的时候是一只猫，现在非要当狗 Dog dog = (Dog)animal;//错误写法，编译不会报错，但是运行会出现异常 //java.Lang.ClassCastException } } abstract class Animal{ public abstract void eat(); } class Cat extends Animal{ public void eat(){ System.out.println(\\\"猫吃鱼\\\"); } public void catchMouse() { System.out.println(\\\"猫抓老鼠\\\"); } } class Dog extends Animal{ public void eat() { System.out.println(\\\"小狗进食\\\"); } public void show() { System.out.println(\\\"汪汪汪\\\"); } }\",\"另一个向下转型的例子\",\"public class Text { public static void main(String[] args) { //向上转型 //向下转型 fu a = new zi(); a.method();//这是子类method a.methodfu();//父类特有方法 //如何调用子类的特有方法 zi b =(zi)a; b.methodzi();//子类特有方法 b.methodfu();//父类特有方法 b.method();//普通子类方法 } } class fu{ public void method(){ System.out.println(\\\"这是普通父类方法\\\"); } public void methodfu(){ System.out.println(\\\"这是父类特有方法!\\\"); } } class zi extends fu{ public void method(){ System.out.println(\\\"这是普通子类方法\\\"); } public void methodzi(){ System.out.println(\\\"这是子类特有方法\\\"); } }\"]},\"147\":{\"h\":\"用instanceof关键字进行类判断\",\"t\":[\"👏instanceof\",\"String c = \\\"hello\\\"; if(c instanceof String) System.out.println(\\\"这是true\\\");//结果会打印出来\",\"左边是对象右边是类 当对象是右边类或子类所创建对象时，返回true；否则，返回false。 判断左边对象是否是有右边类的实例 返回true或false\",\"if(animal instanceof Cat){ //注意instanceof左边如果是父类那他也会为真 ((Cat)animal).catchMouse(); }\",\"eg\",\"public class Text { public static void main(String[] args) { Computer computer = new Computer(); computer.powerOn(); //向上转型 多态 USB usbMouse = new Mouse(); computer.useDevice(usbMouse); //参数是usb类型，正好传进去的就是USB鼠标 KeyBoard keyboard = new KeyBoard();//没有使用多态 computer.useDevice(keyboard);//正确 //computer.useDevice(new keyboard());//也正确 computer.powerOff(); } } interface USB{ public abstract void open();//打开设备 public abstract void close();//关闭设备 } class Computer { public void powerOn() { System.out.println(\\\"笔记本开机\\\"); } public void powerOff() { System.out.println(\\\"笔记本关机\\\"); } public void useDevice(USB usb) { usb.open();//打开设备 if(usb instanceof Mouse) { Mouse mouse = (Mouse)usb;//向下转型 mouse.click(); }else if(usb instanceof KeyBoard) {//先判断 KeyBoard keyboard = (KeyBoard) usb;// keyboard.type(); } usb.close();//关闭设备 } } class Mouse implements USB{ @Override public void open() { System.out.println(\\\"打开鼠标\\\"); } public void close() { System.out.println(\\\"关闭鼠标\\\"); } public void click() { System.out.println(\\\"鼠标点击\\\"); } } class KeyBoard implements USB{ @Override public void open() { System.out.println(\\\"打开键盘\\\"); } public void close() { System.out.println(\\\"关闭键盘\\\"); } public void type() { System.out.println(\\\"键盘输入\\\"); } }\"]},\"148\":{\"h\":\"内部类\",\"t\":[\"如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类 例如，身体和心脏的关系，又如，汽车和发动机的关系 分类\",\"成员内部类\",\"局部内部类（包含匿名内部类） 匿名内部类用法多\"]},\"149\":{\"h\":\"成员内部类\",\"t\":[\"成员内部类的定义格式\",\"修饰符 class 外部类名称{ 修饰符 class 内部类名称{ } }\",\"注意：内用外，随意访问。外用内，需要内部类对象 外部类$内部类 这样的格式 abstract final 如何使用成员的内部类？有两种方式\",\"间接方式，在外部类的方法中，使用内部类，然后main只调用外部类的方法。\",\"直接方式，公式： 类名称 对象名 = new 类名称(); 外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();\",\"如果出现了重名现象，那么格式是 外部类名称.this.外部类成员变量名\",\"public class Text { public static void main(String[] args) { w.inside a = new w().new inside(); a.method(); w b = new W(); b.in(); } } class w{ int num=10; public class inside{ int num = 20; public void method(){ System.out.println(this.num);//20 System.out.println(w.this.num);//10 } } public void in(){ System.out.println(num);//10 } }\"]},\"150\":{\"h\":\"局部内部类\",\"t\":[\"如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。 “局部”：只有当前所属的方法才能使用它，出了这个方法外面就不能用了。\",\"定义格式：\",\"修饰符 class 外部类名称{ 修饰符 返回值类型 外部方法名称(参数列表){ class 局部内部类名称{ } } }\",\"小结一下类的权限修饰符 public > protected > (default) > private 定义一个类的时候，权限修饰符规则\",\"外部类：public /(default)\",\"成员内部类 public / default / private\",\"局部成员类 什么都不能写（不是default）\",\"局部内部类如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】 备注： 从java 8+开始，只要局部变量值不变，那么final关键字就可以省略。 （可以看作局部内部类copy了一份局部变量，所以这个变量值不能修改） 原因：\",\"new出来的对象在堆内存中\",\"局部变量是跟着方法走的，在栈内存中。\",\"方法运行结束之后，立刻出栈，局部变量就会立刻消失。\",\"但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。\",\"public class Text { public static void main(String[] args) { w t = new W(); t.method(); } } class w{ int num = 10; //num = 20;//这样会报错 public void method(){ class inclass{ public void prt(){ System.out.println(num); } } inclass text = new inclass();//还必须在类的下面？ text.prt(); } }\"]},\"151\":{\"h\":\"匿名内部类\",\"t\":[\"这一节很重要哟\",\"如果接口的实现类（或者是父类的子类）只需要使用唯一的一次。 那么这种情况下就可以省略该类的定义，而改为使用【匿名内部类】\",\"匿名内部类的定义格式： 接口名称 对象名 = new 接口名称(){ //覆盖重写所有抽象方法 };\",\"public class Text { public static void main(String[] args) { //Myinterfaceimpl obj = new Myinterfaceimpl(); //obj.method(); Myinterface obj = new Myinterface() { public void method(){ System.out.println(\\\"这是匿名内部类。\\\"); } }; obj.method();//会打印出这是匿名内部类 //这时下面实现类就可以删除了 } } interface Myinterface{ public abstract void method(); } class Myinterfaceimpl implements Myinterface{ @Override public void method(){ System.out.println(\\\"接口实现类\\\"); } }\",\"匿名内部类注意事项 对格式\\\"new 接口名称(){....}\\\"进行解析\",\"new代表创建对象的动作\",\"接口名称就是匿名内部类需要实现哪个接口\",\"{....}这才是匿名内部类的内容\",\"另外还需要注意的几点问题\",\"匿名内部类，在【创建对象】的时候，只能使用唯一一次。 如果希望多次创建对象，而且类的内容一样的话，那么就必须使用单独定义的实现类了\",\"匿名对象，在【调用方法】的时候，只能调用唯一一次。 如果希望同一个对象，调用多次方法，那么必须给对象起个名字。\",\"匿名内部类是省略了【实现类/子类名称】但是匿名对象省略了【对象名称】 强调,匿名内部类和匿名对象不是一回事！！！\",\"public class Text { public static void main(String[] args) { //使用了匿名内部类，而且省略了对象名称，也是匿名对象 new Myinterface() { @Override public void method1(){ System.out.println(\\\"这是匿名内部类A。\\\"); } @Override public void method2(){ System.out.println(\\\"这是匿名内部类B。\\\"); } }.method1(); } } interface Myinterface{ public abstract void method1(); public abstract void method2(); }\"]},\"152\":{\"h\":\"java异常处理\",\"t\":[\"异常分为两类\",\"error\",\"java虚拟机无法解决的严重问题。如JVM系统内部错误，资源耗尽等严重情况，一般不编写针对性的代码处理 eg 数组下标越界异常 空指针异常 算数异常1/0\",\"Exception\",\"其他因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码处理。\",\"例如\",\"空指针访问\",\"试图读取不存在的文件\",\"网络连接中断\",\"java.lang.Throwable\",\"Error:错误，程序中断不进行处理\",\"Exception:异常，要求在编写程序时，就要考虑到对这些异常的处理\",\"编译时异常，在编译期间会出现的异常（编译javac.exe命令时，出现异常）\",\"运行时异常，在运行期间会出现的异常（执行java.exe命令时，出现异常）（空指针异常）\"]},\"153\":{\"h\":\"如何处理异常Exception\",\"t\":[\"java提供的是异常处理的抓抛模型\",\"“抛”，当我们执行代码时，一旦出现异常，就会在异常的代码处生成一个对应的异常类型的对象，并将此对象抛出。（自动抛出/手动抛出）\",\"一旦抛出此异常类的对象，那么程序就终止执行\",\"此异常类的对象抛给方法的调用者\",\"“抓”，抓住上一步抛出来的异常类的对象，如何抓？即为异常处理方式\",\"java提供了两种方式来处理异常类的对象。\"]},\"154\":{\"h\":\"处理的方式一：\",\"t\":[\"try{ //可能出现异常的代码 }catch(Exception1 e1){ //处理的方式一 }catch(Exception2 e2){ //处理的方式二 }finally{ //可选，一定要执行的代码 }\",\"注：\",\"try内声明的变量，类似于局部变量，出现了try{}语句，就不能被调用\",\"finally是可选的.。\",\"catch语句内部是对异常对象的处理\",\"getMessage();printStackTrace();\",\"可以有多个catch语句，try中抛出的异常类对象从上往下去匹配catch中的异常类的类型，一旦满足就执行catch中的代码。执行完，就跳出其后的多余catch语句\",\"如果异常处理了，那么其后的代码的代码继续执行\",\"若catch中多个异常类型是“并列”关系，谁上谁下都可以。 但是若catch中多个异常类型是“包含”关系，须将子类放在父类的上面，进行处理，否则报错\",\"finally中存放的是一定会被执行的代码，不管try中是否仍有异常未被处理，以及是否有return语句 。 try中有return语句也会执行finally（eg:关闭文件那个代码）\",\"try-catch是可以嵌套的。\",\"对于运行时异常来说，可以不显式的进行处理。 对于编译时异常来说，必须要显示的进行处理\",\"eg:\",\"import java.util.InputMismatchException; import java.util.Scanner; public class Text { public static void main(String[] args) { Scanner in = new Scanner(System.in); try{ int num = in.nextInt(); System.out.println(num); }catch(InputMismatchException e){ System.out.println(\\\"出现类型不匹配的异常了！\\\"); System.out.println(e.getMessage());//也可以去掉用自己的方法 } } }\"]},\"155\":{\"h\":\"处理方式二\",\"t\":[\"声明抛出异常时java中处理异常的第二种方式 在方法的声明处，显式的抛出该异常对象的类型\",\"格式： public void method() throws FileNotFoundException,IoException{} throws后面也可以是Exception对异常进行统一处理\",\"当在此方法内部出现异常的时候，就会抛出一个异常类的对象，献给方法的调用者。\",\"异常的对象可以逐层向上抛，直至main中，当然在向上抛的过程中可以通过try-catch-finally进行处理\",\"java的异常处理，抓抛模式\",\"抓，异常的处理，有两种方式（①try-catch-finally②throws + 异常的类型）\",\"抛，一旦执行过程中，出现异常， 会抛出一个异常类的对象（自动的抛出 vs 手动的抛出（throw + 异常类的对象））\",\"异常类，既可以是现成的，又可以是手动创建的\",\"throw new RuntimeException(\\\"传入的类型错误\\\"); //去掉Runtime会报错，编译时就要解决，\",\"抛出的异常类型若是RuntimeException，可以不显式的处理 若是一个Exception，必须要显式的处理。 如何自定义一个异常类\",\"自定义的异常类继承现有的异常类\",\"提供一个序列号，提供几个重载的构造器\",\"public class Text { public static void main(String[] args) { throw new MyException(\\\"传入的类型有误！\\\"); } } class MyException extends RuntimeException{ static final long serialVersionUID = -1234567l; public MyException(){ } public MyException(String message){ super(message); } }\",\"子类重写的父类方法，其抛出的异常类型只能是被重写的方法的异常类的子类或者异常类型一样\",\"public class Text { public static void main(String[] args) { A a = new B(); try{ a.method1();//编译看左,但是运行的时候看的是右边 }catch(IOException e){//所以A中抛出的类型一一定要大于B类抛出的类型 e.printStackTrace(); } } } class A{ public void method1() throws IOException{ } } class B extends A{ @Override public void method1() throws FileNotFoundException{ } }\"]},\"156\":{\"h\":\"了解一下\"},\"157\":{\"h\":\"Math\",\"t\":[\"java.lang.Math提供了一系列静态方法用于科学计算，其方法的参数和返回值类型一般为double型\"]},\"158\":{\"h\":\"Biglnteger类\",\"t\":[\"java.math.BigDecimal integer类作为int的包装类，能存储的最大整型值为$2^{31}$-1,支持任意精度的整数\"]},\"159\":{\"h\":\"以下比较常用\"},\"160\":{\"h\":\"Random类\",\"t\":[\"导包import java.util.Random\",\"创建 Random r = new Random();\",\"使用获取一个随机的int数字(范围是int的所有范围，有正负两种),int num = r.nextInt(); 获取一个随机的int数字（参数代表了了范围，左闭右开区间）,int num = r.nextInt(3); 实际上代表的含义[0,3),也就是0-2\",\"import java.util.Random; public class Text { public static void main(String[] args) { Random r = new Random(); for(int i=0;i < 10;i++){ int num = r.nextInt(100);//0-99 System.out.println(num); } } }\",\"可以写一个猜数小游戏\"]},\"161\":{\"h\":\"日期类\",\"t\":[\"java.lang.System System类提供的public static currentTimeMillis();用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。\"]},\"162\":{\"h\":\"java.util.Data类\",\"t\":[\"还有一个java.sql.Data是其子类 表示特定的瞬间精确到毫秒\",\"import java.util.Date; public class Text { public static void main(String[] args) { Date d1 = new Date(); System.out.println(d1.toString());//Thu Apr 04 22:04:08 CST 2024 System.out.println(d1.getTime());//1712239525782 Date d2 = new Date(1712239525782l);//还原回去 System.out.println(d2);//Thu Apr 04 22:05:25 CST 2024 } }\"]},\"163\":{\"h\":\"SimpleDateFormat类\",\"t\":[\"Date类的api不易于国际化，大部分被废弃了 SimpleDateFormat类易于国际化\",\"格式化 日期---->文本 使用SimpleDateFormat()方法\",\"解析 文本--->日期 数据库日期的转换\",\"import java.util.Date; import java.text.SimpleDateFormat; public class Text { public static void main(String[] args) { //默认的 SimpleDateFormat sdf = new SimpleDateFormat(); String date = sdf.format(new Date()); System.out.println(date);//24-4-4 下午10:13 //指定格式的格式化 SimpleDateFormat sdf1 = new SimpleDateFormat(\\\"yyyy-MM-dd hh:mm:ss\\\");//看说明改格式 String data = sdf1.format(new Date());//2024-04-04 10:17:41 System.out.println(data); //解析 Date date1 = sdf.parse(\\\"24-4-4 下午10:13\\\"); System.out.println(date1);//Thu Apr 04 22:13:00 CST 2024 date1 = sdf1.parse(\\\"2024-04-04 10:17:41\\\"); System.out.println(date1);//Thu Apr 04 10:17:41 CST 2024 } }\"]},\"164\":{\"h\":\"Calendar类\",\"t\":[\"了解 java.util.Calendar(日历)类\",\"import java.util.Date; import java.util.Calendar; public class Text { public static void main(String[] args){ Calendar c = Calendar.getInstance(); int day = c.get(Calendar.DAY_OF_MONTH); System.out.println(day);//这个月的第几天 c.add(Calendar.DAY_OF_MONTH, -2); day = c.get(Calendar.DAY_OF_MONTH); System.out.println(day);//+2 c.set(Calendar.DAY_OF_MONTH, 23); Date d = c.getTime(); System.out.println(d); } }\"]},\"165\":{\"h\":\"String类\",\"t\":[\"构造字符串对象 使用Unicode编码 String代表不可变的字符序列，底层使用char[]存放，一旦赋值其值不可改变。 String是final的\",\"//如果字符串池中已经存在相同内容的字符串，则返回字符串池中的引用；否则，将该字 //符串添加到字符串池中，并返回对字符串池中的新引用。 public class Text { public static void main(String[] args){ String str1 = \\\"JavaEE\\\"; String str2 = \\\"JavaEE\\\"; String str3 = new String(\\\"JavaEE\\\"); String str4 = \\\"JavaEE\\\" + \\\"Android\\\"; String str5 = \\\"Android\\\"; String str6 = str1 + str5; str5 = str5 + \\\"Handoop\\\"; String str7 = str6.intern(); // equals比较内容 System.out.println(str1 == str2);//true System.out.println(str1 == str3);//false System.out.println(str1.equals(str3));//true System.out.println(str4 == str6);//false System.out.println(str4.equals(str6));//true System.out.println(str7 == str4);//true } }\",\"内存情况\"]},\"166\":{\"h\":\"字符串的常用的方法\",\"t\":[\"int length();//返回字符串的长度 char charAt(int index);//返回在指定index位置的字符,index从0开始 boolean equals(Object anObject); //比较两个字符串是否相等，相等返回true否则返回false int compareTo(String anotherString); //返回正数表示外面的字符串大于里面的 //返回负数表示里面的大于外面的 //返回0表示相等 int indexOf(String s); //返回s字符串在当前字符串中首次出现的位置，若没有返回-1 int indexOf(String s,int startpoint); //返回s字符串从当前字符串startpoint位置开始首次出现的位置 int lastIndexOf(String s); //返回s字符串最后一次在当前字符串中出现的位置，若无返回-1 int lasrindexxof(String s,int startpoint); boolean startsWith(String prefix);//判断当前字符串是否以prefix开始 boolean endsWith(String suffix);//判断当前字符串是否以prefix结束 boolean regionMatches(int firstStarts,String other,int otherStart,int length); //判断当前字符串从firstStarts开始的字串与另一个字符串other从otherStart开始，length长度的字符串是否equals String substring(int startpoint);// String substring(int strat,int ens); //返回从start开始到end结束的一个左闭右开的字串，strat从0开始 String replace(char oldChar,String new); //替换字符 String replaceAll(String old,String new); String trim();//去除当前字符中首尾出现的空格，若有多个，就去除多个 String concat(String str); //连接当前字符串与str String[] split(String regex) //按照regex将当前字符串拆分成多个字符串，整体返回String[];\"]},\"167\":{\"h\":\"StringBuffer类\",\"t\":[\"java.lang.Stringbuffer代表可变的字符序列，可以对字符串内容进行增删 容器，底层使用char[]存储，此案成安全的，效率低。\",\"StringBuffer append(String s);//可以是各种类型 StrinfBuffer insert(int index,String str); StrinfBuffer reverse();//反转 StrinfBuffer delete(int startIndex,int endIndex); char charAt(int n); void setCharAt(int n,char ch); StrinfBuffer replace(int stareIndex,int endIndex,String str); int indexOf(String str); String substring(int start ,int end); int length();\",\"总结;添加append();可以连着.方法添加。 删除,delete(int n,int j) 修改，setCharAt(int index,char ch); 查 charAt(int n) 插入,insert(int index,String str); 反转，reverse();本身的值也会变 长度length()\"]},\"168\":{\"h\":\"StringBuilder\",\"t\":[\"可变字符序列，是jdk5.0新加入的，线程不安全但是效率高于StrinfBuffer\"]},\"169\":{\"h\":\"包装类\",\"t\":[\"基本数据类型: boolean，char，byte，short，int，long，float，double 封装类类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double\",\"字符串与基本数据类型，包装类之间转换 ①字符串--->基本数据类型，包装类：调用相应包装类的parseXxx(String str); ②基本数据库，包装类--->字符串：调用字符串的重载的valueOf()方法\",\"字符串与字节数组间的转换 ①字符串---->字节数组：调用字符串的getbytes() ②字节数组---->字符串:调用字符串的构造器\",\"字符串与字符数组间的转换 ①字符串---->字符数组,调用字符串的toCharArray() ②字符数组---->字符串，调用字符串的构造器\",\"//转int String str1 = \\\"123\\\"; int i = Integer.parseInt(str1); //转字符串 str2 = i+\\\"\\\"; str2 = String.valueOf(i); //字符串与字节数组间的转换 String str = \\\"abc123\\\"; byte[] b = str.getBytes(); //字节数组转字符串 String str3 = new String(b); //字符串与字符数组间的转换 String str4 = \\\"abc123中国人\\\"; char[] c = str4.toCharArray(); String str5 = new String(c);\",\"可分为Collection和Map两种体系 Collection接口\",\"set:元素无序，不可重复的集合--类似高中数学上的“集合”\",\"list：元素有序，可重复的集合--“动态”数组\",\"Map接口：具有映射关系，“key- value对”的集合--高中的“函数”自变量-因变量\",\"一方面，面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象的操作，就要对对象进行存储。另一方面，使用Array存储对象方面有一些弊端，而java集合就像一种容器，可以动态地把多个对象的引用放入容器中。\",\"java集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。\",\"存储对象可以考虑：①数组。②集合\",\"数组存储对象的特点：Stundent[] stu = new Studnet[20];stu[0] = new Student();...\",\"弊端：①一旦创建长度不变，②真实的数组存放的对象的个数是不可知的。\",\"集合 Collection接口 ---List接口：存储有序的，可以重复的元素 --------ArrayList（主要的实现类） --------LinkedList(用链表存的，频繁插入删除) --------Vector(古老的实现类，线程安全的) ---Set接口:存储无序的，不可重复的元素,set中常用的方法都是Collection下定义的 ---------HashSet(主要实现类) ---------LinkedhashSet ---------TreSet Map接口:存储键值对 -----------HashMap：Map的主要实现类 -----------LinkedHashMap：使用链表维护添加进Map中的顺序，故遍历Map时，是按添加的顺序遍历的 -----------TreeMap；按照添加进Map中的元素的key的指定属性进行排序要求key必须是同一个类的对象 ------------Hashtable ----------------------子类Properties\"]},\"170\":{\"h\":\"Collection接口\",\"t\":[\"1-5\",\"import java.util.Date; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; public class Text { public static void main(String[] args){ Collection coll = new ArrayList();//接口new实现类 //1.返回元素个数 System.out.println(coll.size()); //2.向集合添加一个元素 //add(object obj) coll.add(123); coll.add(\\\"AA\\\"); coll.add(new Date()); coll.add(\\\"BB\\\"); System.out.println(coll.size()); //3，addAll(Collection coll)将形参coll中包含的所有元素添加到当前集合中 Collection coll1 = Arrays.asList(1,2,3); coll.addAll(coll1); //查看集合元素 System.out.println(coll);//ArrayList重写 System.out.println(coll.size());//7 //4.isEmptu();判断集合是否为空 System.out.println(coll.isEmpty());//false //5..clear()清空集合元素 coll.clear(); System.out.println(coll.isEmpty());//true } }\",\"6-9\",\" Collection coll = new ArrayList(); coll.add(123); coll.add(\\\"AA\\\"); coll.add(new Date()); coll.add(\\\"BB\\\"); //6.contains(Object obj); //判断集合中是否包含指定的obj元素，如果包含返回true，反之返回false //判断的依据，根据元素所在类的equals()方法进行判断 //明确，如果存入集合中的元素是自定义类的对象，要求：自定义类重写equals()方法！ boolean b1 = coll.contains(123); System.out.println(b1); //7.containsAll(Collection coll);判断当前集合中是否包含coll中所有元素 Collection coll1 = new ArrayList(); coll1.add(123); coll1.add(new String(\\\"AA\\\")); boolean b3 = coll.containsAll(coll1); System.out.println(b3); coll.add(456); //8.retainAll(Collection coll);求当前集合与coll的共有的元素，返回给当前集合 coll.retainAll(coll1); System.out.println(coll); //9.remove(Object obj);删除集合中的obj元素，若删除成功，返回true，否则返回false boolean b4 = coll.remove(\\\"BB\\\");//不存在，下面是false System.out.println(b4);\",\"10-15\",\" Collection coll = new ArrayList(); coll.add(123); coll.add(new String(\\\"AA\\\")); coll.add(new Date()); coll.add(\\\"BB\\\"); Collection coll1 = new ArrayList(); coll1.add(123); coll1.add(new String(\\\"AA\\\")); //10.removeAll(Collection coll);从当前元素中删除包含在coll中的元素 coll.remove(coll1); coll.removeAll(coll1); System.out.println(coll); //equals(Object obj);判断集合中的所有元素是否完全相同 Collection coll2 = new ArrayList<>(); coll2.add(123); coll2.add(new String(\\\"AA\\\")); System.out.println(coll1.equals(coll2));//true //12.hashCode(); System.out.println(coll.hashCode()); //13.toArray();将集合转化为数组?数组怎么转集合？上一节的 Object[] obj = coll.toArray(); for(int i = 0;i < obj.length;i++){ System.out.println(obj[i]); } //14 iterator();返回一个Iterator接口实现类的对象 Iterator iterator = (Iterator) coll.iterator(); //不用for遍历和下面这种方式遍历 //System.out.print(iterator.next()); //System.out.print(iterator.next()); //使用这种方式 while(iterator.hasNext()) { System.out.println(iterator.next()); } //这样不行。因为在里面打印那个也会调用一次，隔一个打印一个，而且可能会报错 //while(iterator.next() != null){ //System.out.println(iterator.next()); //}\",\"增强for循环\",\" //使用增强for循环实现集合的遍历, for(Object i:coll){//这里没有调用iterator()方法，直接使用 System.out.println(i); } //使用增强for循环实现集合的遍历 String[] str = new String[]{\\\"AAA\\\",\\\"BBB\\\",\\\"DDD\\\"}; for(String s:str){ System.out.println(s); }\"]},\"171\":{\"h\":\"ArrayList，List的主要实现类\",\"t\":[\"list中相对Collection，新增加的方法\",\"void add(int index,Object ele)在指定的索引位置index添加元素ele(如果父类用的Collection则需要向下转型)\",\"boolean addAll(int inndex,Collection eles)\",\"Object get(int index)获取指定索引的元素\",\"int indexOf(Object obj)返回obj在集合中首次出现的位置，没有的话返回-1\",\"int lastIndexOf(Object obj)返回obj在集合中最后一次出现的位置，没有的话，返回-1\",\"Object remove(int index)删除指定索引位置的元素\",\"Object set(int index,Object ele)设置指定索引位置的元素为ele\",\"List subList(int fromIndex,int toIndex)返回从fromIndex到toIndex结束的一个子list。左闭右开，不含末尾\",\"List常用的方法:\",\"增(add(Object obj)) 也可以指定位置 删(remove) 也可以指定位置 改(set(int index,Object obj)) 查(get(int index) int indexOf(Object obj)) 插(add(int index,Object ele)) 长度(size())\",\"ArrayList中 注意：当集合中添加自定义类的元素时，必须重写equals方法，才能判断集合中所有元素是否完全相同 addAll 求并集 retainALl 共有的结果复制给调用的集合 removeAll\"]},\"172\":{\"h\":\"Set的主要实现类 HashSet\",\"t\":[\"set存储的元素是无序的，不可重复的！\",\"无序性，无序性!=随机性，真正的无序性，指的是元素在底层存储的位置是无序的\",\"不可重复性，当向Set中添加进相同的元素的时候，后面的这个不能添加进去。\",\"说明：要求添加进Set中的元素所在的类，一定要重写equals()和hashCode()方法， 进而保证Set中元素的不可重复性！\",\"Set中的元素是如何存储的呢？使用了哈希算法。\",\"当向Set中添加对象时，首先调用此对象所在类的hashCode()方法，计算此对象的哈希值， 此哈希值决定了此对象在Set中的存储位置，若此位置之前没有对象存储，则这个对象直接 存储到此位置，若此位置已有对象存储，再通过equals()比较这两个对象是否相同。 如果相同，后一个对象就不能添加进来。 万一返回false了呢，都存储（不建议如此）\",\"要求：hashCode()方法要与equals()方法一致\"]},\"173\":{\"h\":\"ListHashSet\",\"t\":[\"ListHashSet:使用链表维护了一个添加进集合的顺序，导致当我们遍历LinkedHashSet集合 元素时，是按照添加进去的顺序遍历的！ ListHashSet插入性能略低于HashSet，但在迭代访问Set里的全部元素有很好的性能\"]},\"174\":{\"h\":\"TreeSet\",\"t\":[\"TreeSet:\",\"向TreeSet中添加的元素必须是同一个类的。\",\"可以按照添加进集合中的元素的指定的顺序遍历，像String，包装类等默认按照从小到大的顺序遍历。\",\"当向TreeSet中添加自定义类的对象时，有两种排序方法，①自然排序②定制排序\",\"自然排序要求自定义类实现java,lang.Comparable接口并重写其compareTo(Object obj)方法 在此方法中，指明按照自定义类的哪个属性进行排序\",\"向TreeSet中添加元素时，首先按照ComareTo()进行比较，一旦返回0，虽然仅是两个对象的 此属性值相同，但是程序会认为这两个对象是相同的，进而后一个对象不能添加进来(下面例子)\",\"compareTo()与hashCode()以及equals()三者保持一致!\",\"@Override public int compareTo(Object o){ if(o instanceof Person){ Person p = (Person)o; //return this.name.compareTo(p.name);这样名字一样存不进去 //return this.age.compareTo(p.age);这样年龄一样就存不进去 int i = this.age.compareTo(p.age); if(i == 0){ return return this.name.compareTo(p.name); }else{ return i; } } }\"]},\"175\":{\"h\":\"TreeSet定制排序\",\"t\":[\"创建一个是是实现了Comparator接口的类对象\",\"将此对象作为形参传递给TreeSet的构造器中\",\"向TreeSet中添加Coparator接口中的compare方法中涉及的类的对象\",\"TreeSet的定制排序，见下面步骤compare()与hashCode()以及equals()三者保持一致\",\" Comparator com = new Comparator(){ @Override //向TreeSet中添加Customer类的对象， //在此compare()方法中，指明是按照Customer的哪个属性排序的 public int compare(Object o1,Object o2){ if(o1 instanceof Customer && o2 instanceof Customer){ Customer c1 = (Customer)o1; Customer c2 = (Customer)o2; int i = c1.getId.compareTo(c2.getid()); if(i == 0){ return c1.getName().compareTo(c2.getName()); } return i; } return 0; } }\"]},\"176\":{\"h\":\"TreeSet练习\",\"t\":[\"1. 定义一个Employee类 该类包含：private 成员变量name,age,birthday，其中birthday为MyDate类的对象： 并为每一个属性定义getter，setter方法； 并重写toString方法输出name,age,birthday Mydate类包含 private成员变量 month,day,year,并为每一个属性定义getter,setter方法， 创建该类的5个对象，并把这些对象放入TreeSet集合中（下一章，Treeset需要使用泛型来定义） 分别按以下两种方式对集合中的元素进行排序，并遍历输出 ①使Employee实现comparable接口，并按name排序 ②创建TreeSet时传入Comparator对象，按生日日期的先后排序 提示：Employee类是否需要重写equals()方法？MyDate类呢?\",\"Employy类\",\"public class Employee implements Comparable{ private String name; private int age; private MyDate birthday; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public MyDate getBirthday() { return birthday; } public void setBirthday(MyDate birthday) { this.birthday = birthday; } public Employee(String name, int age, MyDate birthday) { super(); this.name = name; this.age = age; this.birthday = birthday; } @Override public String toString() { return \\\"Employee [name=\\\" + name + \\\", age=\\\" + age + \\\", birthday=\\\" + birthday + \\\"]\\\"; } @Override public int compareTo(Object o) { if(o instanceof Employee) { Employee e = (Employee)o; return this.name.compareTo(e.name); } return 0; } @Override public int hashCode() { return Objects.hash(age, birthday, name); } @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Employee other = (Employee) obj; return age == other.age && Objects.equals(birthday, other.birthday) && Objects.equals(name, other.name); } }\",\"Employee1\",\"public class Employee1 { private String name; private int age; private MyDate birthday; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public MyDate getBirthday() { return birthday; } public void setBirthday(MyDate birthday) { this.birthday = birthday; } public Employee1(String name, int age, MyDate birthday) { super(); this.name = name; this.age = age; this.birthday = birthday; } @Override public String toString() { return \\\"Employee [name=\\\" + name + \\\", age=\\\" + age + \\\", birthday=\\\" + birthday + \\\"]\\\"; } @Override public int hashCode() { return Objects.hash(age, birthday, name); } @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Employee other = (Employee) obj; return age == other.age && Objects.equals(birthday, other.birthday) && Objects.equals(name, other.name); } }\",\"MyDate类\",\"public class MyDate { private int day; private int month; private int year; public int getDay() { return day; } public void setDay(int day) { this.day = day; } public int getMonth() { return month; } public void setMonth(int month) { this.month = month; } public int getYear() { return year; } public void setYear(int year) { this.year = year; } public MyDate(int day, int month, int year) { super(); this.day = day; this.month = month; this.year = year; } @Override public String toString() { return \\\"MyDate [date=\\\" + day + \\\", month=\\\" + month + \\\", year=\\\" + year + \\\"]\\\"; } }\",\"实现类1\",\" public static void main(String[] args) { //1.自然排序。使Employee实现comparable接口，并按name排序 Employee e1 = new Employee(\\\"刘德华\\\", 55, new MyDate(4, 12, 1976)); Employee e2 = new Employee(\\\"郭富城\\\", 43, new MyDate(7, 3, 1965)); Employee e3 = new Employee(\\\"张学友\\\", 33, new MyDate(9, 12, 1965)); Employee e4 = new Employee(\\\"黎明\\\", 54, new MyDate(12, 2, 1967)); Employee e5 = new Employee(\\\"李敏镐\\\", 65, new MyDate(4, 21, 1945)); TreeSet set = new TreeSet(); set.add(e1); set.add(e2); set.add(e3); set.add(e4); set.add(e5); Iterator iterator = set.iterator(); while(iterator.hasNext()) { System.out.println(iterator.next()); } }\",\"实现类2 定制排序的main，注意这里面用的是Employee1 生日一样的就进不去了\",\"public static void main(String[] args) { //定制排序，创建TreeSet时传入Comparator对象，按生日日期的先后排序 Comparator com = new Comparator() { @Override public int compare(Object o1, Object o2) { if(o1 instanceof Employee1 && o2 instanceof Employee1) { Employee1 e1 = (Employee1)o1; Employee1 e2 = (Employee1)o2; MyDate birth1 = e1.getBirthday(); MyDate birth2 = e2.getBirthday(); if(birth1.getYear() != birth2.getYear()) { return birth1.getYear() - birth2.getYear(); }else { if(birth1.getMonth() != birth2.getMonth()) { return birth1.getMonth() - birth2.getMonth(); }else { return birth1.getDay() - birth2.getDay(); } } } return 0; } }; TreeSet set = new TreeSet(com); Employee1 e1 = new Employee1(\\\"刘德华\\\", 55, new MyDate(4, 12, 1976)); Employee1 e2 = new Employee1(\\\"郭富城\\\", 43, new MyDate(7, 3, 1954)); Employee1 e3 = new Employee1(\\\"张学友\\\", 33, new MyDate(9, 12, 1954)); Employee1 e4 = new Employee1(\\\"黎明\\\", 54, new MyDate(12, 3, 1954)); Employee1 e5 = new Employee1(\\\"李敏镐\\\", 65, new MyDate(4, 21, 1945)); set.add(e1); set.add(e2); set.add(e3); set.add(e4); set.add(e5); Iterator iterator = set.iterator(); while(iterator.hasNext()) { System.out.println(iterator.next()); } }\"]},\"177\":{\"h\":\"Map接口\",\"t\":[\"跟函数一样~\",\"Map与Collection并列存在，用于保存具有映射关系的数据:key-Value\",\"Map中的key和value都可以是任何引用数据类型的数据\",\"Map中的key用Set来存放，不允许重复，即同一个Map对象所对应的类，须重写hashCode()和equals()方法\",\"常用String类作为Map的\\\"键\\\"\",\"key和value之间存在单向一对一关系，即通过指定的key总能找到唯一的，确定的value\",\"Object put(Object key,Object value):向Map中添加一个元素 Object remove(Object key)：按照指定的key删除key-value void putAll(Mat t) void clear()：清空 Object get(Object key):获取指定key的value值，若无此key，返回null boolean containsKey(Object key)： boolean containsValue(Object value) int size()：返回 boolean isEmpty() boolean equals(Object obj) keySet()//返回set视图 map.values()//返回Collection视图\",\"HashMap,key是用Set来存放的，不可重复，value是用Collection来存放的，可重复.一个key-value对，是一个Entry，所有的Entry使用Set存放的,也是不可重复的。\",\"向HashMap中添加元素时，会调用key所在类的equals()方法，判断两个key是否相同，若相同，则只能添加进后添加的哪个元素\",\" public static void main(String[] args){ Map map = new HashMap(); map.put(\\\"AA\\\", 213); map.put(\\\"BB\\\", 456); map.put(\\\"BB\\\", 456); map.put(123, \\\"CC\\\"); map.put(null, null); System.out.println(map.size());//4 }\",\"如何遍历Map\",\"Set keySet()\",\"Collection values()\",\"void entrySet()\",\" public static void main(String[] args){ Map map = new HashMap(); map.put(\\\"AA\\\", 213); map.put(\\\"BB\\\", 45); map.put(123, \\\"CC\\\"); map.put(null, null); //1.遍历key堆 Set set = map.keySet(); for(Object obj : set){ System.out.println(obj); } //2.遍历value集 Collection values = map.values(); Iterator i = (Iterator) values.iterator(); while(i.hasNext()){ System.out.println(i.next()); } //3.如何遍历key-value对 //方式1 Set set1 = map.keySet(); for(Object obj : set1){ System.out.println(obj + \\\"----->\\\" +map.get(obj)); } //方式2 Set set2 = map.entrySet(); for(Object obj : set2){ Map.Entry entry = (Map.Entry)obj; System.out.println(entry.getKey()+\\\"--->\\\"+entry.getValue()); System.out.println(entry);//也可以这样 } }\"]},\"178\":{\"h\":\"TreeMap\",\"t\":[\"自然排序 实现Comparable\",\"//这里在Person内部已经实现了compareTo方法 Map map = new TreeMap(); map.put(new Person(\\\"AA\\\",23),89); map.put(new Person(\\\"MM\\\",22),79); map.put(new Person(\\\"GG\\\",23),99); map.put(new Person(\\\"JJ\\\",13),69); Set set1 = map.keySet(); for(Object obj:set1){ Sysout.out.println(obj + \\\"----->\\\" + map.get(obj)); }\",\"定制排序\",\"Comparator com = new Comparator(){ public int compare(Object o1 && Object o2){ if(o1 instanceof Customer && o2 instanceof Customer){ Customer c1 = (Customer)o1; Customer c2 = (Customer)o2; int i = c1.getId().compareTo(c2.getId()); if(i == 0){ return c1.getName().compareTo(c2.getName()); } return i; } return 0; } }; TreeMap map = new TreeMap(com); map.put(new Customer(\\\"AA\\\",1001),87); map.put(new Customer(\\\"CC\\\",1001),67); map.put(new Customer(\\\"MM\\\",1004),77); map.put(new Customer(\\\"GG\\\",1002),97);\"]},\"179\":{\"h\":\"HashTable\",\"t\":[\"古老的实现类，线程安全。 不允许使用null作为key和value 不建议使用 子类 Properties：常用来处理属性文件，键和值都是String类型的\",\"后缀为properties的文件 可以载入进这个文件的内容\"]},\"180\":{\"h\":\"Collections工具类的使用\",\"t\":[\"操作Collections以及Map的工具类:Collections\",\"区分:Collection与Collections\",\"reverse(List),反转List中元素的顺序 shuffle(List),对list集合元素进行随机排序 short(List),根据元素的自然排序对指定List集合元素按升序排序 short(List,Comparator),根据指定Comparator产生的顺序对List集合元素进行排序 swap(List,int,int),将指定list集合中i处元素和j处元素进行交换 Object max(Collection),根据元素的自然排序，返回给定集合中的最大元素 Object max(Collection,Comparator),根据Comparetor指定的顺序，返回给定集合中的最大 Object min(Collection) Object min(Collection,Comparator) int frequency(Collection,object),返回指定集合中指定元素的出现次数 void copy(List dest,List src)，将src中的内容复制到dest中 //List list1 = Arrays.asList(new Object[list.size()])要这样写，不然会越界 boolean replaceAll(List list,Object oldVal,Object newVal) //\",\"同步控制 Collections类中提供了多个synchronizedXxx()方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题\",\"站在程序的角度理解 IO流用来处理设备之间的数据传输 java程序中，对于不同数据的输入输出操作以流（stream）的方式进行 java.io包下提供了各种\\\"流\\\"类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据。\"]},\"181\":{\"h\":\"\",\"t\":[\"出现乱码，可以查看一下文本的存储编码格式是不是utf-8 一定要记得关闭流，/刷新（flush）流 不然可能写不进文件里面 记得调用的方法是 (obj,0,len)不然可能出现读出后后面还有内容 eg\",\"String str = new String(tem,0,len); 非常重要的一点想想上面为什么这样写。\",\"fos.write(b,0,len);\",\"(抽象基类)\",\"字节流\",\"字符流\",\"输入流\",\"InputStream\",\"Reader\",\"输出流\",\"OutputStream\",\"Writer\",\"流的分类\",\"按照数据的流行不同，输入流，输出流\",\"按照处理数据的单位不同，字节流，字符流（处理的文本文件）\",\"按照角色的不同，节点流（直接作用文件的）处理流 | 抽象基类| 节点流(文件流)| | --- | --- | | InputStream|FileInputStream | | OutputStream|FileOutputStream | | Reader|FileReader | | Writer|FileWriter |\"]},\"182\":{\"h\":\"File类\",\"t\":[\"java.io.File类\",\"凡是与输入输出相关的类，接口等都定义在java.io包下\",\"File是一个类,可以有构造器创建其对象，此对象对应着一个文件(.txt .doc)或者一个文件夹\",\"File类对象是与平台无关的\",\"File中的方法，仅涉及到如何创建，删除，重命名，等等。只要涉及文件内容的，File是无能为力的，必须由io来完成\",\"File类的对象，常作为io流的具体类的构造器的形参\",\"getName(); getPath(); getAbsoluteFile(); getAbsolutePath(); getParent(); renameTo(File newName);重命名 //file1.renameTo(file2);file1重命名file2,要求file1文件一定存在，file2一定不存在 exists(); canWrite(); canRead(); isFile(); isDirectory(); lastModified(); length(); creatNewFile(); delete(); mkDir();//创建一个文件目录，只有在上层文件目录存在的情况下，才能返回true mkDirs();//创建一个文件目录，若上层文件目录不存在，一并创建 list();//返回String[] 要遍历 列出这个文件下的所有文件 listFiles();//返回File[]对象 File file = new File(\\\"E:\\\\\\\\桌面\\\\\\\\阿里云同步文件夹\\\\\\\\Typora\\\"); String[] str = file.list(); for(String t : str) { System.out.println(t); }\"]},\"183\":{\"h\":\"FileInputStream\",\"t\":[\"从硬盘存在的一个文件中，读取其内容到程序中， 读取的文件一定要存在，否则怕抛FileNotFoundException\",\"//可以使用try catch 的方式处理异常 //因为一定要关闭对应的流 //1.创建一个File类的对象 File file = new File(\\\"hello.txt\\\"); //2.创建一个FileInoutStream类的对象 FileInputStream fis = new FileInputStream(file); //3.调用FileInputStream 的方法，实现file文件的读取 //read();读取文件的一个字节，当执行到文件结尾时，返回-1 int b = fis.read(); while(b!=-1){ System.out.print((char)b); b=fis.read(); } //4. 关闭相应的流 fis.close();\",\"用下面这种\",\"try{ File file = new File(\\\"hello.txt\\\"); FileInputStream fis = new FileInputStream(file); byte[] b=new byte[5]; int len; //每次读入到byte中的字节的长度 //read返回了读取到几个 while((len=fis.read(b))!=-1){ for(int i=0;i<len;i++){//为啥不是b.length呢 System.out.print((char)b[i]); } //String str = new String(b,0,len); //System.out.print(str); } }catch(IoException e){ e.printStacktrace(); }finally{ if(fis!=null){ try{fis.close}; }catch(Ioexception e){ e.printStacktrace(); } }\"]},\"184\":{\"h\":\"FileOutputStream\",\"t\":[\"//1.创建一个File对象，表明要写入的文件位置 File file =new File(\\\"hello2.txt\\\");//写入可以没有这个文件 //2. 创建一个FileOutputStream的对象，将file的对象作为形参传递给FileOutputStream的构造器中 FileOutputStream fos = null; try{ fos=new FileOutputStream(file); //3. 写入操作 //输出的物理文件可以不存在，当执行过程中，若不存在，会自动创建 //若存在，会将原有的覆盖 fos.write(new String(\\\"i love China i love the world\\\").getBytes()); }catch(Exception e){ e.printStackTrace(); }finally{ if(fos!=null){ try{ //4. 关闭输出流 fos.close(); }catch(IoException e){ e.printStackTrace();}}}\"]},\"185\":{\"h\":\"FileInputOutputStream复制\",\"t\":[\"从硬盘读取一个文件，并写入到另一个位置。（相当于文件的复制）\",\"//1. 提供读入，写出的文件 File file1 = new File(\\\"hello.txt\\\"); File file2 = new File(\\\"hello3.txt\\\"); //2.提供相应的流 FileInputStream fis = null; FileOutputStream fos = null; try{ fis = new FileInputStream(file1); fos = new FileOutputStream(file2); //3.实现文件的复制 byte[] b = new byte[20]; int len; while((len=fis.read(b))!=-1){ //fos.write(b);错误的写法两种fos.write(b,0,b.length); fos.write(b,0,len); } }catch(Exception e){ e.printStackTrace(); }finally{ if(fos!=null){ try{ fos.close; }catch(IOException e){ e.printStackTrace(); } } if(fis!=null){ try{ fis.close(); }catch(IOException e){ e.printStackTrace();}}}\",\"可以写成一个方法，想想~ 下面这是运行过的\",\"public class classDemo { public static void main(String[] args) { Copy c = new Copy(); c.copy(\\\"E:\\\\\\\\桌面\\\\\\\\nihao.txt\\\",\\\"E:\\\\\\\\桌面\\\\\\\\china.txt\\\"); } } class Copy{ void copy(String start,String end) {//传入要复制文件的目录，和目标目录} File file1 = new File(start); File file2 = new File(end); FileOutputStream fos = null; FileInputStream fis = null; try { fos = new FileOutputStream(file2); fis = new FileInputStream(file1); byte[] buffer = new byte[20];//改变数值，控制读写速度 int len = 0; while ((len = fis.read(buffer))!= -1) { fos.write(buffer, 0, len);//写入到buffer里面，每次写入从0到len的长度 } } catch (Exception e) { e.printStackTrace(); }finally { if(fos!=null && fis!=null) { try { fos.close(); fis.close(); } catch (Exception e) { e.printStackTrace(); }}}}}\"]},\"186\":{\"h\":\"FileReader\",\"t\":[\"使用FileReader FileWriter 可以实现文本文件的复制 对于非文本文件（视频文件，音频文件，图片）只能使用字节流。\",\"public class FileTest { public static void main(String[] args) { FileReader fr = null; try { File file = new File(\\\"E:\\\\\\\\桌面\\\\\\\\h.txt\\\"); fr = new FileReader(file); char[] c = new char[24]; int len; while ((len = fr.read(c)) != -1) { String str = new String(c, 0, len); System.out.println(str); } }catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } finally { if (fr != null) { try { fr.close(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } } } } }\",\"写不进去的时候在写入后面加上flush();方法\",\" public static void main(String[] args) { //1. 输入流对应的文件src一定要存在，否则抛异常。输出流对应的文件可以不存在，执行过程中会自动创建 FileReader fr = null; FileWriter fw = null; try { File src = new File(\\\"E:\\\\\\\\桌面\\\\\\\\h.txt\\\"); File dest = new File(\\\"E:\\\\\\\\桌面\\\\\\\\h1.txt\\\"); //2. fr = new FileReader(src); fw = new FileWriter(dest); //3. char[] c = new char[24]; int len; while ((len = fr.read(c)) != -1) { fw.write(c,0, len); } }catch(Exception e) { e.printStackTrace(); }finally { if(fw!=null) { try { fw.close(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } } if(fr!=null) { try { fr.close(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } } } }\",\"这里可以写一个创建文件，输入内容，写进文件的小程序 用字节流和字符流\"]},\"187\":{\"h\":\"对象流\",\"t\":[\"ObjectinputStream和ObjectOutputStream 对象的序列化机制\",\"允许把内存中的java对象转化成平台无关的二进制流,从而允许把这种二进制流 持久的保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点，当其他程序 获取了这种二进制流，就可以恢复成原来的java对象\",\"序列化的好处\",\"在于可以将任何实现了Serializable接口的对象转化为字节数据 使其在保存和传输时可被还原 序列化是RMI(Remote Method invoke - 远程方法调用)\",\"为了让类是可序列化的，该类必须实现如下两个接口之一 Serializable Externalizable\",\" public static void main(String[] args) { //对象的序列化过程，将内存中的对象通过ObjectOutputStream转化为二进制流，存储在硬盘文件中 Person p1 = new Person(\\\"小米\\\",23); Person p2 = new Person(\\\"红米\\\",21); ObjectOutputStream oos = null; try { oos = new ObjectOutputStream(new FileOutputStream(\\\"Person.txt\\\")); oos.writeObject(p1); oos.flush(); oos.writeObject(p2); oos.flush(); }catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); }finally { if(oos != null) { try { oos.close(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } } } } //要实现序列化的类 /* * 1. 要求此类是可序列化的，实现Serializable/Externalizable接口 * 2. 要求类的属性同样要实现Serializable接口 * 3. 提供一个版本号private static final long serivalVersionUID * 4. 使用static或transient修饰的属性，不可实现序列化 */ class Person implements Serializable{ String name; Integer age; public Person(String name, Integer age) { super(); this.name = name; this.age = age; } @Override public String toString() { return \\\"Person [name=\\\" + name + \\\", age=\\\" + age + \\\"]\\\"; } }\",\"对象写进文件 ps: 上课讲的\",\"public static void main(String[] args) throws IOException { Student s1 = new Student(\\\"张三\\\",18,\\\"郑州市\\\"); File file = new File(\\\"obj.txt\\\"); FileOutputStream fos = new FileOutputStream(file); ObjectOutputStream oos = null; oos = new ObjectOutputStream(fos); oos.writeObject(s1); oos.flush(); fos.close(); oos.close(); }\",\"反序列化\",\" public static void main(String[] args) { //对象的反序列化过程，将硬盘中的文件通过ObjectInputStream转化为相应的对象 ObjectInputStream ois = null; try { ois = new ObjectInputStream(new FileInputStream(\\\"D:\\\\\\\\eclipseNew\\\\\\\\workspace\\\\\\\\TextDemo1\\\\\\\\Person.txt\\\")); Person p1 = (Person)ois.readObject(); System.out.println(p1); Person p2 = (Person)ois.readObject(); System.out.println(p2); } catch (Exception e) { // TODO 自动生成的 catch 块 e.printStackTrace(); }finally { if(ois !=null) { try { ois.close(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } } } } class Person implements Serializable{ String name; Integer age; public Person(String name, Integer age) { super(); this.name = name; this.age = age; } @Override public String toString() { return \\\"Person [name=\\\" + name + \\\", age=\\\" + age + \\\"]\\\"; } } //Person [name=小米, age=23] //Person [name=红米, age=21]\",\"从文件读出对象 ps: 上课讲的\",\"public static void main(String[] args) throws IOException, ClassNotFoundException { File file = new File(\\\"obj.txt\\\"); FileInputStream fis = new FileInputStream(file); ObjectInputStream ois = new ObjectInputStream(fis); Student stu = (Student)ois.readObject(); System.out.println(stu); fis.close(); ois.close(); }\"]},\"188\":{\"h\":\"javaIO相关代码\",\"t\":[\"package com.wzy.java; import java.io.*; import java.util.*; /** 179. 自己创建文件“静夜思.txt”，内容为“床前明月光，疑是地上霜。举头望明月，低头思故乡。”，要求将此文件的内容使用字节流复制到D:\\\\myFile\\\\静夜思.txt中。 180. 自己创建文件“静夜思.txt”，内容为“床前明月光，疑是地上霜。举头望明月，低头思故乡。”，要求将此文件的内容使用字符流复制到D:\\\\myFile\\\\静夜思.txt中。 200. 使用序列化实现北极熊对象polarBear的存储为二进制文件D:\\\\ polarBear.bin， 并使用反序列化对二进制文件polarBear.bin读取，并输出到控制台上(类设计合理即可)。 175. 自己创建模板，模板内容如下： “您好！我是一只猴子monkey，我的名字是{name}，我是一只{type}。我的主人是{master}” 模板存放在“D:\\\\ monkey.txt”, 读取模板文件D:\\\\ monkey.txt的内容，按照D:\\\\ monkey.txt的模板格式保存宠物数据到文本文件， 即把{name}、{type}、{master}替换为具体的宠物信息，将替换后的内容写入到D:\\\\myDoc\\\\ monkey.txt中。 （要求使用BufferedReade、BufferedWriter、StringBuffer、replace()实现）。 */ public class Test1 { public void title175() throws IOException { File file = new File(\\\"d:\\\\\\\\monkey.txt\\\"); FileReader fr = new FileReader(file); BufferedReader bfr = new BufferedReader(fr); StringBuffer sb = new StringBuffer(bfr.readLine()); sb.replace(sb.indexOf(\\\"{name}\\\"),sb.indexOf(\\\"{name}\\\")+\\\"{name}\\\".length(),\\\"小黑\\\");//小黑替换{name} FileWriter fw = new FileWriter(file); BufferedWriter bfw = new BufferedWriter(fw); bfw.write(sb.toString()); bfw.flush(); fr.close(); fw.close(); bfr.close(); bfw.close(); } public void title179() throws IOException { File oldFile = new File(\\\"d:\\\\\\\\静夜思.txt\\\"); File newFile = new File(\\\"d:\\\\\\\\myfile\\\"); newFile.mkdirs();//创建文件夹 newFile = new File(\\\"d:\\\\\\\\myfile\\\\\\\\静夜思.txt\\\"); FileInputStream fis = new FileInputStream(oldFile);//读 FileOutputStream fos = new FileOutputStream(newFile);//写 复制 byte tem[] = new byte[1024]; int length; while((length = fis.read(tem)) != -1){ fos.write(tem,0,length);//写进去 } fis.close(); fos.close(); } public void title180() throws IOException { File oldFile = new File(\\\"d:\\\\\\\\静夜思.txt\\\"); File newFile = new File(\\\"d:\\\\\\\\myfile\\\\\\\\静夜思.txt\\\");//这个myfile文件夹已经创建了 //读出文件出现乱码 看一下源文件格式是否为utf-8 FileReader fr = new FileReader(oldFile); FileWriter fw = new FileWriter(newFile); char[] arr = new char[128]; int length; while((length = fr.read(arr)) != -1){ fw.write(arr,0,length);//最好这样写，不然可能出现一些错误 } fr.close(); fw.close(); } public void title200() throws IOException, ClassNotFoundException { //先序列化 File file = new File(\\\"d:\\\\\\\\polarBear.bin\\\"); FileOutputStream fos = new FileOutputStream(file); ObjectOutputStream oos = new ObjectOutputStream(fos); Animal animal1 = new Animal(\\\"小黑\\\"); Animal animal2 = new Animal(\\\"小红\\\"); oos.writeObject(animal1); oos.writeObject(animal2); fos.close(); oos.close(); //反序列化 FileInputStream fis = new FileInputStream(file); ObjectInputStream ois = new ObjectInputStream(fis); Animal a1 = (Animal)ois.readObject(); Animal a2 = (Animal) ois.readObject(); System.out.println(a1+\\\"\\\\n\\\"+a2); } public static void main(String[] args) throws IOException, ClassNotFoundException { Test1 test = new Test1(); //测试179 //test.title179(); //测试180 //test.title180(); //测试200 //test.title200(); //测试175 test.title175(); } } class Animal implements Serializable{ String name; public Animal(String name) { this.name = name; } @Override public String toString() { return \\\"Animal{\\\" + \\\"name='\\\" + name + '\\\\'' + '}'; } }\"]},\"189\":{\"h\":\"网络编程相关\",\"t\":[\"Java提供的网络类库，它可以实现无痛的网络连接，联网的底层细节被隐藏在java的本机安装系统里面，有JVM进行控制，并且Java实现了一个跨平台的网络库 C/S架构 客户端/服务端 B/S架构 浏览器/服务器 本地回路地址：127.0.0.1 公认端口HTTP(80) FTP(21) Telnet(23) 注册端口 MySQL(3306) 如果端口号被另一个服务或应用所占，会导致当前程序启动失败 OSI参考模型（七层）过于理想化，未能推广 TCP/IP参考模型 ： 应用层 传输层 网络层 物理+数据链路层\",\"实例化的方式\",\"InetAddress getByName(String host)\",\"InetAddress getLocalHost()\",\" public static void main(String[] args) { try { //1.实例化 //getByName()获取指定ip对应的InetAddress的实例 InetAddress inet1 = InetAddress.getByName(\\\"192.168.23.31\\\");//也可以写域名 System.out.println(inet1);//打印出地址 //getLocalHost 获取本机ip对应的InetAddress的实例 InetAddress inet2 = InetAddress.getLocalHost(); System.out.println(inet2);//显示本机局域网ip //2.两个常用的方法 System.out.println(inet1.getHostAddress()); System.out.println(inet1.getHostName());//域名 } catch (UnknownHostException e) { e.printStackTrace(); } }\"]},\"190\":{\"h\":\"Socket类\",\"t\":[\"网络上具有唯一标识的ip地址和端口号组合在一起构成唯一能识别的标识符套接字(Socket)\",\"利用套接字开发网路应用程序已被广泛的采用，以至于成为事实上的标准，网络通信其实就是Socket间的通信。\",\"通信的两端都要有Socket，是两台机器间通信的端点。\",\"Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。\",\"一般主动发起通信的应用程序属客户端，等待通信请求的为服务端\",\"Socket分类\",\"流套接字(stream socker) 使用TCP提供可依赖的字节流服务\",\"ServerSocket 此类实现TCP服务器套接字，服务器套接字等待请求通过网络传入\",\"Socket此类实现客户端套接字，接字是两台机器间通信的端点。\",\"数据包套接字(datagram socket) 使用UDP提供尽力而为的数据报服务\",\"DatagramSocket 此类表示用来发送和接收UDP数据包的套接字\"]},\"191\":{\"h\":\"Socket相关API\",\"t\":[\"客户端给服务端发送消息 客户端\",\" public static void main(String[] args) { Socket socket = null; OutputStream os = null; ByteArrayOutputStream baos = null; try { //创建一个Socket InetAddress inetAddress = InetAddress.getByName(\\\"127.0.0.1\\\");//声明ip地址 int port = 8989;//声明对方的端口号 socket = new Socket(inetAddress, port); //发送数据 os = socket.getOutputStream(); os.write(\\\"你好，我是客户端，请多多关照。\\\".getBytes()); //客户端表明不再继续发送数据 不写这个服务器会一直等待！！！ socket.shutdownOutput(); //接受来自服务端的消息 InputStream is = socket.getInputStream(); byte[] buffer = new byte[1024];//小了会出现乱码 int len; //读取来袭服务端的消息 baos = new ByteArrayOutputStream(); while((len=is.read(buffer)) != -1){ baos.write(buffer,0,len); } System.out.println(baos.toString()); } catch (IOException e) { e.printStackTrace(); } finally { try { baos.close(); } catch (IOException e) { throw new RuntimeException(e); } //关闭Socket try { if (socket != null) socket.close(); } catch (IOException e) { e.printStackTrace(); } try { if (os != null) { os.close(); } } catch (IOException e) { e.printStackTrace(); } } }\",\"服务端\",\" public static void main(String[] args) { ServerSocket serverSocket = null; Socket socket = null;//阻塞式的方法 一直等着 InputStream is = null; OutputStream os = null;//得到一个输出流，给客户端发送消息 try { //1.创建一个ServerSocket int port = 8989; serverSocket = new ServerSocket(port); //2.调用accept() 接收客户端的Socket socket = serverSocket.accept(); socket.getInetAddress().getHostAddress();//得到发来消息的ip //3.接收数据 is = socket.getInputStream(); byte[] buffer = new byte[1024];//小了会出现乱码 int len; //解决上面小了会出现问题 ByteArrayOutputStream baos = new ByteArrayOutputStream();//内部，维护了一个byte[] while((len=is.read(buffer)) != -1){ //错误的，可能会出现乱码 // String str = new String(buffer,0,len); // System.out.print(str); baos.write(buffer,0,len); } System.out.println(baos.toString()); System.out.println(\\\"\\\\n数据接收完毕\\\"); //服务端发送数据给客户端 os = socket.getOutputStream(); os.write(\\\"成功接受数据!\\\".getBytes()); } catch (IOException e) { e.printStackTrace(); } finally { //4.关闭Socket，ServerSocket,流 try { os.close(); } catch (IOException e) { throw new RuntimeException(e); } try { if(socket!=null) socket.close(); } catch (IOException e) { e.printStackTrace(); } try { serverSocket.close(); } catch (IOException e) { e.printStackTrace(); } try { if(is != null) is.close(); } catch (IOException e) { e.printStackTrace(); } } }\",\"注意上面代码是如何解决出现乱码问题的。 如何解决服务器一直等待的问题的\"]},\"192\":{\"h\":\"聊天室项目\",\"t\":[\"客户端有三个类\",\"public class Client { public static void main(String[] args) throws Exception{ int port = 8989; //连接服务器 Socket socket = new Socket(\\\"139.9.114.22\\\",port); //开启两个线程 //一个负责看别人聊，即接受服务器转发的消息 Receive receive = new Receive(socket); receive.start(); //一个线程负责发送自己的话 Send send = new Send(socket); send.start(); send.join();//等我发送线程结束了，才结束整个程序 socket.close(); } public class Send extends Thread { private Socket socket; public Send(Socket socket) { super(); this.socket = socket; } public void run() { try { Scanner input = new Scanner(System.in); OutputStream outputStream = socket.getOutputStream(); PrintStream ps = new PrintStream(outputStream); while (true) { System.out.println(\\\"自己的话:\\\"); String str = input.nextLine(); if (\\\"bye\\\".equals(str)) { break; } ps.println(str); } input.close(); } catch (IOException e) { e.printStackTrace(); } } } public class Receive extends Thread{ private Socket socket; public Receive(Socket socket){ super(); this.socket = socket; } public void run(){ try { InputStream inputStream = socket.getInputStream(); Scanner input = new Scanner(inputStream); while(input.hasNextLine()){ String line = input.nextLine(); System.out.println(line); } } catch (IOException e) { e.printStackTrace(); } } }\",\"服务端\",\"public class Server { //用来存储所有在线的客户端 static HashSet<Socket> online = new HashSet<Socket>(); public static void main(String[] args) throws Exception{ ServerSocket server = new ServerSocket(8989); while(true){ Socket socket = server.accept(); online.add(socket);//连接的对象存进集合 MessageHandler mh = new MessageHandler(socket);//把当前的对象传送过去 mh.start();//开启多线程 } } static class MessageHandler extends Thread{ private Socket socket; private String ip; public MessageHandler(Socket socket){ super(); this.socket = socket; } public void run(){ try { ip = socket.getInetAddress().getHostAddress(); sendToOther(ip+\\\"上线了\\\"); InputStream input = socket.getInputStream(); InputStreamReader reader = new InputStreamReader(input); BufferedReader br = new BufferedReader(reader); String str; while((str = br.readLine())!=null){ sendToOther(ip+\\\":\\\"+str); } sendToOther(ip + \\\"下线了\\\"); } catch (IOException e) { e.printStackTrace(); } finally { online.remove(socket); } } public void sendToOther(String message) throws IOException{ for(Socket on :online){ OutputStream every = on.getOutputStream(); PrintStream ps = new PrintStream(every); ps.println(message); } } } }\",\"程序：为了完成特定任务，用某种语言编写的一组指令的集合，即指一段静态的代码，静态对象。\",\"进程：程序的一次执行过程，或是正在内存中运行的应用程序，如运行中的qq，运行中的网易云音乐播放器\",\"每一个进程都有一个独立的内存空间，系统运行一个程序即是一个进程从创建，运行到消亡的过程。（生命周期）\",\"程序是静态的，进程是动态的\",\"进程作为操作系统调度和分配资源的最小单位（亦是刺痛运行程序的基本单位），系统在运行时会为每个进程分配不同的内存区域\",\"现代的操作系统，大都支持多进程的，支持同时运行多个程序。\",\"线程：进程可进一步细化为线程，是程序内部的一条执行路径，一个进程至少有一个线程。\",\"一个进程同一时间若并行执行多个线程，就是支持多线程的\",\"线程作为CPU调度和执行的最小单位\",\"一个进程中的多个线程共享相同的内存单元，他们从同一个堆中分配对象，可以访问相同的变量和对象，这就使得线程间通信更简便，高效，但多个线程操作共享的系统资源可能就会带来安全隐患。\",\"不同进程之间是不共享内存的 进程之间的数据交换和通信成本很高\",\"线程调度\",\"分时调度\",\"抢占式调度\",\"并行(parallel)：指两个或多个事件咋同一时刻发生（同时发生），指在同一时刻，有多条指令在多个CPU上同时执行，比如多个人同时做不同的事。 并发(concurrency)：指两个或多个事件在同一时间段内发生，即在一段事件内，有多条指令在单个CPU上快速轮换，交替执行，使得在宏观上具有多个进程同时执行的效率。\"]},\"193\":{\"h\":\"创建和启动线程\",\"t\":[\"java语言的JVm允许程序运行多个线程，使用java.lang.Thread类代表线程，所有的线程对象都必须是Thread类或其子类的实例\",\"Thread类的特性\",\"每个线程都是通过特定Thread对象的start()方法来启动这个线程，而非直接调用run()\",\"要想实现多线程，必须在主线程中创建新的线程对象。\"]},\"194\":{\"h\":\"方式一，继承Thread类\",\"t\":[\"创建一个继承于Thread类的子类\",\"重写Thread类的run() ----> 将此线程要执行的操作声明在此方法体中\",\"创建当前Thread的子类的对象\",\"通过对象调用start() 1.启动线程 2.调用当前前程的run方法\",\"public class Test { public static void main(String[] args) { PrintNumber t1 = new PrintNumber(); t1.start(); System.out.println(\\\"hello\\\");//看一下在哪里如果再写一个循环打印出的数字会有交互 } } class PrintNumber extends Thread{ @Override public void run() { for(int i=1;i<=100;i++){ if(i%2==0){ System.out.println(i); System.out.println(Thread.currentThread().getName());//当前线程的名字 } } } }\",\"问题1：能否使用t1.run()替换t1.start()的调用，实现分线程的创建和调用? 不能，那样就不是多线程了 问题2：再提供一个分线程，用于100以内偶数的遍历？ 不能让已经start的线程再次执行start，否则会报异常，可以在创建一个实例调用\"]},\"195\":{\"h\":\"方式二 实现Runnable接口\",\"t\":[\"步骤\",\"创建一个实现Runnable接口的类\",\"实现接口中的run() --> 将此线程要执行的操作声明在此方法发中\",\"创建当前实现类的对象\",\"将此对象作为参数传递到Thread类的构造器中，创建Thread类的实例new Thread(实例)\",\"Thread类的实例调用strat();\",\"共同点: ① 启动线程，使用的都是Thread类中定义的start() ② 创建的线程对象，都是Thread类或其子类的实例 不同点: 一个是类的继承，一个是接口的实现 建议，建议使用实现Runnable接口的方式 Runnable方式的好处:① 实现的方式，避免类的单继承的局限性 ② 更适合处理有共享数据的问题 ③ 实现了代码和数据的分离 联系 public class Thread implements Runnable 代理模式\"]},\"196\":{\"h\":\"线程的常用结构\",\"t\":[\"线程中的构造器\",\"public Thread() //分配一个新的线程对象 public Thread(String name)//分配一个指定名字的新的线程对象 public Thread(Runnable target) //指定创建线程的目标对象，它实现了Runnable接口中的run方法 public Thread(Runnable target,String name ) //分配一个带有指定目标新的线程对象并指定名字\",\"线程中的常用方法 start() 1,启动线程 2，调用线程的run() run() 将线程要执行的操作，声明在run()中 currentThread() 获取当前代码对应的线程 getName(): 获取线程名 setName() 设置线程名 sleep(Long millis) ： 静态方法，调用时可以使得当前线程睡眠指定的毫秒数 tip： 父类方法没有throws或者说抛出的异常很小，子类不能抛出比父类大 yield() 静态方法，一旦执行此方法，就释放CPU的执行权 join(); 在线程a中通过线程b调用join() 意味着线程a进入阻塞状态，直到线程b执行结束，线程a才结束阻塞状态，继续执行 isAlive() 判断当前线程是否存活 过时的方法 stop();不建议使用，强行结束一个线程的执行 void suspend/resume 好比播放器的暂停和回复，二者必须成对出现，可能造成死锁，不建议使用\",\"线程的优先级 Thread内部声明的三个常量 MAX_PRIPORITY(10) 最高优先级 MIN_PRIPORITY(1) 最低优先级 NORM_PRIPORITY(5) 普通优先级，默认情况下main线程具有普通优先级\",\"getPriority() 获取线程的优先级 setPriority() 设置线程的优先级 [1-10] 4. 多线程的声明周期 JDK1.5之前：5种状态 就绪<--阻塞<--运行 新建-->就绪<-->运行-->死亡， 阻塞是一个临时状态\",\"JDK1.5之后 计时等待<-- 新建-->准备<--->运行-->死亡 锁阻塞 无限等待\"]},\"197\":{\"h\":\"线程安全问题及解决\",\"t\":[\"当我们使用多个线程访问同一资源(可以是同一变量，同一个文件，同一条记录等)的时候， 若多个线程只有读操作，那么不会发生线程安全问题，但是如果多个线程中对资源有读和写的操作 就容易出现安全问题。\",\"线程的安全问题及线程的同步机制\",\"多线程卖票，出现的问题，出现了重票和错票\",\"什么原因导致的？线程1操作ticket的过程中，尚未结束的情况下，其他线程也参与进来，对ticket进行操作\",\"如何解决？必须保证一个线程a在操作ticket的过程中，其他线程必须等待，直到线程a操作ticket结束以后，其他线程才可以操作ticket\",\"Java是如何解决线程的安全问题？使用线程的同步机制 方式一，同步代码块 synchronized(同步监视器){ //需要被同步的代码 }\",\"说明,\",\"需要被同步的代码，即为操作共享数据的代码。 共享数据，即多个线程都需要操作的数据，比如ticket 需要被同步的代码，在被synchronized包裹以后，就使得一个线程在操作这些代码的过程中，其他线程必须等待。 同步监视器，俗称锁，那个线程获取了锁，那个线程就能执行需要被同步的代码。 同步监视器可以使用任何一个类的对象充当，但是，多个线程必须共用同一个同步监视器\",\"注意： 在实现Runnable接口的方式中，同步监视器按可以考虑使用this 在继承Thread类的方式中，同步监视器要慎用this，可以考虑使用 当前类.class\",\"方式二，同步方法\",\"形参不能改变实参的值\",\"package com.wzy.javawork; public class javaWork { public static void main(String[] args) { fu f = new fu(); zi z = new zi(); System.out.println(f.getA());//10 z.set(20); System.out.println(z.getA()); // 这里会打印出 20，因为 zi 类的 set 方法修改了父类的 a 值 z.set(20);//实参 这里没变化的原因就是形参不能改变实参的值 System.out.println(f.getA()); // 这里会打印出 20，因为 zi 类的 set 方法再次修改了父类的 a 值 f.setA(60); System.out.println(f.getA()); // 这里会打印出 60，因为 f 类自己的 setA 方法修改了 a 值 System.out.println(z.getA()); // 这里会打印出 60，因为 f 类自己的 setA 方法修改了 a 值，影响了 zi 类的 a 值 } } class fu{ int a=10; public int getA() { return a; } public void setA(int b) { this.a = b; } } class zi extends fu{ public void set(int b) {//形参 super.setA(b); // 正确地调用父类的 setA 方法 } }\",\"集合迭代器抛出异常的问题\",\"Iterator<String> iterator = ls1.iterator(); while (iterator.hasNext()) { String item = iterator.next(); if (\\\"def\\\".equals(item)) { count++; iterator.remove(); //ls1.remove(1);这样写就会报错 /** * 需要用iterator内部的remove * 因为查看源码可知调用List的add 或remove * modCount（被修改的次数）都会+1 * 而原本的expectedModCount是暂时不变的 * 如果调用外部的remove会使expectedModCount和modCount不相等而抛出异常 * * 所以向遍历容器/集合的元素且同时remove等操作时 * 应尽量调用其对应的迭代器 * 并通过迭代器的hashNext,next,remove进行操作 * */ } }\"]},\"198\":{\"c\":[\"java\"]},\"199\":{\"c\":[\"java基础\"]},\"200\":{\"h\":\"java扩展\",\"t\":[\"Java提供的网络类库，它可以实现无痛的网络连接，联网的底层细节被隐藏在java的本机安装系统里面，有JVM进行控制，并且Java实现了一个跨平台的网络库 C/S架构 客户端/服务端 B/S架构 浏览器/服务器 本地回路地址：127.0.0.1 公认端口HTTP(80) FTP(21) Telnet(23) 注册端口 MySQL(3306) 如果端口号被另一个服务或应用所占，会导致当前程序启动失败 OSI参考模型（七层）过于理想化，未能推广 TCP/IP参考模型 ： 应用层 传输层 网络层 物理+数据链路层\",\"实例化的方式\",\"InetAddress getByName(String host)\",\"InetAddress getLocalHost()\",\" public static void main(String[] args) { try { //1.实例化 //getByName()获取指定ip对应的InetAddress的实例 InetAddress inet1 = InetAddress.getByName(\\\"192.168.23.31\\\");//也可以写域名 System.out.println(inet1);//打印出地址 //getLocalHost 获取本机ip对应的InetAddress的实例 InetAddress inet2 = InetAddress.getLocalHost(); System.out.println(inet2);//显示本机局域网ip //2.两个常用的方法 System.out.println(inet1.getHostAddress()); System.out.println(inet1.getHostName());//域名 } catch (UnknownHostException e) { e.printStackTrace(); } }\"]},\"201\":{\"h\":\"Socket类\",\"t\":[\"网络上具有唯一标识的ip地址和端口号组合在一起构成唯一能识别的标识符套接字(Socket)\",\"利用套接字开发网路应用程序已被广泛的采用，以至于成为事实上的标准，网络通信其实就是Socket间的通信。\",\"通信的两端都要有Socket，是两台机器间通信的端点。\",\"Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。\",\"一般主动发起通信的应用程序属客户端，等待通信请求的为服务端\",\"Socket分类\",\"流套接字(stream socker) 使用TCP提供可依赖的字节流服务\",\"ServerSocket 此类实现TCP服务器套接字，服务器套接字等待请求通过网络传入\",\"Socket此类实现客户端套接字，接字是两台机器间通信的端点。\",\"数据包套接字(datagram socket) 使用UDP提供尽力而为的数据报服务\",\"DatagramSocket 此类表示用来发送和接收UDP数据包的套接字\"]},\"202\":{\"h\":\"Socket相关API\",\"t\":[\"客户端给服务端发送消息 客户端\",\" public static void main(String[] args) { Socket socket = null; OutputStream os = null; ByteArrayOutputStream baos = null; try { //创建一个Socket InetAddress inetAddress = InetAddress.getByName(\\\"127.0.0.1\\\");//声明ip地址 int port = 8989;//声明对方的端口号 socket = new Socket(inetAddress, port); //发送数据 os = socket.getOutputStream(); os.write(\\\"你好，我是客户端，请多多关照。\\\".getBytes()); //客户端表明不再继续发送数据 不写这个服务器会一直等待！！！ socket.shutdownOutput(); //接受来自服务端的消息 InputStream is = socket.getInputStream(); byte[] buffer = new byte[1024];//小了会出现乱码 int len; //读取来袭服务端的消息 baos = new ByteArrayOutputStream(); while((len=is.read(buffer)) != -1){ baos.write(buffer,0,len); } System.out.println(baos.toString()); } catch (IOException e) { e.printStackTrace(); } finally { try { baos.close(); } catch (IOException e) { throw new RuntimeException(e); } //关闭Socket try { if (socket != null) socket.close(); } catch (IOException e) { e.printStackTrace(); } try { if (os != null) { os.close(); } } catch (IOException e) { e.printStackTrace(); } } }\",\"服务端\",\" public static void main(String[] args) { ServerSocket serverSocket = null; Socket socket = null;//阻塞式的方法 一直等着 InputStream is = null; OutputStream os = null;//得到一个输出流，给客户端发送消息 try { //1.创建一个ServerSocket int port = 8989; serverSocket = new ServerSocket(port); //2.调用accept() 接收客户端的Socket socket = serverSocket.accept(); socket.getInetAddress().getHostAddress();//得到发来消息的ip //3.接收数据 is = socket.getInputStream(); byte[] buffer = new byte[1024];//小了会出现乱码 int len; //解决上面小了会出现问题 ByteArrayOutputStream baos = new ByteArrayOutputStream();//内部，维护了一个byte[] while((len=is.read(buffer)) != -1){ //错误的，可能会出现乱码 // String str = new String(buffer,0,len); // System.out.print(str); baos.write(buffer,0,len); } System.out.println(baos.toString()); System.out.println(\\\"\\\\n数据接收完毕\\\"); //服务端发送数据给客户端 os = socket.getOutputStream(); os.write(\\\"成功接受数据!\\\".getBytes()); } catch (IOException e) { e.printStackTrace(); } finally { //4.关闭Socket，ServerSocket,流 try { os.close(); } catch (IOException e) { throw new RuntimeException(e); } try { if(socket!=null) socket.close(); } catch (IOException e) { e.printStackTrace(); } try { serverSocket.close(); } catch (IOException e) { e.printStackTrace(); } try { if(is != null) is.close(); } catch (IOException e) { e.printStackTrace(); } } }\",\"注意上面代码是如何解决出现乱码问题的。 如何解决服务器一直等待的问题的\"]},\"203\":{\"h\":\"聊天室项目\",\"t\":[\"客户端有三个类\",\"public class Client { public static void main(String[] args) throws Exception{ int port = 8989; //连接服务器 Socket socket = new Socket(\\\"139.9.114.22\\\",port); //开启两个线程 //一个负责看别人聊，即接受服务器转发的消息 Receive receive = new Receive(socket); receive.start(); //一个线程负责发送自己的话 Send send = new Send(socket); send.start(); send.join();//等我发送线程结束了，才结束整个程序 socket.close(); } public class Send extends Thread { private Socket socket; public Send(Socket socket) { super(); this.socket = socket; } public void run() { try { Scanner input = new Scanner(System.in); OutputStream outputStream = socket.getOutputStream(); PrintStream ps = new PrintStream(outputStream); while (true) { System.out.println(\\\"自己的话:\\\"); String str = input.nextLine(); if (\\\"bye\\\".equals(str)) { break; } ps.println(str); } input.close(); } catch (IOException e) { e.printStackTrace(); } } } public class Receive extends Thread{ private Socket socket; public Receive(Socket socket){ super(); this.socket = socket; } public void run(){ try { InputStream inputStream = socket.getInputStream(); Scanner input = new Scanner(inputStream); while(input.hasNextLine()){ String line = input.nextLine(); System.out.println(line); } } catch (IOException e) { e.printStackTrace(); } } }\",\"服务端\",\"public class Server { //用来存储所有在线的客户端 static HashSet<Socket> online = new HashSet<Socket>(); public static void main(String[] args) throws Exception{ ServerSocket server = new ServerSocket(8989); while(true){ Socket socket = server.accept(); online.add(socket);//连接的对象存进集合 MessageHandler mh = new MessageHandler(socket);//把当前的对象传送过去 mh.start();//开启多线程 } } static class MessageHandler extends Thread{ private Socket socket; private String ip; public MessageHandler(Socket socket){ super(); this.socket = socket; } public void run(){ try { ip = socket.getInetAddress().getHostAddress(); sendToOther(ip+\\\"上线了\\\"); InputStream input = socket.getInputStream(); InputStreamReader reader = new InputStreamReader(input); BufferedReader br = new BufferedReader(reader); String str; while((str = br.readLine())!=null){ sendToOther(ip+\\\":\\\"+str); } sendToOther(ip + \\\"下线了\\\"); } catch (IOException e) { e.printStackTrace(); } finally { online.remove(socket); } } public void sendToOther(String message) throws IOException{ for(Socket on :online){ OutputStream every = on.getOutputStream(); PrintStream ps = new PrintStream(every); ps.println(message); } } } }\",\"程序：为了完成特定任务，用某种语言编写的一组指令的集合，即指一段静态的代码，静态对象。\",\"进程：程序的一次执行过程，或是正在内存中运行的应用程序，如运行中的qq，运行中的网易云音乐播放器\",\"每一个进程都有一个独立的内存空间，系统运行一个程序即是一个进程从创建，运行到消亡的过程。（生命周期）\",\"程序是静态的，进程是动态的\",\"进程作为操作系统调度和分配资源的最小单位（亦是刺痛运行程序的基本单位），系统在运行时会为每个进程分配不同的内存区域\",\"现代的操作系统，大都支持多进程的，支持同时运行多个程序。\",\"线程：进程可进一步细化为线程，是程序内部的一条执行路径，一个进程至少有一个线程。\",\"一个进程同一时间若并行执行多个线程，就是支持多线程的\",\"线程作为CPU调度和执行的最小单位\",\"一个进程中的多个线程共享相同的内存单元，他们从同一个堆中分配对象，可以访问相同的变量和对象，这就使得线程间通信更简便，高效，但多个线程操作共享的系统资源可能就会带来安全隐患。\",\"不同进程之间是不共享内存的 进程之间的数据交换和通信成本很高\",\"线程调度\",\"分时调度\",\"抢占式调度\",\"并行(parallel)：指两个或多个事件咋同一时刻发生（同时发生），指在同一时刻，有多条指令在多个CPU上同时执行，比如多个人同时做不同的事。 并发(concurrency)：指两个或多个事件在同一时间段内发生，即在一段事件内，有多条指令在单个CPU上快速轮换，交替执行，使得在宏观上具有多个进程同时执行的效率。\"]},\"204\":{\"h\":\"创建和启动线程\",\"t\":[\"java语言的JVm允许程序运行多个线程，使用java.lang.Thread类代表线程，所有的线程对象都必须是Thread类或其子类的实例\",\"Thread类的特性\",\"每个线程都是通过特定Thread对象的start()方法来启动这个线程，而非直接调用run()\",\"要想实现多线程，必须在主线程中创建新的线程对象。\"]},\"205\":{\"h\":\"方式一，继承Thread类\",\"t\":[\"创建一个继承于Thread类的子类\",\"重写Thread类的run() ----> 将此线程要执行的操作声明在此方法体中\",\"创建当前Thread的子类的对象\",\"通过对象调用start() 1.启动线程 2.调用当前前程的run方法\",\"public class Test { public static void main(String[] args) { PrintNumber t1 = new PrintNumber(); t1.start(); System.out.println(\\\"hello\\\");//看一下在哪里如果再写一个循环打印出的数字会有交互 } } class PrintNumber extends Thread{ @Override public void run() { for(int i=1;i<=100;i++){ if(i%2==0){ System.out.println(i); System.out.println(Thread.currentThread().getName());//当前线程的名字 } } } }\",\"问题1：能否使用t1.run()替换t1.start()的调用，实现分线程的创建和调用? 不能，那样就不是多线程了 问题2：再提供一个分线程，用于100以内偶数的遍历？ 不能让已经start的线程再次执行start，否则会报异常，可以在创建一个实例调用\"]},\"206\":{\"h\":\"方式二 实现Runnable接口\",\"t\":[\"步骤\",\"创建一个实现Runnable接口的类\",\"实现接口中的run() --> 将此线程要执行的操作声明在此方法发中\",\"创建当前实现类的对象\",\"将此对象作为参数传递到Thread类的构造器中，创建Thread类的实例new Thread(实例)\",\"Thread类的实例调用strat();\",\"共同点: ① 启动线程，使用的都是Thread类中定义的start() ② 创建的线程对象，都是Thread类或其子类的实例 不同点: 一个是类的继承，一个是接口的实现 建议，建议使用实现Runnable接口的方式 Runnable方式的好处:① 实现的方式，避免类的单继承的局限性 ② 更适合处理有共享数据的问题 ③ 实现了代码和数据的分离 联系 public class Thread implements Runnable 代理模式\"]},\"207\":{\"h\":\"线程的常用结构\",\"t\":[\"线程中的构造器\",\"public Thread() //分配一个新的线程对象 public Thread(String name)//分配一个指定名字的新的线程对象 public Thread(Runnable target) //指定创建线程的目标对象，它实现了Runnable接口中的run方法 public Thread(Runnable target,String name ) //分配一个带有指定目标新的线程对象并指定名字\",\"线程中的常用方法 start() 1,启动线程 2，调用线程的run() run() 将线程要执行的操作，声明在run()中 currentThread() 获取当前代码对应的线程 getName(): 获取线程名 setName() 设置线程名 sleep(Long millis) ： 静态方法，调用时可以使得当前线程睡眠指定的毫秒数 tip： 父类方法没有throws或者说抛出的异常很小，子类不能抛出比父类大 yield() 静态方法，一旦执行此方法，就释放CPU的执行权 join(); 在线程a中通过线程b调用join() 意味着线程a进入阻塞状态，直到线程b执行结束，线程a才结束阻塞状态，继续执行 isAlive() 判断当前线程是否存活 过时的方法 stop();不建议使用，强行结束一个线程的执行 void suspend/resume 好比播放器的暂停和回复，二者必须成对出现，可能造成死锁，不建议使用\",\"线程的优先级 Thread内部声明的三个常量 MAX_PRIPORITY(10) 最高优先级 MIN_PRIPORITY(1) 最低优先级 NORM_PRIPORITY(5) 普通优先级，默认情况下main线程具有普通优先级\",\"getPriority() 获取线程的优先级 setPriority() 设置线程的优先级 [1-10] 4. 多线程的声明周期 JDK1.5之前：5种状态 就绪<--阻塞<--运行 新建-->就绪<-->运行-->死亡， 阻塞是一个临时状态\",\"JDK1.5之后 计时等待<-- 新建-->准备<--->运行-->死亡 锁阻塞 无限等待\"]},\"208\":{\"h\":\"线程安全问题及解决\",\"t\":[\"当我们使用多个线程访问同一资源(可以是同一变量，同一个文件，同一条记录等)的时候， 若多个线程只有读操作，那么不会发生线程安全问题，但是如果多个线程中对资源有读和写的操作 就容易出现安全问题。\",\"线程的安全问题及线程的同步机制\",\"多线程卖票，出现的问题，出现了重票和错票\",\"什么原因导致的？线程1操作ticket的过程中，尚未结束的情况下，其他线程也参与进来，对ticket进行操作\",\"如何解决？必须保证一个线程a在操作ticket的过程中，其他线程必须等待，直到线程a操作ticket结束以后，其他线程才可以操作ticket\",\"Java是如何解决线程的安全问题？使用线程的同步机制 方式一，同步代码块 synchronized(同步监视器){ //需要被同步的代码 }\",\"说明,\",\"需要被同步的代码，即为操作共享数据的代码。 共享数据，即多个线程都需要操作的数据，比如ticket 需要被同步的代码，在被synchronized包裹以后，就使得一个线程在操作这些代码的过程中，其他线程必须等待。 同步监视器，俗称锁，那个线程获取了锁，那个线程就能执行需要被同步的代码。 同步监视器可以使用任何一个类的对象充当，但是，多个线程必须共用同一个同步监视器\",\"注意： 在实现Runnable接口的方式中，同步监视器按可以考虑使用this 在继承Thread类的方式中，同步监视器要慎用this，可以考虑使用 当前类.class\",\"方式二，同步方法\"]},\"209\":{\"c\":[\"后端\"]},\"210\":{\"c\":[\"java\"]},\"211\":{\"h\":\"AOP\",\"t\":[\"AOP可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善\",\"面向切面编程,是一种横向的操作思维,将代码中的重复的非核心业务提取到一个公共模块,最终利用动态代理技术横向插入到各个方法中。\",\"解决非核心代码冗余\",\"依赖\",\"<!-- spring-aspects会帮我们传递过来aspectjweaver(注解层) --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> <version>6.0.6</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>6.0.6</version> </dependency>\",\"需求： 需要在每个方法中，添加控制台输出，输出参数和输出计算后的返回值！\",\"代理模式:\",\"​ 二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——解耦。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。\",\"静态代理:\",\"写一个静态代理类,通过代理类调用核心业务类，这样很麻烦,静态代理确实实现了解耦,但是代码都写死了,不具备任何灵活性,还得声明多个代理类,产生了大量重复代码。\",\"动态代理:\",\"动态代理技术分类\",\"JDK动态代理：JDK原生的实现方式，需要被代理的目标类必须实现接口！他会根据目标类的接口动态生成一个代理对象！代理对象和目标对象有相同的接口！（拜把子）\",\"cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口！（认干爹）\",\"JDK动态代理技术实现（了解）\",\"两种方式代理都比较繁琐,我们可以使用SpringAOP框架\",\"AOP把软件系统分为两个部分:核心关注点和横切关注点。\",\"通知(增强),每一个横切关注点上要做的事情都需要写一个方法来实现,这样的方法就叫通知方法\",\"前置通知：在被代理的目标方法前执行\",\"返回通知：在被代理的目标方法成功结束后执行（寿终正寝）\",\"异常通知：在被代理的目标方法异常结束后执行（死于非命）\",\"后置通知：在被代理的目标方法最终结束后执行（盖棺定论）\",\"环绕通知：使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置\",\"连接点 joinpoint\",\"切入点 pointcut\",\"切面 aspect 切入点和通知的结合。是一个类。\",\"目标 target\",\"被代理的目标对象。\",\"代理 proxy\",\"向目标对象应用通知之后创建的代理对象。\",\"织入 weave\",\"指把通知应用到目标上，生成代理对象的过程。可以在编译期织入，也可以在运行期织入，Spring采用后者。\",\"image-20240802162750173\"]},\"212\":{\"h\":\"AOP实现\",\"t\":[\"基于注解方式请查看尚硅谷官方文档\",\"/** * 定义方法存储增强代码 * 具体定义几个方法,根据插入的位置决定 * 使用注解配置,指定目标方法的位置 * 前置 @Before * 后置 @AfterReturning * 异常 @AfterThrowing * 最后 @After * 环绕 @Around * try{ * 前置 * 目标方法执行 * 后置 * }catch(){ * 异常 * }finally{ * 最后 * } * 配置切点表达式【选中插入的方法 切点】 * 补全注解,@Aspect=切点+增强 @Component * 开启aspect注解的支持 * @EnableAspectJAutoProxy(配置类上加这个注解) */ @Component @Aspect public class LOgAdvice { @Before(\\\"execution(* com.wzy.AOP.CalculatorPureImpl.*(..))\\\") public void start(){ System.out.println(\\\"方法开始\\\"); } @After(\\\"execution(* com.wzy.AOP.CalculatorPureImpl.*(..))\\\") public void after(){ System.out.println(\\\"方法结束\\\"); } @AfterThrowing(\\\"execution(* com.wzy.AOP.CalculatorPureImpl.*(..))\\\") public void error(){ System.out.println(\\\"方法报错\\\"); } }\",\"在测试中一定要使用接口进行传值,如果使用实现类,会报错,因为返回的是代理对象(jdbc)。\"]},\"213\":{\"h\":\"获取通知细节\",\"t\":[\" @Before(\\\"execution(* com.wzy.AOP.CalculatorPureImpl.*(..))\\\") public void start(JoinPoint joinPoint){ //1，获取类的信息 simpleName = CalculatorPureImpl String simpleName = joinPoint.getTarget().getClass().getSimpleName(); //获取方法名 name = add String name = joinPoint.getSignature().getName(); //获取参数列表 args = [Ljava.lang.Object;@2d1dee39 Object[] args = joinPoint.getArgs(); //访问修饰符 modi = public abstract int modifiers = joinPoint.getSignature().getModifiers();//这就是个数字1025 String modi = Modifier.toString(modifiers); } //返回的结果 @AfterReturning(value = \\\"execution(* com.wzy.AOP.CalculatorPureImpl.*(..))\\\",returning = \\\"result\\\") public void afterReturning(JoinPoint joinPoint,Object result){ } //异常的信息 @AfterThrowing(value = \\\"execution(* com.wzy.AOP.CalculatorPureImpl.*(..))\\\",throwing = \\\"throwable\\\") public void error(JoinPoint joinPoint,Throwable throwable){ System.out.println(\\\"方法报错\\\"); }\"]},\"214\":{\"h\":\"切面表达式语法\",\"t\":[\"img\",\"访问修饰符 public/private\",\"方法的返回参数类型！ 如果不考虑访问修饰符和返回值,之两个整合一起写*,如果不考虑必须都不考虑/都考虑\",\"包的位置 具体包 单层模糊 *单层模糊 ..任意层的模糊 ..不能开头\",\"类的名称 * 部分模糊*impl 以impl结尾的类\",\"方法名:语法和类名一致\",\"形参数列表 没有参数() 有参数(Strng,int) (..)有没有参数都行,有多个也可以 部分模糊(..String)\"]},\"215\":{\"h\":\"切面表达式提取和复用\",\"t\":[\"建议创建一个存储切点的类,单独维护切点表达式\",\"// 切入点表达式重用 @Pointcut(\\\"execution(public int com.atguigu.aop.api.Calculator.add(int,int)))\\\") public void declarPointCut() {} @Before(value = \\\"declarPointCut()\\\") public void printLogBeforeCoreOperation(JoinPoint joinPoint) {\",\"不同类中引用\",\"@Before(value = \\\"com.atguigu.spring.aop.aspect.LogAspect.declarPointCut()\\\") public Object roundAdvice(ProceedingJoinPoint joinPoint) {\"]},\"216\":{\"h\":\"Around\",\"t\":[\" /** * 环绕通知,需要你在通知中,定义目标方法的执行 * @param joinPoint 目标方法,(获取目标方法信息,多了一个执行方法) * @return 目标方法的返回值 */ @Around(\\\"execution(* com.wzy.AOP.CalculatorPureImpl.*(..))\\\") public Object transaction(ProceedingJoinPoint joinPoint){ //保证目标方法被执行即可 Object[] args = joinPoint.getArgs(); Object result = null; try { //before System.out.println(\\\"开启事务\\\"); result = joinPoint.proceed(args); System.out.println(\\\"结束事务\\\"); } catch (Throwable e) { System.out.println(\\\"事务回滚\\\"); throw new RuntimeException(e); }finally { } return result; }\"]},\"217\":{\"h\":\"切面优先级\",\"t\":[\"相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。\",\"使用 @Order 注解可以控制切面的优先级：\",\"@Order(较小的数)：优先级高\",\"@Order(较大的数)：优先级低\"]},\"218\":{\"h\":\"CGLib动态代理生效\",\"t\":[\"在目标类没有实现任何接口的情况下，Spring会自动使用cglib技术实现代理。\",\"a. 如果目标类有接口,选择使用jdk动态代理\",\"b. 如果目标类没有接口,选择cglib动态代理\",\"c. 如果有接口,接口接值\",\"d. 如果没有接口,类进行接值\"]},\"219\":{\"h\":\"XMl方式实现(了解)\",\"t\":[\"<!-- 配置目标类的bean --> <bean id=\\\"calculatorPure\\\" class=\\\"com.atguigu.aop.imp.CalculatorPureImpl\\\"/> <!-- 配置切面类的bean --> <bean id=\\\"logAspect\\\" class=\\\"com.atguigu.aop.aspect.LogAspect\\\"/> <!-- 配置AOP --> <aop:config> <!-- 配置切入点表达式 --> <aop:pointcut id=\\\"logPointCut\\\" expression=\\\"execution(* *..*.*(..))\\\"/> <!-- aop:aspect标签：配置切面 --> <!-- ref属性：关联切面类的bean --> <aop:aspect ref=\\\"logAspect\\\" order=\\\"5\\\"> <!-- aop:before标签：配置前置通知 --> <!-- method属性：指定前置通知的方法名 --> <!-- pointcut-ref属性：引用切入点表达式 --> <aop:before method=\\\"printLogBeforeCore\\\" pointcut-ref=\\\"logPointCut\\\"/> <!-- aop:after-returning标签：配置返回通知 --> <!-- returning属性：指定通知方法中用来接收目标方法返回值的参数名 --> <aop:after-returning method=\\\"printLogAfterCoreSuccess\\\" pointcut-ref=\\\"logPointCut\\\" returning=\\\"targetMethodReturnValue\\\"/> <!-- aop:after-throwing标签：配置异常通知 --> <!-- throwing属性：指定通知方法中用来接收目标方法抛出异常的异常对象的参数名 --> <aop:after-throwing method=\\\"printLogAfterCoreException\\\" pointcut-ref=\\\"logPointCut\\\" throwing=\\\"targetMethodException\\\"/> <!-- aop:after标签：配置后置通知 --> <aop:after method=\\\"printLogCoreFinallyEnd\\\" pointcut-ref=\\\"logPointCut\\\"/> <!-- aop:around标签：配置环绕通知 --> <!--<aop:around method=\\\"……\\\" pointcut-ref=\\\"logPointCut\\\"/>--> </aop:aspect> </aop:config>\"]},\"220\":{\"h\":\"\",\"t\":[\"导入依赖\",\"准备实体类\",\"创建一个mapper接口,mapperxml文件\",\"准备了mybatis的配置文件,链接数据库信息,mapper.xml位置...\",\"使用mybaitsapi进行数据库查找即可,SqlSessionFactory\",\"mybatis依赖\",\"<dependencies> <!-- mybatis依赖 --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.11</version> </dependency> <!-- MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带! --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> </dependencies>\",\"mybatiis配置文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --> <environments default=\\\"development\\\"> <!-- environment表示配置Mybatis的一个具体的环境 --> <environment id=\\\"development\\\"> <!-- Mybatis的内置的事务管理器 --> <transactionManager type=\\\"JDBC\\\"/> <!-- 配置数据源 --> <dataSource type=\\\"POOLED\\\"> <!-- 建立数据库连接的具体信息 --> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/mybatis-example\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"root\\\"/> </dataSource> </environment> </environments> <mappers> <!-- Mapper注册：指定Mybatis映射文件的具体位置 --> <!-- mapper标签：配置一个具体的Mapper映射文件 --> <!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --> <!-- 对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --> <mapper resource=\\\"mappers/EmployeeMapper.xml\\\"/> </mappers> </configuration>\",\"查询配置文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace等于mapper接口类的全限定名,这样实现对应 --> <mapper namespace=\\\"com.atguigu.mapper.EmployeeMapper\\\"> <!-- 查询使用 select标签 id = 方法名 resultType = 返回值类型 标签内编写SQL语句 --> <select id=\\\"selectEmployee\\\" resultType=\\\"com.atguigu.pojo.Employee\\\"> <!-- #{empId}代表动态传入的参数,并且进行赋值!后面详细讲解 --> select emp_id empId,emp_name empName, emp_salary empSalary from t_emp where emp_id = #{empId} </select> </mapper>\",\"测试类\",\"/** * projectName: com.atguigu.test * * description: 测试类 */ public class MyBatisTest { @Test public void testSelectEmployee() throws IOException { // 1.创建SqlSessionFactory对象 // ①声明Mybatis全局配置文件的路径 String mybatisConfigFilePath = \\\"mybatis-config.xml\\\"; // ②以输入流的形式加载Mybatis配置文件 InputStream inputStream = Resources.getResourceAsStream(mybatisConfigFilePath); // ③基于读取Mybatis配置文件的输入流创建SqlSessionFactory对象 SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // 2.使用SqlSessionFactory对象开启一个会话 SqlSession session = sessionFactory.openSession(); // 3.根据EmployeeMapper接口的Class对象获取Mapper接口类型的对象(动态代理技术) EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class); // 4. 调用代理类方法既可以触发对应的SQL语句 Employee employee = employeeMapper.selectEmployee(1); System.out.println(\\\"employee = \\\" + employee); // 4.关闭SqlSession session.commit(); //提交事务 [DQL不需要,其他需要] session.close(); //关闭会话 } }\"]},\"221\":{\"h\":\"IoC\",\"t\":[\"ioC容器\",\"Spring IoC 容器，负责实例化、配置和组装 bean（组件）核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。\",\"IoC（Inversion of Control）控制反转\",\"IoC 主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，不再是应用程序直接创建该对象，而是由 IoC 容器来创建和管理，即控制权由应用程序转移到 IoC 容器中，也就是“反转”了控制权。这种方式基本上是通过依赖查找的方式来实现的，即 IoC 容器维护着构成应用程序的对象，并负责创建这些对象。\",\"DI (Dependency Injection) 依赖注入\",\"DI 是指在组件之间传递依赖关系的过程中，将依赖关系在容器内部进行处理，这样就不必在应用程序代码中硬编码对象之间的依赖关系，实现了对象之间的解耦合。在 Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。\",\"ApplicationContext容器实现类：\",\"类型名\",\"简介\",\"ClassPathXmlApplicationContext\",\"通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象\",\"FileSystemXmlApplicationContext\",\"通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象\",\"AnnotationConfigApplicationContext\",\"通过读取Java配置类创建 IOC 容器对象\",\"WebApplicationContext\",\"专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。\",\"SpringIoc容器接口： \",\"BeanFactory 接口提供了一种高级配置机制，能够管理任何类型的对象，它是SpringIoC容器标准化超接口！\",\"ApplicationContext 是 BeanFactory 的子接口。\",\"ApplicationContext容器实现类：\",\"类型名\",\"简介\",\"ClassPathXmlApplicationContext\",\"通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象\",\"FileSystemXmlApplicationContext\",\"通过文件系统路径读取 XML 格式的配置文件创建IOC容器对象\",\"AnnotationConfigApplicationContext\",\"通过读取Java配置类创建IOC容器对象\",\"WebApplicationContext\",\"专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。\"]},\"222\":{\"h\":\"基于静态工厂实例化\",\"t\":[\"组件类\",\"public class ClientService { private static ClientService clientService = new ClientService(); private ClientService() {} public static ClientService createInstance() { return clientService; } }\",\"配置文件\",\"<bean id=\\\"clientService\\\" class=\\\"examples.ClientService\\\" factory-method=\\\"createInstance\\\"/>\",\"class属性：指定工厂类的全限定符！\",\"factory-method: 指定静态工厂方法，注意，该方法必须是static方法。\"]},\"223\":{\"h\":\"基于实例工厂实例化\",\"t\":[\"public class DefaultServiceLocator { private static ClientServiceImpl clientService = new ClientServiceImpl(); public ClientService createClientServiceInstance() { return clientService; } }\",\"2. xml配置文件编写 文件：resources/spring-bean-01.xml ```xml <!-- 将工厂类进行ioc配置 --> <bean id=\\\"serviceLocator\\\" class=\\\"examples.DefaultServiceLocator\\\"> </bean> <!-- 根据工厂对象的实例工厂方法进行实例化组件对象 --> <bean id=\\\"clientService\\\" factory-bean=\\\"serviceLocator\\\" factory-method=\\\"createClientServiceInstance\\\"/>\",\"- factory-bean属性：指定当前容器中工厂Bean 的名称。 - factory-method: 指定实例工厂方法名。注意，实例方法必须是非static的！ \"]},\"224\":{\"h\":\"构造器带参数的注入\",\"t\":[\"注入:将交给IoC管理的对象,送到需要它的地方(应用类型,或基本类型都能注入) 在spring配置文件(spring-IoC.xml)里面将类交给IoC容器管理。 ```xml <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!--将类com.wzy.ioc_o1.B交给IoC容器管理 --> <bean id=\\\"B1\\\" class=\\\"com.wzy.ioc_01.B\\\"></bean> <!-- id可以自己命名--> <!-- 如果构造对象时带有参数String name,B b;B是另一个类 会按照顺序new出来对象并交给IoC容器管理 --> <bean id=\\\"B1\\\" class=\\\"com.wzy.ioc_01.B\\\"></bean> <bean id=\\\"A2\\\" class=\\\"com.wzy.ioc_01.A\\\"> <constructor-arg index=\\\"0\\\" value=\\\"张三\\\"/> <constructor-arg index=\\\"1\\\" ref=\\\"B1\\\"/> </bean> </beans>\",\"new 出来带参对象时,参数的填写方式\",\" <!-- 场景1: 多参数，可以按照相应构造函数的顺序注入数据 --> <beans> <bean id=\\\"userService\\\" class=\\\"x.y.UserService\\\"> <!-- value直接注入基本类型值 --> <constructor-arg value=\\\"18\\\"/> <constructor-arg value=\\\"赵伟风\\\"/> <constructor-arg ref=\\\"userDao\\\"/> </bean> <!-- 被引用类bean声明 --> <bean id=\\\"userDao\\\" class=\\\"x.y.UserDao\\\"/> </beans> <!-- 场景2: 多参数，可以按照相应构造函数的名称注入数据 不知道为啥,我是用这种方式会出现警告,其他两种方式就没有 --> <beans> <bean id=\\\"userService\\\" class=\\\"x.y.UserService\\\"> <!-- value直接注入基本类型值 --> <constructor-arg name=\\\"name\\\" value=\\\"赵伟风\\\"/> <constructor-arg name=\\\"userDao\\\" ref=\\\"userDao\\\"/> <constructor-arg name=\\\"age\\\" value=\\\"18\\\"/> </bean> <!-- 被引用类bean声明 --> <bean id=\\\"userDao\\\" class=\\\"x.y.UserDao\\\"/> </beans> <!-- 场景3: 多参数，可以按照相应构造函数的角标注入数据 index从0开始 构造函数(0,1,2....) --> <beans> <bean id=\\\"userService\\\" class=\\\"x.y.UserService\\\"> <!-- value直接注入基本类型值 --> <constructor-arg index=\\\"1\\\" value=\\\"赵伟风\\\"/> <constructor-arg index=\\\"2\\\" ref=\\\"userDao\\\"/> <constructor-arg index=\\\"0\\\" value=\\\"18\\\"/> </bean> <!-- 被引用类bean声明 --> <bean id=\\\"userDao\\\" class=\\\"x.y.UserDao\\\"/> </beans>\",\" - constructor-arg标签：指定构造参数和对应的值 - constructor-arg标签：name属性指定参数名、index属性指定参数角标、value属性指定普通属性值\"]},\"225\":{\"h\":\"基于Setter方法的注入\",\"t\":[\"<bean id=\\\"simpleMovieLister\\\" class=\\\"examples.SimpleMovieLister\\\"> <!-- setter方法，注入movieFinder对象的标识id name = 属性名(setter方法 去set和首字母小写的值 调用set方法的名) ref = 引用bean的id值 --> <property name=\\\"movieFinder\\\" ref=\\\"movieFinder\\\" /> <!-- setter方法，注入基本数据类型movieName name = 属性名 value= 基本类型值 --> <property name=\\\"movieName\\\" value=\\\"消失的她\\\"/> </bean> <bean id=\\\"movieFinder\\\" class=\\\"examples.MovieFinder\\\"/>\",\"property标签： 可以给setter方法对应的属性赋值\",\"property 标签： name属性代表set方法标识、ref代表引用bean的标识id、value属性代表基本属性值\"]},\"226\":{\"h\":\"如何实例化IoC容器\",\"t\":[\"//方式1:实例化并且指定配置文件 //参数：String...locations 传入一个或者多个配置文件 ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\\\"services.xml\\\", \\\"daos.xml\\\"); //方式2:先实例化，再指定配置文件，最后刷新容器触发Bean实例化动作 [springmvc源码和contextLoadListener源码方式] ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(); //设置配置配置文件,方法参数为可变参数,可以设置一个或者多个配置 context.setConfigLocations(\\\"services.xml\\\", \\\"daos.xml\\\"); //后配置的文件,需要调用refresh方法,触发刷新配置 context.refresh();\",\"//方式1: 根据id获取 //没有指定类型,返回为Object,需要类型转化! HappyComponent happyComponent = (HappyComponent) iocContainer.getBean(\\\"bean的id标识\\\"); //使用组件对象 happyComponent.doWork(); //方式2: 根据类型获取 //ioc的配置一定是实现类,但是可以根据接口类型获取值 //根据类型获取,但是要求,同类型(当前类,或者之类,或者接口的实现类)只能有一个对象交给IoC容器管理 //配置两个或者以上出现: org.springframework.beans.factory.NoUniqueBeanDefinitionException 问题 HappyComponent happyComponent = iocContainer.getBean(HappyComponent.class); happyComponent.doWork(); //方式3: 根据id和类型获取 HappyComponent happyComponent = iocContainer.getBean(\\\"bean的id标识\\\", HappyComponent.class); happyComponent.doWork(); 根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 instanceof 指定的类型』的返回结果， 只要返回的是true就可以认定为和类型匹配，能够获取到。\"]},\"227\":{\"h\":\"周期管理\",\"t\":[\"在BeanOne类中声明一个方法init/destory方法(无形参列表的方法),就可以在xml中设置init-method/destory-method在IoC容器实例化时/销毁时进行调用。\",\"<beans> <bean id=\\\"beanOne\\\" class=\\\"examples.BeanOne\\\" init-method=\\\"init\\\" /> <bean id=\\\"beanTwo\\\" class=\\\"examples.BeanTwo\\\" destroy-method=\\\"cleanup\\\" /> </beans>\"]},\"228\":{\"h\":\"组件作用域\",\"t\":[\"取值\",\"含义\",\"创建对象的时机\",\"默认值\",\"singleton\",\"在 IOC 容器中，这个 bean 的对象始终为单实例\",\"IOC 容器初始化时\",\"是\",\"prototype\",\"这个 bean 在 IOC 容器中有多个实例\",\"获取 bean 时\",\"否\",\"如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）\",\"取值\",\"含义\",\"创建对象的时机\",\"默认值\",\"request\",\"请求范围内有效的实例\",\"每次请求\",\"否\",\"session\",\"会话范围内有效的实例\",\"每次会话\",\"否\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- 这样配置每次getBean获得的对象就不是同一个对象了--> <bean id=\\\"A1\\\" class=\\\"com.wzy.ioc_01.A\\\" scope=\\\"prototype\\\"/> </beans>\"]},\"229\":{\"h\":\"FactoryBean\",\"t\":[\"FactoryBean<T> 接口提供三种方法：\",\"T getObject(): \",\"返回此工厂创建的对象的实例。该返回值会被存储到IoC容器！\",\"boolean isSingleton(): \",\"如果此 FactoryBean 返回单例，则返回 true ，否则返回 false 。此方法的默认实现返回 true （注意，lombok插件使用，可能影响效果）。\",\"Class<?> getObjectType(): 返回 getObject() 方法返回的对象类型，如果事先不知道类型，则返回 null 。\",\"A为自己设置的另一个类\",\"public class FactoryBean1 implements FactoryBean<A> { @Override public A getObject() throws Exception { //使用你自己的方法实例化对象 A a = new A(); return a; } @Override public Class<?> getObjectType() { return A.class; } }\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- id是getObiect返回的对象表示 工厂bean的标识为&+id 如果想要获取FactoryBean对象, 直接在id前添加&符号即可! class是factoryBean1标准化工厂类 --> <bean id=\\\"A\\\" class=\\\"com.wzy.ioc_01.FactoryBean1\\\"/> </beans>\"]},\"230\":{\"h\":\"FactoryBean和BeanFactory区别\",\"t\":[\"**FactoryBean **是 Spring 中一种特殊的 bean，可以在 getObject() 工厂方法自定义的逻辑创建Bean！是一种能够生产其他 Bean 的 Bean。FactoryBean 在容器启动时被创建，而在实际使用时则是通过调用 getObject() 方法来得到其所生产的 Bean。因此，FactoryBean 可以自定义任何所需的初始化逻辑，生产出一些定制化的 bean。\",\"一般情况下，整合第三方框架，都是通过定义FactoryBean实现！！！\",\"BeanFactory 是 Spring 框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理 bean 的生命周期、配置文件的加载和解析、bean 的装配和依赖注入等。BeanFactory 接口提供了访问 bean 的方式，例如 getBean() 方法获取指定的 bean 实例。它可以从不同的来源（例如 Mysql 数据库、XML 文件、Java 配置类等）获取 bean 定义，并将其转换为 bean 实例。同时，BeanFactory 还包含很多子类（例如，ApplicationContext 接口）提供了额外的强大功能。\",\"总的来说，FactoryBean 和 BeanFactory 的区别主要在于前者是用于创建 bean 的接口，它提供了更加灵活的初始化定制功能，而后者是用于管理 bean 的框架基础接口，提供了基本的容器功能和 bean 生命周期管理。\"]},\"231\":{\"h\":\"引入配置文件,并使用其值\",\"t\":[\" <!-- 引入jdbc.properties配置文件--> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\"/> <!--使用配置文件里设置的值--> <bean id=\\\"userController2\\\" class=\\\"com.wzy.ioc.UserController\\\"> <property name=\\\"name\\\" value=\\\"${jdbc.username}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\"/> </bean>\",\"注解+xml扫描\",\"第三方类(jar包)还是要写xml格式管理和注入，注入后用注解也能使用\",\"注解\",\"说明\",\"@Component\",\"该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。\",\"@Repository\",\"该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"@Service\",\"该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"@Controller\",\"该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"对于Spring使用IOC容器管理这些组件来说没有区别，也就是语法层面没有区别。所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。 注意：虽然它们本质上一样，但是为了代码的可读性、程序结构严谨！我们肯定不能随便胡乱标记。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 配置自动扫描的包 --> <!-- 1.包要精准,提高性能! 2.会扫描指定的包和子包内容 3.多个包可以使用,分割 例如: com.atguigu.controller,com.atguigu.service等 --> <context:component-scan base-package=\\\"com.atguigu.components\\\"/> </beans>\",\"情况2：指定排除组件\",\"<!-- 情况三：指定不扫描的组件 --> <context:component-scan base-package=\\\"com.atguigu.components\\\"> <!-- context:exclude-filter标签：指定排除规则 --> <!-- type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 --> <!-- expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 --> <context:exclude-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Controller\\\"/> </context:component-scan>\",\"情况3：指定扫描组件\",\"<!-- 情况四：仅扫描指定的组件 --> <!-- 仅扫描 = 关闭默认规则 + 追加规则 --> <!-- use-default-filters属性：取值false表示关闭默认扫描规则 --> <context:component-scan base-package=\\\"com.atguigu.ioc.components\\\" use-default-filters=\\\"false\\\"> <!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --> <context:include-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Controller\\\"/> </context:component-scan>\",\"组件名字默认为类的首字母小写,要改名@Controller(value=\\\"name\\\")或者@Controller(\\\"name\\\")\"]},\"232\":{\"h\":\"作用域和周期方法\",\"t\":[\"周期方法命名随意,要没有形参\",\"在初始化方法前加上注解@PostConstruct在销毁方法之前添加注解@PreDestory\",\"组件作用域可参考xml组件管理的组件作用域。\",\"@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON) //单例,默认值 @Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE) //多例 二选一 public class BeanOne { //周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表 @PostConstruct //注解制指定初始化方法 public void init() { // 初始化逻辑 } }\",\"多例模式不管destory方法\"]},\"233\":{\"h\":\"引用类型自动装配(DI)\",\"t\":[\"参与自动装配的组件（需要装配、被装配）全部都必须在IoC容器中。\",\"@Autowired注解\",\"在成员变量上直接标记@Autowired注解即可，不需要提供setXxx()方法。以后我们在项目中的正式用法就是这样。\",\"如何装配:\",\"能够找到唯一的 bean：直接执行装配\",\"和所需类型匹配的 bean 不止一个(多个)\",\"方案1:成员属性指定@Autowired多个组件的时候,默认会根据成员属性名查找\",\"方案2:使用@Qualifier注解,不能单独使用必须配合@Autowired，指定bean的id\",\"@Controller(value = \\\"tianDog\\\") public class SoldierController { @Autowired @Qualifier(value = \\\"maomiService222\\\") // 根据面向接口编程思想，使用接口类型引入Service组件 private ISoldierService soldierService;\",\"佛系装配(装不上不报错，不推荐)\",\"@Controller(value = \\\"tianDog\\\") public class SoldierController { // 给@Autowired注解设置required = false属性表示：能装就装，装不上就不装 @Autowired(required = false) private ISoldierService soldierService;\",\"整合注解\",\"@Resource(name=\\\"userServiceImpl\\\")=@Autowried(required = true) + @Qualifier(value = \\\"userServiceImpl\\\")\",\"需要导入依赖(高于JDK11或低于JDK8需要引入以下依赖)\",\"<dependency> <groupId>jakarta.annotation</groupId> <artifactId>jakarta.annotation-api</artifactId> <version>2.1.1</version> </dependency>\"]},\"234\":{\"h\":\"基本属性赋值\",\"t\":[\"直接赋值\",\"注解赋值@Value(\\\"19\\\") 通常用于注入外部化属性,读取配置文件.\"]},\"235\":{\"h\":\"引入配置文件并使用其值\",\"t\":[\"引入配置文件\",\" <context:property-placeholder location=\\\"classpath:jdbc.properties\\\"/>\",\"在对应的属性上面使用\",\" //情况1: ${key} 取外部配置key对应的值! //情况2: ${key:defaultValue} 没有key,可以给与默认值 @Value(\\\"${jdbc.username}\\\") public String name;\",\"完全替代xml配置\",\"配置类\",\"使用 @Configuration 注解将一个普通的类标记为 Spring 的配置类。\",\"import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; //标注当前类是配置类，替代application.xml @Configuration //使用注解读取外部配置，替代 <context:property-placeholder标签 @PropertySource(\\\"classpath:application.properties\\\") //使用@ComponentScan注解,可以配置扫描包,替代<context:component-scan标签 @ComponentScan(basePackages = {\\\"com.atguigu.components\\\"}) public class MyConfiguration { }\",\"总结：\",\"@Configuration指定一个类为配置类，可以添加配置注解，替代配置xml文件\",\"@ComponentScan(basePackages = {\\\"包\\\",\\\"包\\\"}) 替代<context:component-scan标签实现注解扫描\",\"@PropertySource(\\\"classpath:配置文件地址\\\") 替代 <context:property-placeholder标签\",\"配合IoC/DI注解，可以总结：\",\"@Configuration指定一个类为配置类，可以添加配置注解，替代配置xml文件\",\"@ComponentScan(basePackages = {\\\"包\\\",\\\"包\\\"}) 替代<context:component-scan标签实现注解扫描\",\"@PropertySource(\\\"classpath:配置文件地址\\\") 替代 <context:property-placeholder标签\",\"配合IoC/DI注解，可以进行完整注解开发！进行完整注解开发！\"]},\"236\":{\"h\":\"@Bean定义组件\",\"t\":[\"场景需求：将Druid连接池对象存储到IoC容器\",\"需求分析：第三方jar包的类，添加到ioc容器，无法使用@Component等相关注解！因为源码jar包内容为只读模式！\",\"xml方式实现：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 引入外部属性文件 --> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\"/> <!-- 实验六 [重要]给bean的属性赋值：引入外部属性文件 --> <bean id=\\\"druidDataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"url\\\" value=\\\"${jdbc.url}\\\"/> <property name=\\\"driverClassName\\\" value=\\\"${jdbc.driver}\\\"/> <property name=\\\"username\\\" value=\\\"${jdbc.user}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\"/> </bean> </beans>\",\"配置类方式实现：\",\"@Bean 注释用于指示方法实例化、配置和初始化要由 Spring IoC 容器管理的新对象。对于那些熟悉 Spring 的 <beans/> XML 配置的人来说， @Bean 注释与 <bean/> 元素起着相同的作用。\",\"//标注当前类是配置类，替代application.xml @Configuration //引入jdbc.properties文件 @PropertySource({\\\"classpath:application.properties\\\",\\\"classpath:jdbc.properties\\\"}) @ComponentScan(basePackages = {\\\"com.atguigu.components\\\"}) public class MyConfiguration { //如果第三方类进行IoC管理,无法直接使用@Component相关注解 //解决方案: xml方式可以使用<bean标签 //解决方案: 配置类方式,可以使用方法返回值+@Bean注解 @Bean //下面的属性也可以单独声明成属性 public DataSource createDataSource(@Value(\\\"${jdbc.user}\\\") String username, @Value(\\\"${jdbc.password}\\\")String password, @Value(\\\"${jdbc.url}\\\")String url, @Value(\\\"${jdbc.driver}\\\")String driverClassName){ //使用Java代码实例化 DruidDataSource dataSource = new DruidDataSource(); dataSource.setUsername(username); dataSource.setPassword(password); dataSource.setUrl(url); dataSource.setDriverClassName(driverClassName); //返回结果即可 return dataSource; } }\"]},\"237\":{\"h\":\"高级特性：@Bean注解细节\",\"t\":[\"Bean源码\",\"public @interface Bean { //前两个注解可以指定Bean的标识 @AliasFor(\\\"name\\\") String[] value() default {}; @AliasFor(\\\"value\\\") String[] name() default {}; //autowireCandidate 属性来指示该 Bean 是否候选用于自动装配。 //autowireCandidate 属性默认值为 true，表示该 Bean 是一个默认的装配目标， //可被候选用于自动装配。如果将 autowireCandidate 属性设置为 false，则说明该 Bean 不是默认的装配目标，不会被候选用于自动装配。 boolean autowireCandidate() default true; //指定初始化方法 String initMethod() default \\\"\\\"; //指定销毁方法 String destroyMethod() default \\\"(inferred)\\\"; }\",\"周期方法如何指定\",\"原有注解方案:PostConstruct + PreDestroy 注解指定\",\"bean属性指定:initMethod / destoryMethod 指定\",\"@Bean 注释注释方法。使用此方法在指定为方法返回值的类型的 ApplicationContext 中注册 Bean 定义。缺省情况下，Bean 名称与方法名称相同。下面的示例演示 @Bean 方法声明：\",\"@Configuration public class AppConfig { @Bean public TransferServiceImpl transferService() { return new TransferServiceImpl(); } }\",\"前面的配置完全等同于下面的Spring XML：\",\"<beans> <bean id=\\\"transferService\\\" class=\\\"com.acme.TransferServiceImpl\\\"/> </beans>\",\"@Bean 初始化和销毁方法指定\",\"@Bean 注解支持指定任意初始化和销毁回调方法，非常类似于 Spring XML 在 bean 元素上的 init-method 和 destroy-method 属性，如以下示例所示：\",\"public class BeanOne { public void init() { // initialization logic } } public class BeanTwo { public void cleanup() { // destruction logic } } @Configuration public class AppConfig { @Bean(initMethod = \\\"init\\\") public BeanOne beanOne() { return new BeanOne(); } @Bean(destroyMethod = \\\"cleanup\\\") public BeanTwo beanTwo() { return new BeanTwo(); } }\",\"@Bean Scope作用域\",\"作用域:和以前一样@Scope注解,默认单例，可以在配置类的方法上面标注\"]},\"238\":{\"h\":\"Bean方法之间的依赖\",\"t\":[\"方案1：\",\"直接调用方法返回 Bean 实例：在一个 @Bean 方法中直接调用其他 @Bean 方法来获取 Bean 实例，虽然是方法调用，也是通过IoC容器获取对应的Bean，例如：\",\"@Configuration public class JavaConfig { @Bean public HappyMachine happyMachine(){ return new HappyMachine(); } @Bean public HappyComponent happyComponent(){ HappyComponent happyComponent = new HappyComponent(); //直接调用方法即可! happyComponent.setHappyMachine(happyMachine()); return happyComponent; } }\",\"方案2：\",\"参数引用法：通过方法参数传递 Bean 实例的引用来解决 Bean 实例之间的依赖关系，例如：\",\"package com.atguigu.config; import com.atguigu.ioc.HappyComponent; import com.atguigu.ioc.HappyMachine; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; /** * projectName: com.atguigu.config * description: 配置HappyComponent和HappyMachine关系 */ @Configuration public class JavaConfig { @Bean public HappyMachine happyMachine(){ return new HappyMachine(); } /** * 可以直接在形参列表接收IoC容器中的Bean! * 情况1: 直接指定类型即可 * 情况2: 如果有多个bean,(HappyMachine 名称 ) 形参名称等于要指定的bean名称! * 例如: * @Bean * public Foo foo1(){ * return new Foo(); * } * @Bean * public Foo foo2(){ * return new Foo() * } * @Bean * public Component component(Foo foo1 / foo2 通过此处指定引入的bean) */ @Bean public HappyComponent happyComponent(HappyMachine happyMachine){ HappyComponent happyComponent = new HappyComponent(); //赋值 happyComponent.setHappyMachine(happyMachine); return happyComponent; } }\"]},\"239\":{\"h\":\"Import多个配置类合并\",\"t\":[\"@Import 注释允许从另一个配置类加载 @Bean 定义，如以下示例所示：\",\"@Configuration public class ConfigA { @Bean public A a() { return new A(); } } @Configuration @Import(value={ConfigA.class}) public class ConfigB { @Bean public B b() { return new B(); } }\",\"现在，在实例化上下文时不需要同时指定 ConfigA.class 和 ConfigB.class ，只需显式提供 ConfigB ，如以下示例所示：\",\"public static void main(String[] args) { ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigB.class); // now both beans A and B will be available... A a = ctx.getBean(A.class); B b = ctx.getBean(B.class); }\",\"此方法简化了容器实例化，因为只需要处理一个类，而不是要求您在构造期间记住可能大量的 @Configuration 类。\",\"可以建一个根配置类,进行导入。\"]},\"240\":{\"h\":\"4.5.1 XML方式配置总结\",\"t\":[\"所有内容写到xml格式配置文件中\",\"声明bean通过<bean标签\",\"<bean标签包含基本信息（id,class）和属性信息 <property(set方法) name value / ref\",\"引入外部的properties文件可以通过<context:property-placeholder\",\"IoC具体容器实现选择ClassPathXmlApplicationContext对象\"]},\"241\":{\"h\":\"4.5.2 XML+注解方式配置总结\",\"t\":[\"注解负责标记IoC的类和进行属性装配\",\"xml文件依然需要，需要通过<context:component-scan标签指定注解范围\",\"标记IoC注解：@Component,@Service,@Controller,@Repository \",\"标记DI注解：@Autowired @Qualifier @Resource @Value\",\"IoC具体容器实现选择ClassPathXmlApplicationContext对象\"]},\"242\":{\"h\":\"4.5.3 完全注解方式配置总结\",\"t\":[\"完全注解方式指的是去掉xml文件，使用配置类 + 注解实现\",\"xml文件替换成使用@Configuration注解标记的类\",\"标记IoC注解：@Component,@Service,@Controller,@Repository \",\"标记DI注解：@Autowired @Qualifier @Resource @Value\",\"<context:component-scan标签指定注解范围使用@ComponentScan(basePackages = {\\\"com.atguigu.components\\\"})替代\",\"<context:property-placeholder引入外部配置文件使用@PropertySource({\\\"classpath:application.properties\\\",\\\"classpath:jdbc.properties\\\"})替代\",\"<bean 标签使用@Bean注解和方法实现\",\"IoC具体容器实现选择AnnotationConfigApplicationContext对象\",\"整合测试环境作用\",\"好处1：不需要自己创建IOC容器对象了\",\"好处2：任何需要的bean都可以在测试类中直接享受自动装配\",\"导入相关依赖\",\"<!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>6.0.6</version> <scope>test</scope> </dependency>\",\"整合测试注解使用\",\"//@SpringJUnitConfig(locations = {\\\"classpath:spring-context.xml\\\"}) //指定配置文件xml @SpringJUnitConfig(value = {BeanConfig.class}) //指定配置类 public class Junit5IntegrationTest { @Autowired private User user; @Test public void testJunit5() { System.out.println(user); } }\",\"空指针异常\",\"命名注入依赖了,测试的时候总是报出空指针异常\",\"原因:不能使用junit4且这两个包版本要相容\",\"<!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>6.0.6</version> <scope>test</scope> </dependency>\"]},\"243\":{\"h\":\"声明式事务\",\"t\":[\"​ 编程式事务是指手动编写程序来管理事务，即通过编写代码的方式直接控制事务的提交和回滚。在 Java 中，通常使用事务管理器(如 Spring 中的 PlatformTransactionManager)来实现编程式事务。\",\"​ 编程式事务的主要优点是灵活性高，可以按照自己的需求来控制事务的粒度、模式等等。但是，编写大量的事务控制代码容易出现问题，对代码的可读性和可维护性有一定影响。\",\"编程式的实现方式存在缺陷：\",\"细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。\",\"代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。\",\"​ 声明式事务是指使用注解或 XML 配置的方式来控制事务的提交和回滚。\",\"开发者只需要添加配置即可， 具体事务的实现由第三方框架实现，避免我们直接进行事务操作！\",\"使用声明式事务可以将事务的控制和业务逻辑分离开来，提高代码的可读性和可维护性。\",\"区别：\",\"编程式事务需要手动编写代码来管理事务\",\"而声明式事务可以通过配置文件或注解来控制事务。\",\"Spring声明式事务对应依赖\",\"spring-tx: 包含声明式事务实现的基本规范（事务管理器规范接口和事务增强等等）\",\"spring-jdbc: 包含DataSource方式事务管理器实现类DataSourceTransactionManager\",\"spring-orm: 包含其他持久层框架的事务管理器实现类例如：Hibernate/Jpa等\",\"我们现在要使用的事务管理器是org.springframework.jdbc.datasource.DataSourceTransactionManager，将来整合 JDBC方式、JdbcTemplate方式、Mybatis方式的事务实现！\",\"DataSourceTransactionManager类中的主要方法：\",\"doBegin()：开启事务\",\"doSuspend()：挂起事务\",\"doResume()：恢复挂起的事务\",\"doCommit()：提交事务\",\"doRollback()：回滚事务\"]},\"244\":{\"h\":\"配置\",\"t\":[\"<dependencies> <!--spring context依赖--> <!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.6</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>6.0.6</version> <scope>test</scope> </dependency> <dependency> <groupId>jakarta.annotation</groupId> <artifactId>jakarta.annotation-api</artifactId> <version>2.1.1</version> </dependency> <!-- 数据库驱动 和 连接池--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency> <!-- spring-jdbc --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>6.0.6</version> </dependency> <!-- 声明式事务依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>6.0.6</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> <version>6.0.6</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>6.0.6</version> </dependency> </dependencies>\",\"配置类上面加上\",\"@EnableTransactionManagement注解,开启事务\",\"配置类\",\"@Configuration @ComponenScan(\\\"com.atguigu\\\") @PropertySource(value = \\\"classpath:jdbc.properties\\\") @EnableTransactionManagement public class DataSourceConfig { /** * 实例化dataSource加入到ioc容器 * @param url * @param driver * @param username * @param password * @return */ @Bean public DataSource dataSource(@Value(\\\"${atguigu.url}\\\")String url, @Value(\\\"${atguigu.driver}\\\")String driver, @Value(\\\"${atguigu.username}\\\")String username, @Value(\\\"${atguigu.password}\\\")String password){ DruidDataSource dataSource = new DruidDataSource(); dataSource.setDriverClassName(driver); dataSource.setUrl(url); dataSource.setUsername(username); dataSource.setPassword(password); return dataSource; } /** * 实例化JdbcTemplate对象,需要使用ioc中的DataSource * @param dataSource * @return */ @Bean public JdbcTemplate jdbcTemplate(DataSource dataSource){ JdbcTemplate jdbcTemplate = new JdbcTemplate(); jdbcTemplate.setDataSource(dataSource); return jdbcTemplate; } /** * 装配事务管理实现对象 * @param dataSource * @return */ @Bean public TransactionManager transactionManager(DataSource dataSource){ return new DataSourceTransactionManager(dataSource); } }\"]},\"245\":{\"h\":\"事务属性:只读\",\"t\":[\"只读模式:可以提示查询事务的效率,推荐事务中只有查询代码,使用只读模式\",\"@Transactional(readOnly = true)\",\"只读不可写,\",\"@Transactional可以加在方法或者类上,默认是非只读\",\"一般情况下,都是通过类添加事务,类下的所有方法都有事务,查询方法可以通过再次添加注解,设置为只读模式,提高效率。\"]},\"246\":{\"h\":\"事务属性:操作时间\",\"t\":[\"@Transactional(timeout = 1)默认永远不超时-1\",\"设置timeout = 时间 秒数\",\"超过时间就会回滚事务和释放异常\",\"如果类上设置事务属性,方法也设置了事务注解,\",\"方法上的注解覆盖了类注解覆盖了类上的\"]},\"247\":{\"h\":\"事务异常\",\"t\":[\"默认情况下,只针对运行时异常回滚，编译时异常不回滚。下面的是IO异常\",\"@Service public class StudentService { @Autowired private StudentDao studentDao; /** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚! * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内! */ @Transactional(readOnly = false,timeout = 3) public void changeInfo() throws FileNotFoundException { studentDao.updateAgeById(100,1); //主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! new FileInputStream(\\\"xxxx\\\"); studentDao.updateNameById(\\\"test1\\\",1); } }\",\"指定异常回滚\",\"/** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚! * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内! */ @Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class) public void changeInfo() throws FileNotFoundException { studentDao.updateAgeById(100,1); //主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! new FileInputStream(\\\"xxxx\\\"); studentDao.updateNameById(\\\"test1\\\",1); }\",\"事务不回滚\",\"@Service public class StudentService { @Autowired private StudentDao studentDao; /** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚! * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内! */ @Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class,noRollbackFor = FileNotFoundException.class) public void changeInfo() throws FileNotFoundException { studentDao.updateAgeById(100,1); //主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! new FileInputStream(\\\"xxxx\\\"); studentDao.updateNameById(\\\"test1\\\",1); } }\"]},\"248\":{\"h\":\"事务隔离级别\",\"t\":[\"数据库事务的隔离级别是指在多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定。常见的隔离级别包括：\",\"读未提交（Read Uncommitted）：事务可以读取未被提交的数据，容易产生脏读、不可重复读和幻读等问题。实现简单但不太安全，一般不用。\",\"读已提交（Read Committed）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。\",\"可重复读（Repeatable Read）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改。可以避免脏读和不可重复读，但仍有幻读的问题。\",\"串行化（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务。可以避免以上所有问题，但效率较低，不适用于高并发场景。 不同的隔离级别适用于不同的场景，需要根据实际业务需求进行选择和调整。\",\"隔离级别设置,推荐设置第二个\",\"package com.atguigu.service; import com.atguigu.dao.StudentDao; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Isolation; import org.springframework.transaction.annotation.Transactional; import java.io.FileInputStream; import java.io.FileNotFoundException; /** * projectName: com.atguigu.service */ @Service public class StudentService { @Autowired private StudentDao studentDao; /** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚! * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内! * isolation = 设置事务的隔离级别,mysql默认是repeatable read! */ @Transactional(readOnly = false, timeout = 3, rollbackFor = Exception.class, noRollbackFor = FileNotFoundException.class, isolation = Isolation.REPEATABLE_READ) public void changeInfo() throws FileNotFoundException { studentDao.updateAgeById(100,1); //主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! new FileInputStream(\\\"xxxx\\\"); studentDao.updateNameById(\\\"test1\\\",1); } }\"]},\"249\":{\"h\":\"事务的传播行为\",\"t\":[\"方法1调用方法2,方法2的税务是否会加入方法1的事务中。\",\"事务之间调用如何影响子事务,事务传播行为的属性设置到子事务上。\",\"名称\",\"含义\",\"REQUIRED 默认值\",\"如果父方法有事务，就加入，如果没有就新建自己独立！\",\"REQUIRES_NEW\",\"不管父方法是否有事务，我都新建事务，都是独立的！\",\"在同一个类中，对于@Transactional注解的方法调用，事务传播行为不会生效。这是因为Spring框架中使用代理模式实现了事务机制，在同一个类中的方法调用并不经过代理，而是通过对象的方法调用，因此@Transactional注解的设置不会被代理捕获，也就不会产生任何事务传播行为的效果。\",\" @Transactional(propagation = Propagation.REQUIRED)\",\"其他传播行为值（了解）\",\"Propagation.REQUIRED：如果当前存在事务，则加入当前事务，否则创建一个新事务。\",\"Propagation.REQUIRES_NEW：创建一个新事务，并在新事务中执行。如果当前存在事务，则挂起当前事务，即使新事务抛出异常，也不会影响当前事务。\",\"Propagation.NESTED：如果当前存在事务，则在该事务中嵌套一个新事务，如果没有事务，则与Propagation.REQUIRED一样。\",\"Propagation.SUPPORTS：如果当前存在事务，则加入该事务，否则以非事务方式执行。\",\"Propagation.NOT_SUPPORTED：以非事务方式执行，如果当前存在事务，挂起该事务。\",\"Propagation.MANDATORY：必须在一个已有的事务中执行，否则抛出异常。\",\"Propagation.NEVER：必须在没有事务的情况下执行，否则抛出异常。\"]},\"250\":{\"h\":\"AJAX\",\"t\":[\"尚硅谷3小时Ajax入门到精通。br>\",\"就是异步的js和xml。通过AJAX可以在浏览器中向服务器发送异步请求，最大的优势:无刷新获取数据。\",\"优点:\",\"可以无需刷新页面而与服务器端进行通信。\",\"允许你根据用户事件来更新部分页面内容。\",\"缺点:\",\"没有浏览历史,不能回退\",\"存在跨域问题(同源)\",\"SEO(搜索引擎优化,页面源码没有)不友好\"]},\"251\":{\"h\":\"请求报文\",\"t\":[\"请求行\",\"GET /?... HTTP/1.1\",\"请求头\",\"HOST:\",\"Cookie:\",\"Content-type:\",\"User-Agent:\",\"请求体是什么类型的。\",\"空行\",\"请求体\"]},\"252\":{\"h\":\"响应报文\",\"t\":[\"行\",\"HTTP/1.1 200 OK\",\"头\",\"Content-Type:\",\"Content-length:\",\"Content-encoding:\",\"空行\",\"体\",\"<html> .... </html>\",\"Express\",\"基于node.js平台,快速,开发,极简的web开发框架。\",\"npm init -yes\",\"npm i express(管理员)\",\"使用express如下,也可以使用javaweb接收,注意一下跨域问题。\",\"//这一部分可以在javaweb中实现 //1.引入express const express = require('express'); //2.创建应用对象 const app = express(); //3.创建路由规则 //request是对请求报文的封装 //response是对响应报文的封装 app.get('/server',(request,response)=>{ //设置响应头 设置允许跨域 response.setHeader('Access-Control-Allow-Origin','*'); //设置响应体 response.send(\\\"HELLO,EXPRESS\\\"); }); //4.监听端口启动服务 app.listen(8000,()=>{ console.log(\\\"服务已经启动,8000端口监听中\\\"); }\",\"node 文件名启动(管理员)\"]},\"253\":{\"h\":\"GET请求\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>AJAX GET 请求</title> <style> #result{ width: 200px; height: 100px; border: solid 1px #90b; } </style> </head> <body> <button>点击发送请求</button> <div id=\\\"result\\\"></div> <script> //获取button元素 const btn = document.getElementsByTagName('button')[0]; const result = document.getElementById('result'); //绑定事件 btn.onclick = function(){l //1. 创建对象 const xhr = new XMLHttpRequest(); //2.初始化,设置请求方法和url xhr.open('GET','http://127.0.0.1:8000/server'); //3. 发送 xhr.send(); //4.事件绑定,处理服务端返回的结果 //on when当什么时候 //readystate 是xhr对象中的属性，表示状态 0 1 2 3 4 //change 改变 xhr.onreadystatechange = function(){ //判断 if(xhr.readyState == 4){ //判断响应状态码 200 404 403 401 500 if(xhr.status >= 200 && xhr.status < 300){ //处理结果 行 头 空行 体 //1.相应行 // console.log(xhr.status);//状态码 // console.log(xhr.statusText);//状态字符串 // console.log(xhr.getAllResponseHeaders());//所有响应头 // console.log(xhr.response);//响应体 //设置result的文本 result.innerHTML = xhr.response; }else { } } } console.log('test'); } </script> </body> </html>\"]},\"254\":{\"h\":\"POST请求\",\"t\":[\"xhr的状态\",\"0：请求未初始化，还没有调用 open()。\",\"1：请求已经建立，但是还没有发送，还没有调用 send()。\",\"2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。\",\"3：请求在处理中；通常响应中已有部分数据可用了，没有全部完成。\",\"4：响应已完成；您可以获取并使用服务器的响应了。\"]},\"255\":{\"h\":\"cssFlex\",\"t\":[\"布局原理 flex是flexible Box的缩写，意为\\\"弹性布局\\\"， 用来为盒子模型提供最大的灵活性，任何一个容器都可以指定为flex布局\",\"当我们为父盒子设置为flex布局以后,子元素的float,clear和vertical-align属性将失效\",\"伸缩布局=弹性布局=伸缩盒子布局=flex布局\",\"采用Flex布局的元素,称为Flex容器(Flex container),简称\\\"容器\\\" 它的所有子元素自动成为容器成员， 称为Flex项目(flex item),简称项目。\",\"子容器可以横向排列也可以纵向排列\",\"通过给父盒子添加flex属性,来控制子盒子的位置和排列方式.\"]},\"256\":{\"h\":\"flex布局父项常见属性\",\"t\":[\"flex-direction: 设置主轴方向\",\"justify-content: 设置主轴上的子元素排列方式\",\"flex-wrap : 设置子元素是否换行\",\"align-content : 设置侧轴上的子元素的排列方式(多行)\",\"align-items : 设置侧轴上的子元素排列方式(单行)\",\"flex-flow : 复合属性,相当于同时设置了flex-direction 和 flex-wrap\"]},\"257\":{\"h\":\"flex-direction\",\"t\":[\"在flex布局中，是分为主轴和侧轴两个方向,同样的叫法有:行和列.x轴y轴\",\"默认主轴方向就是x轴方向,水平向右。\",\"默认侧轴方向就是y轴方向,水平向下。\",\"属性\",\"row 默认值从左到右\",\"row-reverse 从右到左\",\"column 从上到下\",\"column-reverse 从上到下\"]},\"258\":{\"h\":\"justify-content\",\"t\":[\"要先确定主轴是哪一个 属性值\",\"flex-start 默认值从头部开始,如果主轴是x轴,则从左到右\",\"flex-end 从尾部开始排列\",\"center 在主轴居中对齐(如果主轴是x轴则水平居中)\",\"space-around 平分剩余空间\",\"space-between 先两边贴边,再平分剩余空间(重要)\"]},\"259\":{\"h\":\"flex-wrap\",\"t\":[\"一行显示不下，会改变宽度强行塞下 flex-wrap 设置子元素是否换行 默认情况下，项目都排在一条线(又称\\\"轴线\\\")上,flex-wrap属性定义,flex布局默认是不换行的。 属性值\",\"nowrap 默认值，不换行\",\"wrap 换行\"]},\"260\":{\"h\":\"align-items 设置侧轴上的子元素排列方式(单行)\",\"t\":[\"该属性是控制子项在侧轴(默认是y轴)上的排列方式,在子项为单项的时候使用 属性\",\"flex-start 默认值，从上代下\",\"flex-end 从下到上\",\"center 挤在一起居中(垂直居中)\",\"stretch 拉伸 拉伸 子盒子不要给高度\"]},\"261\":{\"h\":\"aligin-content 设置侧轴上子元素的排列方式(多行)\",\"t\":[\"设置子项在侧轴上的排列方式并且智能用于子项出现换行的情况(多行)，在单行下没有效果\",\"flex-start 默认值在侧轴的头部开始排列\",\"flex-end 在侧轴的尾部开始排列\",\"center 在侧轴中间显示\",\"space-around 子项在侧轴平分剩余空间\",\"space-between 子项在侧轴先分布在两头，再平分剩余空间\",\"stretch 设置子项元素高度平分父元素高度\"]},\"262\":{\"h\":\"flex-flow\",\"t\":[\"flex-flow属性是flex-direction和flex-wrap属性的复合属性 flex-flow:row erap;\"]},\"263\":{\"h\":\"flex布局子项常见属性\",\"t\":[\"flex子项目占的份数\",\"align-self控制子项自己在侧轴的排列方式\",\"order属性定义子项的排列顺序(前后顺序)\"]},\"264\":{\"h\":\"flex属性\",\"t\":[\"flex属性定义子项目分配剩余空间,用flex来表示占多少份数\",\"flex:number 默认0 不给宽度，剩余空间就是整个的宽度\"]},\"265\":{\"h\":\"align-self\",\"t\":[\"align-self允许单个项目有与其他项目不一样的对其方式,可覆盖align-items 默认值为auto,表示继承父元素的align-items属性，如果没有父元素，则等同于stretch\",\"order属性定义项目排列顺序 数值越小，排列越靠前，默认为0 注意: 和z-index不一样\"]},\"266\":{\"c\":[\"前端\"]},\"267\":{\"c\":[\"cssFlex\"]},\"268\":{\"h\":\"Vue\",\"t\":[\"笔记由黑马vue前端基础教程-4小时快速入门总结而成。\"]},\"269\":{\"h\":\"\",\"t\":[\"2020年9月18日,Vue.js发布版3.0版本,代号:One Piece(海贼王)\",\"创建一个vue3项目\",\"npm create vue@latest\"]},\"270\":{\"h\":\"linux\",\"t\":[\"linux写的笔记有点杂乱，我决定把自己常用的命令总结到这里!\"]},\"271\":{\"h\":\"一些常用命令\",\"t\":[\"拿到一台崭新的服务器后你会干什么？ uname -a显示所有系统消息 neofetch 需要安装，收集系统软硬件消息 并显示\",\"df -h 以人类可读方式显示文件系统磁盘使用情况统计 du 显示目录或文件大小 -h 人类可读的形式 who 查看当前登录的用户\"]},\"272\":{\"h\":\"更改密码\",\"t\":[\"sudo passwd 用户名\"]},\"273\":{\"h\":\"后台运行\",\"t\":[\"在命令的末尾+&程序可以在后台运行，退出当前账户该程序就会停止运行 nohup 不挂起的意思 nohup 程序 & 退出当前账户的时候程序不会停止\",\"job -l 可以查看当前有多少在后台运行\"]},\"274\":{\"h\":\"传输下载文件\",\"t\":[\"yum install lrzsz\",\"rz上传本地文件到linux\",\"sz 从linux下载文件到本地\"]},\"275\":{\"h\":\"快捷键\",\"t\":[\"tab 补全终端命令 还可以进行选择目录(在当前目录下)\"]},\"276\":{\"h\":\"关于CentOs防火墙\",\"t\":[\"firewall-cmd --zone=zone-name --add-service=service-name --permanent --zone 指定要添加服务的区域名称 --add-service 指定要添加的服务名称 --permanent 指定该规则永久生效\",\"--list-all 列出所有规则 --reload 重新加载防火墙规则 --delete-service 删除服务 --add-port 添加端口 --remove-port 删除端口 --list-ports 列出所有已添加的端口\",\"eg firewall-cmd --zone=public --add-port=80/tcp --permanent添加端口\"]},\"277\":{\"h\":\"安装数据库\",\"t\":[\"rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 更新密钥\",\"rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm 安装mysql8.x版本 yum库\",\"yum -y install mysql-community-server\",\"如果报错试试\",\"yum module disable mysql\",\"yum -y install mysql-community-server --nogpgcheck\",\"查看运行状态\",\"systemctl status mysqld\",\"grep \\\"temporary password\\\" /var/log/mysqld.log 获取原始密码\",\"mysql -uroot -p -u 登录的用户 -p使用密码登录\",\"ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Kdyq1108！'; 修改密码\",\"create user 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'Kdyq1108！' ; 第一次设置远程登录，并配置远程登录密码\",\"ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '密码 ；\",\"grant all privileges on on *.* to 'root'@'%' with grant option; grant语法 grant 权限名(所有的权限用all) on 库名(*全部) to '要授权的用户名'@'%'(%表示所有ip，可以只设置一个ip)\",\"flush privileges;刷新权限\",\"Kdyq1108\",\"Kdyq1108!\"]},\"278\":{\"h\":\"终端美化相关\"},\"279\":{\"h\":\"cowsay相关\",\"t\":[\"apt install cowsay\",\"cowsay 文本cowthink 文本\",\"cowsay -l列出可以打印的图像 cowsay -f 图像名称 文本cowsay -r随机图像\"]},\"280\":{\"h\":\"名人名言\",\"t\":[\"apt install fortune\",\"'apt install fortunes-zh`安装中文版本\",\"fortune | cowsay\"]},\"281\":{\"h\":\"彩色的牛\",\"t\":[\"apt install lolcat lolcat将传过去的文本变为彩色\",\"fortune | cowsay -r tux | lolcat\"]},\"282\":{\"h\":\"添加到配置文件中\",\"t\":[\"在~/.bashrc中添加每次启动终端要输出的，这样每次连接都会出现cowsay的图像了\"]},\"283\":{\"h\":\"nginx\",\"t\":[\"cd /etc/nginx/ 在这个目录里面有nginx.conf文件\",\"events {} http { include mime.types; # 文件扩展名与文件类型映射表 include self/*.conf; # 独立出不同网站不同配置文件,引入其他的配置文件 default_type application/octet-stream; # 默认文件类型 server { listen 80; server_name localhost; location / { root /root/blogs/dist; index index.php index.html index.htm default.php default.htm default.html; } } }\"]},\"284\":{\"h\":\"安装软件\"},\"285\":{\"h\":\"ssh\",\"t\":[\"sudo apt-get install openssh-server\"]},\"286\":{\"h\":\"vim配置及其命令\",\"t\":[\"vimrc 配置文件\",\" syntax on \\\"语法高亮 set nu \\\"在左侧行号 set tabstop \\\"tab 长度设置为 4 set nobackup \\\"覆盖文件时不备份 set cursorline \\\"突出显示当前行 set ruler \\\"在右下角显示光标位置的状态行 set autoindent \\\"自动缩进\"]},\"287\":{\"h\":\"一些命令\",\"t\":[\"0到行首$到行尾 hjkl左下右上 >G 增加当前行到文档末尾处的缩进层级 .重复上一次的操作，重复的是修改操作\"]},\"288\":{\"h\":\"拿到一台崭新的ubuntu服务器你会做什么\",\"t\":[\"更新\",\"sudo apt update\",\"sudo apt upgrade\",\"安装fish\",\"sudo apt install fish\",\"查看剩下多少空间\",\"df -h\",\"查看内存\",\"free -h\",\"查看详细信息\",\"sudo apt install neofetch\"]},\"289\":{\"c\":[\"后端\"]},\"290\":{\"c\":[\"linux\"]},\"291\":{\"h\":\"python\",\"t\":[\"本笔记大部分参考自《python从入门到精通》(明日科技),一小部分来自网络。\",\"个人笔记,仅供参考!\"]},\"292\":{\"h\":\"基础知识\",\"t\":[\"内置函数type()可以返回变量类型\",\"内置函数id()获取变量的内存地址\",\"八进制整数以0o开头，十六进制0x\",\"不需要先声明变量名及其类型，直接赋值即可创建各种类型的变量\",\"print(r\\\"加上r表示\\\\n字符串内数据，原样输出。\\\")\",\"python中/除法结果为浮点数\",\"python中的逻辑运算符主要包括and or not\"]},\"293\":{\"h\":\"\",\"t\":[\"单行注释 #要注释的内容\",\"多行注释'''要注释的内容'''或者三个双引号也行\",\"print(\\\"建议每行不超过80个字符，如果超过，\\\" \\\"建议使用小括号()将多行内容隐式的连接起来\\\") print(\\\"也可以通过\\\\\\\\将两段文本\\\\ 内容连接起来。\\\") # 不推荐使用\\\\\"]},\"294\":{\"h\":\"\",\"t\":[\"False class finally is return None continue for lambda try True def from nonlocal while and del global not with as elif if or yield assert else import pass break except in raise\",\"可通过两行代码查看python中的保留字\",\"import keyword print(keyword.kwlist)\"]},\"295\":{\"h\":\"\",\"t\":[\"函数\",\"作用\",\"int（x）\",\"将x转换为整数类\",\"float(x)\",\"将x转换成浮点数类型\",\"complex(real [,imag])\",\"创建一个复数\",\"str(x)\",\"将x转化为字符串\",\"repr(x)\",\"将x转化为表达式字符串\",\"eval(str)\",\"计算在字符串中的有效python表达式，并返回一个对象\",\"chr(x)\",\"将整数x转化为一个字符\",\"ord(x)\",\"将一个字符x转换为它对应的整数值\",\"hex(x)\",\"将一个整数x转换为一个十六进制的字符串\",\"oct(x)\",\"将一个整数x转换为一个八进制的字符串\"]},\"296\":{\"h\":\"\",\"t\":[\"bl = input(\\\"请输入一个字符串\\\\n\\\") #输入一个值并赋值给bl print(bl) # 输入的值都将会被作为字符串读取\"]},\"297\":{\"h\":\"位运算符\",\"t\":[\"按位与(&)\",\"按位或(|)\",\"按位异或(^)\",\"按位取反(~)\",\"左移位(<<)\",\"右移位(>>)\",\"幂(**)\"]},\"298\":{\"h\":\"f-string字符串格式化\",\"t\":[\"name = \\\"hihi\\\" age = 23 print(f\\\"Hello, my name is {name} and I am {age} years old\\\")\"]},\"299\":{\"h\":\"条件表达式\",\"t\":[\"# if-else的简化 a = 10 b = 80 c = a if a>b else b print(c) # 结果是80\"]},\"300\":{\"h\":\"程序控制语句\"},\"301\":{\"h\":\"if-else语句\",\"t\":[\"# 二选一的情况下 if 表达式: 语句块 else: 语句块 # 多选一的情况 if 表达式:1 语句块 elif 表达式2: 语句块 else: 语句块\"]},\"302\":{\"h\":\"while循环\",\"t\":[\"while 条件表达式: 循环体\"]},\"303\":{\"h\":\"for循环\",\"t\":[\"for 迭代变量 in 对象: 循环体\"]},\"304\":{\"h\":\"break,continue,pass\",\"t\":[\"break终止当前循环\",\"continue跳过当前循环进入下一次循环\",\"pass表示空语句，不做任何事情\"]},\"305\":{\"h\":\"列表与元组\",\"t\":[\"var = [\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\"] print(var[-1])#4 print(var[1])#2\",\"采用整数索引从0开始往右递增\",\"采用负数索引从-1开始往左递减，-1表示最后一个元素\",\"序列相加\",\"a = [1,2,3] b = ['4',5,6] c = a+b print(c) # 相同的类型的序列可以相加，序列中元素类型不同也可以 # 但列表和元组，列表和字符串不能相加\",\"python中n乘以一个序列，会生成一个新序列，内容重复n次\",\"检查某个元素是否是序列的成员value in sequence关键字in也可以用not in\",\"len()返回序列长度max()返回最大元素min()返回最小元素\"]},\"306\":{\"h\":\"切片\",\"t\":[\"var = [\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\"] # var[start:end:step]开始，结束，步长 print(var[0:3:2]);#1,3\"]},\"307\":{\"h\":\"列表\",\"t\":[\"​ 列表中的所有元素都放在一对中括号[] 中，两个相邻元素间用逗号隔开\",\"可以放，整数，实数，字符串，列表，元组等任何类型的内容放入列表中。\",\"创建列表\",\"直接复制创建a = [1,2,3]\",\"创建数值列表a = list(range(0,10,1))\",\"删除列表\",\"del listname不常使用，python自带的垃圾回收机制会自动销毁不用的列表\",\"使用enumerate实现输出索引和元素内容\",\"list1 = [1,2,2,4,5,6] for index,a in enumerate(list1): print(index,a)\"]},\"308\":{\"h\":\"列表的操作\"},\"309\":{\"h\":\"添加元素\",\"t\":[\"listname.append(obj)列表末尾追加\",\"inser()向指定位置插入元素，效率不如上面的高\",\"listname.extend(seq)将一个列表中的全部元素添加到另一个列表\"]},\"310\":{\"h\":\"修改与删除元素\",\"t\":[\"修改:获取索引再重新赋值即可\",\"删除元素\",\"根据索引删除\",\"a = [1,2,3,4] del a[-1]#删除最后一个元素 print(a)\",\"根据元素数值删除\",\"a = [1,2,3,4] a.remove(1)\"]},\"311\":{\"h\":\"其他操作\",\"t\":[\"获取指定元素出现的次数\",\"listname.count(obj)\",\"获取指定元素首次出现的下标\",\"listname.index(obj)\",\"统计数值列表的元素和\",\"sum()\",\"对列表进行排序\",\"listname.sort(key=None,reverse=False)\",\"key表示指定从每个列表元素中提取一个比较键，eg:key=str,lower排序不分大小写\",\"reverse，选择升序还是降序\",\"在pyhton中，提供了一个内置的sorted()函数，用于对列表进行排序\",\"使用该函数进行排序后，原列表的元素顺序不变\",\"soterd(listname,key,reverse)同上\",\"列表推导式\",\"#10-100的随机数 rm = [random.randint(10,100) for i in range(10)] old = [1,2,3] new = [int(x*10) for x in old]\"]},\"312\":{\"h\":\"元组\",\"t\":[\"元组是不可变序列/不可变列表。\",\"创建元组\",\"a = (1，2，3，4)\",\"b = 1,2,3小括号也可以去掉\",\"创建元组只包括一个元素a = (\\\"你好\\\"),须在后面加一个逗号\",\"可以用type()测试类型\",\"tuple(range(10,10,2))tuple将range函数循环出来的结果转为数值元组\",\"可通过元素下标访问内容，也可以使用切片获取指定的元素\",\"enumerate()可将元组组合为一个索引序列\",\"a = (1,2,3,4,5,6) for i,x in enumerate(a): print(i,x)\",\"元组是不可变序列，不能对某个元素值修改，但可以重新赋值\",\"两个元组可以用+组合\",\"元组推导式\",\"​ a = tuple((random.randint(10,100) for i in range(10)))\"]},\"313\":{\"h\":\"元组与列表区别\",\"t\":[\"列表属于可变序列，他的元素可以随时删除或修改，而元组只可以整体替换\",\"列表可以使用append(),extend(),insert(),remove()元组则没有\",\"列表和元组支持切片，元组需要转换\",\"元组比列表访问速度更快\",\"列表不能作为字典的键，而元组可以\"]},\"314\":{\"h\":\"字典与集合\",\"t\":[\"python中的字典相当于java中的Map对象。\",\"特征\",\"通过键而不是索引来读取\",\"字典是任意对象的无序集合\",\"字典是可变的，并且可以任意嵌套\",\"字典中的键必须不可变，键可以使用数字，字符串，或者元组，但不能是列表。\"]},\"315\":{\"h\":\"字典的创建\",\"t\":[\"dictionary = {'1':'一','2':'二','3':'三'}\",\"通过dict()创建\",\"通过映射函数创建d = dict(zip(list1,list2))\",\"zip():用于将多个列表或元组对应位置的元素组合为元组，并返回包含这些内容的zip对象。\",\"如果想得到元组，可以将zip对象使用tuple()函数转换为元组，如果想得到列表可以使用\",\"list()函数转换为列表。\",\"list1:表示生成字典的键\",\"list2;表示生成字典的值，如果两者长度不一样则与最短的列表长度相同。\",\"通过给定的键值对创建\",\"d = dict(key1=value1,key2=value2)\",\"还可以使用dict.fromkeys(list1)创建值为空的字典\",\"a = (1,2,3) b = ['一','二','三'] d = {a:b} print(d)\",\"遍历字典\",\"d = {1:'一',2:'二',3:'三'} for i in d.items(): print(i)#打印出的是元组 for k,v in d.items(): print(k,v)#键值对\",\"d.get(key)通过键找到值\",\"values()keys()返回字典的值和键的列表\",\"修改删除\",\"d[key] = value\",\"del d[1]根据key删除对应的键值\",\"字典推导式\",\"import random tem = {i:random.randint(10,100) for i in range(1,5)} print(tem)#{1: 20, 2: 89, 3: 33, 4: 36} name = [\\\"A\\\",\\\"B\\\",\\\"C\\\"] id = [1,2,3] tem = {i:j for i,j in zip(name,id)} print(tem)#{'A': 1, 'B': 2, 'C': 3}\"]},\"316\":{\"h\":\"集合\",\"t\":[\"python中的集合用于保存不重复的元素，有可变集合(set)和不可变集合(frozenset)两种.\",\"创建集合\",\"a = {1,2,3,6,1} print(a)#{1, 2, 3, 6}\",\"python中的set集合是无序的，所以每次输出时元素的排列顺序可能与上面的不同。\",\"注意一下集合与字典创建的区别\",\"可以使用set()函数将列表,元组等其他可迭代对象转换为集合。\",\"a = [1,23,4] b = set(a) print(type(b))#<class 'set'>\",\"创建空集合时只能使用set()实现，{}表示创建一个空字典。\",\"添加元素\",\"setname.add(element),不能使用列表元组等可迭代对象。\",\"list = set([1,2,3,4]) print(list)\",\"list = set([1,2,3,4]) #list.remove(1) list.pop()#移除第一个元素 list.clear()#清空集合 print(list)\",\"交集，并集，差集\",\"list1 = set([1,2,3,4]) list2 = set([3,4,5,6]) print(list1 | list2) # 并集{1, 2, 3, 4, 5, 6} print(list1 & list2)# 交集{3, 4} print(list1 - list2)#差集{1, 2}\"]},\"317\":{\"h\":\"字符串\",\"t\":[\"python3中，默认采用的编码格式为UTF-8\",\"str表示Unicode字符(ASCII或其他)\",\"bytes表示二进制数据(包括编码的文本)\",\"两者之间可以通过encode()和decode()方法进行转换\",\"encode()\",\"用于将字符串转换为二进制数据(即bytes)，也称编码\",\"str.encode([encoding=\\\"utf-8\\\"] [,errors=\\\"strict\\\"])\",\"中括号里面的为可选的\",\"errors=\\\"strict\\\"用于指定错误处理方式，其可选值可以是strict(遇到非法字符就抛出异常)，ignore(忽略非法字符)，replace(用'?'替换非法字符)或xmlcharrefreplace(使用XML的字符引用)，默认值为strict.\",\"decode()\",\"用于将二进制数据转换为字符串。\",\"bytes.decode([encoding=\\\"utf-8\\\"] [,errors=\\\"strict\\\"])在设置解码采用的字符编码时，需要与编码时采用的字符编码一致。\",\"常见操作\",\"可以使用+拼接字符串，字符串不允许直接与其他类型的数据拼接\",\"len()方法可以计算字符串的长度，不区分英文，数字和汉字，所有字符都认为是一个。\",\"string[start:end:stop]截取字符串\",\"str = \\\"hello world\\\" print(str[0])#h print(str[0:4])#hell print(str[6:11:1])#world\",\"str = \\\"hello world\\\" print(str.split('o'))#['hell', ' w', 'rld']\",\"分割字符串。\",\"str.split(sep,maxsplit),sep指定分隔符，可以包含多个字符，maxsplit指定分割次数，不指定或者为-1则分割次数没有限制。\",\"合并字符串\",\"合并字符串与凭借字符串不同，它会将多个字符串采用固定底分隔符连接在一起。\",\"strnew = string.join(iterable)\",\"iterable可迭代对象，该迭代对象中的所有元素(字符串表示)将被合并为一个新的字符串。\",\"str = \\\"hello*world*i*love*world\\\" newstr = ' '.join(str) print(newstr)#h e l l o * w o r l d * i * l o v e * w o r l d\",\"检索字符串\",\"str.count(sub[,start[,end]])\",\"sub:表示要检索的子字符串\",\"start:可选参数，表示检索范围开始位置，不指定从头开始。\",\"str = \\\"hello*world*i*love*world\\\" n = str.count('h') print(n)#1 m = str.count('wo',1,100) print(m)#2\",\"find()方法\",\"str.find(sub[,start[,end]])\",\"该方法用于检索是否包含指定的子字符串。如果检索的字符串不存在，则返回-1，否则返回该子字符串首次出现的索引。\",\"str = \\\"hello*world*i*love*world\\\" n = str.find('world') print(str[n])#w\",\"如果想要判断字符串是否存在可以使用in\",\"str = \\\"hello*world*i*love*world\\\" print('w' in str)#True\",\"index()方法\",\"与find()方法类似，不过如果指定的字符串不存在时会抛出异常.\",\"str.index(sub[,start[,end]])\",\"startswith()方法\",\"用于检索字符串是否以指定子字符串开头。是返回True否则返回False\",\"str.startswith(prefix[,start[,end]])\",\"endswith()方法\",\"用于检测字符串是否以指定字符串结尾，同上。\",\"lower()方法\",\"将字符串中的全部大写字母转换为小写字母，如果字符串中没有应该被转换的字符，则将原字符返回。\",\"upper()\",\"将字符串中全部小写字母转换为大写字母。同上。\",\"strip()方法\",\"用于去掉字符串左右两侧的空格和特殊字符。\",\"str.strip([chars])chars可选参数，用于指定要去除的字符，可以指定多个。如果不指定，默认去除空格，制表符，回车符，换行符等。\",\"lstrip()去除左侧，同上\",\"rstrip()去除右侧，同上\"]},\"318\":{\"h\":\"格式化字符\",\"t\":[\"str1 = \\\"name=%s,age=%d\\\" c1 = ('A',66) print(str1%c1)#name=A,age=66\",\"format()方法\",\"str1 = \\\"name={:s},age={:d}\\\" c1 = str1.format('A',29)#name=A,age=29 print(c1)\",\"print(r\\\"加上r表示\\\\n字符串内数据，原样输出。\\\")\"]},\"319\":{\"h\":\"Python中使用正则表达式\",\"t\":[\"impore re正则表达式使用到了这个模块\"]},\"320\":{\"h\":\"match\",\"t\":[\"match方法用于从字符串的开始处进行匹配，如果在起始位置匹配成功则返回Match对象，否则返回None\",\"re.match(pattern,string,[flags])\",\"patter:表示模式字符串，由要匹配的正则表达式转换而来。\",\"string:表示要匹配的字符串。\",\"flags:可选参数，表示标志位，用于控制匹配方式，如是否区分字母大小写。\",\"标志\",\"说明\",\"A（ASCII）\",\"对于/w,/W,/b,/B,/d,/D,/s,/S进行ASCII匹配\",\"I(IGNORECASE)\",\"执行不区分大小写的匹配\",\"M(MULTILINE)\",\"将^和$用于包括整个字符串的开始和结尾的每一行(默认情况下，仅适用于整个字符串的开始和结尾处)\",\"S(DOTALL)\",\"使用.字符匹配所有字符，包括换行符\",\"X(VERBOSE)\",\"忽略模式字符串中未转义的空格和注释。\",\"pattern = r\\\"mr_\\\\w+\\\" string = \\\"MR_SHOP mr_shop\\\" re1 = re.match(pattern,string,re.I) print(re1.string)#MR_SHOP mr_shop str = \\\"商店 MR_SHOP mr_shop\\\" re2 = re.match(pattern,str,re.I) print(re2)#None\",\"第二个返回None因为matchh方法从字符串的开始位置开始匹配，当第一个字母不符合条件时，直接返回None\",\"可以使用span方法饭hi匹配位置的元组(start,end)匹配的开始和结束位置。\"]},\"321\":{\"h\":\"search()方法\",\"t\":[\"用于在整个字符串中搜索第一个匹配的值，如果在起始位置匹配成功，则返回Match对象，否则返回None\",\"re.search(pattern,string,[flags])\",\"search()不仅仅是在字符串的起始位置搜索，其他位置有符合的匹配也可以。<>\"]},\"322\":{\"h\":\"findall()方法\",\"t\":[\"findall()方法用于在整个字符串中搜索所有符合正则表达式的字符串，并以列表形式返回。如果匹配成功则返回包含匹配结构的列表，否则返回空列表。\",\"re.findall(pattern,string,[flags])\"]},\"323\":{\"h\":\"sub()方法\",\"t\":[\"sub()方法用于实现字符串的替换。\",\"re.sub(pattern,repl,string,ount,flags)repl表示替换的字符串，string表示要被查找替换的原始字符串。count可选参数，表示模式匹配后替换的最大次数，默认值为0，表示替换所有的匹配。\"]},\"324\":{\"h\":\"split()\",\"t\":[\"split()方法用于实现根据正则表达式分割字符串，并以列表的形式返回。\",\"re.split(pattern,string,[maxsplit],[flags])maxsplit可选参数，表示最大的拆分次数。\",\"pattern = r'[?|&]' url = 'htt[://wwww,baidu,com?user=a&age=9' re1 = re.split(pattern,url) print(re1)#['htt[://wwww,baidu,com', 'user=a', 'age=9']\"]},\"325\":{\"h\":\"函数\",\"t\":[\"格式\",\"def functionname([parameterlist]):# 函数没有参数时必须保留一对空的小括号 [\\\"\\\"\\\"comments\\\"\\\"\\\"] [functionbody]# 如果定义一个空函数可以使用padd语句占位符\",\"形式参数\",\"在定义函数时，函数名后面括号中的参数为形式参数\",\"实际参数\",\"在调用一个函数时，函数名后面括号中的参数为实际参数\",\"关键字传参\",\"关键字参数是指使用形式参数的名字来确定输入的参数值，通过该方式指定实际参数时，不再需要与形式参数的位置完全一致，只要将参数名写正确即可。\",\"def test(name,age): print(\\\"名字:\\\"+name+\\\"，\\\\n\\\"+\\\"年龄:\\\"+str(age)) test(name='A',age=12)\",\"为参数设置默认值\",\"调用某个函数时，如果没有指定某个参数将抛出异常，可以为参数设置默认值。\",\"def test(age,name=\\\"张三\\\"): print(\\\"名字:\\\"+name+\\\"，\\\\n\\\"+\\\"年龄:\\\"+str(age)) #名字:张三， #年龄:12 test(age=12)\",\"指定默认的形式参数必须在所有参数的最后，否则将产生语法错误。\",\"可以使用函数名.__defaults__查看函数的默认参数的当前值。\",\"为形式参数设置默认值默认参数必须指向不可变对象。\",\"可变参数\",\"*parameter表示接收任意多个实际参数并将其放在一个元组中\",\"如果想要一个已经存在的列表作为函数的可变参数，可以在列表的名称前加*\",\"**parameter表示接受任意多个类似关键字参数一样显示赋值的实际参数，并将其放在一个字典中。\",\"def test(**t): for key,value in t.items(): print(str(key)+\\\": \\\"+str(value)) test(a=3)#a: 3\",\"返回值\",\"当函数中没有return语句时，或者省略了return语句的参数时，将返回None，即返回空值。\",\"变量的作用域\",\"要想在函数内改变函数外的变量，要使用global关键字定义。\",\"a = 12 def test(): global a a=66 print(a) print(a)#12 test()#66 print(a)#66\"]},\"326\":{\"h\":\"匿名函数\",\"t\":[\"result = lambda [arg1 [,arg2……]]:expression\",\"import math r = 10 result = lambda r:math.pi*r*r print(result(r))#314.1592653589793\"]},\"327\":{\"h\":\"面向对象程序设计\",\"t\":[\"在python中，一切都是对象。\",\"class ClassName: statement#类体 #### 如何实例化 t1 = ClassName()\",\"init(self)方法\",\"每当创建一个类的实例时，python都会自动执行它.\",\"该方法中必须包含一个self参数，是指向实例本身的引用，用于访问类中的属性和方法。\",\"class test: def __init__(self,name,age): print(\\\"我叫\\\",str(name)) print(\\\"我\\\"+str(age)+\\\"岁了\\\") t1 = test(\\\"张三\\\",13)\",\"实例方法\",\"class test: def method(self,a): print(str(a)) t1 = test() t1.method(\\\"你好\\\")\",\"self必要参数，表示类的实例，名称也可以是self以外的单词。\",\"访问限制\",\"_在属性或方法名前面添加单下划线表示(protected)只允许类本身和子类进行访问。\",\"__双下划线表示(private)私有成员，只允许定义该方法的类本身进行访问\",\"__name__首尾双下划线表示定义特殊方法，一般是系统定义名字。\"]},\"328\":{\"h\":\"属性\",\"t\":[\"@property\",\"在Python中可以通过@property(装饰器)将一个方法转换为属性，从而实现用于计算的属性。将方法转换为属性后，可以直接通过方法名来访问方法，而不需要再添加一对小括号，让代码更整洁。\",\"@property def methodname(self) block\",\"通过@property转换后的属性不能重新赋值。可以读取不能修改。\",\"# 如何设置可以修改呢? class TVshow: list_film = [\\\"战狼\\\",\\\"红楼梦\\\"] def __init__(self,show): self.__show = show @property def show(self): return self.__show @show.setter def show(self,value): if value in TVshow.list_film: self.__show = \\\"您选择了《\\\"+value+\\\"》,稍后即将播放\\\" else: self.__show = (\\\"您点播的电影不存在\\\") tvshow = TVshow(\\\"红楼梦\\\") print(tvshow.show)#红楼梦 tvshow.show=\\\"战狼\\\" print(tvshow.show)#您选择了《战狼》,稍后即将播放\"]},\"329\":{\"h\":\"继承\",\"t\":[\"class ClassName(baseclasslist): \\\"\\\"\\\"类的帮助信息\\\"\\\"\\\" Statement# 类体\",\"baseclasslist:用于指定要继承的基类，可以有多个。\",\"在派生类中定义__init__()方法时，不会自动调用基类的__init()__方法\",\"class Animal: def __init__(self,name=\\\"B\\\"): Animal.name = name def prtName(self): print(Animal.name) class Dog(Animal): def __init__(self): super().__init__(\\\"A\\\")#不加这个就会报错 print(\\\"dogdog\\\") dog = Dog() dog.prtName()#A\"]},\"330\":{\"h\":\"模块\",\"t\":[\"一个函数相当于一块积木,而一个模块中可以包括很多函数,也就是很多积木,所以也可以说模块相当于一盒积木。\",\"可以写自定义模块并使用import导入模块。\",\"import modulename [as alias]后面为给模块起的别名。\",\"在调用模块中的变量,函数或者其他类时,需要在变量名,函数名或者类名前添加模块名.作为前缀。\",\"使用import语句还可以一次导入多个模块,中间使用逗号进行分隔。\",\"from...import语句\",\"使用这个语句导入模块后,不需要再添加前缀,直接通过具体的变量,函数和类名等访问即可。\",\"from modelname import membermember用于指定要导入的变量,函数或者类等,可以同时导入多个定义,各个定义之间使用逗号分隔。\",\"如果使用*全部导入后,可以使用dir()查看导入了哪些定义。\"]},\"331\":{\"h\":\"模块搜索\",\"t\":[\"使用import语句导入模块后,默认情况下,会按照一下顺序进行查找。\",\"在当前目录下查找\",\"到PYTHONPATH环境变量下的每个目录下查找\",\"到Python的默认安装目录下查找。\",\"可以通过三种方式添加指定的目录到sys.path中\",\"临时添加\",\"增加.pth文件(推荐)\",\"在PYTHONPATH环境变量中添加\"]},\"332\":{\"h\":\"Python中的包\"},\"333\":{\"h\":\"python的内置函数\",\"t\":[\"range(start,end,stop)起始值,结束值,步长 用于生成一系列连续的整数，步长可省略\",\"range(end)一个参数是end是从0开始的到end-1，\",\"print(letter,end='')end默认为/n换行，改为空不换行\",\"list()将序列转换为列表\",\"str()将序列转换为字符串\",\"sum计算元素和\",\"sorted()对元素进行排序\",\"reversed()反向序列中的元素\",\"enumerate()将序列组合为一个索引序列，多用于for循环中\"]},\"334\":{\"h\":\"以前的\",\"t\":[\"如何进行注释\",\"#这是行注释 #也可以多加几个#进行块注释 print(\\\"Hello Word !\\\") # ''' 三个单引号 这是块注释 ''' # \\\"\\\"\\\" 三个双引号 这也是块注释 \\\"\\\"\\\"\",\"2.输出\",\"#输入和输出 #输入 #name=input() #print(name) a=\\\"世界\\\" b=\\\"你好 \\\\n\\\" c=a+b print(c) #反斜杠将下面打印为了一行 d=\\\"~\\\\n世界\\\" e=\\\"你好\\\" f=\\\"啊\\\" print( d+\\\\ e+\\\\ f ) # ''' print('let\\\\'s go') 反斜杠转义字符 print(\\\"\\\"\\\" ni hao !\\\"\\\"\\\") 三引号将其自动换行 ''' # 实例 6 a = True print(a and 0 or 66) #会输出66\",\"3.python的关键字\",\"False class finally is return None continue for lambda try True def from nonlocal while and del global not with as elif if or yield assert else import pass break except in raise\",\"4.条件语句（1）\",\"#if语句 score=int(input(\\\"请输入你的成绩：\\\")) if score>=60: print(\\\"恭喜你没有挂科，去玩吧~\\\") else: print(\\\"很抱歉，你还需要补考，加油！\\\") #elif score=int(input(\\\"请输入你的成绩：\\\")) if score<60: print(\\\"很遗憾，你需要补考。\\\") elif 60<=score<70: print(\\\"恭喜你，你的成绩及格啦!\\\") elif 70<=score<80: print(\\\"恭喜你，你的成绩为良好，\\\") elif 80<=score<90: print(\\\"恭喜你，你的成绩很好！\\\") elif 90<=score<=100: print(\\\"恭喜你，你的成绩为优秀。\\\") else : print(\\\"你输入的成绩无效！\\\") #not and or 对应c语言! && ||\",\"4.条件语句(2)\",\"a=int(6) while (a>1): print(a) a=a-1 else:#会在while循环结束后执行else print(\\\"gameover\\\") print(\\\"**********\\\\n\\\") for name in \\\"hello word\\\": print(\\\"遍历输出：%s \\\" %name) names=['h','e','l','l','o'] for n in names: pass print(\\\"遍历输出：%c\\\" %n) for i in range(1,10,2):#rangw(1开始 9结束 每步跨2) print(i)#打印出 1 3 5 7 9 #这里pass是一个占位符 当你编写一个函数时没有实现功能就可以使用pass避免错误 #如果是嵌套循环 break跳出最深层的循环 #continue跳出本次循环\",\"4.条件语句（3）\",\"print(\\\"这是一个求平均值的小程序。\\\") user_input=input(\\\"请输入数字（完成数组输入后，输入q结束程序）\\\") cout=0; total=0; while user_input != \\\"q\\\": num=float(user_input) cout=cout+1 total=total+num user_input=input(\\\"请输入数字（完成数组输入后，输入q结束程序）\\\") if cout == 0: result=0 else: result=total/cout print(\\\"所求平均数为 ：\\\"+str(result)) ###############\",\"5.导入库\",\"#用以下格式导入库函数 import math #使用时 math.sqrt() from math import sqrt #使用时sqrt() from math import* #全部引用过来 但引入库过多时 容易造成命名的混乱 #使用时 sqrt() a=math.sqrt(4) print(a) # ''' a=2**3 2的三次方 print(a) '''\",\"6.类型\",\" #len求长度 下面打印出3 a=\\\"你好啊\\\" print(len(a)) #通过索引取值 2为数组下标 print(a[2]) #布尔类型 A=True B=False #空类型 n=None #type函数 返回变量的类型 print(type(a)) print(type(A)) print(type(n))\",\"7.输入\",\"#input 一律返回字符串 age=input(\\\"请输入你的年龄\\\") print(age) #可以强制类型转化 str(5) int(\\\"9\\\") float(3) #print内的类型要保持一致 不一致要强制类型转换\",\"8.列表\",\"#列表 shopping_list = [] #定义一个新的列表 shopping_list.append(\\\"键盘\\\") #往列表里添加内容 shopping_list.append(\\\"键帽\\\") shopping_list.append(\\\"音箱\\\") shopping_list.append(\\\"电竞椅\\\") shopping_list.remove(\\\"键帽\\\")#移除列表所存在内容 shopping_list[1]=\\\"硬盘\\\" #替换 print(shopping_list) print(len(shopping_list)) print(shopping_list[0]) #查看列表第一个内容 price=[799,1024,200,800] max_price=max(price) #最大值 min_price=min(price) #最小值 shorted_price=sorted(price) #排序 从大到小 print(max_price) print(min_price) print(shorted_price)\",\"9.字典\",\"#字典 dictionary contact={ \\\"小明\\\" : \\\"137878\\\", \\\"张三\\\" : \\\"2134435\\\"} contact[\\\"李四\\\"]=\\\"345665346\\\" #添加元素 也可以进行更新 del contact[\\\"小明\\\"] #删除 len(contact) #多少对 #元组 tuple () #元组不可变 不能添加删除元素 这是与列表的区别 #而列表是可变的对列表可以执行添加 删除 #字典的键也不可变 s=\\\"hello\\\" print(s.upper()) #转大写 print(s) #字符串也是不可变的 转大写并没有改变s内容 ########### mean={\\\"小\\\" : \\\"small\\\"} mean[\\\"大\\\"] = \\\"big\\\" mean[\\\"蓝\\\"] = \\\"blue\\\" mean[\\\"白\\\"] = \\\"white\\\" mean[\\\"黑\\\"] = \\\"black\\\" query=input(\\\"请输入要查询的词语 ： \\\\n\\\") if query in mean: #输入的内容在字典里面会返回True print(\\\"您查询的\\\"+query+\\\"意思是：\\\") print(mean[query]) else: print(\\\"您查询的值不在本字典中\\\") print(\\\"当前词典收录数为\\\"+str(len(mean))) #字典名.keys() 返回所有键 #字典名.values() 返回所有值 #字典名.items() 返回所有键值对\",\"10.format方法\",\"#format() 方法 year=\\\"龙\\\" time=\\\"周二\\\" messsge=\\\"\\\"\\\" {0}年大吉 恭喜发财 红包拿来 今天是{1} \\\"\\\"\\\".format(year,time) #year会替换{0} time会替换{1}的内容 #也可以用下面这种方法 messsge=\\\"\\\"\\\" {current_year}年大吉 恭喜发财 红包拿来 今天是{current_time} \\\"\\\"\\\".format(current_year=year,current_time=time) #更简洁的 messsge=\\\"\\\"\\\" {year}年大吉 恭喜发财 红包拿来 今天是{time} \\\"\\\"\\\".format(year=year,time=time) ##另一种方法字符串前加f m=f\\\"\\\"\\\" {year}年大吉 恭喜发财 红包拿来 今天是{time}\\\"\\\"\\\" #加了f 里面的内容会被直接求值 score={\\\"小明\\\" : 66.2, \\\"大明\\\" : 78.3, \\\"张三\\\" : 67.4} for name,total in score.items():#用items方法返回的是键值对 print(\\\"{0}您好，您的成绩为{1:.3f}\\\".format(name,total)) #:.3f 表示保留三位小数\",\"11.函数\",\"#函数 def calculate_BMI(weight,hight): BMI=weight/hight ** 2 if BMI<=18.5: category=\\\"偏瘦\\\" elif BMI<=25: category=\\\"正常\\\" elif BMI<=30: category=\\\"偏胖\\\" else: category=\\\"肥胖\\\" print(f\\\"您的BMI结果为{category}\\\") return BMI calculate_BMI(95,1.8)\",\"12.面向对象编程OOP\",\"c'语言就是面向过程的，c++添加了class来进行面向对象编程。\",\"面向过程可以理解为把要实现的内容拆分成一个一个的步骤，依次完成\",\"比如我们要往ATM里面存50，取100，我们就可以写存钱和取钱两个函数来实现。但传的参数多了不利于理解。\",\"面向对象编程并不会拘泥于具体步骤，而是会比较现实的模拟，\",\"比如你要去ATM存钱和取钱，我们就可以提取ATM的性质，来定义一个ATM的类，然后用类来创建对象\",\"类是创建对象的模板，对象是类的实例。\",\"可以把类想象成建筑图纸，而对象就是根据这个图纸来建造的建筑\",\"这样我们就可以定义ATM和钱两个类，存多少钱，ATM编号，钱的编号就能清晰的表示出来\",\"方法就是放在类里面的函数\",\"面向对象有三个被反复提及的特性 封装 继承 和多态\",\"封装指写类的人将内部实现细节隐藏起来，使用类的人只通过外部接口访问和使用\",\"比如有人写了洗衣机这个类 你只需要知道如何使用洗衣机 而不用知道洗衣机内部如何运转\",\"继承是指面向对象编程允许创建有层次的类。比如要创建小学生和大学生两个类 我们就可以先创建一个学生的父类，让小学生和大学生去继承学生这个父类，这样父类的属性和方法都可以继承，不需要重复定义。\",\"多态是指同样的接口因为对象具体类的不同而有不同的表现，\",\"比如小学生和大学生都需要写作业，但写作业的内容肯定不同，所以我们要把写作业这个方法定义在子类里面，这样大学生和小学生里面可以定义两个不同的方法。这样调用写作业方法时就会因为所属类的不同而调用不同的类。执行不同的写作业方法。\",\"#类定义属性 #下面这个在创造实例时就会已经返回了定义好的值 class Cutecat: def __init__(self): self.name=\\\"Lambton\\\" cat1 = Cutecat() print(cat1.name) #下面这个在创造实例时会根据传进去的值而相应的改变 class Cutecat: def __init__(self,CatName,Cat_age,Cat_color): self.name=CatName self.age=Cat_age self.color=Cat_color cat1 = Cutecat(\\\"我叫小白\\\",23,\\\"白色\\\") print(cat1.color)\",\"#定义方法 class Cutecat: def __init__(self,CatName,Cat_age,Cat_color): self.name=CatName self.age=Cat_age self.color=Cat_color def speak(self):#第一个参数被占用表示对象自身 这是定义方法 print(\\\"喵\\\" * self.age)#字符串乘以数字表示把字符串重复那么多次 def think(self,content): print(f\\\"小猫{self.name}在思考{content}..\\\") cat1 = Cutecat(\\\"小白\\\",23,\\\"白色\\\") cat1.think(\\\"我要吃鱼\\\") cat1.speak() print(cat1.color)\",\"#实战 class Student: def __init__(self,name,student_id): self.student_id=student_id self.name=name self.grades={\\\"语文\\\":0,\\\"数学\\\":0,\\\"英语\\\":0} def set_grade(self,course,grade): if course in self.grades: self.grades[course]=grade def print_grades(self): print(f\\\"学生{self.name} (学号：{self.student_id})的成绩为：\\\") for course in self.grades: print(f\\\"{course}:{self.grades[course]}分\\\") chen=Student(\\\"小陈\\\",\\\"100618\\\") zeng=Student(\\\"小曾\\\",\\\"100622\\\") chen.set_grade(\\\"语文\\\",98) chen.set_grade(\\\"数学\\\",100) chen.set_grade(\\\"英语\\\",120) chen.print_grades() print(\\\"chen.name\\\") zeng.set_grade(\\\"数学\\\",95) print(zeng.grades)\",\"继承\",\"#类继承练习：人力系统 #-员工分为两类：全职员工 FullTimeEmployee,兼职员工 PartTimeEmployee #-全职和兼职都有“姓名 name”，“工号 id ”属性 #-都具备\\\"打印信息 print_info\\\"（打印姓名工号方法）。 #-全职有”月薪 monthly_salary“属性 #-兼职有”日薪 daily_salary”属性，“每月工作天数 work_days”的属性 #-全职和兼职都有“计算月薪 calculate_monthly_pay”的方法，但具体计算过程不一样 class Employee: def __init__(self, name, id): self.name=name self.id=id def print_info(self): print(f\\\"员工名字；{self.name},工号：{self.id}\\\") class FullTimeEmployee(Employee):#继承父类 def __init__(self,name,id,monthly_salary): super().__init__(name,id)#用父类的初始化 个人理解将name id 传过去 self.monthly_salary=monthly_salary def calculate_monthly_pay(self): return self.monthly_salary class PartTimeEmployee(Employee): def __init__(self,name,id,daily_salary,work_days): super().__init__(name,id) self.daily_salary=daily_salary self.work_days=work_days def calculate_monthly_pay(self): return self.daily_salary*self.work_days zhangsan = FullTimeEmployee(\\\"张三\\\",\\\"1001\\\",6000) lisi=PartTimeEmployee(\\\"李四\\\",\\\"1002\\\",230,15) zhangsan.print_info()#这是调用的父类里面的方法 lisi.print_info() print(zhangsan.calculate_monthly_pay())#这是调用的子类里面的方法 print(lisi.calculate_monthly_pay())\",\"读文件\",\"#绝对路径:c:\\\\home\\\\data\\\\a.py #相对路径从一个是参考位置出发：.当前目录 ..当前目录的上一级目录 f=open(\\\"./data.txt\\\",\\\"r\\\",encoding=\\\"utf-8\\\")#.当前目录 r可读 encooding 编码格式 content=f.read()#f.read 会讲文件所有内容以字符串返回 print(content) f.close()#关闭文件 释放资源 with open(\\\"./data.txt\\\",\\\"r\\\",encoding=\\\"utf-8\\\") as f:#这样写会自动关闭文件 content=f.read() print(content) with open(\\\"./data.txt\\\",\\\"r\\\",encoding=\\\"utf-8\\\") as f: print(f.readline())#打印出第一行 print(f.readline())#打印出第二行 with open(\\\"./data.txt\\\",\\\"r\\\",encoding=\\\"utf-8\\\") as f: print(f.readlines())#会返回一个列表 全部内容 结合for循环使用 with open(\\\"./data.txt\\\",\\\"r\\\",encoding=\\\"utf-8\\\") as f: lines=f.readlines() for line in lines: print(line)\",\"写文件\",\"#w如果文件已经存在 就会把原有的文件内容清空 不想清空可以用a附加模式 也可以用r+进行读写操作会以追加的模式进行写入 with open(\\\"./poem.txt\\\",\\\"w\\\",encoding=\\\"utf-8\\\") as f: f.write(\\\"我欲乘风归去，\\\\n又恐琼楼玉宇，\\\\n高处不胜寒。\\\\n\\\") with open(\\\"./poem.txt\\\",\\\"a\\\",encoding=\\\"utf-8\\\") as f: f.write(\\\"起舞弄清影，\\\\n\\\") f.write(\\\"何似在人间。\\\")\",\"捕捉异常\",\"#捕捉异常 #可以提前预判由于用户输入不规范而产生的错误 避免程序报错（不执行） try:#有可能产生错误的代码 user_weight=float(input(\\\"请输入您的体重（单位u:kg）：\\\")) user_height=float(input(\\\"请输入您的身高（单位u:m）：\\\")) user_BMI=user_weight/user_height ** 2 except ValueError: #产生值错误时会运行 print(\\\"输入的不是合理数字，请重新运行程序，并输入正确的数字。\\\") except ZeroDivisionError: # 产生除零错误时会执行 print(\\\"身高不能为0，请重新运行程序，并输入正确的数字\\\") except : #产生其他错误时执行 print(\\\"发生了未知错误，请重新运行程序。\\\") else:#没有错误时执行 print(\\\"您的BMI值为：\\\"+str(user_BMI)) finally: #不管反发生错误与否都会执行 print(\\\"程序运行结束。\\\")\",\"assert断言和unittest(不想写了 自行百度)\",\"爬虫\",\"1.不要爬取公民数据\",\"2.不要爬取受著作权保护的内容\",\"3.不要爬取国家事务，国防建设尖端科学技术领域的计算机系统等\",\"你还要确保自己写的爬虫是一只温柔善良的爬虫\",\"1.它的请求数量和频率不能过高 否则可能无异于DDos攻击\",\"2.有反爬机制或验证码登录 不要去强行突破\",\"3.可以通过查看网站的robots.txt文件了解可爬取的网页路径范围\",\"打开pycharm编辑器在终端输入pip install requests 下载这个外部库\",\"import requests \\\"\\\"\\\" URL=\\\"https://www.bilibili.com/\\\" resopnse=requests.get(URL)#会返回一个Response实例 print(resopnse) print(resopnse.status_code)#这个实例包括这个状态码 if resopnse.ok:#也可以根据状态码来判断 不过这个更简洁 print(\\\"请求成功\\\") else : print(\\\"请求失败\\\") \\\"\\\"\\\" #上面的无法访问 可以伪装成用户去访问 url1=\\\"https://movie.douban.com/top250\\\" headers = { #在浏览器检查代码里面找到User-Agent 将其内容复制下来 \\\"User-Agent\\\":\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\\\" }#用请求头进行伪装 response1=requests.get(url1,headers=headers) print(response1.text)#拿到了那个页面的HTML源码\",\"html练习\",\"<!DOCTYPE html> <html> <head> <title>这是一个网页标题</title> </head> <body> <div style=\\\"background-color: red;\\\"> <h1>我是一级标题</h1> <h2>我是二级标题</h2> <h6>我是最小号六级标题</h6> </div> <p>这是一个文本段落这是一个文本段落 这是一个<br>换行文本段落 <b>加粗字体</b> <i>斜体</i> <u>这样可以加下划线</u> </p> <p>这样<span style=\\\"background-color: red;\\\">这是一块红色</span>也可以换行 下面加载图片</p> <img src=\\\"https://tse2-mm.cn.bing.net/th/id/OIP-C.7KW5GT7NQ8yUGlBbCHEm0gHaNK?rs=1&pid=ImgDetMain\\\" width=\\\"500 px\\\"> <a href=\\\"https://www.baidu.com\\\">百度</a> <ol> <li>我是第一项</li> <li>我是第二项</li> <li>我是第三项</li> </ol> <ul> <li>我是无序的1</li> <li>我是无序的2</li> <li>我是无序的3</li> </ul> <table border=\\\"1\\\" calss=\\\"data-table\\\"> <thead> <tr> <td>头部1</td> <td>头部2</td> <td>头部3</td> </tr> </thead> <tbody> <tr> <td>111</td> <td>222</td> <td>333</td> </tr> <tr> <td>444</td> <td>555</td> <td>666</td> </tr> <tr> <td>777</td> <td>888</td> </tr> </tbody> </table> </body> </html>\",\"bs库\",\"#这是外部库 解析HTML #安装命令 pip install bs4 from bs4 import BeautifulSoup import requests content=requests.get(\\\"http://books.toscrape.com/\\\").text soup=BeautifulSoup(content,\\\"html.parser\\\") #后面这个是指定解析器 #这个库函数有很多实用的方法 比如可以根据html中的某一个值获得对应的属性（键值对） #print(soup.p)#就能看到这个HTML中里的第一个<p>元素 即文本段落元素 #print(soup.img)#第一个img元素 all_prices=soup.findAll(\\\"p\\\",attrs={\\\"class\\\":\\\"price_color\\\"}) #源网页代码 <p calss =\\\"price_color\\\">$53.74</p> #第一个参数p表示找p标签 可选参数arrars赋值为一个字典 键值对就对应你想找的属性和值 #findAll返回一个可迭代对象 可通过for循环打印 #如果我们只想要中间的价格 可以用方法string 会把标签包围的文字返回给我们 for price in all_prices: print(price.string[2:])#切片操作 能获得索引值大于等于2所有剩下的字符串 all_titles=soup.findAll(\\\"h3\\\") for title in all_titles: link = title.find(\\\"a\\\")#find 返回的不是可迭代对象 print(link.string)\",\"爬取豆瓣电影\",\"import requests from bs4 import BeautifulSoup #豆瓣电影top250 #url1=\\\"https://movie.douban.com/top250\\\" headers = { \\\"User-Agent\\\":\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\\\" } for start_num in range(0,250,25): response1=requests.get(f\\\"https://movie.douban.com/top250?start={start_num}\\\",headers=headers) html=response1.text soup=BeautifulSoup(html,\\\"html.parser\\\")#传入bs函数搜寻 #分析想提取信息特点 在网页检查 #看到所有标题都是sapan元素并且它们的class值都是title #我们就可以根据这个条件提取 all_titles=soup.findAll(\\\"span\\\",attrs={\\\"class\\\":\\\"title\\\"})#返回一个可迭代对象 for title in all_titles: title_string=title.string if \\\"/\\\" not in title_string: print(title_string)\"]},\"335\":{\"c\":[\"后端\"]},\"336\":{\"c\":[\"python\"]},\"337\":{\"h\":\"操作系统\",\"t\":[\"2024南京大学jyy操作系统设计与实现\",\"Jupyter Notebook\",\"ffmpeg 处理音视频工具\"]},\"338\":{\"h\":\"应用视角的操作系统\",\"t\":[\".c经过预处理(会把.c文件和头文件展开到.i文件中)->.i ---经过编译，生成汇编文件.s---汇编文件经过汇编，生成了对象文件.o ---- 链接器把对象文件和库文件链接生成可执行文件\",\"什么是程序？\",\"int main(){ printf(\\\"hello,world\\\\n\\\") }\",\"objdump -d a.out 反汇编\",\"gcc --verbose hello.c -static可以查看所有编译选项，更啰嗦一点。\",\"gcc -Wl,--verbose hello.c -static查看所有连接选项\",\"readelf -a a.out | less\",\"gcc hello.c -static\",\"file a.out\",\"gcc -c hello,c得到一个hello.o\",\"gcc命令生成可执行文件后objdump -d a.out查看，静态编译后反汇编，会发现代码变得非常长。\",\"gcc -c hello.cld hello.oobjdump -d test.o发现变短了。没有生成a.out,报错了\",\"把printf删了再走一次gcc -c test.c && ld test.o给了一个waring,这个时候就得到了一个a.out,上面的并没有得到a.out\",\"可以使用gdb调试一下a.out发现真的执行了。如果改成while(1)也可以发现真的执行了.\",\"处理器:无情的，执行指令的状态机\",\"指令集里没有一条关闭计算机的指令，那么操作系统是如何在关系所有软件后，切断计算机的电源的。只能借助操作系统。\"]},\"339\":{\"c\":[\"后端\"]},\"340\":{\"c\":[\"操作系统\"]},\"341\":{\"h\":\"数据库\",\"t\":[\"第一范式(1NF)\",\"列不可再分，即每个属性都是不可再分的。\",\"第二范式(2NF)\",\"消除非主属性对主码部分依赖\",\"主码为单属性，或者R的全体属性均为主属性，则R$\\\\in$2NF。\",\"第三范式(3NF)\",\"消除传递依赖(A推出B，B再推出C)\",\"BC范式\",\"消除了主属性对主码的部分依赖和传递\"]},\"342\":{\"c\":[\"后端\"]},\"343\":{\"c\":[\"数据库\"]},\"344\":{\"h\":\"正则表达式\",\"t\":[\"正则表达式(regular expression)简称regex。\"]},\"345\":{\"h\":\"匹配单个字符\",\"t\":[\"语法:\",\".可以匹配任意字符，包括.字符本身，如果只要匹配.一个字符，要使用转移\\\\.\",\"[ns]分别匹配n和s。和的意思。[0-9]匹配0-9,[a-z]匹配a-z []定义了一个字符集合\",\"^对字符集合进行取非操作\",\"[\\\\u4e00-\\\\u9fa5]匹配任意一个汉字\",\"元字符\",\"说明\",\"[\\\\b]\",\"回退(并删除)一个字符(Backspace键)\",\"\\\\f\",\"换页符\",\"\\\\n\",\"换行符\",\"\\\\r\",\"回车符\",\"\\\\t\",\"制表符(Tap键)\",\"\\\\v\",\"垂直制表符\",\"^\",\"字符串的开始\",\"$\",\"字符串的结束\",\"数字字母空白元字符\",\"元字符\",\"说明\",\"\\\\d\",\"任何一个数字字符(等价于[0-9])\",\"\\\\D\",\"任何一个非数字字符(等价[\\\\^0-9])\",\"\\\\w\",\"任何一个字母数字字符(大小写均可)或下划线字符(等价于[a-zA-Z0-9])\",\"\\\\W\",\"任何一个非字母数字或下划线字符等价于(^a-zA-Z0-9)\",\"\\\\s\",\"任何一个空白字符(等价于[\\\\f\\\\n\\\\r\\\\t\\\\v])\",\"\\\\S\",\"任何一个非空白字符(等价于[\\\\^\\\\f\\\\n\\\\r\\\\t\\\\v])\",\"使用POSIX字符\",\"并不是所有正则表达式都支持，最好查一下是否支持。\",\"字符类\",\"说明\",\"[:alnum:]\",\"任何一个字母或数字[a-zA-Z0-9]\",\"[:alpha:]\",\"任何一个字母[a-zA-Z]\",\"[:blank:]\",\"空格或制表符[\\\\t]\",\"并未列举全自行百度\"]},\"346\":{\"h\":\"匹配多个字符\",\"t\":[\"\\\\w只能匹配单个字符\",\"要想匹配同一个字符(或字符集合)的多次重复，只需要加上+后缀即可。\",\"+匹配一个或多个字符(至少一个，不匹配零个字符的情况)\",\"[\\\\w]+@[\\\\w\\\\.]+匹配多层域名的情况\",\"1qwe@daf.c2m.co.ko\",\"*匹配零个或多个字符\",\"可以理解为在\\\"我\\\"前面的字符是可选的。\",\"匹配0个或一个字符\",\"https?\\\"我\\\"前面的字符要么不出现要么出现一次。\"]},\"347\":{\"h\":\"常用的总结\",\"t\":[\"常用的元字符\",\"代码\",\"说明\",\"^\",\"匹配字符串的开始\",\"$\",\"匹配字符串的结束\",\"\\\\s\",\"匹配任意的空白符\",\"\\\\w\",\"匹配任意的字母数字下划线或汉字\",\"\\\\d\",\"匹配数字\",\"？\",\"匹配前面的字符零次或一次\",\"+\",\"匹配前面的字符一次或多次\",\"*\",\"匹配前面的字符零次或多次\",\"{n}\",\"匹配前面的字符n次\",\"续表\",\"代码\",\"说明\",\"{n,}\",\"匹配前面的字符最少n次\",\"{n,m}\",\"匹配前面的字符最少n次最多m次\",\"(thir|four)th匹配thirth或fourth\",\"()的第二个作用就是分组，也就是子表达式。\"]},\"348\":{\"c\":[\"后端\"]},\"349\":{\"c\":[\"正则表达式\"]},\"350\":{\"h\":\"爬虫\",\"t\":[\"个人笔记，仅供学习交流参考，严禁传播!!!\"]},\"351\":{\"h\":\"urllib库使用\",\"t\":[\"import urllib.request # 使用urllib来获取百度首页的源码 # 1.定义一个url，访问地址 url = 'http://www.baidu.com' # 2.模拟浏览器向服务器发送请求 response 响应 response = urllib.request.urlopen(url) # 3.获取响应中的页面的源码 content 内容 #read返回的是字节形式二进制数据 #二进制数据转换为字符串--解码 content = response.read().decode('utf-8') # 4.打印数据 print(content)\",\"import urllib.request url = 'http://www.baidu.com' #模拟浏览器向服务器发送请求 response = urllib.request.urlopen(url) #一个类型和六个方法 #response是HTTPResponse的类型 #response.read(5) 读5个字节 #response.readline() 读取一行 #response.readlines() 一次读取一行 #response.getcode() 返回状态码 200正确，没有错 #response.geturl() 返回url地址 #response.getheaders() 获取的是一个状态信息\"]},\"352\":{\"h\":\"下载\",\"t\":[\"import urllib.request # 下载网页 url_page = 'http://www.baidu.com' # url代表的是下载的路径 filename文件的名字 urllib.request.urlretrieve(url_page,'baidu.html') # 下载图片 url_img = '图片链接' urllib.request.urlretrieve(url=url_img,filename='图片.jpg') # 下载视频 url_video = '视频地址(检查地址视频链接)' urllib.request.urlretrieve(url=url_video,filename='视频.mp4')\"]},\"353\":{\"h\":\"请求对象的定制\",\"t\":[\"url的组成\",\"http/https协议\",\"主机(域名)\",\"端口号\",\"http80 https443 mysql3306\",\"oracle1521 redis6479\",\"路径 s\",\"参数 wd=\",\"锚点 #\",\"import urllib.request url = 'https://www.baidu.com' # url的组成 response = urllib.request.urlopen(url) content = response.read().decode('utf-8') print(content) #打印出来的东西少了?\",\"获取UA(用户代理)\",\"检查-->网络-->刷新-->查看网址-->ua\",\"url = 'https://www.baidu.com' headers = { 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0' } # 因为urlopen方法不能存储字典,所以headers不能传递进去 # 因为参数顺序的问题，不能直接写url和headers，所以需要关键字传参 request = urllib.request.Request(url=url,headers=headers) response = urllib.request.urlopen(request) content = response.read().decode('utf-8')\"]},\"354\":{\"h\":\"编解码\",\"t\":[\"get请求方式:urllib.parse.quote()\",\"import urllib.request import urllib.parse url = 'https://www.baidu.com/s?wd=' headers = { 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0' } # 将周杰伦三个字变成unicode编码的格式 # 需要依赖于urllib.parse name = urllib.parse.quote('周杰伦') url = url + name # 请求对象的定制为了解决反爬的第一种手段 request = urllib.request.Request(url=url,headers=headers) response = urllib.request.urlopen(request) content = response.read().decode('utf-8') print(content)\",\"get请求方式:urllib.parse.urlencode()\",\"urlencode应用场景:多个参数的时候\",\"import urllib.request import urllib.parse url = 'https://www.baidu.com/s?' headers = { 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0' } data = { 'wd':'周杰伦', 'sex':'男' } url = url + urllib.parse.urlencode(data) request = urllib.request.Request(url=url,headers=headers) response = urllib.request.urlopen(request) content = response.read().decode('utf-8') print(content)\",\"post请求方式\",\"post请求方式的参数，必须编码\",\"编码之后必须调用encode方法\",\"参数是放在请求对象定制的方法中\"]},\"355\":{\"h\":\"百度翻译\",\"t\":[\"有时候需要在标头里面加上cookie等数据\",\"import urllib.request import urllib.parse url = 'https://fanyi.baidu.com/sug' headers = { 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0' } data = { 'kw':'spider', } # post请求的参数必须要进行编码 data = urllib.parse.urlencode(data).encode('utf-8') # post的请求的参数，是不会拼接在url的后面的，而是需要放在请求对象定制的参数中 # post请求的参数，必须要进行编码, request = urllib.request.Request(url=url,data=data,headers=headers) # 模拟浏览器发送请求 response = urllib.request.urlopen(request) # 获取响应的数据 content = response.read().decode('utf-8') # 字符串-->json对象 import json obj = json.loads(content) print(obj)\"]},\"356\":{\"h\":\"ajax的get请求\",\"t\":[\"案例:豆瓣电影\",\"import urllib.request import urllib.parse url = 'https://movie.douban.com/j/chart/top_list?type=5&interval_id=100%3A90&action=&start=0&limit=20' headers = { 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0' } request = urllib.request.Request(url=url,headers=headers) response = urllib.request.urlopen(request) content = response.read().decode('utf-8') # open方法默认情况下使用的是gbk的编码，如果我们想要保存汉字，那么需要在open方法中，指定编码格式为utf-8 fp = open('double.json','w',encoding='utf-8') fp.write(content) fp.close()\",\"前十页\"]},\"357\":{\"h\":\"ajax的post请求\"},\"358\":{\"c\":[\"后端\"]},\"359\":{\"c\":[\"爬虫\"]},\"360\":{\"h\":\"爬虫案列\"},\"361\":{\"h\":\"爬取百度翻译\",\"t\":[\"import urllib.request url = \\\"https://fanyi.baidu.com/sug\\\" heads = { \\\"User-Agent\\\":\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0\\\" } temKey = str(input(\\\"请输入您要查的单词:\\\")) data = { 'kw':f'{temKey}', } data = urllib.parse.urlencode(data).encode('utf-8')# post请求的参数必须进行编码 request = urllib.request.Request(url = url,data = data ,headers = heads) response = urllib.request.urlopen(request) content = response.read().decode(\\\"utf-8\\\") import json obj = json.loads(content)# 把json转换为python对象 temDir = obj['data']# 拿到了键值对 返回的是列表 for i in temDir: for j,k in i.items(): print(k) print()\"]},\"362\":{\"c\":[\"后端\"]},\"363\":{\"c\":[\"爬虫\"]},\"364\":{\"h\":\"日记\",\"t\":[\"​ 折腾了半天，成功把博客部署到github,感觉这样一整,密码功能变得非常鸡肋了。\"]},\"365\":{\"h\":\"java数据结构\",\"t\":[\"算法是程序的灵魂。优秀的程序可以在海量数据计算时,依然保持高速计算。\",\"数据结构是一门研究组织数据方式的学科,有了编程语言也就有了数据结构,学好数据结构可以编写出更加漂亮,更加有效率的代码。\",\"程序=数据结构+算法\",\"数据结构是算法的基础,换言之,想要学好算法,需要把数据结构学到位。\",\"线性结构是最常用的数据结构,其特点是数据元素之间存在一对一的线性关系,两种不同的存储结构,即顺序存储结构(数组)和链式存储结构(链表),顺序存储的线性表称为顺序表,顺序表中的存储元素是连续的,链式存储的线性表称为链表,链表中的存储元素不一定是连续的,元素节点中存放数据元素以及相邻元素的地址信息。线性结构常见的有:数组,队列,链表和栈。\",\"二位数组,多维数组,广义表,树结构,图结构\",\"需求:五子棋存盘退出和续上盘的功能,原始二位数组记录了很多无意义的数据-->压缩\",\"当一个数组中大部分元素为0,或者为同一个值的数组时,可以使用稀疏数组来保存该数组。\",\"稀疏数组的处理方法是:\",\"记录数组一共有几行几列,有多少个不同的值\",\"把具有不同值的元素的行列及值记录在一个小规模的数组中,从而缩小程序的规模。\",\"格式:\",\" row col val 0 11 11 2 原数组11行11列2个有效值 1 1 2 1 第一个有效值位置及其值 2 2 2 2 第二个有效值位置及其值\",\"思路\",\"遍历,原始的二维数组,得到有效数据的个数sum\",\"根据sum就可以创建稀疏数组sparaArr =int[sum+1][3]\",\"将二维数组的有效数据存入到稀疏数组中\",\"稀疏数组转原始二位数组思路\",\"先读取稀疏数组第一行,根据第一行的数据创建原始的二维数组,比如上面的chessArr2 = int[11][11]\",\"再读取稀疏数组后几行的数据,并赋值给原始的二维数组即可。\"]},\"366\":{\"h\":\"代码:\",\"t\":[\"public class Main { public static void main(String[] args) { //0 没有棋子 1 黑子 2 白子 int chessArr1[][] = new int[11][11]; chessArr1[1][2] = 1; chessArr1[2][4] = 2; for (int[] row :chessArr1){ for (int data : row){ System.out.printf(\\\"%d\\\\t\\\",data); } System.out.println(); } System.out.println(\\\"------------\\\"); //二维数组转稀疏数组 int sum=0; for(int i=0;i<11;i++){ for(int j=0;j<11;j++){ if(chessArr1[i][j] != 0){ sum++; } } } int sparseArr[][] = new int[sum+1][3]; sparseArr[0][0]=11; sparseArr[0][1]=11; sparseArr[0][2]=sum; int count = 0;//记录是第几个非零数据 for (int i=0;i<11;i++){ for(int j=0;j<11;j++){ if (chessArr1[i][j] != 0){ count++; sparseArr[count][0] = i; sparseArr[count][1] = j; sparseArr[count][2] = chessArr1[i][j]; } } } System.out.println(); System.out.println(\\\"得到的稀疏数组为:\\\"); for(int i = 0;i<sparseArr.length;i++){ System.out.printf(\\\"%d\\\\t%d\\\\t%d\\\\t\\\",sparseArr[i][0],sparseArr[i][1],sparseArr[i][2]); System.out.println(); } //稀疏数组恢复成二维数组 int chessArr2[][] = new int[sparseArr[0][0]][sparseArr[0][1]]; for(int i=1;i<sparseArr.length;i++){ for(int j=0;j<3;j++){ chessArr2[sparseArr[i][0]][sparseArr[i][1]] = sparseArr[i][2]; } } for (int[] row :chessArr2){ for (int data : row){ System.out.printf(\\\"%d\\\\t\\\",data); } System.out.println(); } } }\",\"课后练习,尝试一下将数组保存进磁盘并读取。\",\"队列是一个有序列表,可以用数组或是链表来实现。\",\"遵循先入后出的原则.\"]},\"367\":{\"h\":\"使用数组模拟队列(代码)\",\"t\":[\"public class ArrayQueue { private int maxSize;//数组最大容量 private int frot;//队列头 private int rear;//队列尾 private int[] arr; public ArrayQueue(int arrMaxSize) { maxSize = arrMaxSize; arr = new int[maxSize]; frot = -1;//指向队列头部,分析出front是指向队列头的前一个位置 rear = -1;//指向队列尾,指向队列尾的数据(既就是队列最后一个数据) } //判断队列是否满 public boolean ifFull() { return rear == maxSize - 1; } //判断队列是否为空 public boolean isEmpty() { return rear == frot; } //添加数据到队列 public void addQueue(int n) { //判断队列是否满 if (ifFull()) { System.out.println(\\\"队列满,不能加入数据\\\"); return; } rear++; arr[rear] = n; } //获取队列的数据,出队列 public int getQueue() { if (isEmpty()) { throw new RuntimeException(\\\"队列空,不能取数据\\\"); } frot++; return arr[frot]; } public void showQueue() { if (isEmpty()) { System.out.println(\\\"队列空的,没有数据\\\"); return; } for (int i = 0; i < arr.length; i++) { System.out.printf(\\\"arr[%d]=%d/n\\\", i, arr[i]); } } //显示队列的头部数据,注意不是取出数据 public int headQueue() { if (isEmpty()) { throw new RuntimeException(\\\"队列空的,没有数据\\\"); } return arr[frot + 1]; } }\"]},\"368\":{\"h\":\"测试main方法\",\"t\":[\" public static void main(String[] args) { ArrayQueue arrayQueue = new ArrayQueue(3); char key = ' '; Scanner scanner = new Scanner(System.in); boolean loop = true; while (loop) { System.out.println(\\\"s(show):显示队列\\\"); System.out.println(\\\"e(exit):退出队列\\\"); System.out.println(\\\"a(add):添加数据到队列\\\"); System.out.println(\\\"g(get):从队列取出数据\\\"); System.out.println(\\\"h(head):查看队列头的数据\\\"); key = scanner.next().charAt(0);//接收一个字符 switch (key) { case 's': arrayQueue.showQueue(); break; case 'e': scanner.close(); loop = false; break; case 'a': System.out.println(\\\"输入一个数字\\\"); arrayQueue.addQueue(scanner.nextInt()); break; case 'g': try { int res = arrayQueue.getQueue(); System.out.println(\\\"取出的数据是:\\\" + res); } catch (Exception e) { System.out.println(e.getMessage()); } break; case 'h': try { int res = arrayQueue.headQueue(); System.out.println(\\\"队列的头数据是:\\\" + res); } catch (Exception e) { System.out.println(e.getMessage()); } break; default: break; } System.out.println(\\\"程序退出\\\"); } }\"]},\"369\":{\"h\":\"问题\",\"t\":[\"数组使用一次就不能用,没有达到复用的效果，\",\"将这个数组使用算法,改进成一个环形的队列 取模。\"]},\"370\":{\"h\":\"环形队列\",\"t\":[\"思路:\",\"front变量的含义做一个调整,front就指向队列的第一个元素,也就是或arr[front]就是队列的第一个元素,front初始值=0\",\"rear变量的含义做一个调整:rear指向队列的最后一个元素的后一个位置。因为希望空出一个空间作为约定。rear的初始值=0\",\"当队列满时,条件是(rear+1)%maxsize==front\",\"队列为空的条件,rear==front\",\"当我们这样分析,队列中有效的数据的个数==(rear+maxSize-front)%maxSize==\",\"在原来的队列上修改得到环形队列。\",\"public class CircleArray { private int maxSize;//数组最大容量 private int front;//队列的第一个元素 private int rear;//最后一个元素的后一个位置 private int[] arr; public CircleArray(int maxSize){//最大有效数据位数-1 this.maxSize = maxSize; arr = new int[this.maxSize]; } public boolean ifFull(){ return (rear + 1) % maxSize == front; } public boolean isEmpty(){ return rear == front; } public void addQueue(int n){ if (ifFull()) { System.out.println(\\\"队列满,不能加入数据\\\"); return; } arr[rear] = n; rear = (rear+1)%maxSize; } public int getQueue() { if (isEmpty()) { throw new RuntimeException(\\\"队列空,不能取数据\\\"); } //front是指向队列的第一个元素 //1.先把front对应的值保留到一个临时变量 //2. 将front后裔 //3.将临时保存的变量返回 int tem = arr[front]; front = (front +1)%maxSize; return tem; } //求出当前队列有效数据的个数 public int size(){ return (rear+maxSize- front)%maxSize; } public void showQueue() { if (isEmpty()) { System.out.println(\\\"队列空的,没有数据\\\"); return; } for (int i=front;i<front+size();i++){ System.out.printf(\\\"arr[%d]=[%d]\\\\n\\\",i%maxSize,arr[i%maxSize]); } } public int headQueue() { if (isEmpty()) { throw new RuntimeException(\\\"队列空的,没有数据\\\"); } return arr[front]; } }\",\"链表是以节点的方式来存储的,是链式存储,每个节点包含data域,next域:指向下一个节点，链表的各个节点不一定是连续存放的。\",\"链表分带头节点的链表和没有头节点的链表,根据实际的需求来确定。\",\"head节点不存放具体数据,作用就是表示单链表表头。\",\"应用实例\",\"使用带head头的单向链表实现-水浒英雄排行管理\",\"完成对英雄任务的增删改查操作\",\"第一种方法在添加英雄时,直接添加到链表尾部\",\"第二种方式在添加英雄时,根据排名将英雄插入到指定位置(如果有这个排名,则添加失败,并给出提示)\",\"分析\",\"添加(创建):\",\"先创建一个head头节点,作用就是表示单链表的头\",\"后面我们每添加一个节点,就直接加入到链表的最后\",\"遍历:\",\"通过一个辅助遍历,帮助遍历整个链表\",\"第一种,直接添加到链表尾部代码\",\"public class SingleLinkedListDemo { public static void main(String[] args) { //先创建几个节点 HeroNode heroNode1 = new HeroNode(1, \\\"宋江\\\", \\\"及时雨\\\"); HeroNode heroNode2 = new HeroNode(2, \\\"卢俊义\\\", \\\"玉麒麟\\\"); HeroNode heroNode3 = new HeroNode(3, \\\"吴用\\\", \\\"智多星\\\"); HeroNode heroNode4 = new HeroNode(4, \\\"林冲\\\", \\\"豹子头\\\"); //创建链表 SingLeLinkedList singLeLinkedList = new SingLeLinkedList(); //加入 singLeLinkedList.add(heroNode1); singLeLinkedList.add(heroNode2); singLeLinkedList.add(heroNode3); singLeLinkedList.add(heroNode4); singLeLinkedList.list(); } } //定义SingLeLinkedList class SingLeLinkedList{ //先初始化一个头节点,头节点不要动 private HeroNode head = new HeroNode(0,\\\"\\\",\\\"\\\"); //添加节点到单项链表 //思路，当不考虑编号顺序时, //1.找到当前链表最后节点 //2.将最后这个节点的next指向新的节点 public void add(HeroNode heroNode){ //因为head节点不能动,因此我们需要一个辅助遍历temp HeroNode temp = head; while(true){ //找到链表的最后 if(temp.next == null){ break; } //如果没有找到最后,就将tem后移 temp = temp.next; } //当退出while循环时,temp就指向了链表的最后 temp.next = heroNode; } //显示链表[遍历] public void list(){ if(head.next == null){ System.out.println(\\\"链表为空\\\"); return; } //因为头节点不能动,因此我们需要一个辅助变量来遍历 HeroNode temp = head.next; while (true){ //判断是否到链表最后 if(temp == null){ break; } //输出节点信息 System.out.println(temp); //将temp后移 temp = temp.next; } } } //定义HeroNode,每个HeroNode对象就是一个节点 class HeroNode{ public int no; public String name; public String nickname; public HeroNode next;//指向下一个节点 public HeroNode(int hNo,String hName,String hNicknmae){ this.no = hNo; this.name = hName; this.nickname = hNicknmae; } @Override public String toString() { return \\\"HeroNode{\\\" + \\\"no=\\\" + no + \\\", name='\\\" + name + '\\\\'' + \\\", nickname='\\\" + nickname + '\\\\'' + // \\\", next=\\\" + next + '}'; } }\",\"第二种,按照编号顺序添加\",\"思路:\",\"首先找到新添加节点的位置,是通过辅助变量(指针),通过遍历\",\"新的节点 next = temp.next\",\"将temp.next=新的节点\",\" public void addByOrder(HeroNode heroNode){ //因为单链表,因为我们找的temp是位于添加位置的前一个节点，否则插入不了 HeroNode temp = head; boolean flag = false;//标志添加的编号是否存在,默认为false while(true){ if(temp.next == null){//说明temp已经在链表最后 break; } if(temp.next.no > heroNode.no){//位置找到,就在tem后面添加 break; }else if(temp.next.no == heroNode.no){ flag = true;//说明编号存在 break; } temp = temp.next;//后移 } if(flag){ System.out.printf(\\\"准备插入的英雄的编号%d已经存在,不能加入\\\\n\\\",heroNode.no); }else { heroNode.next = temp.next; temp.next = heroNode; } }\",\"修改节点信息,根据编号修改,即no编号不变\",\" public void update(HeroNode heroNode){ //判断是否为空 if(head.next == null){ System.out.println(\\\"链表为空\\\"); return; } //找到需要修改的节点 HeroNode temp = head.next; boolean flag = false; //表示是否找到该节点 while (true){ if(temp == null){//到了链表的最后 break; } if(temp.no == heroNode.no){//找到了 flag = true; break; } temp = temp.next; } if(flag){ temp.name = heroNode.name; temp.nickname = heroNode.nickname; }else { System.out.println(\\\"没有找到编号=\\\"+heroNode.no+\\\"的节点,不能修改\\\"); } }\",\"删除节点代码\",\"思路:\",\"我们先找到需要删除的这个节点的前一个节点temp\",\"temp.next=temp.next.next\",\"被删除的节点将不会有其他引用指向,会被垃圾回收机制回收。\",\" public void delete(int no){ HeroNode temp = head; boolean flag = false;//标志是否找到待删除节点 while(true){ if(temp.next == null){ break; } if (temp.next.no == no){//找到了待删除节点的前一个节点 flag = true; break; } temp = temp.next; } if(flag){ temp.next = temp.next.next; }else { System.out.println(\\\"这个节点不存在\\\"); } }\"]},\"371\":{\"h\":\"单链表常见面试题\",\"t\":[\"求单链表中有效节点个数\",\" //方法:获取到单链表的节点个数(如果带头节点,需求不统计头节点) public int getLength(HeroNode head){ if (head.next == null){ return 0; } int len = 0; HeroNode cur = head.next;//没有统计头节点 while (cur != null){ len++; cur = cur.next; } return len; }\",\"查找单链表中的倒数第k个节点 [新浪面试题]\",\" /* 思路: 1.编写一个方法,接收head节点,同时接收一个index 2.index表示的是倒数index个节点 3.先把链表从头到尾遍历,得到链表的总的长度getLength 4.得到size之后,我们链表的第一个开始遍历(size-index)个，就可以得到 5.找到返回该节点,找不到返回空 */ public HeroNode findLastIndex(HeroNode head,int index){ if (head.next == null){ return null; } int size = getLength(head); //做一个校验 if (index<=0 || index>size){ return null; } HeroNode cur = head.next; for (int i=0;i<size - index;i++){ cur = cur.next; } return cur; }\",\"单链表的反转[腾讯面试题]\",\" //单链表的反转思路 /** * 1.先定义一个节点reverseHead = new HeroNode(); * 2.从头到尾遍历原来的链表,每遍历一个节点,就将其取出,并放在新的链表reverseHead的最前端 * 3.原来的链表head.next=reverseHead.next */ public void reverseLsit(HeroNode head){ //如果当前链表为空,或者只有一个节点,无需反转,直接返回 if (head.next == null || head.next.next == null){ return; } //定义一个辅助的指针(变量),帮助我们遍历原来的链表 HeroNode cur = head.next; HeroNode next = null;//定义当前节点的下一个节点 HeroNode reverseHead = new HeroNode(0,\\\"\\\",\\\"\\\"); //遍历原来的链表 while (cur != null){ next = cur.next;//暂时保存当前节点的下一个节点,后面需要使用 cur.next = reverseHead.next; reverseHead.next = cur; cur = next; } head.next = reverseHead.next; }\",\"从头到尾打印单链表[百度,要求方式1:反向遍历,方式2:Stack栈]\",\" //思路 /*** * 1.逆序打印单链表 * 2. 方式1,先将单链表进行反转,然后遍历即可,这样做的问题是会破坏原来的单链表的结构,不建议 * 3. 方式2,可以利用栈这个数据结构,将各个节点压入到栈中,利用栈的先进后出的特点就实现了逆序打印效果 * */ //使用方式2实现逆序打印 public void reverseListPrint(HeroNode head){ if (head.next == null){ return; } //创建一个栈,将各个节点压入栈中 Stack<HeroNode> stack = new Stack<HeroNode>(); HeroNode cur = head.next; //将链表的所有节点压入栈中 while (cur != null){ stack.push(cur); cur = cur.next; } //将栈中的节点进行打印 while (stack.size() > 0){ System.out.println(stack.pop()); } }\",\"合并两个有序的单链表,合并之后的链表依然有序[自己完成]\",\"下面代码是自己写的(想了老半天)\",\"public HeroNode hebing(HeroNode h1, HeroNode h2) { //合并到第三个链表中 HeroNode newHead = new HeroNode(0, \\\"\\\", \\\"\\\"); if(h1.next == null) { newHead.next = h2.next; return newHead; }else if(h2.next == null) { newHead.next = h1.next; return newHead; } if(h1.next.no >= h2.next.no) { newHead.next = h2.next; h2 = h2.next; }else { newHead.next = h1.next; h1 = h1.next; } HeroNode curh1 = h1.next; HeroNode curh2 = h2.next; HeroNode curNew = newHead.next; while(curh1 != null && curh2 != null) { if(curh1.no >= curh2.no) { curNew.next = curh2; curh2 = curh2.next; curNew = curNew.next; }else { curNew.next = curh1; curh1 = curh1.next; curNew = curNew.next; } } if (curh1 == null) { curNew.next = curh2; }else { curNew.next = curh1; } return newHead; }\",\"使用带head头的双向链表实现-水浒英雄排行榜管理单项链表缺点分析:\",\"单项链表,查找方向只能是一个方向,而双向链表可以向前向后查找\",\"单项链表不能自我删除,需要靠辅助节点,而双向链表,则可以自我删除,所以前面我们单链表删除节点时,总是找到temp(temp是待删除节点的前一个节点)的下一个节点来删除的\",\"public class HeroNode2 { public int no; public String name; public String nickname; public HeroNode2 next;//指向下一个节点 默认为null public HeroNode2 pre;//指向前一个节点 默认为null public HeroNode2(int hNo, String hName, String hNicknmae){ this.no = hNo; this.name = hName; this.nickname = hNicknmae; } @Override public String toString() { return \\\"HeroNode{\\\" + \\\"no=\\\" + no + \\\", name='\\\" + name + '\\\\'' + \\\", nickname='\\\" + nickname + '\\\\'' + // \\\", next=\\\" + next + '}'; } }\",\"public class DoubleLinkedList { private HeroNode2 head = new HeroNode2(0, \\\"\\\", \\\"\\\"); public HeroNode2 getHead() { return head; } //遍历双向链表的方法,与单链表类似 public void list() { if (head.next == null) { System.out.println(\\\"链表为空\\\"); return; } //因为头节点不能动,因此我们需要一个辅助变量来遍历 HeroNode2 temp = head.next; while (true) { //判断是否到链表最后 if (temp == null) { break; } //输出节点信息 System.out.println(temp); //将temp后移 temp = temp.next; } } //在链表尾部添加,与单链表非常类似 public void add(HeroNode2 heroNode){ //因为head节点不能动,因此我们需要一个辅助遍历temp HeroNode2 temp = head; while(true){ //找到链表的最后 if(temp.next == null){ break; } //如果没有找到最后,就将tem后移 temp = temp.next; } //当退出while循环时,temp就指向了链表的最后 temp.next = heroNode; heroNode.pre = temp; } //修改一个节点的内容,与单链表相同 public void update(HeroNode2 heroNode){ //判断是否为空 if(head.next == null){ System.out.println(\\\"链表为空\\\"); return; } //找到需要修改的节点 HeroNode2 temp = head.next; boolean flag = false; //表示是否找到该节点 while (true){ if(temp == null){//到了链表的最后 break; } if(temp.no == heroNode.no){//找到了 flag = true; break; } temp = temp.next; } if(flag){ temp.name = heroNode.name; temp.nickname = heroNode.nickname; }else { System.out.println(\\\"没有找到编号=\\\"+heroNode.no+\\\"的节点,不能修改\\\"); } } //删除一个节点 //对于双向链表可以直接找到要删除的这个节点 //找到后自我删除即可 public void delete(int no){ if (head.next == null){ System.out.println(\\\"链表为空,无法删除\\\"); return; } /* 下面是直接找到待删除的那一个节点,所以用.next, 而单链表中需要找到待删除链表的前一个 */ HeroNode2 temp = head.next; boolean flag = false;//标志是否找到待删除节点 while(true){ if(temp == null){ break; } if (temp.no == no){ flag = true; break; } temp = temp.next; } if(flag){ temp.pre.next = temp.next; //如果是最后一个节点呢? if(temp.next != null) { temp.next.pre = temp.pre; } }else { System.out.println(\\\"这个节点不存在\\\"); } } }\",\"双向链表的第二种添加方式,按照编号顺序[自己完成]\",\"按照单链表的顺序添加,稍作修改即可。\"]},\"372\":{\"c\":[\"算法\"]},\"373\":{\"c\":[\"Java\"]},\"374\":{\"h\":\"洛谷刷题\"},\"375\":{\"h\":\"题目描述\",\"t\":[\"将一个数组中的值按逆序重新存放。例如，原来的顺序为 $8,6,5,4,1$。要求改为 $1,4,5,6,8$。\"]},\"376\":{\"h\":\"输入格式\",\"t\":[\"输入为两行：第一行数组中元素的个数 $n$（$1 \\\\lt n \\\\le 100$)，第二行是 $n$ 个整数，每两个整数之间用空格分隔。\"]},\"377\":{\"h\":\"输出格式\",\"t\":[\"输出为一行：输出逆序后数组的整数，每两个整数之间用空格分隔。\"]},\"378\":{\"h\":\"样例 #1\"},\"379\":{\"h\":\"样例输入 #1\",\"t\":[\"5 8 6 5 4 1\"]},\"380\":{\"h\":\"样例输出 #1\",\"t\":[\"1 4 5 6 8\"]},\"381\":{\"c\":[\"算法\"]},\"382\":{\"c\":[\"Java\"]},\"383\":{\"h\":\"Maven依赖管理项目构建工具\"},\"384\":{\"h\":\"目录\",\"t\":[\"[TOC]\"]},\"385\":{\"h\":\"一、Maven简介\"},\"386\":{\"h\":\"1、为什么学习Maven\"},\"387\":{\"h\":\"1.1、Maven是一个依赖管理工具\",\"t\":[\"①jar 包的规模\",\"随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。\",\"比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：\",\"Nacos 服务注册发现\",\"Web 框架环境\",\"视图模板技术 Thymeleaf\",\"最终却导入了 106 个 jar 包：\",\"org.springframework.security:spring-security-rsa🫙1.0.9.RELEASE:compile com.netflix.ribbon: ribbon🫙2.3.0:compile org.springframework.boot:spring-boot-starter-thymeleaf🫙2.3.6.RELEASE:compile commons-configuration:commons-configuration🫙1.8:compile org.apache.logging.log4j:log4j-api🫙2.13.3:compile org.springframework:spring-beans🫙5.2.11.RELEASE:compile org.springframework.cloud:spring-cloud-starter-netflix-ribbon🫙2.2.6.RELEASE:compile org.apache.tomcat.embed:tomcat-embed-websocket🫙9.0.39:compile com.alibaba.cloud:spring-cloud-alibaba-commons🫙2.2.6.RELEASE:compile org.bouncycastle:bcprov-jdk15on🫙1.64:compile org.springframework.security:spring-security-crypto🫙5.3.5.RELEASE:compile org.apache.httpcomponents:httpasyncclient🫙4.1.4:compile com.google.j2objc:j2objc-annotations🫙1.3:compile com.fasterxml.jackson.core:jackson-databind🫙2.11.3:compile io.reactivex:rxjava🫙1.3.8:compile ch.qos.logback:logback-classic🫙1.2.3:compile org.springframework:spring-web🫙5.2.11.RELEASE:compile io.reactivex:rxnetty-servo🫙0.4.9:runtime org.springframework:spring-core🫙5.2.11.RELEASE:compile io.github.openfeign.form:feign-form-spring🫙3.8.0:compile io.github.openfeign.form:feign-form🫙3.8.0:compile com.netflix.ribbon:ribbon-loadbalancer🫙2.3.0:compile org.apache.httpcomponents:httpcore🫙4.4.13:compile org.thymeleaf.extras:thymeleaf-extras-java8time🫙3.0.4.RELEASE:compile org.slf4j:jul-to-slf4j🫙1.7.30:compile com.atguigu.demo:demo09-base-entity🫙1.0-SNAPSHOT:compile org.yaml:snakeyaml🫙1.26:compile org.springframework.boot:spring-boot-starter-logging🫙2.3.6.RELEASE:compile io.reactivex:rxnetty-contexts🫙0.4.9:runtime org.apache.httpcomponents:httpclient🫙4.5.13:compile io.github.openfeign:feign-core🫙10.10.1:compile org.springframework.boot:spring-boot-starter-aop🫙2.3.6.RELEASE:compile org.hdrhistogram:HdrHistogram🫙2.1.9:compile org.springframework:spring-context🫙5.2.11.RELEASE:compile commons-lang:commons-lang🫙2.6:compile io.prometheus:simpleclient🫙0.5.0:compile ch.qos.logback:logback-core🫙1.2.3:compile org.springframework:spring-webmvc🫙5.2.11.RELEASE:compile com.sun.jersey:jersey-core🫙1.19.1:runtime javax.ws.rs:jsr311-api🫙1.1.1:runtime javax.inject:javax.inject🫙1:runtime org.springframework.cloud:spring-cloud-openfeign-core🫙2.2.6.RELEASE:compile com.netflix.ribbon:ribbon-core🫙2.3.0:compile com.netflix.hystrix:hystrix-core🫙1.5.18:compile com.netflix.ribbon:ribbon-transport🫙2.3.0:runtime org.springframework.boot:spring-boot-starter-json🫙2.3.6.RELEASE:compile org.springframework.cloud:spring-cloud-starter-openfeign🫙2.2.6.RELEASE:compile com.fasterxml.jackson.module:jackson-module-parameter-names🫙2.11.3:compile com.sun.jersey.contribs:jersey-apache-client4🫙1.19.1:runtime io.github.openfeign:feign-hystrix🫙10.10.1:compile io.github.openfeign:feign-slf4j🫙10.10.1:compile com.alibaba.nacos:nacos-client🫙1.4.2:compile org.apache.httpcomponents:httpcore-nio🫙4.4.13:compile com.sun.jersey:jersey-client🫙1.19.1:runtime org.springframework.cloud:spring-cloud-context🫙2.2.6.RELEASE:compile org.glassfish:jakarta.el🫙3.0.3:compile org.apache.logging.log4j:log4j-to-slf4j🫙2.13.3:compile com.fasterxml.jackson.datatype:jackson-datatype-jsr310🫙2.11.3:compile org.springframework.cloud:spring-cloud-commons🫙2.2.6.RELEASE:compile org.aspectj:aspectjweaver🫙1.9.6:compile com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery🫙2.2.6.RELEASE:compile com.google.guava:listenablefuture🫙9999.0-empty-to-avoid-conflict-with-guava:compile com.alibaba.spring:spring-context-support🫙1.0.10:compile jakarta.annotation:jakarta.annotation-api🫙1.3.5:compile org.bouncycastle:bcpkix-jdk15on🫙1.64:compile com.netflix.netflix-commons:netflix-commons-util🫙0.3.0:runtime com.fasterxml.jackson.core:jackson-annotations🫙2.11.3:compile com.google.guava:guava🫙29.0-jre:compile com.google.guava:failureaccess🫙1.0.1:compile org.springframework.boot:spring-boot🫙2.3.6.RELEASE:compile com.fasterxml.jackson.datatype:jackson-datatype-jdk8🫙2.11.3:compile com.atguigu.demo:demo08-base-api🫙1.0-SNAPSHOT:compile org.springframework.cloud:spring-cloud-starter-netflix-archaius🫙2.2.6.RELEASE:compile org.springframework.boot:spring-boot-autoconfigure🫙2.3.6.RELEASE:compile org.slf4j:slf4j-api🫙1.7.30:compile commons-io:commons-io🫙2.7:compile org.springframework.cloud:spring-cloud-starter🫙2.2.6.RELEASE:compile org.apache.tomcat.embed:tomcat-embed-core🫙9.0.39:compile io.reactivex:rxnetty🫙0.4.9:runtime com.fasterxml.jackson.core:jackson-core🫙2.11.3:compile com.google.code.findbugs:jsr305🫙3.0.2:compile com.netflix.archaius:archaius-core🫙0.7.6:compile org.springframework.boot:spring-boot-starter-web🫙2.3.6.RELEASE:compile commons-codec:commons-codec🫙1.14:compile com.netflix.servo:servo-core🫙0.12.21:runtime com.google.errorprone:error_prone_annotations🫙2.3.4:compile org.attoparser:attoparser🫙2.0.5.RELEASE:compile com.atguigu.demo:demo10-base-util🫙1.0-SNAPSHOT:compile org.checkerframework:checker-qual🫙2.11.1:compile org.thymeleaf:thymeleaf-spring5🫙3.0.11.RELEASE:compile commons-fileupload:commons-fileupload🫙1.4:compile com.netflix.ribbon:ribbon-httpclient🫙2.3.0:compile com.netflix.netflix-commons:netflix-statistics🫙0.1.1:runtime org.unbescape:unbescape🫙1.1.6.RELEASE:compile org.springframework:spring-jcl🫙5.2.11.RELEASE:compile com.alibaba.nacos:nacos-common🫙1.4.2:compile commons-collections:commons-collections🫙3.2.2:runtime javax.persistence:persistence-api🫙1.0:compile com.alibaba.nacos:nacos-api🫙1.4.2:compile org.thymeleaf:thymeleaf🫙3.0.11.RELEASE:compile org.springframework:spring-aop🫙5.2.11.RELEASE:compile org.springframework.boot:spring-boot-starter🫙2.3.6.RELEASE:compile org.springframework.boot:spring-boot-starter-tomcat🫙2.3.6.RELEASE:compile org.springframework.cloud:spring-cloud-netflix-ribbon🫙2.2.6.RELEASE:compile org.springframework:spring-expression🫙5.2.11.RELEASE:compile org.springframework.cloud:spring-cloud-netflix-archaius🫙2.2.6.RELEASE:compile\",\"而如果使用 Maven 来引入这些 jar 包只需要配置三个『依赖』：\",\"<!-- Nacos 服务注册发现启动器 --> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <!-- web启动器依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!-- 视图模板技术 thymeleaf --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency>\",\"②jar包的来源问题\",\"这个jar包所属技术的官网。官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载。\",\"第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题。 \",\"jar包的名称\",\"jar包的版本\",\"jar包内的具体细节\",\"而使用 Maven 后，依赖对应的 jar 包能够自动下载，方便、快捷又规范。\",\"③jar包的导入问题\",\"在web工程中，jar包必须存放在指定位置：\",\"image-20231021101825708\",\"在使用Maven之后，通过配置依赖(jar包)的坐标，查找本地仓库中相应jar包，若本地仓库没有，则统一从镜像网站或中央仓库中下载：\",\"image-20231021102831531\",\"④jar包之间的依赖\",\"框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。\",\"下面是前面例子中 jar 包之间的依赖关系：\",\"images\",\"而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助。\",\"而使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量。\"]},\"388\":{\"h\":\"1.2、Maven是一个构建工具\",\"t\":[\"①你没有注意过的构建\",\"你可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的。\",\"image-20231021103758624\",\"②脱离 IDE 环境仍需构建\",\"img\"]},\"389\":{\"h\":\"1.3、结论\",\"t\":[\"管理规模庞大的 jar 包，需要专门工具。\",\"脱离 IDE 环境执行构建操作，需要专门工具。\"]},\"390\":{\"h\":\"2. Maven介绍\",\"t\":[\"https://maven.apache.org/what-is-maven.html\",\"Maven 是一款为 Java 项目管理构建、依赖管理的工具（软件），使用 Maven 可以自动化构建、测试、打包和发布项目，大大提高了开发效率和质量。\",\"Maven就是一个软件，掌握安装、配置、以及基本功能 （项目构建、依赖管理） 的理解和使用即可！\",\"依赖管理：\",\"Maven 可以管理项目的依赖，包括自动下载所需依赖库、自动下载依赖需要的依赖并且保证版本没有冲突、依赖版本管理等。通过 Maven，我们可以方便地维护项目所依赖的外部库，避免版本冲突和转换错误等，而我们仅仅需要编写配置即可。\",\"构建管理：\",\"项目构建是指将源代码、配置文件、资源文件等转化为能够运行或部署的应用程序或库的过程\",\"Maven 可以管理项目的编译、测试、打包、部署等构建过程。通过实现标准的构建生命周期，Maven 可以确保每一个构建过程都遵循同样的规则和最佳实践。同时，Maven 的插件机制也使得开发者可以对构建过程进行扩展和定制。主动触发构建，只需要简单的命令操作即可。\",\"场景1： 例如我们项目需要第三方依赖如：Druid连接池、MySQL数据库驱动和Jackson JSON等处理。那么我们可以将想要的依赖项的信息编写到Maven工程的配置文件，Maven就会自动下载并复制这些依赖项到项目中，无需自己导入jar包，管理jar!\",\"场景2： 项目完成开发，我们想要打成war部署到服务器中，使用maven的构建命令可以快速打包！节省大量时间！\"]},\"391\":{\"h\":\"3. Maven软件工作原理模型图（了解）\"},\"392\":{\"h\":\"二、Maven安装和配置\"},\"393\":{\"h\":\"1. Maven安装\",\"t\":[\"https://maven.apache.org/docs/history.html\",\"各个工具选用版本：\",\"工具\",\"版本\",\"Maven\",\"3.8.8\",\"JDK\",\"17\",\"IDEA\",\"2022.2\",\"安装条件： maven需要本机安装java环境、必需包含java_home环境变量！\",\"软件安装： 右键解压即可（绿色免安装）\",\"软件结构：\",\"image-20231021110800113\",\"bin：含有Maven的运行脚本\",\"boot：含有plexus-classworlds类加载器框架\",\"conf：含有Maven的核心配置文件\",\"lib：含有Maven运行时所需要的Java类库\",\"LICENSE、NOTICE、README.txt：针对Maven版本，第三方软件等简要介绍\"]},\"394\":{\"h\":\"2. Maven环境配置\",\"t\":[\"配置MAVEN_HOME\",\"image-20231021110938230\",\"配置Path\",\"命令测试（cmd窗口）\",\"mvn -v # 输出版本信息即可，如果错误，请仔细检查环境变量即可！\"]},\"395\":{\"h\":\"3. Maven功能配置\",\"t\":[\"我们需要需改maven/conf/settings.xml配置文件，来修改maven的一些默认配置。我们主要休要修改的有三个配置：\",\"1.依赖本地缓存位置（本地仓库位置）\",\"2.maven下载镜像\",\"3.maven选用编译项目的jdk版本\",\"配置本地仓库地址\",\" <!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: ${user.home}/.m2/repository <localRepository>/path/to/local/repo</localRepository> --> <!-- conf/settings.xml 55行 --> <localRepository>D:\\\\maven-repository</localRepository>\",\"配置国内阿里镜像\",\"<!--在mirrors节点(标签)下添加中央仓库镜像 160行附近--> <mirror> <id>alimaven</id> <name>aliyun maven</name> <url>http://maven.aliyun.com/nexus/content/groups/public/</url> <mirrorOf>central</mirrorOf> </mirror>\",\"配置jdk17版本项目构建\",\"<!--在profiles节点(标签)下添加jdk编译版本 268行附近--> <profile> <id>jdk-17</id> <activation> <activeByDefault>true</activeByDefault> <jdk>17</jdk> </activation> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <maven.compiler.compilerVersion>17</maven.compiler.compilerVersion> </properties> </profile>\"]},\"396\":{\"h\":\"4. IDEA配置本地Maven软件\",\"t\":[\"我们需要将配置好的maven软件，配置到idea开发工具中即可！ 注意：idea工具默认自带maven配置软件，但是因为没有修改配置，建议替换成本地配置好的maven！\",\"选择本地maven软件\",\"image-20231021112046512\",\"注意：\",\"1、如果本地仓库地址不变化，只有一个原因，就是maven/conf/settings.xml配置文件编写错误！仔细检查即可！\",\"2、一定保证User settings file对应之前修改的settings.xml的路径，若 不一致，选中Override复选框，手动选择配置文件\"]},\"397\":{\"h\":\"三、基于IDEA创建Maven工程\"},\"398\":{\"h\":\"1. 概念梳理Maven工程的GAVP\",\"t\":[\"Maven工程相对之前的项目，多出一组gavp属性，gav需要我们在创建项目的时候指定，p有默认值，我们先行了解下这组属性的含义：\",\"Maven 中的 GAVP 是指 GroupId、ArtifactId、Version、Packaging 等四个属性的缩写，其中前三个是必要的，而 Packaging 属性为可选项。这四个属性主要为每个项目在maven仓库中做一个标识，类似人的姓-名！有了具体标识，方便后期项目之间相互引用依赖等！\",\"GAV遵循一下规则：\",\"​ 1） GroupID 格式：com.{公司/BU }.业务线.[子业务线]，最多 4 级。\",\"​ 说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。\",\"​ 正例：com.taobao.tddl 或 com.alibaba.sourcing.multilang\",\"​ 2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。\",\"​ 正例：tc-client / uic-api / tair-tool / bookstore\",\"​ 3） Version版本号格式推荐：主版本号.次版本号.修订号\",\"​ 1） 主版本号：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。\",\"​ 2） 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。\",\"​ 3） 修订号：修复 bug，没有修改方法签名的功能加强，保持 API 兼容性。\",\"​ 例如： 初始→1.0.0 修改bug → 1.0.1 功能调整 → 1.1.1等\",\"Packaging定义规则：\",\"​ 指示将项目打包为什么类型的文件，idea根据packaging值，识别maven项目类型！\",\"​ packaging 属性为 jar（默认值），代表普通的Java工程，打包以后是.jar结尾的文件。\",\"​ packaging 属性为 war，代表Java的web工程，打包以后.war结尾的文件。\",\"​ packaging 属性为 pom，代表不会打包，用来做继承的父工程。\"]},\"399\":{\"h\":\"2. Idea构建Maven Java SE工程\",\"t\":[\"注意：此处省略了version，直接给了一个默认值：1.0-SNAPSHOT\",\"自己后期可以在项目中随意修改！\",\"image-20231021143559114\",\"创建工程之后，若第一次使用maven，或者使用的是新的本地仓库，idea右下角会出现以下进度条，表示maven正在下载相关插件，等待下载完毕，进度条消失即可\",\"image-20231021145024505\",\"验证maven工程是否创建成功，当创建完毕maven工程之后，idea中会自动打开Maven视图，如下图：\",\"image-20231021145713433\"]},\"400\":{\"h\":\"3. Idea构建Maven Java Web工程\",\"t\":[\"手动创建\",\"创建一个maven的javase工程\",\"image-20231021150134082\",\"修改pom.xml文件打包方式\",\"修改位置：项目下/pom.xml\",\"<groupId>com.atguigu</groupId> <artifactId>maven_web</artifactId> <version>1.0-SNAPSHOT</version> <!-- 新增一列打包方式packaging --> <packaging>war</packaging>\",\"设置web资源路径和web.xml路径\",\"点击File-->Project Structure\",\"image-20231021151040531\",\"image-20231021151627161\",\"image-20231021151753318\",\"刷新和校验\",\"image-20231021152310802\",\"image-20231021151921943\",\"插件创建\",\"安装插件JBLJavaToWeb\",\"file / settings / plugins / marketplace\",\"创建一个javasemaven工程\",\"右键、使用插件快速补全web项目\"]},\"401\":{\"h\":\"4. Maven工程项目结构说明\",\"t\":[\"Maven 是一个强大的构建工具，它提供一种标准化的项目结构，可以帮助开发者更容易地管理项目的依赖、构建、测试和发布等任务。以下是 Maven Web 程序的文件结构及每个文件的作用：\",\"|-- pom.xml # Maven 项目管理文件 |-- src |-- main # 项目主要代码 | |-- java # Java 源代码目录 | | `-- com/example/myapp # 开发者代码主目录 | | |-- controller # 存放 Controller 层代码的目录 | | |-- service # 存放 Service 层代码的目录 | | |-- dao # 存放 DAO 层代码的目录 | | `-- model # 存放数据模型的目录 | |-- resources # 资源目录，存放配置文件、静态资源等 | | |-- log4j.properties # 日志配置文件 | | |-- spring-mybatis.xml # Spring Mybatis 配置文件 | | `-- static # 存放静态资源的目录 | | |-- css # 存放 CSS 文件的目录 | | |-- js # 存放 JavaScript 文件的目录 | | `-- images # 存放图片资源的目录 | `-- webapp # 存放 WEB 相关配置和资源 | |-- WEB-INF # 存放 WEB 应用配置文件 | | |-- web.xml # Web 应用的部署描述文件 | | `-- classes # 存放编译后的 class 文件 | `-- index.html # Web 应用入口页面 `-- test # 项目测试代码 |-- java # 单元测试目录 `-- resources # 测试资源目录\",\"pom.xml：Maven 项目管理文件，用于描述项目的依赖和构建配置等信息。\",\"src/main/java：存放项目的 Java 源代码。\",\"src/main/resources：存放项目的资源文件，如配置文件、静态资源等。\",\"src/main/webapp/WEB-INF：存放 Web 应用的配置文件。\",\"src/main/webapp/index.jsp：Web 应用的入口页面。\",\"src/test/java：存放项目的测试代码。\",\"src/test/resources：存放测试相关的资源文件，如测试配置文件等。\"]},\"402\":{\"h\":\"四、基于IDEA进行Maven工程构建\"},\"403\":{\"h\":\"1. 构建概念和构建过程\",\"t\":[\"项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。\",\"项目构建是软件开发过程中至关重要的一部分，它能够大大提高软件开发效率，使得开发人员能够更加专注于应用程序的开发和维护，而不必关心应用程序的构建细节。\",\"同时，项目构建还能够将多个开发人员的代码汇合到一起，并能够自动化项目的构建和部署，大大降低了项目的出错风险和提高开发效率。常见的构建工具包括 Maven、Gradle、Ant 等。\"]},\"404\":{\"h\":\"2. 命令方式项目构建\",\"t\":[\"命令\",\"描述\",\"mvn compile\",\"编译项目，生成target文件\",\"mvn package\",\"打包项目，生成jar或war文件\",\"mvn clean\",\"清理编译或打包后的项目结构\",\"mvn install\",\"打包后上传到maven本地仓库\",\"mvn deploy\",\"只打包，上传到maven私服仓库\",\"mvn site\",\"生成站点\",\"mvn test\",\"执行测试源码\",\"war包打包插件和jdk版本不匹配：pom.xml 添加以下代码即可\",\"<build> <!-- jdk17 和 war包版本插件不匹配 --> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> </plugin> </plugins> </build>\",\"命令触发练习：\",\"mvn 命令 命令 #清理 mvn clean #清理，并重新打包 mvn clean package #执行测试代码 mvn test\"]},\"405\":{\"h\":\"3. 可视化方式项目构建\",\"t\":[\"image-20231021153444864\",\"注意：打包（package）和安装（install）的区别是什么\",\"打包是将工程打成jar或war文件，保存在target目录下\",\"安装是将当前工程所生成的jar或war文件，安装到本地仓库，会按照坐标保存到指定位置\"]},\"406\":{\"h\":\"4. 构建插件、命令、生命周期命令之间关系\",\"t\":[\"构建生命周期\",\"我们发现一个情况！当我们执行package命令也会自动执行compile命令！\",\"[INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ mybatis-base-curd --- [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ mybatis-base-curd --- [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ mybatis-base-curd --- [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ mybatis-base-curd --- [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ mybatis-base-curd --- [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ mybatis-base-curd --- [INFO] Building jar: D:\\\\javaprojects\\\\backend-engineering\\\\part03-mybatis\\\\mybatis-base-curd\\\\target\\\\mybatis-base-curd-1.0-SNAPSHOT.jar [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 5.013 s [INFO] Finished at: 2023-06-05T10:03:47+08:00 [INFO] ------------------------------------------------------------------------\",\"这种行为就是因为构建生命周期产生的！构建生命周期可以理解成是一组固定构建命令的有序集合，触发周期后的命令，会自动触发周期前的命令！！！\",\"构建周期作用：会简化构建过程\",\"例如：项目打包 mvn clean package即可。 \",\"主要两个构建生命周期：\",\"清理周期：主要是对项目编译生成文件进行清理\",\"包含命令：clean \",\"默认周期：定义了真正构件时所需要执行的所有步骤，它是生命周期中最核心的部分\",\"包含命令：compile - test - package - install - deploy \",\"插件、命令、周期三者关系（了解）\",\"周期→包含若干命令→包含若干插件\",\"使用周期命令构建，简化构建过程！\",\"最终进行构建的是插件！\"]},\"407\":{\"h\":\"五、基于IDEA 进行Maven依赖管理\"},\"408\":{\"h\":\"1. 依赖管理概念\",\"t\":[\"Maven 依赖管理是 Maven 软件中最重要的功能之一。Maven 的依赖管理能够帮助开发人员自动解决软件包依赖问题，使得开发人员能够轻松地将其他开发人员开发的模块或第三方框架集成到自己的应用程序或模块中，避免出现版本冲突和依赖缺失等问题。\",\"我们通过定义 POM 文件，Maven 能够自动解析项目的依赖关系，并通过 Maven 仓库自动下载和管理依赖，从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。\",\"总之，Maven 的依赖管理是 Maven 软件的一个核心功能之一，使得软件包依赖的管理和使用更加智能和方便，简化了开发过程中的工作，并提高了软件质量和可维护性。\"]},\"409\":{\"h\":\"2. Maven工程核心信息配置和解读（GAVP）\",\"t\":[\"位置：pom.xml\",\"<!-- 模型版本 --> <modelVersion>4.0.0</modelVersion> <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --> <groupId>com.companyname.project-group</groupId> <!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --> <artifactId>project</artifactId> <!-- 版本号 --> <version>1.0.0</version> <!--打包方式 默认：jar jar指的是普通的java项目打包方式！ 项目打成jar包！ war指的是web项目打包方式！项目打成war包！ pom不会讲项目打包！这个项目作为父工程，被其他工程聚合或者继承！后面会讲解两个概念 --> <packaging>jar/pom/war</packaging>\"]},\"410\":{\"h\":\"3. Maven工程依赖管理配置\",\"t\":[\"位置：pom.xml\",\"依赖管理和依赖添加\",\"<!-- 通过编写依赖jar包的gav必要属性，引入第三方依赖！ scope属性是可选的，可以指定依赖生效范围！ 依赖信息查询方式： 1. maven仓库信息官网 https://mvnrepository.com/ 2. mavensearch插件搜索 --> <dependencies> <!-- 引入具体的依赖包 --> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.17</version> <!-- 依赖范围 --> <scope>runtime</scope> </dependency> </dependencies>\",\"依赖版本统一提取和维护\",\"<!--声明版本--> <properties> <!--命名随便,内部制定版本号即可！--> <junit.version>4.12</junit.version> <!-- 也可以通过 maven规定的固定的key，配置maven的参数！如下配置编码格式！--> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> </properties> <dependencies> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <!--引用properties声明版本 --> <version>${junit.version}</version> </dependency> </dependencies>\"]},\"411\":{\"h\":\"4. 依赖范围\",\"t\":[\"通过设置坐标的依赖范围(scope)，可以设置 对应jar包的作用范围：编译环境、测试环境、运行环境\",\"依赖范围\",\"描述\",\"compile\",\"编译依赖范围，scope 元素的缺省值。使用此依赖范围的 Maven 依赖，对于三种 classpath 均有效，即该 Maven 依赖在上述三种 classpath 均会被引入。例如，log4j 在编译、测试、运行过程都是必须的。\",\"test\",\"测试依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath 有效。例如，Junit 依赖只有在测试阶段才需要。\",\"provided\",\"已提供依赖范围。使用此依赖范围的 Maven 依赖，只对编译 classpath 和测试 classpath 有效。例如，servlet-api 依赖对于编译、测试阶段而言是需要的，但是运行阶段，由于外部容器已经提供，故不需要 Maven 重复引入该依赖。\",\"runtime\",\"运行时依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath、运行 classpath 有效。例如，JDBC 驱动实现依赖，其在编译时只需 JDK 提供的 JDBC 接口即可，只有测试、运行阶段才需要实现了 JDBC 接口的驱动。\",\"system\",\"系统依赖范围，其效果与 provided 的依赖范围一致。其用于添加非 Maven 仓库的本地依赖，通过依赖元素 dependency 中的 systemPath 元素指定本地依赖的路径。鉴于使用其会导致项目的可移植性降低，一般不推荐使用。\",\"import\",\"导入依赖范围，该依赖范围只能与 dependencyManagement 元素配合使用，其功能是将目标 pom.xml 文件中 dependencyManagement 的配置导入合并到当前 pom.xml 的 dependencyManagement 中。\"]},\"412\":{\"h\":\"5. Maven工程依赖下载失败错误解决（重点）\",\"t\":[\"在使用 Maven 构建项目时，可能会发生依赖项下载错误的情况，主要原因有以下几种：\",\"下载依赖时出现网络故障或仓库服务器宕机等原因，导致无法连接至 Maven 仓库，从而无法下载依赖。\",\"依赖项的版本号或配置文件中的版本号错误，或者依赖项没有正确定义，导致 Maven 下载的依赖项与实际需要的不一致，从而引发错误。\",\"本地 Maven 仓库或缓存被污染或损坏，导致 Maven 无法正确地使用现有的依赖项。\",\"解决方案：\",\"检查网络连接和 Maven 仓库服务器状态。\",\"确保依赖项的版本号与项目对应的版本号匹配，并检查 POM 文件中的依赖项是否正确。\",\"清除本地 Maven 仓库缓存（lastUpdated 文件），因为只要存在lastupdated缓存文件，刷新也不会重新下载。本地仓库中，根据依赖的gav属性依次向下查找文件夹，最终删除内部的文件，刷新重新下载即可！\",\"例如： pom.xml依赖\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency>\",\"文件：\",\"或者可以将清除lastUpdated文件的操作写在一个脚本文件中，手动创建文件\\\"clearLastUpdated.bat\\\"，名字任意，但是后缀必须是bat，将以下内容复制到文件中\",\"cls @ECHO OFF SET CLEAR_PATH=D: SET CLEAR_DIR=D:\\\\maven-repository(本地仓库路径) color 0a TITLE ClearLastUpdated For Windows GOTO MENU :MENU CLS ECHO. ECHO. * * * * ClearLastUpdated For Windows * * * * ECHO. * * ECHO. * 1 清理*.lastUpdated * ECHO. * * ECHO. * 2 查看*.lastUpdated * ECHO. * * ECHO. * 3 退 出 * ECHO. * * ECHO. * * * * * * * * * * * * * * * * * * * * * * * * ECHO. ECHO.请输入选择项目的序号： set /p ID= IF \\\"%id%\\\"==\\\"1\\\" GOTO cmd1 IF \\\"%id%\\\"==\\\"2\\\" GOTO cmd2 IF \\\"%id%\\\"==\\\"3\\\" EXIT PAUSE :cmd1 ECHO. 开始清理 %CLEAR_PATH% cd %CLEAR_DIR% for /r %%i in (*.lastUpdated) do del %%i ECHO.OK PAUSE GOTO MENU :cmd2 ECHO. 查看*.lastUpdated文件 %CLEAR_PATH% cd %CLEAR_DIR% for /r %%i in (*.lastUpdated) do echo %%i ECHO.OK PAUSE GOTO MENU\",\"image-20231021161615994\"]},\"413\":{\"h\":\"6. Maven工程Build构建配置\",\"t\":[\"项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。\",\"默认情况下，构建不需要额外配置，都有对应的缺省配置。当然了，我们也可以在pom.xml定制一些配置，来修改默认构建的行为和产物！\",\"例如：\",\"指定构建打包文件的名称，非默认名称\",\"制定构建打包时，指定包含文件格式和排除文件\",\"打包插件版本过低，配置更高版本插件\",\"构建配置是在pom.xml / build标签中指定！\",\"指定打包命名\",\"<!-- 默认的打包名称：artifactid+verson.打包方式 --> <build> <finalName>定义打包名称</finalName> </build>\",\"指定打包文件\",\"如果在java文件夹中添加java类，会自动打包编译到classes文件夹下！\",\"但是在java文件夹中添加xml文件，默认不会被打包！\",\"默认情况下，按照maven工程结构放置的文件会默认被编译和打包！\",\"除此之外、我们可以使用resources标签，指定要打包资源的文件夹要把哪些静态资源打包到 classes根目录下！\",\"应用场景：mybatis中有时会将用于编写SQL语句的映射文件和mapper接口都写在src/main/java下的某个包中，此时映射文件就不会被打包，如何解决\",\"<build> <!--设置要打包的资源位置--> <resources> <resource> <!--设置资源所在目录--> <directory>src/main/java</directory> <includes> <!--设置包含的资源类型--> <include>**/*.xml</include> </includes> </resource> </resources> </build>\",\"配置依赖插件\",\"dependencies标签下引入开发需要的jar包！我们可以在build/plugins/plugin标签引入插件！\",\"常用的插件：修改jdk版本、tomcat插件、mybatis分页插件、mybatis逆向工程插件等等！\",\"<build> <plugins> <!-- java编译插件，配jdk的编译版本 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <!-- tomcat插件 --> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <port>8090</port> <path>/</path> <uriEncoding>UTF-8</uriEncoding> <server>tomcat7</server> </configuration> </plugin> </plugins> </build>\"]},\"414\":{\"h\":\"六、Maven依赖传递和依赖冲突\"},\"415\":{\"h\":\"1. Maven依赖传递特性\",\"t\":[\"概念\",\"假如有Maven项目A，项目B依赖A，项目C依赖B。那么我们可以说 C依赖A。也就是说，依赖的关系为：C—>B—>A， 那么我们执行项目C时，会自动把B、A都下载导入到C项目的jar包文件夹中，这就是依赖的传递性。\",\"作用\",\"简化依赖导入过程\",\"确保依赖版本正确\",\"传递的原则\",\"在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围以及配置\",\"B 依赖 C 时使用 compile 范围：可以传递\",\"B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。\",\"B 依赖 C 时，若配置了以下标签，则不能传递\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.15</version> <optional>true</optional> </dependency>\",\"依赖传递终止\",\"非compile范围进行依赖传递\",\"使用optional配置终止传递\",\"依赖冲突（传递的依赖已经存在）\",\"案例：导入jackson依赖\",\"分析：jackson需要三个依赖\",\"依赖传递关系：data-bind中，依赖其他两个依赖\",\"最佳导入：直接可以导入data-bind，自动依赖传递需要的依赖\",\"<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.10.0</version> </dependency>\"]},\"416\":{\"h\":\"2. Maven依赖冲突特性\",\"t\":[\"当直接引用或者间接引用出现了相同的jar包! 这时呢，一个项目就会出现相同的重复jar包，这就算作冲突！依赖冲突避免出现重复依赖，并且终止依赖传递！\",\"maven自动解决依赖冲突问题能力，会按照自己的原则，进行重复依赖选择。同时也提供了手动解决的冲突的方式，不过不推荐！\",\"解决依赖冲突（如何选择重复依赖）方式：\",\"自动选择原则\",\"短路优先原则（第一原则）\",\"A—>B—>C—>D—>E—>X(version 0.0.1)\",\"A—>F—>X(version 0.0.2)\",\"则A依赖于X(version 0.0.2)。\",\"依赖路径长度相同情况下，则“先声明优先”（第二原则）\",\"A—>E—>X(version 0.0.1)\",\"A—>F—>X(version 0.0.2)\",\"在<depencies></depencies>中，先声明的，路径相同，会优先选择！\",\"手动排除\",\"<dependency> <groupId>com.atguigu.maven</groupId> <artifactId>pro01-maven-java</artifactId> <version>1.0-SNAPSHOT</version> <scope>compile</scope> <!-- 使用excludes标签配置依赖的排除 --> <exclusions> <!-- 在exclude标签中配置一个具体的排除 --> <exclusion> <!-- 指定要排除的依赖的坐标（不需要写version） --> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> </exclusion> </exclusions> </dependency>\",\"小案例\",\"伪代码如下：\",\"前提： A 1.1 -> B 1.1 -> C 1.1 F 2.2 -> B 2.2 pom声明： F 2.2 A 1.1\",\"请问最终会导入哪些依赖和对应版本？\"]},\"417\":{\"h\":\"七、Maven工程继承和聚合关系\"},\"418\":{\"h\":\"1. Maven工程继承关系\",\"t\":[\"继承概念\",\"Maven 继承是指在 Maven 的项目中，让一个项目从另一个项目中继承配置信息的机制。继承可以让我们在多个项目中共享同一配置信息，简化项目的管理和维护工作。\",\"继承作用\",\"在父工程中统一管理项目中的依赖信息。\",\"它的背景是：\",\"对一个比较大型的项目进行了模块拆分。\",\"一个 project 下面，创建了很多个 module。\",\"每一个 module 都需要配置自己的依赖信息。\",\"它背后的需求是：\",\"在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。\",\"使用同一个框架内的不同 jar 包，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一。\",\"使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。 通过在父工程中为整个项目维护依赖信息的组合既保证了整个项目使用规范、准确的 jar 包；又能够将以往的经验沉淀下来，节约时间和精力。\",\"继承语法\",\"父工程\",\" <groupId>com.atguigu.maven</groupId> <artifactId>pro03-maven-parent</artifactId> <version>1.0-SNAPSHOT</version> <!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --> <packaging>pom</packaging>\",\"子工程\",\"<!-- 使用parent标签指定当前工程的父工程 --> <parent> <!-- 父工程的坐标 --> <groupId>com.atguigu.maven</groupId> <artifactId>pro03-maven-parent</artifactId> <version>1.0-SNAPSHOT</version> </parent> <!-- 子工程的坐标 --> <!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --> <!-- <groupId>com.atguigu.maven</groupId> --> <artifactId>pro04-maven-module</artifactId> <!-- <version>1.0-SNAPSHOT</version> -->\",\"父工程依赖统一管理\",\"父工程声明版本\",\"<!-- 使用dependencyManagement标签配置对依赖的管理 --> <!-- 被管理的依赖并没有真正被引入到工程 --> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>6.0.10</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>6.0.10</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.10</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-expression</artifactId> <version>6.0.10</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> <version>6.0.10</version> </dependency> </dependencies> </dependencyManagement>\",\"子工程引用版本\",\"<!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。 --> <!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --> <!-- 具体来说是由父工程的dependencyManagement来决定。 --> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-expression</artifactId> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> </dependency> </dependencies>\"]},\"419\":{\"h\":\"2. Maven工程聚合关系\",\"t\":[\"聚合概念\",\"Maven 聚合是指将多个项目组织到一个父级项目中，以便一起构建和管理的机制。聚合可以帮助我们更好地管理一组相关的子项目，同时简化它们的构建和部署过程。\",\"聚合作用\",\"管理多个子项目：通过聚合，可以将多个子项目组织在一起，方便管理和维护。\",\"构建和发布一组相关的项目：通过聚合，可以在一个命令中构建和发布多个相关的项目，简化了部署和维护工作。\",\"优化构建顺序：通过聚合，可以对多个项目进行顺序控制，避免出现构建依赖混乱导致构建失败的情况。\",\"统一管理依赖项：通过聚合，可以在父项目中管理公共依赖项和插件，避免重复定义。\",\"聚合语法\",\"父项目中包含的子项目列表。\",\"<project> <groupId>com.example</groupId> <artifactId>parent-project</artifactId> <packaging>pom</packaging> <version>1.0.0</version> <modules> <module>child-project1</module> <module>child-project2</module> </modules> </project>\",\"聚合演示\",\"通过触发父工程构建命令、引发所有子模块构建！产生反应堆！\"]},\"420\":{\"h\":\"八、Maven私服\"},\"421\":{\"h\":\"1. Maven私服简介\",\"t\":[\"①私服简介\",\"Maven 私服是一种特殊的Maven远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的远程仓库（中央仓库、其他远程公共仓库）。\",\"当然也并不是说私服只能建立在局域网，也有很多公司会直接把私服部署到公网，具体还是得看公司业务的性质是否是保密的等等，因为局域网的话只能在公司用，部署到公网的话员工在家里也可以办公使用。\",\"建立了 Maven 私服后，当局域网内的用户需要某个构件时，会按照如下顺序进行请求和下载。\",\"请求本地仓库，若本地仓库不存在所需构件，则跳转到第 2 步； 请求 Maven 私服，将所需构件下载到本地仓库，若私服中不存在所需构件，则跳转到第 3 步。 请求外部的远程仓库，将所需构件下载并缓存到 Maven 私服，若外部远程仓库不存在所需构件，则 Maven 直接报错。\",\"此外，一些无法从外部仓库下载到的构件，也能从本地上传到私服供其他人使用。\",\"image-20231021164631791\",\"②Maven私服的优势\",\"节省外网带宽 消除对外部远程仓库的大量重复请求（会消耗很大量的带宽），降低外网带宽压力。\",\"下载速度更快 Maven私服位于局域网内，从私服下载构建更快更稳定。\",\"便于部署第三方构件 有些构件无法从任何一个远程仓库中获得（如：公司或组织内部的私有构件、Oracle的JDBC驱动等），建立私服之后，就可以将这些构件部署到私服中，供内部Maven项目使用。\",\"提高项目的稳定性，增强对项目的控制 如果不建立私服，那么Maven项目的构件就高度依赖外部的远程仓库，若外部网络不稳定，则项目的构建过程也会变得不稳定。建立私服后，即使外部网络状况不佳甚至中断，只要私服中已经缓存了所需的构件，Maven也能够正常运行。私服软件（如：Nexus）提供了很多控制功能（如：权限管理、RELEASE/SNAPSHOT版本控制等），可以对仓库进行一些更加高级的控制。\",\"降低中央仓库得负荷压力 由于私服会缓存中央仓库得构件，避免了很多对中央仓库的重复下载，降低了中央仓库的负荷。\",\"③常见的Maven私服产品\",\"Apache的Archiva\",\"JFrog的Artifactory\",\"Sonatype的Nexus（[ˈneksəs]）（当前最流行、使用最广泛）\"]},\"422\":{\"h\":\"2. Nexus下载安装\",\"t\":[\"下载地址：https://help.sonatype.com/repomanager3/product-information/download\",\"解压，以管理员身份打开CMD，进入bin目录下，执行./nexus /run命令启动\",\"访问 Nexus 首页\",\"首页地址：http://localhost:8081/，8081为默认端口号\",\"images\"]},\"423\":{\"h\":\"3. 初始设置\",\"t\":[\"images\",\"image-20231031171116756\",\"这里参考提示：\",\"用户名：admin\",\"密码：查看 E:\\\\Server\\\\nexus-3.61.0-02-win64\\\\sonatype-work\\\\nexus3\\\\admin.password 文件\",\"image-20231031171242874\",\"继续执行初始化：\",\"images\",\"images\",\"匿名登录，启用还是禁用？由于启用匿名登录后，后续操作比较简单，这里我们演示禁用匿名登录的操作：\",\"image-20231031171607378\",\"初始化完毕：\",\"image-20231031171708085\"]},\"424\":{\"h\":\"4. Nexus上的各种仓库\",\"t\":[\"images\",\"仓库类型\",\"说明\",\"proxy\",\"某个远程仓库的代理\",\"group\",\"存放：通过 Nexus 获取的第三方 jar 包\",\"hosted\",\"存放：本团队其他开发人员部署到 Nexus 的 jar 包\",\"仓库名称\",\"说明\",\"maven-central\",\"Nexus 对 Maven 中央仓库的代理\",\"maven-public\",\"Nexus 默认创建，供开发人员下载使用的组仓库\",\"maven-releases\",\"Nexus 默认创建，供开发人员部署自己 jar 包的宿主仓库 要求 releases 版本\",\"maven-snapshots\",\"Nexus 默认创建，供开发人员部署自己 jar 包的宿主仓库 要求 snapshots 版本\",\"初始状态下，这几个仓库都没有内容：\",\"images\"]},\"425\":{\"h\":\"5. 通过 Nexus 下载 jar 包\",\"t\":[\"修改本地maven的核心配置文件settings.xml，设置新的本地仓库地址\",\"<!-- 配置一个新的 Maven 本地仓库 --> <localRepository>D:/maven-repository-new</localRepository>\",\"把我们原来配置阿里云仓库地址的 mirror 标签改成下面这样：\",\"<mirror> <id>nexus-mine</id> <mirrorOf>central</mirrorOf> <name>Nexus mine</name> <url>http://localhost:8081/repository/maven-public/</url> </mirror>\",\"这里的 url 标签是这么来的：\",\"images\",\"image-20231031172137288\",\"把上图中看到的地址复制出来即可。如果我们在前面允许了匿名访问，到这里就够了。但如果我们禁用了匿名访问，那么接下来我们还要继续配置 settings.xml：\",\"<server> <id>nexus-mine</id> <username>admin</username> <password>atguigu</password> </server>\",\"这里需要格外注意：server 标签内的 id 标签值必须和 mirror 标签中的 id 值一样。\",\"找一个用到框架的 Maven 工程，执行命令：\",\"mvn clean compile\",\"下载过程日志：\",\"Downloading from nexus-mine: http://localhost:8081/repository/maven-public/com/jayway/jsonpath/json-path/2.4.0/json-path-2.4.0.pom Downloaded from nexus-mine: http://localhost:8081/repository/maven-public/com/jayway/jsonpath/json-path/2.4.0/json-path-2.4.0.pom (2.6 kB at 110 kB/s) Downloading from nexus-mine: http://localhost:8081/repository/maven-public/net/minidev/json-smart/2.3/json-smart-2.3.pom Downloaded from nexus-mine: http://localhost:8081/repository/maven-public/net/minidev/json-smart/2.3/json-smart-2.3.pom (9.0 kB at 376 kB/s) Downloading from nexus-mine: http://localhost:8081/repository/maven-public/net/minidev/minidev-parent/2.3/minidev-parent-2.3.pom Downloaded from nexus-mine: http://localhost:8081/repository/maven-public/net/minidev/minidev-parent/2.3/minidev-parent-2.3.pom (8.5 kB at 404 kB/s) Downloading from nexus-mine: http://localhost:8081/repository/maven-public/net/minidev/accessors-smart/1.2/accessors-smart-1.2.pom Downloaded from nexus-mine: http://localhost:8081/repository/maven-public/net/minidev/accessors-smart/1.2/accessors-smart-1.2.pom (12 kB at 463 kB/s)\",\"下载后，Nexus 服务器上就有了 jar 包：\",\"images\",\"若下载速度太慢，可以设置私服中中央仓库的地址为阿里云仓库地址\",\"image-20231031175035345\",\"修改为：http://maven.aliyun.com/nexus/content/groups/public/\",\"image-20231031175134745\"]},\"426\":{\"h\":\"6. 将 jar 包部署到 Nexus\",\"t\":[\"maven工程中配置：\",\"<distributionManagement> <snapshotRepository> <id>nexus-mine</id> <name>Nexus Snapshot</name> <url>http://localhost:8081/repository/maven-snapshots/</url> </snapshotRepository> </distributionManagement>\",\"注意：这里 snapshotRepository 的 id 标签必须和 settings.xml 中指定的 mirror 标签的 id 属性一致。\",\"执行部署命令：\",\"mvn deploy\",\"Uploading to nexus-mine: http://localhost:8081/repository/maven-snapshots/com/atguigu/demo/demo07-redis-data-provider/1.0-SNAPSHOT/maven-metadata.xml Uploaded to nexus-mine: http://localhost:8081/repository/maven-snapshots/com/atguigu/demo/demo07-redis-data-provider/1.0-SNAPSHOT/maven-metadata.xml (786 B at 19 kB/s) Uploading to nexus-mine: http://localhost:8081/repository/maven-snapshots/com/atguigu/demo/demo07-redis-data-provider/maven-metadata.xml Uploaded to nexus-mine: http://localhost:8081/repository/maven-snapshots/com/atguigu/demo/demo07-redis-data-provider/maven-metadata.xml (300 B at 6.5 kB/s) [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary: [INFO] [INFO] demo-imperial-court-ms-show 1.0-SNAPSHOT ........... SUCCESS [ 1.875 s] [INFO] demo09-base-entity ................................. SUCCESS [ 21.883 s] [INFO] demo10-base-util ................................... SUCCESS [ 0.324 s] [INFO] demo08-base-api .................................... SUCCESS [ 1.171 s] [INFO] demo01-imperial-court-gateway ...................... SUCCESS [ 0.403 s] [INFO] demo02-user-auth-center ............................ SUCCESS [ 2.932 s] [INFO] demo03-emp-manager-center .......................... SUCCESS [ 0.312 s] [INFO] demo04-memorials-manager-center .................... SUCCESS [ 0.362 s] [INFO] demo05-working-manager-center ...................... SUCCESS [ 0.371 s] [INFO] demo06-mysql-data-provider ......................... SUCCESS [ 6.779 s] [INFO] demo07-redis-data-provider 1.0-SNAPSHOT ............ SUCCESS [ 0.273 s]\",\"images\"]},\"427\":{\"h\":\"7. 引用别人部署的 jar 包\",\"t\":[\"maven工程中配置：\",\"<repositories> <repository> <id>nexus-mine</id> <name>nexus-mine</name> <url>http://localhost:8081/repository/maven-snapshots/</url> <snapshots> <enabled>true</enabled> </snapshots> <releases> <enabled>true</enabled> </releases> </repository> </repositories>\"]},\"428\":{\"h\":\"九、Maven综合案例\"},\"429\":{\"h\":\"1. 项目需求和结构分析\",\"t\":[\"img\",\"需求案例：搭建一个电商平台项目，该平台包括用户服务、订单服务、通用工具模块等。\",\"项目架构：\",\"用户服务：负责处理用户相关的逻辑，例如用户信息的管理、用户注册、登录等。 \",\"spring-context 6.0.6\",\"spring-core 6.0.6\",\"spring-beans 6.0.6\",\"common-service\",\"订单服务：负责处理订单相关的逻辑，例如订单的创建、订单支付、退货、订单查看等。 \",\"spring-context 6.0.6\",\"spring-core 6.0.6\",\"spring-beans 6.0.6\",\"spring-security 6.0.6\",\"common-service\",\"通用模块：负责存储其他服务需要通用工具类，其他服务依赖此模块。 \",\"commons-io 2.11.0\",\"junit 5.9.2\"]},\"430\":{\"h\":\"2. 项目搭建和统一构建\"},\"431\":{\"h\":\"①父模块 (micro-shop)\",\"t\":[\"创建工程：\",\"image-20231023112630117\",\"pom.xml配置：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.atguigu</groupId> <artifactId>micro-shop</artifactId> <version>1.0-SNAPSHOT</version> <!--知识点：父工程的打包方式为pom--> <packaging>pom</packaging> <properties> <spring.version>6.0.6</spring.version> <jackson.version>2.15.0</jackson.version> <commons.version>2.11.0</commons.version> <junit.version>5.9.2</junit.version> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <!-- 依赖管理 --> <dependencyManagement> <dependencies> <!-- spring-context会依赖传递core/beans --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>${spring.version}</version> </dependency> <!-- jackson-databind会依赖传递core/annotations --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>${jackson.version}</version> </dependency> <!-- commons-io --> <dependency> <groupId>commons-io</groupId> <artifactId>commons-io</artifactId> <version>${commons.version}</version> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>${junit.version}</version> <scope>test</scope> </dependency> </dependencies> </dependencyManagement> <!-- 统一更新子工程打包插件--> <build> <!-- jdk17 和 war包版本插件不匹配 --> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> </plugin> </plugins> </build> </project>\",\"可选操作：删除src目录\"]},\"432\":{\"h\":\"②通用模块 (common-service)\",\"t\":[\"创建工程：\",\"image-20231023114531521\",\"image-20231023114649705\",\"pom.xml配置：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <parent> <artifactId>micro-shop</artifactId> <groupId>com.atguigu</groupId> <version>1.0-SNAPSHOT</version> </parent> <modelVersion>4.0.0</modelVersion> <artifactId>common-service</artifactId> <!--知识点：打包方式默认就是jar，因此可以省略--> <packaging>jar</packaging> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- 配置spring-context，继承父工程版本，自动传递 core / beans --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> </dependency> <!-- 配置jackson-databind，继承父工程版本，自动传递 core / annotations --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> </dependency> <!-- 配置commons-io，继承父工程版本 --> <dependency> <groupId>commons-io</groupId> <artifactId>commons-io</artifactId> </dependency> <!-- 配置junit，继承父工程版本 --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <scope>test</scope> </dependency> </dependencies> </project>\"]},\"433\":{\"h\":\"③用户模块 (user-service)\",\"t\":[\"创建工程：\",\"image-20231023115404302\",\"image-20231023115707282\",\"pom.xml配置：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <parent> <artifactId>micro-shop</artifactId> <groupId>com.atguigu</groupId> <version>1.0-SNAPSHOT</version> </parent> <modelVersion>4.0.0</modelVersion> <artifactId>user-service</artifactId> <!-- web工程打包方式为war --> <packaging>war</packaging> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- 配置common-service，所需依赖会传递到当前工程（仅限compile范围） --> <dependency> <groupId>com.atguigu</groupId> <artifactId>common-service</artifactId> <version>1.0-SNAPSHOT</version> </dependency> </dependencies> </project>\",\"依赖传递结果：\",\"image-20231023120621402\"]},\"434\":{\"h\":\"④订单模块 (order-service)\",\"t\":[\"创建工程，并使用插件转为web工程：\",\"image-20231023120733029\",\"pom.xml配置：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <parent> <artifactId>micro-shop</artifactId> <groupId>com.atguigu</groupId> <version>1.0-SNAPSHOT</version> </parent> <modelVersion>4.0.0</modelVersion> <artifactId>order-service</artifactId> <!-- web工程打包方式为war --> <packaging>war</packaging> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- 配置common-service，所需依赖会传递到当前工程（仅限compile范围） --> <dependency> <groupId>com.atguigu</groupId> <artifactId>common-service</artifactId> <version>1.0-SNAPSHOT</version> </dependency> </dependencies> </project>\",\"此时，查看父工程的pom.xml，会发现其中已经自动聚合了子工程：\",\"<modules> <module>common-service</module> <module>user-service</module> <module>order-service</module> </modules>\"]},\"435\":{\"h\":\"一、高效构建Java应用：Maven入门和进阶\"},\"436\":{\"h\":\"目录\",\"t\":[\"一、Maven简介和快速入门\",\"1.1 Maven介绍\",\"1.2 Maven主要作用理解\",\"1.3 Maven安装和配置\",\"二、基于IDEA的Maven工程创建\",\"2.1梳理Maven工程GAVP属性\",\"2.2 Idea构建Maven JavaSE工程\",\"2.3 Idea构建Maven JavaEE工程\",\"2.4 Maven工程项目结构说明\",\"三、Maven核心功能依赖和构建管理\",\"3.1 依赖管理和配置\",\"3.2依赖传递和冲突\",\"3.3 依赖导入失败场景和解决方案\",\"3.4 扩展构建管理和插件配置\",\"四、Maven继承和聚合特性\",\"4.1 Maven工程继承关系\",\"4.2 Maven工程聚合关系\",\"五、Maven实战案例：搭建微服务Maven工程架构\",\"5.1 项目需求和结构分析\",\"5.2项目搭建和统一构建\",\"六、Maven核心掌握总结\"]},\"437\":{\"h\":\"一、Maven简介和快速入门\"},\"438\":{\"h\":\"1.1 Maven介绍\",\"t\":[\"https://maven.apache.org/what-is-maven.html\",\"Maven 是一款为 Java 项目构建管理、依赖管理的工具（软件），使用 Maven 可以自动化构建、测试、打包和发布项目，大大提高了开发效率和质量。\",\"总结：Maven就是一个软件，掌握软件安装、配置、以及基本功能 （项目构建、依赖管理） 使用就是本课程的主要目标！\"]},\"439\":{\"h\":\"1.2 Maven主要作用理解\",\"t\":[\"场景概念\",\"场景1： 例如我们项目需要第三方库（依赖），如Druid连接池、MySQL数据库驱动和Jackson等。那么我们可以将需要的依赖项的信息编写到Maven工程的配置文件，Maven软件就会自动下载并复制这些依赖项到项目中，也会自动下载依赖需要的依赖！确保依赖版本正确无冲突和依赖完整！\",\"场景2： 项目开发完成后，想要将项目打成.war文件，并部署到服务器中运行，使用Maven软件，我们可以通过一行构建命令（mvn package）快速项目构建和打包！节省大量时间！\",\"依赖管理：\",\"Maven 可以管理项目的依赖，包括自动下载所需依赖库、自动下载依赖需要的依赖并且保证版本没有冲突、依赖版本管理等。通过 Maven，我们可以方便地维护项目所依赖的外部库，而我们仅仅需要编写配置即可。\",\"构建管理：\",\"项目构建是指将源代码、配置文件、资源文件等转化为能够运行或部署的应用程序或库的过程！\",\"Maven 可以管理项目的编译、测试、打包、部署等构建过程。通过实现标准的构建生命周期，Maven 可以确保每一个构建过程都遵循同样的规则和最佳实践。同时，Maven 的插件机制也使得开发者可以对构建过程进行扩展和定制。主动触发构建，只需要简单的命令操作即可。\"]},\"440\":{\"h\":\"1.3 Maven安装和配置\",\"t\":[\"https://maven.apache.org/docs/history.html\",\"选用版本：\",\"apache-maven-3.6.3-bin.zip\",\"发布时间\",\"maven版本\",\"jdk最低版本\",\"**2019 - 11 - **25\",\"3.6. 3\",\"Java 7\",\"安装\",\"安装条件： maven需要本机安装java环境、必需包含java_home环境变量！\",\"软件安装： 右键解压即可（绿色免安装）\",\"软件结构：\",\"环境变量\",\"环境变量： 配置maven_home 和 path\",\"命令测试\",\"mvn -v # 输出版本信息即可，如果错误，请仔细检查环境变量即可！ # 友好提示，如果此处错误，绝大部分原因都是java_home变量的事，请仔细检查！！\",\"配置文件\",\"我们需要需改maven/conf/settings.xml配置文件，来修改maven的一些默认配置。我们主要休要修改的有三个配置：1.依赖本地缓存位置（本地仓库位置）2.maven下载镜像3.maven选用编译项目的jdk版本！\",\"配置本地仓库地址\",\"<!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: ${user.home}/.m2/repository <localRepository>/path/to/local/repo</localRepository> --> <!-- conf/settings.xml 55行 --> <localRepository>D:\\\\repository</localRepository>\",\"配置国内阿里镜像\",\"<!--在mirrors节点(标签)下添加中央仓库镜像 160行附近--> <mirror> <id>alimaven</id> <name>aliyun maven</name> <url>http://maven.aliyun.com/nexus/content/groups/public/</url> <mirrorOf>central</mirrorOf> </mirror>\",\"配置jdk17版本项目构建\",\"<!--在profiles节点(标签)下添加jdk编译版本 268行附近--> <profile> <id>jdk-17</id> <activation> <activeByDefault>true</activeByDefault> <jdk>17</jdk> </activation> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <maven.compiler.compilerVersion>17</maven.compiler.compilerVersion> </properties> </profile>\",\"idea配置本地maven\",\"我们需要将配置好的maven软件，配置到idea开发工具中即可！ 注意：idea工具默认自带maven配置软件，但是因为没有修改配置，建议替换成本地配置好的maven！\",\"打开idea配置文件，构建工具配置\",\"依次点击\",\"file / settings / build / build tool / maven\",\"选中本地maven软件\",\"测试是否配置成功\",\"注意：如果本地仓库地址不变化，只有一个原因，就是maven/conf/settings.xml配置文件编写错误！仔细检查即可！\"]},\"441\":{\"h\":\"二、基于IDEA的Maven工程创建\"},\"442\":{\"h\":\"2.1梳理Maven工程GAVP属性\",\"t\":[\"Maven工程相对之前的工程，多出一组gavp属性，gav需要我们在创建项目的时指定，p有默认值，后期通过配置文件修改。既然要填写的属性，我们先行了解下这组属性的含义!\",\"Maven 中的 GAVP 是指 GroupId、ArtifactId、Version、Packaging 等四个属性的缩写，其中前三个是必要的，而 Packaging 属性为可选项。这四个属性主要为每个项目在maven仓库总做一个标识，类似人的《姓-名》。有了具体标识，方便maven软件对项目进行管理和互相引用！\",\"GAV遵循一下规则：\",\"1） GroupID 格式：com.{公司/BU }.业务线.[子业务线]，最多 4 级。\",\"说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。\",\"正例：com.taobao.tddl 或 com.alibaba.sourcing.multilang com.atguigu.java\",\"2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。\",\"正例：tc-client / uic-api / tair-tool / bookstore\",\"3） Version版本号格式推荐：主版本号.次版本号.修订号 1.0.0\",\"1） 主版本号：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。\",\"2） 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。\",\"3） 修订号：修复 bug，没有修改方法签名的功能加强，保持 API 兼容性。\",\"例如： 初始→1.0.0 修改bug → 1.0.1 功能调整 → 1.1.1等\",\"Packaging定义规则：\",\"指示将项目打包为什么类型的文件，idea根据packaging值，识别maven项目类型！\",\"packaging 属性为 jar（默认值），代表普通的Java工程，打包以后是.jar结尾的文件。\",\"packaging 属性为 war，代表Java的web工程，打包以后.war结尾的文件。\",\"packaging 属性为 pom，代表不会打包，用来做继承的父工程。\"]},\"443\":{\"h\":\"2.2 Idea构建Maven JavaSE工程\",\"t\":[\"注意：此处省略了version，直接给了一个默认值<version>1.0-SNAPSHOT</version>\",\"自己后期可以在项目中随意修改！\"]},\"444\":{\"h\":\"2.3 Idea构建Maven JavaEE工程\",\"t\":[\"手动创建 \",\"创建一个javasemaven工程\",\"手动添加web项目结构文件\",\"注意：结构和命名固定\",\"修改pom.xml文件打包方式\",\"修改位置：项目下/pom.xml\",\"<groupId>com.atguigu</groupId> <artifactId>maven_parent</artifactId> <version>1.0-SNAPSHOT</version> <!-- 新增一列打包方式packaging --> <packaging>war</packaging>\",\"刷新和校验\",\"项目的webapp文件夹出现小蓝点，代表成功！！\",\"插件方式创建 \",\"安装插件JBLJavaToWeb\",\"file / settings / plugins / marketplace\",\"创建一个javasemaven工程\",\"右键、使用插件快速补全web项目\"]},\"445\":{\"h\":\"2.4 Maven工程项目结构说明\",\"t\":[\"Maven 是一个强大的构建工具，它提供一种标准化的项目结构，可以帮助开发者更容易地管理项目的依赖、构建、测试和发布等任务。以下是 Maven Web 程序的文件结构及每个文件的作用：\",\"|-- pom.xml # Maven 项目管理文件 |-- src |-- main # 项目主要代码 | |-- java # Java 源代码目录 | | `-- com/example/myapp # 开发者代码主目录 | | |-- controller # 存放 Controller 层代码的目录 | | |-- service # 存放 Service 层代码的目录 | | |-- dao # 存放 DAO 层代码的目录 | | `-- model # 存放数据模型的目录 | |-- resources # 资源目录，存放配置文件、静态资源等 | | |-- log4j.properties # 日志配置文件 | | |-- spring-mybatis.xml # Spring Mybatis 配置文件 | | `-- static # 存放静态资源的目录 | | |-- css # 存放 CSS 文件的目录 | | |-- js # 存放 JavaScript 文件的目录 | | `-- images # 存放图片资源的目录 | `-- webapp # 存放 WEB 相关配置和资源 | |-- WEB-INF # 存放 WEB 应用配置文件 | | |-- web.xml # Web 应用的部署描述文件 | | `-- classes # 存放编译后的 class 文件 | `-- index.html # Web 应用入口页面 `-- test # 项目测试代码 |-- java # 单元测试目录 `-- resources # 测试资源目录\",\"pom.xml：Maven 项目管理文件，用于描述项目的依赖和构建配置等信息。\",\"src/main/java：存放项目的 Java 源代码。\",\"src/main/resources：存放项目的资源文件，如配置文件、静态资源等。\",\"src/main/webapp/WEB-INF：存放 Web 应用的配置文件。\",\"src/main/webapp/index.html：Web 应用的入口页面。\",\"src/test/java：存放项目的测试代码。\",\"src/test/resources：存放测试相关的资源文件，如测试配置文件等。\"]},\"446\":{\"h\":\"三、Maven核心功能依赖和构建管理\"},\"447\":{\"h\":\"3.1 依赖管理和配置\",\"t\":[\"Maven 依赖管理是 Maven 软件中最重要的功能之一。Maven 的依赖管理能够帮助开发人员自动解决软件包依赖问题，使得开发人员能够轻松地将其他开发人员开发的模块或第三方框架集成到自己的应用程序或模块中，避免出现版本冲突和依赖缺失等问题。\",\"我们通过定义 POM 文件，Maven 能够自动解析项目的依赖关系，并通过 Maven 仓库自动下载和管理依赖，从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。\",\"重点: 编写pom.xml文件!\",\"maven项目信息属性配置和读取：\",\"<!-- 模型版本 --> <modelVersion>4.0.0</modelVersion> <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --> <groupId>com.companyname.project-group</groupId> <!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --> <artifactId>project</artifactId> <!-- 版本号 --> <version>1.0.0</version> <!--打包方式 默认：jar jar指的是普通的java项目打包方式！ 项目打成jar包！ war指的是web项目打包方式！项目打成war包！ pom不会讲项目打包！这个项目作为父工程，被其他工程聚合或者继承！后面会讲解两个概念 --> <packaging>jar/pom/war</packaging>\",\"依赖管理和添加：\",\"<!-- 通过编写依赖jar包的gav必要属性，引入第三方依赖！ scope属性是可选的，可以指定依赖生效范围！ 依赖信息查询方式： 1. maven仓库信息官网 https://mvnrepository.com/ 2. mavensearch插件搜索 tools--mavensearch 输入信息即可 --> <dependencies> <!-- 引入具体的依赖包 --> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.17</version> <!-- 生效范围 - compile ：main目录 test目录 打包打包 [默认] - provided：main目录 test目录 Servlet - runtime： 打包运行 MySQL - test: test目录 junit --> <scope>runtime</scope> </dependency> </dependencies>\",\"依赖版本提取和维护:\",\"<!--声明版本--> <properties> <!--命名随便,内部制定版本号即可！--> <junit.version>4.11</junit.version> <!-- 也可以通过 maven规定的固定的key，配置maven的参数！如下配置编码格式！--> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> </properties> <dependencies> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <!--引用properties声明版本 --> <version>${junit.version}</version> </dependency> </dependencies>\"]},\"448\":{\"h\":\"3.2依赖传递和冲突\",\"t\":[\"依赖传递指的是当一个模块或库 A 依赖于另一个模块或库 B，而 B 又依赖于模块或库 C，那么 A 会间接依赖于 C。这种依赖传递结构可以形成一个依赖树。当我们引入一个库或框架时，构建工具（如 Maven、Gradle）会自动解析和加载其所有的直接和间接依赖，确保这些依赖都可用。\",\"依赖传递的作用是：\",\"减少重复依赖：当多个项目依赖同一个库时，Maven 可以自动下载并且只下载一次该库。这样可以减少项目的构建时间和磁盘空间。\",\"自动管理依赖: Maven 可以自动管理依赖项，使用依赖传递，简化了依赖项的管理，使项目构建更加可靠和一致。\",\"确保依赖版本正确性：通过依赖传递的依赖，之间都不会存在版本兼容性问题，确实依赖的版本正确性！\",\"依赖传递演示：\",\"项目中，需要导入jackson相关的依赖，通过之前导入经验，jackson需要导入三个依赖，分别为：\",\"通过查看网站介绍的依赖传递特性：data-bind中，依赖其他两个依赖\",\"最佳导入：直接可以导入data-bind，自动依赖传递需要的依赖\",\"<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.15.0</version> </dependency>\",\"依赖冲突演示：\",\"当直接引用或者间接引用出现了相同的jar包! 这时呢，一个项目就会出现相同的重复jar包，这就算作冲突！依赖冲突避免出现重复依赖，并且终止依赖传递！\",\"maven自动解决依赖冲突问题能力，会按照自己的原则，进行重复依赖选择。同时也提供了手动解决的冲突的方式，不过不推荐！\",\"解决依赖冲突（如何选择重复依赖）方式：\",\"自动选择原则 \",\"短路优先原则（第一原则）\",\"A—>B—>C—>D—>E—>X(version 0.0.1)\",\"A—>F—>X(version 0.0.2)\",\"则A依赖于X(version 0.0.2)。\",\"依赖路径长度相同情况下，则“先声明优先”（第二原则）\",\"A—>E—>X(version 0.0.1)\",\"A—>F—>X(version 0.0.2)\",\"在<depencies></depencies>中，先声明的，路径相同，会优先选择！\",\"小思考:\",\"前提： A 1.1 -> B 1.1 -> C 1.1 F 2.2 -> B 2.2 pom声明： F 2.2 A 1.1 B 2.2\"]},\"449\":{\"h\":\"3.3 依赖导入失败场景和解决方案\",\"t\":[\"在使用 Maven 构建项目时，可能会发生依赖项下载错误的情况，主要原因有以下几种：\",\"下载依赖时出现网络故障或仓库服务器宕机等原因，导致无法连接至 Maven 仓库，从而无法下载依赖。\",\"依赖项的版本号或配置文件中的版本号错误，或者依赖项没有正确定义，导致 Maven 下载的依赖项与实际需要的不一致，从而引发错误。\",\"本地 Maven 仓库或缓存被污染或损坏，导致 Maven 无法正确地使用现有的依赖项，并且也无法重新下载！\",\"解决方案：\",\"检查网络连接和 Maven 仓库服务器状态。\",\"确保依赖项的版本号与项目对应的版本号匹配，并检查 POM 文件中的依赖项是否正确。\",\"清除本地 Maven 仓库缓存（lastUpdated 文件），因为只要存在lastupdated缓存文件，刷新也不会重新下载。本地仓库中，根据依赖的gav属性依次向下查找文件夹，最终删除内部的文件，刷新重新下载即可！\",\"例如： pom.xml依赖\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency>\",\"文件：\",\"脚本使用：\",\"清理maven错误缓存.bat\",\"使用记事本打开 set REPOSITORY_PATH=D:\\\\repository 改成你本地仓库地址即可！ 点击运行脚本，即可自动清理本地错误缓存文件！！\"]},\"450\":{\"h\":\"3.4 扩展构建管理和插件配置\",\"t\":[\"构建概念:\",\"项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。\",\"主动触发场景：\",\"重新编译 : 编译不充分, 部分文件没有被编译!\",\"打包 : 独立部署到外部服务器软件,打包部署\",\"部署本地或者私服仓库 : maven工程加入到本地或者私服仓库,供其他工程使用\",\"命令方式构建:\",\"语法: mvn 构建命令 构建命令....\",\"命令\",\"描述\",\"mvn clean\",\"清理编译或打包后的项目结构,删除target文件夹\",\"mvn compile\",\"编译项目，生成target文件\",\"mvn test\",\"执行测试源码 (测试)\",\"mvn site\",\"生成一个项目依赖信息的展示页面\",\"mvn package\",\"打包项目，生成war / jar 文件\",\"mvn install\",\"打包后上传到maven本地仓库(本地部署)\",\"mvn deploy\",\"只打包，上传到maven私服仓库(私服部署)\",\"可视化方式构建:\",\"构建命令周期:\",\"构建生命周期可以理解成是一组固定构建命令的有序集合，触发周期后的命令，会自动触发周期前的命令！也是一种简化构建的思路!\",\"清理周期：主要是对项目编译生成文件进行清理\",\"包含命令：clean\",\"默认周期：定义了真正构件时所需要执行的所有步骤，它是生命周期中最核心的部分\",\"包含命令：compile - test - package - install / deploy\",\"报告周期\",\"包含命令：site\",\"打包: mvn clean package 本地仓库: mvn clean install\",\"最佳使用方案:\",\"打包: mvn clean package 重新编译: mvn clean compile 本地部署: mvn clean install\",\"周期，命令和插件:\",\"周期→包含若干命令→包含若干插件!\",\"使用周期命令构建，简化构建过程！\",\"最终进行构建的是插件！\",\"插件配置:\",\"<build> <!-- jdk17 和 war包版本插件不匹配 --> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> </plugin> </plugins> </build>\"]},\"451\":{\"h\":\"四、Maven继承和聚合特性\"},\"452\":{\"h\":\"4.1 Maven工程继承关系\",\"t\":[\"继承概念\",\"Maven 继承是指在 Maven 的项目中，让一个项目从另一个项目中继承配置信息的机制。继承可以让我们在多个项目中共享同一配置信息，简化项目的管理和维护工作。\",\"继承作用\",\"作用：在父工程中统一管理项目中的依赖信息,进行统一版本管理!\",\"它的背景是：\",\"对一个比较大型的项目进行了模块拆分。\",\"一个 project 下面，创建了很多个 module。\",\"每一个 module 都需要配置自己的依赖信息。 它背后的需求是：\",\"多个模块要使用同一个框架，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一管理。\",\"使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。 通过在父工程中为整个项目维护依赖信息的组合既保证了整个项目使用规范、准确的 jar 包；又能够将以往的经验沉淀下来，节约时间和精力。\",\"继承语法\",\"父工程\",\"<groupId>com.atguigu.maven</groupId> <artifactId>pro03-maven-parent</artifactId> <version>1.0-SNAPSHOT</version> <!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --> <packaging>pom</packaging>\",\"子工程\",\"<!-- 使用parent标签指定当前工程的父工程 --> <parent> <!-- 父工程的坐标 --> <groupId>com.atguigu.maven</groupId> <artifactId>pro03-maven-parent</artifactId> <version>1.0-SNAPSHOT</version> </parent> <!-- 子工程的坐标 --> <!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --> <!-- <groupId>com.atguigu.maven</groupId> --> <artifactId>pro04-maven-module</artifactId> <!-- <version>1.0-SNAPSHOT</version> -->\",\"父工程依赖统一管理\",\"父工程声明版本\",\"<!-- 使用dependencyManagement标签配置对依赖的管理 --> <!-- 被管理的依赖并没有真正被引入到工程 --> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>4.0.0.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>4.0.0.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>4.0.0.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-expression</artifactId> <version>4.0.0.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> <version>4.0.0.RELEASE</version> </dependency> </dependencies> </dependencyManagement>\",\"子工程引用版本\",\"<!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。 --> <!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --> <!-- 具体来说是由父工程的dependencyManagement来决定。 --> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-expression</artifactId> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> </dependency> </dependencies>\"]},\"453\":{\"h\":\"4.2 Maven工程聚合关系\",\"t\":[\"聚合概念\",\"Maven 聚合是指将多个项目组织到一个父级项目中，通过触发父工程的构建,统一按顺序触发子工程构建的过程!!\",\"聚合作用\",\"统一管理子项目构建：通过聚合，可以将多个子项目组织在一起，方便管理和维护。\",\"优化构建顺序：通过聚合，可以对多个项目进行顺序控制，避免出现构建依赖混乱导致构建失败的情况。\",\"聚合语法\",\"父项目中包含的子项目列表。\",\"<project> <groupId>com.example</groupId> <artifactId>parent-project</artifactId> <packaging>pom</packaging> <version>1.0.0</version> <!-- 要统一管理哪些子工程的artifactId--> <modules> <module>child-project1</module> <module>child-project2</module> </modules> </project>\",\"聚合演示\",\"通过触发父工程构建命令、引发所有子模块构建！产生反应堆！\"]},\"454\":{\"h\":\"五、Maven实战案例：搭建微服务Maven工程架构\"},\"455\":{\"h\":\"5.1 项目需求和结构分析\",\"t\":[\"需求案例：搭建一个电商平台项目，该平台包括用户服务、订单服务、通用工具模块等。\",\"项目架构：\",\"用户服务：负责处理用户相关的逻辑，例如用户信息的管理、用户注册、登录等。\",\"订单服务：负责处理订单相关的逻辑，例如订单的创建、订单支付、退货、订单查看等。\",\"通用模块：负责存储其他服务需要通用工具类，其他服务依赖此模块。\",\"服务依赖：\",\"用户服务 (1.0.1) \",\"spring-context 6.0.6 \",\"spring-core 6.0.6\",\"spring-beans 6.0.6\",\"jackson-databind / jackson-core / jackson-annotations 2.15.0 \",\"订单服务 (1.0.1) \",\"shiro-core 1.10.1 \",\"spring-context 6.0.6 \",\"spring-core 6.0.6\",\"spring-beans 6.0.6\",\"通用模块 (1.0.1) \",\"commons-io 2.11.0\"]},\"456\":{\"h\":\"5.2项目搭建和统一构建\",\"t\":[\"父模块搭建 (micro-shop) \",\"创建父工程\",\"pom.xml配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.atguigu</groupId> <artifactId>micro-shop</artifactId> <version>1.0.1</version> <!-- 父工程不打包，所以选择pom值--> <packaging>pom</packaging> <properties> <spring.version>6.0.6</spring.version> <jackson.version>2.15.0</jackson.version> <shiro.version>1.10.1</shiro.version> <commons.version>2.11.0</commons.version> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <!-- 依赖管理 --> <dependencyManagement> <dependencies> <!-- spring-context会依赖传递core/beans --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>${spring.version}</version> </dependency> <!-- jackson-databind会依赖传递core/annotations --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>${jackson.version}</version> </dependency> <!-- shiro-core --> <dependency> <groupId>org.apache.shiro</groupId> <artifactId>shiro-core</artifactId> <version>${shiro.version}</version> </dependency> <!-- commons-io --> <dependency> <groupId>commons-io</groupId> <artifactId>commons-io</artifactId> <version>${commons.version}</version> </dependency> </dependencies> </dependencyManagement> <dependencies> <!-- 父工程添加依赖，会自动传递给所有子工程，不推荐！ --> </dependencies> <!-- 统一更新子工程打包插件--> <build> <!-- jdk17 和 war包版本插件不匹配 --> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> </plugin> </plugins> </build> </project>\",\"通用模块 (common-service) \",\"创建模块\",\"pom.xml配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>com.atguigu</groupId> <artifactId>micro-shop</artifactId> <version>1.0.1</version> </parent> <artifactId>common-service</artifactId> <!-- 打包方式默认就是jar！ --> <packaging>jar</packaging> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- 声明commons-io，继承父工程版本 --> <dependency> <groupId>commons-io</groupId> <artifactId>commons-io</artifactId> </dependency> </dependencies> </project>\",\"用户模块 (user-service) \",\"创建模块\",\"pom.xml配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>com.atguigu</groupId> <artifactId>micro-shop</artifactId> <version>1.0.1</version> </parent> <artifactId>user-service</artifactId> <packaging>war</packaging> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- 添加spring-context 自动传递 core / beans --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> </dependency> <!-- 添加jackson-databind 自动传递 core / annotations --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> </dependency> </dependencies> </project>\",\"订单模块 (order-service) \",\"创建模块\",\"pom.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>com.atguigu</groupId> <artifactId>micro-shop</artifactId> <version>1.0.1</version> </parent> <artifactId>order-service</artifactId> <packaging>war</packaging> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- 继承父工程依赖版本 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> </dependency> <!-- 继承父工程依赖版本 --> <dependency> <groupId>org.apache.shiro</groupId> <artifactId>shiro-core</artifactId> </dependency> </dependencies> </project>\"]},\"457\":{\"h\":\"六、Maven核心掌握总结\",\"t\":[\"核心点\",\"掌握目标\",\"安装\",\"maven安装、环境变量、maven配置文件修改\",\"工程创建\",\"gavp属性理解、JavaSE/EE工程创建、项目结构\",\"依赖管理\",\"依赖添加、依赖传递、版本提取、导入依赖错误解决\",\"构建管理\",\"构建过程、构建场景、构建周期等\",\"继承和聚合\",\"理解继承和聚合作用、继承语法和实践、聚合语法和实践\"]},\"458\":{\"h\":\"七、MyBatis-Plus高级用法：最优化持久层开发\"},\"459\":{\"h\":\"目录\",\"t\":[\"一、MyBatis-Plus快速入门\",\"1.1 简介\",\"1.2 快速入门\",\"二、MyBatis-Plus核心功能\",\"2.1 基于Mapper接口CRUD\",\"Insert方法\",\"Delete方法\",\"Update方法\",\"Select方法\",\"自定义和多表映射\",\"2.2 基于Service接口CRUD\",\"对比Mapper接口CRUD区别：\",\"使用Iservice接口方式\",\"CRUD方法介绍\",\"2.3 分页查询实现\",\"2.4 条件构造器使用\",\"2.4.1 条件构造器作用\",\"2.4.2 条件构造器继承结构\",\"2.4.3 基于QueryWrapper 组装条件\",\"2.3.4 基于 UpdateWrapper组装条件\",\"2.3.5 基于LambdaQueryWrapper组装条件\",\"2.3.6 基于LambdaUpdateWrapper组装条件\",\"2.5 核心注解使用\",\"三、MyBatis-Plus高级扩展\",\"3.1 逻辑删除实现\",\"3.2 乐观锁实现\",\"3.2.1 悲观锁和乐观锁场景和介绍\",\"3.2.2 使用mybatis-plus数据使用乐观锁\",\"3.3 防全表更新和删除实现\",\"四、MyBatis-Plus代码生成器(MyBatisX插件)\",\"4.1 Mybatisx插件逆向工程\",\"4.2 MyBatisX快速代码生成\"]},\"460\":{\"h\":\"1.1 简介\",\"t\":[\"课程版本：3.5.3.1\",\"https://baomidou.com/\",\"MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new window) 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。\",\"特性：\",\"无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑\",\"损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作\",\"强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求\",\"支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错\",\"支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题\",\"支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作\",\"支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）\",\"内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用\",\"内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询\",\"分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库\",\"内置性能分析插件：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询\",\"内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作\",\"支持数据库：\",\"MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb，informix，TDengine，redshift\",\"达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库，优炫数据库\",\"mybatis-plus总结：\",\"自动生成单表的CRUD功能\",\"提供丰富的条件拼接方式\",\"全自动ORM类型持久层框架\"]},\"461\":{\"h\":\"1.2 快速入门\",\"t\":[\"准备数据库脚本\",\"现有一张 User 表，其表结构如下：\",\"id\",\"name\",\"age\",\"email\",\"1\",\"Jone\",\"18\",\"test1@baomidou.com\",\"2\",\"Jack\",\"20\",\"test2@baomidou.com\",\"3\",\"Tom\",\"28\",\"test3@baomidou.com\",\"4\",\"Sandy\",\"21\",\"test4@baomidou.com\",\"5\",\"Billie\",\"24\",\"test5@baomidou.com\",\"DROP TABLE IF EXISTS user; CREATE TABLE user ( id BIGINT(20) NOT NULL COMMENT '主键ID', name VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名', age INT(11) NULL DEFAULT NULL COMMENT '年龄', email VARCHAR(50) NULL DEFAULT NULL COMMENT '邮箱', PRIMARY KEY (id) ); INSERT INTO user (id, name, age, email) VALUES (1, 'Jone', 18, 'test1@baomidou.com'), (2, 'Jack', 20, 'test2@baomidou.com'), (3, 'Tom', 28, 'test3@baomidou.com'), (4, 'Sandy', 21, 'test4@baomidou.com'), (5, 'Billie', 24, 'test5@baomidou.com');\",\"准备boot工程\",\"导入依赖\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.0.5</version> </parent> <groupId>com.atguigu</groupId> <artifactId>springboot-starter-mybatis-plus-06</artifactId> <version>1.0-SNAPSHOT</version> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> <!-- 测试环境 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> </dependency> <!-- mybatis-plus --> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.3.1</version> </dependency> <!-- 数据库相关配置启动器 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <!-- druid启动器的依赖 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-3-starter</artifactId> <version>1.2.18</version> </dependency> <!-- 驱动类--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.28</version> </dependency> </dependencies> <!-- SpringBoot应用打包插件--> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>\",\"配置文件和启动类\",\"完善连接池配置：\",\"文件夹：META-INF.spring\",\"文件名：\",\"org.springframework.boot.autoconfigure.AutoConfiguration.imports\",\"内容：com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure\",\"application.yaml\",\"# 连接池配置 spring: datasource: type: com.alibaba.druid.pool.DruidDataSource druid: url: jdbc:mysql:///day01 username: root password: root driver-class-name: com.mysql.cj.jdbc.Driver\",\"启动类\",\"@MapperScan(\\\"com.atguigu.mapper\\\") @SpringBootApplication public class MainApplication { public static void main(String[] args) { SpringApplication.run(MainApplication.class,args); } }\",\"功能编码\",\"编写实体类 User.java（此处使用了 Lombok简化代码）\",\"@Data public class User { private Long id; private String name; private Integer age; private String email; }\",\"编写 Mapper 包下的 UserMapper接口\",\"public interface UserMapper extends BaseMapper<User> { }\",\"继承mybatis-plus提供的基础Mapper接口，自带crud方法！\",\"测试和使用\",\"添加测试类，进行功能测试：\",\"@SpringBootTest //springboot下测试环境注解 public class SampleTest { @Autowired private UserMapper userMapper; @Test public void testSelect() { System.out.println((\\\"----- selectAll method test ------\\\")); List<User> userList = userMapper.selectList(null); userList.forEach(System.out::println); } }\",\"小结\",\"通过以上几个简单的步骤，我们就实现了 User 表的 CRUD 功能，甚至连 XML 文件都不用编写！\",\"从以上步骤中，我们可以看到集成MyBatis-Plus非常的简单，只需要引入 starter 工程，并配置 mapper 扫描路径即可。\"]},\"462\":{\"h\":\"2.1 基于Mapper接口CRUD\",\"t\":[\"通用 CRUD 封装BaseMapper (opens new window)接口， Mybatis-Plus 启动时自动解析实体表关系映射转换为 Mybatis 内部对象注入容器! 内部包含常见的单表操作！\"]},\"463\":{\"h\":\"Insert方法\",\"t\":[\"// 插入一条记录 // T 就是要插入的实体对象 // 默认主键生成策略为雪花算法（后面讲解） int insert(T entity);\",\"类型\",\"参数名\",\"描述\",\"T\",\"entity\",\"实体对象\"]},\"464\":{\"h\":\"Delete方法\",\"t\":[\"// 根据 entity 条件，删除记录 int delete(@Param(Constants.WRAPPER) Wrapper<T> wrapper); // 删除（根据ID 批量删除） int deleteBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList); // 根据 ID 删除 int deleteById(Serializable id); // 根据 columnMap 条件，删除记录 int deleteByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);\",\"类型\",\"参数名\",\"描述\",\"Wrapper<T>\",\"wrapper\",\"实体对象封装操作类（可以为 null）\",\"Collection<? extends Serializable>\",\"idList\",\"主键 ID 列表(不能为 null 以及 empty)\",\"Serializable\",\"id\",\"主键 ID\",\"Map<String, Object>\",\"columnMap\",\"表字段 map 对象\"]},\"465\":{\"h\":\"Update方法\",\"t\":[\"// 根据 whereWrapper 条件，更新记录 int update(@Param(Constants.ENTITY) T updateEntity, @Param(Constants.WRAPPER) Wrapper<T> whereWrapper); // 根据 ID 修改 主键属性必须值 int updateById(@Param(Constants.ENTITY) T entity);\",\"类型\",\"参数名\",\"描述\",\"T\",\"entity\",\"实体对象 (set 条件值,可为 null)\",\"Wrapper<T>\",\"updateWrapper\",\"实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）\"]},\"466\":{\"h\":\"Select方法\",\"t\":[\"// 根据 ID 查询 T selectById(Serializable id); // 根据 entity 条件，查询一条记录 T selectOne(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper); // 查询（根据ID 批量查询） List<T> selectBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList); // 根据 entity 条件，查询全部记录 List<T> selectList(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper); // 查询（根据 columnMap 条件） List<T> selectByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap); // 根据 Wrapper 条件，查询全部记录 List<Map<String, Object>> selectMaps(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper); // 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值 List<Object> selectObjs(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper); // 根据 entity 条件，查询全部记录（并翻页） IPage<T> selectPage(IPage<T> page, @Param(Constants.WRAPPER) Wrapper<T> queryWrapper); // 根据 Wrapper 条件，查询全部记录（并翻页） IPage<Map<String, Object>> selectMapsPage(IPage<T> page, @Param(Constants.WRAPPER) Wrapper<T> queryWrapper); // 根据 Wrapper 条件，查询总记录数 Integer selectCount(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);\",\"参数说明\",\"类型\",\"参数名\",\"描述\",\"Serializable\",\"id\",\"主键 ID\",\"Wrapper<T>\",\"queryWrapper\",\"实体对象封装操作类（可以为 null）\",\"Collection<? extends Serializable>\",\"idList\",\"主键 ID 列表(不能为 null 以及 empty)\",\"Map<String, Object>\",\"columnMap\",\"表字段 map 对象\",\"IPage<T>\",\"page\",\"分页查询条件（可以为 RowBounds.DEFAULT）\"]},\"467\":{\"h\":\"自定义和多表映射\",\"t\":[\"mybatis-plus的默认mapperxml位置\",\"mybatis-plus: # mybatis-plus的配置 # 默认位置 private String[] mapperLocations = new String[]{\\\"classpath*:/mapper/**/*.xml\\\"}; mapper-locations: classpath:/mapper/*.xml\",\"自定义mapper方法：\",\"public interface UserMapper extends BaseMapper<User> { //正常自定义方法！ //可以使用注解@Select或者mapper.xml实现 List<User> queryAll(); }\",\"基于mapper.xml实现：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace = 接口的全限定符 --> <mapper namespace=\\\"com.atguigu.mapper.UserMapper\\\"> <select id=\\\"queryAll\\\" resultType=\\\"user\\\" > select * from user </select> </mapper>\"]},\"468\":{\"h\":\"2.2 基于Service接口CRUD\",\"t\":[\"通用 Service CRUD 封装IService (opens new window)接口，进一步封装 CRUD 采用 get 查询单行remove 删除list 查询集合page 分页 前缀命名方式区分 Mapper 层避免混淆，\"]},\"469\":{\"h\":\"对比Mapper接口CRUD区别：\",\"t\":[\"service添加了批量方法\",\"service层的方法自动添加事务\"]},\"470\":{\"h\":\"使用Iservice接口方式\",\"t\":[\"接口继承IService接口\",\"public interface UserService extends IService<User> { }\",\"类继承ServiceImpl实现类\",\"@Service public class UserServiceImpl extends ServiceImpl<UserMapper,User> implements UserService{ }\"]},\"471\":{\"h\":\"CRUD方法介绍\",\"t\":[\"保存： // 插入一条记录（选择字段，策略插入） boolean save(T entity); // 插入（批量） boolean saveBatch(Collection<T> entityList); // 插入（批量） boolean saveBatch(Collection<T> entityList, int batchSize); 修改或者保存： // TableId 注解存在更新记录，否插入一条记录 boolean saveOrUpdate(T entity); // 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法 boolean saveOrUpdate(T entity, Wrapper<T> updateWrapper); // 批量修改插入 boolean saveOrUpdateBatch(Collection<T> entityList); // 批量修改插入 boolean saveOrUpdateBatch(Collection<T> entityList, int batchSize); 移除： // 根据 queryWrapper 设置的条件，删除记录 boolean remove(Wrapper<T> queryWrapper); // 根据 ID 删除 boolean removeById(Serializable id); // 根据 columnMap 条件，删除记录 boolean removeByMap(Map<String, Object> columnMap); // 删除（根据ID 批量删除） boolean removeByIds(Collection<? extends Serializable> idList); 更新： // 根据 UpdateWrapper 条件，更新记录 需要设置sqlset boolean update(Wrapper<T> updateWrapper); // 根据 whereWrapper 条件，更新记录 boolean update(T updateEntity, Wrapper<T> whereWrapper); // 根据 ID 选择修改 boolean updateById(T entity); // 根据ID 批量更新 boolean updateBatchById(Collection<T> entityList); // 根据ID 批量更新 boolean updateBatchById(Collection<T> entityList, int batchSize); 数量： // 查询总记录数 int count(); // 根据 Wrapper 条件，查询总记录数 int count(Wrapper<T> queryWrapper); 查询： // 根据 ID 查询 T getById(Serializable id); // 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(\\\"LIMIT 1\\\") T getOne(Wrapper<T> queryWrapper); // 根据 Wrapper，查询一条记录 T getOne(Wrapper<T> queryWrapper, boolean throwEx); // 根据 Wrapper，查询一条记录 Map<String, Object> getMap(Wrapper<T> queryWrapper); // 根据 Wrapper，查询一条记录 <V> V getObj(Wrapper<T> queryWrapper, Function<? super Object, V> mapper); 集合： // 查询所有 List<T> list(); // 查询列表 List<T> list(Wrapper<T> queryWrapper); // 查询（根据ID 批量查询） Collection<T> listByIds(Collection<? extends Serializable> idList); // 查询（根据 columnMap 条件） Collection<T> listByMap(Map<String, Object> columnMap); // 查询所有列表 List<Map<String, Object>> listMaps(); // 查询列表 List<Map<String, Object>> listMaps(Wrapper<T> queryWrapper); // 查询全部记录 List<Object> listObjs(); // 查询全部记录 <V> List<V> listObjs(Function<? super Object, V> mapper); // 根据 Wrapper 条件，查询全部记录 List<Object> listObjs(Wrapper<T> queryWrapper); // 根据 Wrapper 条件，查询全部记录 <V> List<V> listObjs(Wrapper<T> queryWrapper, Function<? super Object, V> mapper);\"]},\"472\":{\"h\":\"2.3 分页查询实现\",\"t\":[\"导入分页插件\",\"@Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; }\",\"使用分页查询\",\"@Test public void testPageQuery(){ //设置分页参数 Page<User> page = new Page<>(1, 5); userMapper.selectPage(page, null); //获取分页数据 List<User> list = page.getRecords(); list.forEach(System.out::println); System.out.println(\\\"当前页：\\\"+page.getCurrent()); System.out.println(\\\"每页显示的条数：\\\"+page.getSize()); System.out.println(\\\"总记录数：\\\"+page.getTotal()); System.out.println(\\\"总页数：\\\"+page.getPages()); System.out.println(\\\"是否有上一页：\\\"+page.hasPrevious()); System.out.println(\\\"是否有下一页：\\\"+page.hasNext()); }\",\"自定义的mapper方法使用分页\",\"方法\",\"//传入参数携带Ipage接口 //返回结果为IPage IPage<User> selectPageVo(IPage<?> page, Integer id);\",\"接口实现\",\"<select id=\\\"selectPageVo\\\" resultType=\\\"xxx.xxx.xxx.User\\\"> SELECT * FROM user WHERE id > #{id} </select>\",\"测试\",\"@Test public void testQuick(){ IPage page = new Page(1,2); userMapper.selectPageVo(page,2); long current = page.getCurrent(); System.out.println(\\\"current = \\\" + current); long pages = page.getPages(); System.out.println(\\\"pages = \\\" + pages); long total = page.getTotal(); System.out.println(\\\"total = \\\" + total); List records = page.getRecords(); System.out.println(\\\"records = \\\" + records); }\"]},\"473\":{\"h\":\"2.4 条件构造器使用\"},\"474\":{\"h\":\"2.4.1 条件构造器作用\",\"t\":[\"实例代码：\",\"QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.eq(\\\"name\\\", \\\"John\\\"); // 添加等于条件 queryWrapper.ne(\\\"age\\\", 30); // 添加不等于条件 queryWrapper.like(\\\"email\\\", \\\"@gmail.com\\\"); // 添加模糊匹配条件 等同于： delete from user where name = \\\"John\\\" and age != 30 and email like \\\"%@gmail.com%\\\" // 根据 entity 条件，删除记录 int delete(@Param(Constants.WRAPPER) Wrapper<T> wrapper);\",\"使用MyBatis-Plus的条件构造器，你可以构建灵活、高效的查询条件，而不需要手动编写复杂的 SQL 语句。它提供了许多方法来支持各种条件操作符，并且可以通过链式调用来组合多个条件。这样可以简化查询的编写过程，并提高开发效率。\"]},\"475\":{\"h\":\"2.4.2 条件构造器继承结构\",\"t\":[\"条件构造器类结构：\",\"Wrapper ： 条件构造抽象类，最顶端父类\",\"AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件 \",\"QueryWrapper ： 查询/删除条件封装\",\"UpdateWrapper ： 修改条件封装\",\"AbstractLambdaWrapper ： 使用Lambda 语法 \",\"LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper\",\"LambdaUpdateWrapper ： Lambda 更新封装Wrapper\"]},\"476\":{\"h\":\"2.4.3 基于QueryWrapper 组装条件\",\"t\":[\"组装查询条件：\",\"@Test public void test01(){ //查询用户名包含a，年龄在20到30之间，并且邮箱不为null的用户信息 //SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL) QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.like(\\\"username\\\", \\\"a\\\") .between(\\\"age\\\", 20, 30) .isNotNull(\\\"email\\\"); List<User> list = userMapper.selectList(queryWrapper); list.forEach(System.out::println);\",\"组装排序条件:\",\"@Test public void test02(){ //按年龄降序查询用户，如果年龄相同则按id升序排列 //SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 ORDER BY age DESC,id ASC QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper .orderByDesc(\\\"age\\\") .orderByAsc(\\\"id\\\"); List<User> users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); }\",\"组装删除条件:\",\"@Test public void test03(){ //删除email为空的用户 //DELETE FROM t_user WHERE (email IS NULL) QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.isNull(\\\"email\\\"); //条件构造器也可以构建删除语句的条件 int result = userMapper.delete(queryWrapper); System.out.println(\\\"受影响的行数：\\\" + result); }\",\"and和or关键字使用(修改)：\",\"@Test public void test04() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); //将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改 //UPDATE t_user SET age=?, email=? WHERE username LIKE ? AND age > ? OR email IS NULL) queryWrapper .like(\\\"username\\\", \\\"a\\\") .gt(\\\"age\\\", 20) .or() .isNull(\\\"email\\\"); User user = new User(); user.setAge(18); user.setEmail(\\\"user@atguigu.com\\\"); int result = userMapper.update(user, queryWrapper); System.out.println(\\\"受影响的行数：\\\" + result); }\",\"指定列映射查询：\",\"@Test public void test05() { //查询用户信息的username和age字段 //SELECT username,age FROM t_user QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.select(\\\"username\\\", \\\"age\\\"); //selectMaps()返回Map集合列表，通常配合select()使用，避免User对象中没有被查询到的列值为null List<Map<String, Object>> maps = userMapper.selectMaps(queryWrapper); maps.forEach(System.out::println); }\",\"condition判断组织条件:\",\" @Test public void testQuick3(){ String name = \\\"root\\\"; int age = 18; QueryWrapper<User> queryWrapper = new QueryWrapper<>(); //判断条件拼接 //当name不为null拼接等于, age > 1 拼接等于判断 //方案1: 手动判断 if (!StringUtils.isEmpty(name)){ queryWrapper.eq(\\\"name\\\",name); } if (age > 1){ queryWrapper.eq(\\\"age\\\",age); } //方案2: 拼接condition判断 //每个条件拼接方法都condition参数,这是一个比较运算,为true追加当前条件! //eq(condition,列名,值) queryWrapper.eq(!StringUtils.isEmpty(name),\\\"name\\\",name) .eq(age>1,\\\"age\\\",age); }\"]},\"477\":{\"h\":\"2.3.4 基于 UpdateWrapper组装条件\",\"t\":[\"使用queryWrapper:\",\"@Test public void test04() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); //将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改 //UPDATE t_user SET age=?, email=? WHERE username LIKE ? AND age > ? OR email IS NULL) queryWrapper .like(\\\"username\\\", \\\"a\\\") .gt(\\\"age\\\", 20) .or() .isNull(\\\"email\\\"); User user = new User(); user.setAge(18); user.setEmail(\\\"user@atguigu.com\\\"); int result = userMapper.update(user, queryWrapper); System.out.println(\\\"受影响的行数：\\\" + result); }\",\"注意：使用queryWrapper + 实体类形式可以实现修改，但是无法将列值修改为null值！\",\"使用updateWrapper:\",\"@Test public void testQuick2(){ UpdateWrapper<User> updateWrapper = new UpdateWrapper<>(); //将id = 3 的email设置为null, age = 18 updateWrapper.eq(\\\"id\\\",3) .set(\\\"email\\\",null) // set 指定列和结果 .set(\\\"age\\\",18); //如果使用updateWrapper 实体对象写null即可! int result = userMapper.update(null, updateWrapper); System.out.println(\\\"result = \\\" + result); }\",\"使用updateWrapper可以随意设置列的值！！\"]},\"478\":{\"h\":\"2.3.5 基于LambdaQueryWrapper组装条件\",\"t\":[\"1. LambdaQueryWrapper对比QueryWrapper优势\",\"QueryWrapper 示例代码：\",\"QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.eq(\\\"name\\\", \\\"John\\\") .ge(\\\"age\\\", 18) .orderByDesc(\\\"create_time\\\") .last(\\\"limit 10\\\"); List<User> userList = userMapper.selectList(queryWrapper);\",\"LambdaQueryWrapper 示例代码：\",\"LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>(); lambdaQueryWrapper.eq(User::getName, \\\"John\\\") .ge(User::getAge, 18) .orderByDesc(User::getCreateTime) .last(\\\"limit 10\\\"); List<User> userList = userMapper.selectList(lambdaQueryWrapper);\",\"从上面的代码对比可以看出，相比于 QueryWrapper，LambdaQueryWrapper 使用了实体类的属性引用（例如 User::getName、User::getAge），而不是字符串来表示字段名，这提高了代码的可读性和可维护性。\",\"2. lambda表达式回顾\",\"Lambda 表达式是 Java 8 引入的一种函数式编程特性，它提供了一种更简洁、更直观的方式来表示匿名函数或函数式接口的实现。Lambda 表达式可以用于简化代码，提高代码的可读性和可维护性。\",\"Lambda 表达式的语法可以分为以下几个部分：\",\"参数列表： 参数列表用小括号 () 括起来，可以指定零个或多个参数。如果没有参数，可以省略小括号；如果只有一个参数，可以省略小括号。\",\"示例：(a, b), x ->, () ->\",\"箭头符号： 箭头符号 -> 分割参数列表和 Lambda 表达式的主体部分。\",\"示例：->\",\"Lambda 表达式的主体： Lambda 表达式的主体部分可以是一个表达式或一个代码块。如果是一个表达式，可以省略 return 关键字；如果是多条语句的代码块，需要使用大括号 {} 括起来，并且需要明确指定 return 关键字。\",\"示例：\",\"单个表达式：x -> x * x\",\"代码块：(x, y) -> { int sum = x + y; return sum; }\",\"Lambda 表达式的语法可以更具体地描述如下：\",\"// 使用 Lambda 表达式实现一个接口的方法 interface Greeting { void sayHello(); } public class LambdaExample { public static void main(String[] args) { //原始匿名内部类方式 Greeting greeting = new Greeting() { @Override public void sayHello(int a) { System.out.println(\\\"Hello, world!\\\"); } }; a->System.out.println(\\\"Hello, world!\\\") // 使用 Lambda 表达式实现接口的方法 greeting = () -> System.out.println(\\\"Hello, world!\\\"); System.out::println; () -> 类.XXX(); -> 类：：方法名 // 调用接口的方法 greeting.sayHello(); } }\",\"3. 方法引用回顾:\",\"方法引用是 Java 8 中引入的一种语法特性，它提供了一种简洁的方式来直接引用已有的方法或构造函数。方法引用可以替代 Lambda 表达式，使代码更简洁、更易读。\",\"Java 8 支持以下几种方法引用的形式：\",\"静态方法引用： 引用静态方法，语法为 类名::静态方法名。\",\"实例方法引用： 引用实例方法，语法为 实例对象::实例方法名。\",\"对象方法引用： 引用特定对象的实例方法，语法为 类名::实例方法名。\",\"构造函数引用： 引用构造函数，语法为 类名::new。\",\"演示代码:\",\"import java.util.Arrays; import java.util.List; import java.util.function.Consumer; public class MethodReferenceExample { public static void main(String[] args) { List<String> names = Arrays.asList(\\\"John\\\", \\\"Tom\\\", \\\"Alice\\\"); // 使用 Lambda 表达式 names.forEach(name -> System.out.println(name)); // 使用方法引用 names.forEach(System.out::println); } }\",\"4. lambdaQueryWrapper使用案例:\",\"@Test public void testQuick4(){ String name = \\\"root\\\"; int age = 18; QueryWrapper<User> queryWrapper = new QueryWrapper<>(); //每个条件拼接方法都condition参数,这是一个比较运算,为true追加当前条件! //eq(condition,列名,值) queryWrapper.eq(!StringUtils.isEmpty(name),\\\"name\\\",name) .eq(age>1,\\\"age\\\",age); //TODO: 使用lambdaQueryWrapper LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>(); //注意: 需要使用方法引用 //技巧: 类名::方法名 lambdaQueryWrapper.eq(!StringUtils.isEmpty(name), User::getName,name); List<User> users= userMapper.selectList(lambdaQueryWrapper); System.out.println(users); }\"]},\"479\":{\"h\":\"2.3.6 基于LambdaUpdateWrapper组装条件\",\"t\":[\"使用案例:\",\"@Test public void testQuick2(){ UpdateWrapper<User> updateWrapper = new UpdateWrapper<>(); //将id = 3 的email设置为null, age = 18 updateWrapper.eq(\\\"id\\\",3) .set(\\\"email\\\",null) // set 指定列和结果 .set(\\\"age\\\",18); //使用lambdaUpdateWrapper LambdaUpdateWrapper<User> updateWrapper1 = new LambdaUpdateWrapper<>(); updateWrapper1.eq(User::getId,3) .set(User::getEmail,null) .set(User::getAge,18); //如果使用updateWrapper 实体对象写null即可! int result = userMapper.update(null, updateWrapper); System.out.println(\\\"result = \\\" + result); }\"]},\"480\":{\"h\":\"2.5 核心注解使用\",\"t\":[\"理解和介绍\",\"MyBatis-Plus是一个基于MyBatis框架的增强工具，提供了一系列简化和增强的功能，用于加快开发人员在使用MyBatis进行数据库访问时的效率。\",\"MyBatis-Plus提供了一种基于注解的方式来定义和映射数据库操作，其中的注解起到了重要作用。\",\"理解：\",\"public interface UserMapper extends BaseMapper<User> { }\",\"此接口对应的方法为什么会自动触发 user表的crud呢？\",\"默认情况下， 根据指定的<实体类>的名称对应数据库表名，属性名对应数据库的列名！\",\"但是不是所有数据库的信息和实体类都完全映射！\",\"例如： 表名 t_user → 实体类 User 这时候就不对应了！\",\"自定义映射关系就可以使用mybatis-plus提供的注解即可！\",\"@TableName注解\",\"描述：表名注解，标识实体类对应的表\",\"使用位置：实体类\",\"@TableName(\\\"sys_user\\\") //对应数据库表名 public class User { private Long id; private String name; private Integer age; private String email; }\",\"特殊情况：如果表名和实体类名相同（忽略大小写）可以省略该注解！\",\"其他解决方案：全局设置前缀 (https://www.baomidou.com/pages/56bac0/#基本配置)\",\"mybatis-plus: # mybatis-plus的配置 global-config: db-config: table-prefix: sys_ # 表名前缀字符串\",\"@TableId 注解\",\"描述：主键注解\",\"使用位置：实体类主键字段\",\"@TableName(\\\"sys_user\\\") public class User { @TableId(value=\\\"主键列名\\\",type=主键策略) private Long id; private String name; private Integer age; private String email; }\",\"属性\",\"类型\",\"必须指定\",\"默认值\",\"描述\",\"value\",\"String\",\"否\",\"\\\"\\\"\",\"主键字段名\",\"type\",\"Enum\",\"否\",\"IdType.NONE\",\"指定主键类型\",\"IdType属性可选值：\",\"值\",\"描述\",\"--------------\",\"----------------------------------------------------------------------------------------------------------------------------\",\"AUTO\",\"数据库 ID 自增 (mysql配置主键自增长)\",\"ASSIGN_ID（默认）\",\"分配 ID(主键类型为 Number(Long )或 String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法)\",\"全局配置修改主键策略:\",\"mybatis-plus: configuration: # 配置MyBatis日志 log-impl: org.apache.ibatis.logging.stdout.StdOutImpl global-config: db-config: # 配置MyBatis-Plus操作表的默认前缀 table-prefix: t_ # 配置MyBatis-Plus的主键策略 id-type: auto\",\"在以下场景下，添加@TableId注解是必要的：\",\"实体类的字段与数据库表的主键字段不同名：如果实体类中的字段与数据库表的主键字段不一致，需要使用@TableId注解来指定实体类中表示主键的字段。\",\"主键生成策略不是默认策略：如果需要使用除了默认主键生成策略以外的策略，也需要添加@TableId注解，并通过value属性指定生成策略。\",\"雪花算法使用场景\",\"雪花算法（Snowflake Algorithm）是一种用于生成唯一ID的算法。它由Twitter公司提出，用于解决分布式系统中生成全局唯一ID的需求。\",\"在传统的自增ID生成方式中，使用单点数据库生成ID会成为系统的瓶颈，而雪花算法通过在分布式系统中生成唯一ID，避免了单点故障和性能瓶颈的问题。\",\"雪花算法生成的ID是一个64位的整数，由以下几个部分组成：\",\"时间戳：41位，精确到毫秒级，可以使用69年。\",\"节点ID：10位，用于标识分布式系统中的不同节点。\",\"序列号：12位，表示在同一毫秒内生成的不同ID的序号。 通过将这三个部分组合在一起，雪花算法可以在分布式系统中生成全局唯一的ID，并保证ID的生成顺序性。 雪花算法的工作方式如下：\",\"当前时间戳从某一固定的起始时间开始计算，可以用于计算ID的时间部分。\",\"节点ID是分布式系统中每个节点的唯一标识，可以通过配置或自动分配的方式获得。\",\"序列号用于记录在同一毫秒内生成的不同ID的序号，从0开始自增，最多支持4096个ID生成。 需要注意的是，雪花算法依赖于系统的时钟，需要确保系统时钟的准确性和单调性，否则可能会导致生成的ID不唯一或不符合预期的顺序。 雪花算法是一种简单但有效的生成唯一ID的算法，广泛应用于分布式系统中，如微服务架构、分布式数据库、分布式锁等场景，以满足全局唯一标识的需求。\",\"你需要记住的: 雪花算法生成的数字,需要使用Long 或者 String类型主键!!\",\"@TableField\",\"描述：字段注解（非主键）\",\"@TableName(\\\"sys_user\\\") public class User { @TableId private Long id; @TableField(\\\"nickname\\\") private String name; private Integer age; private String email; }\",\"属性 类型 必须指定 默认值 描述 value String 否 \\\"\\\" 数据库字段名 exist boolean 否 true 是否为数据库表字段\",\"MyBatis-Plus会自动开启驼峰命名风格映射!!!\"]},\"481\":{\"h\":\"3.1 逻辑删除实现\",\"t\":[\"概念:\",\"逻辑删除，可以方便地实现对数据库记录的逻辑删除而不是物理删除。逻辑删除是指通过更改记录的状态或添加标记字段来模拟删除操作，从而保留了删除前的数据，便于后续的数据分析和恢复。\",\"物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据\",\"逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录\",\"逻辑删除实现:\",\"数据库和实体类添加逻辑删除字段\",\"表添加逻辑删除字段\",\"可以是一个布尔类型、整数类型或枚举类型。\",\"ALTER TABLE USER ADD deleted INT DEFAULT 0 ; # int 类型 1 逻辑删除 0 未逻辑删除\",\"实体类添加逻辑删除属性\",\"@Data public class User { // @TableId private Integer id; private String name; private Integer age; private String email; @TableLogic //逻辑删除字段 int mybatis-plus下,默认 逻辑删除值为1 未逻辑删除 1 private Integer deleted; }\",\"指定逻辑删除字段和属性值\",\"单一指定\",\"@Data public class User { // @TableId private Integer id; private String name; private Integer age; private String email; @TableLogic //逻辑删除字段 int mybatis-plus下,默认 逻辑删除值为1 未逻辑删除 1 private Integer deleted; }\",\"全局指定\",\"mybatis-plus: global-config: db-config: logic-delete-field: deleted # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2) logic-delete-value: 1 # 逻辑已删除值(默认为 1) logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\",\"演示逻辑删除操作\",\"逻辑删除以后,没有真正的删除语句,删除改为修改语句! 删除代码:\",\"//逻辑删除 @Test public void testQuick5(){ //逻辑删除 userMapper.deleteById(5); }\",\"执行效果:\",\"JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@5871a482] will not be managed by Spring ==> Preparing: UPDATE user SET deleted=1 WHERE id=? AND deleted=0 ==> Parameters: 5(Integer) <== Updates: 1\",\"测试查询数据\",\"@Test public void testQuick6(){ //正常查询.默认查询非逻辑删除数据 userMapper.selectList(null); } //SELECT id,name,age,email,deleted FROM user WHERE deleted=0\"]},\"482\":{\"h\":\"3.2 乐观锁实现\"},\"483\":{\"h\":\"3.2.1 悲观锁和乐观锁场景和介绍\",\"t\":[\"并发问题场景演示:\",\"**解决思路: **\",\"乐观锁和悲观锁是在并发编程中用于处理并发访问和资源竞争的两种不同的锁机制!!\",\"悲观锁： 悲观锁的基本思想是，在整个数据访问过程中，将共享资源锁定，以确保其他线程或进程不能同时访问和修改该资源。悲观锁的核心思想是\\\"先保护，再修改\\\"。在悲观锁的应用中，线程在访问共享资源之前会获取到锁，并在整个操作过程中保持锁的状态，阻塞其他线程的访问。只有当前线程完成操作后，才会释放锁，让其他线程继续操作资源。这种锁机制可以确保资源独占性和数据的一致性，但是在高并发环境下，悲观锁的效率相对较低。\",\"乐观锁： 乐观锁的基本思想是，认为并发冲突的概率较低，因此不需要提前加锁，而是在数据更新阶段进行冲突检测和处理。乐观锁的核心思想是\\\"先修改，后校验\\\"。在乐观锁的应用中，线程在读取共享资源时不会加锁，而是记录特定的版本信息。当线程准备更新资源时，会先检查该资源的版本信息是否与之前读取的版本信息一致，如果一致则执行更新操作，否则说明有其他线程修改了该资源，需要进行相应的冲突处理。乐观锁通过避免加锁操作，提高了系统的并发性能和吞吐量，但是在并发冲突较为频繁的情况下，乐观锁会导致较多的冲突处理和重试操作。\",\"理解点: 悲观锁和乐观锁是两种解决并发数据问题的思路,不是具体技术!!!\",\"具体技术和方案:\",\"乐观锁实现方案和技术： \",\"版本号/时间戳：为数据添加一个版本号或时间戳字段，每次更新数据时，比较当前版本号或时间戳与期望值是否一致，若一致则更新成功，否则表示数据已被修改，需要进行冲突处理。\",\"CAS（Compare-and-Swap）：使用原子操作比较当前值与旧值是否一致，若一致则进行更新操作，否则重新尝试。\",\"无锁数据结构：采用无锁数据结构，如无锁队列、无锁哈希表等，通过使用原子操作实现并发安全。\",\"悲观锁实现方案和技术： \",\"锁机制：使用传统的锁机制，如互斥锁（Mutex Lock）或读写锁（Read-Write Lock）来保证对共享资源的独占访问。\",\"数据库锁：在数据库层面使用行级锁或表级锁来控制并发访问。\",\"信号量（Semaphore）：使用信号量来限制对资源的并发访问。\",\"介绍版本号乐观锁技术的实现流程:\",\"每条数据添加一个版本号字段version\",\"取出记录时，获取当前 version\",\"更新时，检查获取版本号是不是数据库当前最新版本号\",\"如果是[证明没有人修改数据], 执行更新, set 数据更新 , version = version+ 1 \",\"如果 version 不对[证明有人已经修改了]，我们现在的其他记录就是失效数据!就更新失败\"]},\"484\":{\"h\":\"3.2.2 使用mybatis-plus数据使用乐观锁\",\"t\":[\" 1. 添加版本号更新插件\",\"@Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor()); return interceptor; }\",\"乐观锁字段添加@Version注解\",\"注意: 数据库也需要添加version字段\",\"ALTER TABLE USER ADD VERSION INT DEFAULT 1 ; # int 类型 乐观锁字段\",\"支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime\",\"仅支持 updateById(id) 与 update(entity, wrapper) 方法\",\"@Version private Integer version;\",\"正常更新使用即可\",\"//演示乐观锁生效场景 @Test public void testQuick7(){ //步骤1: 先查询,在更新 获取version数据 //同时查询两条,但是version唯一,最后更新的失败 User user = userMapper.selectById(5); User user1 = userMapper.selectById(5); user.setAge(20); user1.setAge(30); userMapper.updateById(user); //乐观锁生效,失败! userMapper.updateById(user1); }\"]},\"485\":{\"h\":\"3.3 防全表更新和删除实现\",\"t\":[\"针对 update 和 delete 语句 作用: 阻止恶意的全表更新删除\",\"添加防止全表更新和删除拦截器\",\"@Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new BlockAttackInnerInterceptor()); return interceptor; } }\",\"测试全部更新或者删除\",\"@Test public void testQuick8(){ User user = new User(); user.setName(\\\"custom_name\\\"); user.setEmail(\\\"xxx@mail.com\\\"); //Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Prohibition of table update operation //全局更新,报错 userService.saveOrUpdate(user,null); }\"]},\"486\":{\"h\":\"4.1 Mybatisx插件逆向工程\",\"t\":[\"MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率\",\"但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件\",\"MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。\"]},\"487\":{\"h\":\"4.2 MyBatisX快速代码生成\",\"t\":[\"使用mybatisX插件,自动生成sql语句实现\",\"https://baomidou.com/pages/ba5b24/#功能\"]},\"488\":{\"h\":\"三、MyBatis实践：提高持久层数据处理效率\"},\"489\":{\"h\":\"目录\",\"t\":[\"一、Mybatis简介\",\"1.1 简介\",\"1.2 持久层框架对比\",\"1.3 快速入门（基于Mybatis3方式）\",\"二、MyBatis基本使用\",\"2.1 向SQL语句传参\",\"2.1.1 mybatis日志输出配置\",\"2.1.2 #{}形式\",\"2.1.3 ${}形式\",\"2.2 数据输入\",\"2.2.1 Mybatis总体机制概括\",\"2.2.2 概念说明\",\"2.2.3 单个简单类型参数\",\"2.2.4 实体类类型参数\",\"2.2.5 零散的简单类型数据\",\"2.2.6 Map类型参数\",\"2.3数据输出\",\"2.3.1 输出概述\",\"2.3.2 单个简单类型\",\"2.3.3 返回实体类对象\",\"2.3.4 返回Map类型\",\"2.3.5 返回List类型\",\"2.3.6 返回主键值\",\"2.3.7 实体类属性和数据库字段对应关系\",\"2.4 CRUD强化练习\",\"2.5 mapperXML标签总结\",\"三、MyBatis多表映射\",\"3.1 多表映射概念\",\"3.2 对一映射\",\"3.3 对多映射\",\"3.4 多表映射总结\",\"3.4.1 多表映射优化\",\"3.4.2 多表映射总结\",\"四、MyBatis动态语句\",\"4.1 动态语句需求和简介\",\"4.2 if和where标签\",\"4.3 set标签\",\"4.4 trim标签(了解)\",\"4.5 choose/when/otherwise标签\",\"4.6 foreach标签\",\"4.7 sql片段\",\"五、MyBatis高级扩展\",\"5.1 Mapper批量映射优化\",\"5.2 插件和分页插件PageHelper\",\"5.2.1 插件机制和PageHelper插件介绍\",\"5.2.2 PageHelper插件使用\",\"5.3 逆向工程和MybatisX插件\",\"5.3.1 ORM思维介绍\",\"5.3.2 逆向工程\",\"5.3.3 逆向工程插件MyBatisX使用\",\"六、MyBatis总结\"]},\"490\":{\"h\":\"一、Mybatis简介\"},\"491\":{\"h\":\"1.1 简介\",\"t\":[\"https://mybatis.org/mybatis-3/zh/index.html\",\"MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github。\",\"MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。\",\"社区会持续更新开源项目，版本会不断变化，我们不必每个小版本都追，关注重大更新的大版本升级即可。\",\"本课程使用：3.5.11版本\"]},\"492\":{\"h\":\"1.2 持久层框架对比\",\"t\":[\"JDBC \",\"SQL 夹杂在Java代码中耦合度高，导致硬编码内伤\",\"维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见\",\"代码冗长，开发效率低\",\"Hibernate 和 JPA \",\"操作简便，开发效率高\",\"程序中的长难复杂 SQL 需要绕过框架\",\"内部自动生成的 SQL，不容易做特殊优化\",\"基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。\",\"反射操作太多，导致数据库性能下降\",\"MyBatis \",\"轻量级，性能出色\",\"SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据\",\"开发效率稍逊于 Hibernate，但是完全能够接收\",\"开发效率：Hibernate>Mybatis>JDBC\",\"运行效率：JDBC>Mybatis>Hibernate\"]},\"493\":{\"h\":\"1.3 快速入门（基于Mybatis3方式）\",\"t\":[\"准备数据模型\",\"CREATE DATABASE `mybatis-example`; USE `mybatis-example`; CREATE TABLE `t_emp`( emp_id INT AUTO_INCREMENT, emp_name CHAR(100), emp_salary DOUBLE(10,5), PRIMARY KEY(emp_id) ); INSERT INTO `t_emp`(emp_name,emp_salary) VALUES(\\\"tom\\\",200.33); INSERT INTO `t_emp`(emp_name,emp_salary) VALUES(\\\"jerry\\\",666.66); INSERT INTO `t_emp`(emp_name,emp_salary) VALUES(\\\"andy\\\",777.77);\",\"项目搭建和准备\",\"项目搭建\",\"依赖导入\",\"pom.xml\",\"<dependencies> <!-- mybatis依赖 --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.11</version> </dependency> <!-- MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带! --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> </dependencies>\",\"实体类准备\",\"public class Employee { private Integer empId; private String empName; private Double empSalary; //getter | setter }\",\"准备Mapper接口和MapperXML文件\",\"MyBatis 框架下，SQL语句编写位置发生改变，从原来的Java类，改成XML或者注解定义！\",\"推荐在XML文件中编写SQL语句，让用户能更专注于 SQL 代码，不用关注其他的JDBC代码。\",\"如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码！！\",\"一般编写SQL语句的文件命名：XxxMapper.xml Xxx一般取表名！！\",\"Mybatis 中的 Mapper 接口相当于以前的 Dao。但是区别在于，Mapper 仅仅只是建接口即可，我们不需要提供实现类，具体的SQL写到对应的Mapper文件，该用法的思路如下图所示：\",\"定义mapper接口\",\"包：com.atguigu.mapper\",\"package com.atguigu.mapper; import com.atguigu.pojo.Employee; /** * t_emp表对应数据库SQL语句映射接口! * 接口只规定方法,参数和返回值! * mapper.xml中编写具体SQL语句! */ public interface EmployeeMapper { /** * 根据员工id查询员工数据方法 * @param empId 员工id * @return 员工实体对象 */ Employee selectEmployee(Integer empId); }\",\"定义mapper xml\",\"位置： resources/mappers/EmployeeMapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace等于mapper接口类的全限定名,这样实现对应 --> <mapper namespace=\\\"com.atguigu.mapper.EmployeeMapper\\\"> <!-- 查询使用 select标签 id = 方法名 resultType = 返回值类型 标签内编写SQL语句 --> <select id=\\\"selectEmployee\\\" resultType=\\\"com.atguigu.pojo.Employee\\\"> <!-- #{empId}代表动态传入的参数,并且进行赋值!后面详细讲解 --> select emp_id empId,emp_name empName, emp_salary empSalary from t_emp where emp_id = #{empId} </select> </mapper>\",\"注意：\",\"方法名和SQL的id一致\",\"方法返回值和resultType一致\",\"方法的参数和SQL的参数一致\",\"接口的全类名和映射配置文件的名称空间一致\",\"准备MyBatis配置文件\",\"mybatis框架配置文件： 数据库连接信息，性能配置，mapper.xml配置等！\",\"习惯上命名为 mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合 Spring 之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --> <environments default=\\\"development\\\"> <!-- environment表示配置Mybatis的一个具体的环境 --> <environment id=\\\"development\\\"> <!-- Mybatis的内置的事务管理器 --> <transactionManager type=\\\"JDBC\\\"/> <!-- 配置数据源 --> <dataSource type=\\\"POOLED\\\"> <!-- 建立数据库连接的具体信息 --> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/mybatis-example\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"root\\\"/> </dataSource> </environment> </environments> <mappers> <!-- Mapper注册：指定Mybatis映射文件的具体位置 --> <!-- mapper标签：配置一个具体的Mapper映射文件 --> <!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --> <!-- 对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --> <mapper resource=\\\"mappers/EmployeeMapper.xml\\\"/> </mappers> </configuration>\",\"运行和测试\",\"/** * projectName: com.atguigu.test * * description: 测试类 */ public class MyBatisTest { @Test public void testSelectEmployee() throws IOException { // 1.创建SqlSessionFactory对象 // ①声明Mybatis全局配置文件的路径 String mybatisConfigFilePath = \\\"mybatis-config.xml\\\"; // ②以输入流的形式加载Mybatis配置文件 InputStream inputStream = Resources.getResourceAsStream(mybatisConfigFilePath); // ③基于读取Mybatis配置文件的输入流创建SqlSessionFactory对象 SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // 2.使用SqlSessionFactory对象开启一个会话 SqlSession session = sessionFactory.openSession(); // 3.根据EmployeeMapper接口的Class对象获取Mapper接口类型的对象(动态代理技术) EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class); // 4. 调用代理类方法既可以触发对应的SQL语句 Employee employee = employeeMapper.selectEmployee(1); System.out.println(\\\"employee = \\\" + employee); // 4.关闭SqlSession session.commit(); //提交事务 [DQL不需要,其他需要] session.close(); //关闭会话 } }\",\"说明：\",\"SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）\",\"SqlSessionFactory：是“生产”SqlSession的“工厂”。\",\"工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。\",\"SqlSession和HttpSession区别\",\"HttpSession：工作在Web服务器上，属于表述层。 \",\"代表浏览器和Web服务器之间的会话。\",\"SqlSession：不依赖Web服务器，属于持久化层。 \",\"代表Java程序和数据库之间的会话。 \"]},\"494\":{\"h\":\"二、MyBatis基本使用\"},\"495\":{\"h\":\"2.1 向SQL语句传参\"},\"496\":{\"h\":\"2.1.1\",\"t\":[\"mybatis配置文件设计标签和顶层结构如下：\",\"configuration（配置） \",\"properties（属性）\",\"settings（设置）\",\"typeAliases（类型别名）\",\"typeHandlers（类型处理器）\",\"objectFactory（对象工厂）\",\"plugins（插件）\",\"environments（环境配置）\",\"environment（环境变量） \",\"transactionManager（事务管理器）\",\"dataSource（数据源）\",\"databaseIdProvider（数据库厂商标识）\",\"mappers（映射器）\",\"我们可以在mybatis的配置文件使用settings标签设置，输出运过程SQL日志！\",\"通过查看日志，我们可以判定#{} 和 ${}的输出效果！\",\"settings设置项：\",\"logImpl\",\"指定 MyBatis 所用日志的具体实现，未指定时将自动查找。\",\"SLF4J | LOG4J（3.5.9 起废弃） | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING\",\"未设置\",\"日志配置：\",\"<settings> <!-- SLF4J 选择slf4j输出！ --> <setting name=\\\"logImpl\\\" value=\\\"SLF4J\\\"/> </settings>\"]},\"497\":{\"h\":\"2.1.2\",\"t\":[\"Mybatis会将SQL语句中的#{}转换为问号占位符。\"]},\"498\":{\"h\":\"2.1.3\",\"t\":[\"${}形式传参，底层Mybatis做的是字符串拼接操作。\",\"通常不会采用${}的方式传值。一个特定的适用场景是：通过Java程序动态生成数据库表，表名部分需要Java程序通过参数传入；而JDBC对于表名部分是不能使用问号占位符的，此时只能使用\",\"结论：实际开发中，能用#{}实现的，肯定不用${}。\",\"特殊情况： 动态的不是值，是列名或者关键字，需要使用${}拼接\",\"//注解方式传入参数！！ @Select(\\\"select * from user where ${column} = #{value}\\\") User findByColumn(@Param(\\\"column\\\") String column, @Param(\\\"value\\\") String value);\"]},\"499\":{\"h\":\"2.2 数据输入\"},\"500\":{\"h\":\"2.2.1\"},\"501\":{\"h\":\"2.2.2\",\"t\":[\"这里数据输入具体是指上层方法（例如Service方法）调用Mapper接口时，数据传入的形式。\",\"简单类型：只包含一个值的数据类型 \",\"基本数据类型：int、byte、short、double、……\",\"基本数据类型的包装类型：Integer、Character、Double、……\",\"字符串类型：String\",\"复杂类型：包含多个值的数据类型 \",\"实体类类型：Employee、Department、……\",\"集合类型：List、Set、Map、……\",\"数组类型：int[]、String[]、……\",\"复合类型：List<Employee>、实体类中包含集合……\"]},\"502\":{\"h\":\"2.2.3\",\"t\":[\"Mapper接口中抽象方法的声明\",\"Employee selectEmployee(Integer empId);\",\"SQL语句\",\"<select id=\\\"selectEmployee\\\" resultType=\\\"com.atguigu.mybatis.entity.Employee\\\"> select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#{empId} </select>\",\"单个简单类型参数，在#{}中可以随意命名，但是没有必要。通常还是使用和接口方法参数同名。\"]},\"503\":{\"h\":\"2.2.4\",\"t\":[\"Mapper接口中抽象方法的声明\",\"int insertEmployee(Employee employee);\",\"SQL语句\",\"<insert id=\\\"insertEmployee\\\"> insert into t_emp(emp_name,emp_salary) values(#{empName},#{empSalary}) </insert>\",\"对应关系\",\"结论\",\"Mybatis会根据#{}中传入的数据，加工成getXxx()方法，通过反射在实体类对象中调用这个方法，从而获取到对应的数据。填充到#{}解析后的问号占位符这个位置。\"]},\"504\":{\"h\":\"2.2.5\",\"t\":[\"零散的多个简单类型参数，如果没有特殊处理，那么Mybatis无法识别自定义名称：\",\"Mapper接口中抽象方法的声明\",\"int updateEmployee(@Param(\\\"empId\\\") Integer empId,@Param(\\\"empSalary\\\") Double empSalary);\",\"SQL语句\",\"<update id=\\\"updateEmployee\\\"> update t_emp set emp_salary=#{empSalary} where emp_id=#{empId} </update>\",\"对应关系\"]},\"505\":{\"h\":\"2.2.6\",\"t\":[\"Mapper接口中抽象方法的声明\",\"int updateEmployeeByMap(Map<String, Object> paramMap);\",\"SQL语句\",\"<update id=\\\"updateEmployeeByMap\\\"> update t_emp set emp_salary=#{empSalaryKey} where emp_id=#{empIdKey} </update>\",\"junit测试\",\"private SqlSession session; //junit5会在每一个@Test方法前执行@BeforeEach方法 @BeforeEach public void init() throws IOException { session = new SqlSessionFactoryBuilder() .build( Resources.getResourceAsStream(\\\"mybatis-config.xml\\\")) .openSession(); } @Test public void testUpdateEmpNameByMap() { EmployeeMapper mapper = session.getMapper(EmployeeMapper.class); Map<String, Object> paramMap = new HashMap<>(); paramMap.put(\\\"empSalaryKey\\\", 999.99); paramMap.put(\\\"empIdKey\\\", 5); int result = mapper.updateEmployeeByMap(paramMap); log.info(\\\"result = \\\" + result); } //junit5会在每一个@Test方法后执行@@AfterEach方法 @AfterEach public void clear() { session.commit(); session.close(); }\",\"对应关系\",\"#{}中写Map中的key\",\"使用场景\",\"有很多零散的参数需要传递，但是没有对应的实体类类型可以使用。使用@Param注解一个一个传入又太麻烦了。所以都封装到Map中。\"]},\"506\":{\"h\":\"2.3数据输出\"},\"507\":{\"h\":\"2.3.1 输出概述\",\"t\":[\"数据输出总体上有两种形式：\",\"增删改操作返回的受影响行数：直接使用 int 或 long 类型接收即可\",\"查询操作的查询结果\",\"我们需要做的是，指定查询的输出数据类型即可！\",\"并且插入场景下，实现主键数据回显示！\"]},\"508\":{\"h\":\"2.3.2 单个简单类型\",\"t\":[\"Mapper接口中的抽象方法\",\"int selectEmpCount();\",\"SQL语句\",\"<select id=\\\"selectEmpCount\\\" resultType=\\\"int\\\"> select count(*) from t_emp </select>\",\"Mybatis 内部给常用的数据类型设定了很多别名。 以 int 类型为例，可以写的名称有：int、integer、Integer、java.lang.Integer、Int、INT、INTEGER 等等。\",\"junit测试\",\"@Test public void testEmpCount() { EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class); int count = employeeMapper.selectEmpCount(); log.info(\\\"count = \\\" + count); }\",\"细节解释：\",\"select标签，通过resultType指定查询返回值类型！\",\"resultType = \\\"全限定符 ｜ 别名 ｜ 如果是返回集合类型，写范型类型即可\\\"\",\"别名问题：\",\"https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases\",\"类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：\",\"<typeAliases> <typeAlias alias=\\\"Author\\\" type=\\\"domain.blog.Author\\\"/> <typeAlias alias=\\\"Blog\\\" type=\\\"domain.blog.Blog\\\"/> </typeAliases>\",\"当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。\",\"也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：\",\"<typeAliases> <package name=\\\"domain.blog\\\"/> </typeAliases>\",\"每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。见下面的例子：\",\"@Alias(\\\"author\\\") public class Author { ... }\",\"下面是Mybatis为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。\",\"别名\",\"映射的类型\",\"_byte\",\"byte\",\"_char (since 3.5.10)\",\"char\",\"_character (since 3.5.10)\",\"char\",\"_long\",\"long\",\"_short\",\"short\",\"_int\",\"int\",\"_integer\",\"int\",\"_double\",\"double\",\"_float\",\"float\",\"_boolean\",\"boolean\",\"string\",\"String\",\"byte\",\"Byte\",\"char (since 3.5.10)\",\"Character\",\"character (since 3.5.10)\",\"Character\",\"long\",\"Long\",\"short\",\"Short\",\"int\",\"Integer\",\"integer\",\"Integer\",\"double\",\"Double\",\"float\",\"Float\",\"boolean\",\"Boolean\",\"date\",\"Date\",\"decimal\",\"BigDecimal\",\"bigdecimal\",\"BigDecimal\",\"biginteger\",\"BigInteger\",\"object\",\"Object\",\"object[]\",\"Object[]\",\"map\",\"Map\",\"hashmap\",\"HashMap\",\"list\",\"List\",\"arraylist\",\"ArrayList\",\"collection\",\"Collection\"]},\"509\":{\"h\":\"2.3.3 返回实体类对象\",\"t\":[\"Mapper接口的抽象方法\",\"Employee selectEmployee(Integer empId);\",\"SQL语句\",\"<!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --> <!-- resultType属性：指定封装查询结果的Java实体类的全类名 --> <select id=\\\"selectEmployee\\\" resultType=\\\"com.atguigu.mybatis.entity.Employee\\\"> <!-- Mybatis负责把SQL语句中的#{}部分替换成“?”占位符 --> <!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --> select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#{maomi} </select>\",\"通过给数据库表字段加别名，让查询结果的每一列都和Java实体类中属性对应起来。\",\"增加全局配置自动识别对应关系\",\"在 Mybatis 全局配置文件中，做了下面的配置，select语句中可以不给字段设置别名\",\"<!-- 在全局范围内对Mybatis进行配置 --> <settings> <!-- 具体配置 --> <!-- 从org.apache.ibatis.session.Configuration类中可以查看能使用的配置项 --> <!-- 将mapUnderscoreToCamelCase属性配置为true，表示开启自动映射驼峰式命名规则 --> <!-- 规则要求数据库表字段命名方式：单词_单词 --> <!-- 规则要求Java实体类属性名命名方式：首字母小写的驼峰式命名 --> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> </settings>\"]},\"510\":{\"h\":\"2.3.4 返回Map类型\",\"t\":[\"适用于SQL查询返回的各个字段综合起来并不和任何一个现有的实体类对应，没法封装到实体类对象中。能够封装成实体类类型的，就不使用Map类型。\",\"Mapper接口的抽象方法\",\"Map<String,Object> selectEmpNameAndMaxSalary();\",\"SQL语句\",\"<!-- Map<String,Object> selectEmpNameAndMaxSalary(); --> <!-- 返回工资最高的员工的姓名和他的工资 --> <select id=\\\"selectEmpNameAndMaxSalary\\\" resultType=\\\"map\\\"> SELECT emp_name 员工姓名, emp_salary 员工工资, (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资 FROM t_emp WHERE emp_salary=( SELECT MAX(emp_salary) FROM t_emp ) </select>\",\"junit测试\",\"@Test public void testQueryEmpNameAndSalary() { EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class); Map<String, Object> resultMap = employeeMapper.selectEmpNameAndMaxSalary(); Set<Map.Entry<String, Object>> entrySet = resultMap.entrySet(); for (Map.Entry<String, Object> entry : entrySet) { String key = entry.getKey(); Object value = entry.getValue(); log.info(key + \\\"=\\\" + value); } }\"]},\"511\":{\"h\":\"2.3.5 返回List类型\",\"t\":[\"查询结果返回多个实体类对象，希望把多个实体类对象放在List集合中返回。此时不需要任何特殊处理，在resultType属性中还是设置实体类类型即可。\",\"Mapper接口中抽象方法\",\"List<Employee> selectAll();\",\"SQL语句\",\"<!-- List<Employee> selectAll(); --> <select id=\\\"selectAll\\\" resultType=\\\"com.atguigu.mybatis.entity.Employee\\\"> select emp_id empId,emp_name empName,emp_salary empSalary from t_emp </select>\",\"junit测试\",\"@Test public void testSelectAll() { EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class); List<Employee> employeeList = employeeMapper.selectAll(); for (Employee employee : employeeList) { log.info(\\\"employee = \\\" + employee); } }\"]},\"512\":{\"h\":\"2.3.6 返回主键值\",\"t\":[\"自增长类型主键\",\"Mapper接口中的抽象方法\",\"int insertEmployee(Employee employee);\",\"SQL语句\",\"<!-- int insertEmployee(Employee employee); --> <!-- useGeneratedKeys属性字面意思就是“使用生成的主键” --> <!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 --> <insert id=\\\"insertEmployee\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"empId\\\"> insert into t_emp(emp_name,emp_salary) values(#{empName},#{empSalary}) </insert>\",\"junit测试\",\"@Test public void testSaveEmp() { EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class); Employee employee = new Employee(); employee.setEmpName(\\\"john\\\"); employee.setEmpSalary(666.66); employeeMapper.insertEmployee(employee); log.info(\\\"employee.getEmpId() = \\\" + employee.getEmpId()); }\",\"注意\",\"Mybatis是将自增主键的值设置到实体类对象中，而不是以Mapper接口方法返回值的形式返回。\",\"非自增长类型主键\",\"而对于不支持自增型主键的数据库（例如 Oracle）或者字符串类型主键，则可以使用 selectKey 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用！\",\"使用 selectKey 帮助插入UUID作为字符串类型主键示例：\",\"<insert id=\\\"insertUser\\\" parameterType=\\\"User\\\"> <selectKey keyProperty=\\\"id\\\" resultType=\\\"java.lang.String\\\" order=\\\"BEFORE\\\"> SELECT UUID() as id </selectKey> INSERT INTO user (id, username, password) VALUES ( #{id}, #{username}, #{password} ) </insert>\",\"在上例中，我们定义了一个 insertUser 的插入语句来将 User 对象插入到 user 表中。我们使用 selectKey 来查询 UUID 并设置到 id 字段中。\",\"通过 keyProperty 属性来指定查询到的 UUID 赋值给对象中的 id 属性，而 resultType 属性指定了 UUID 的类型为 java.lang.String。\",\"需要注意的是，我们将 selectKey 放在了插入语句的前面，这是因为 MySQL 在 insert 语句中只支持一个 select 子句，而 selectKey 中查询 UUID 的语句就是一个 select 子句，因此我们需要将其放在前面。\",\"最后，在将 User 对象插入到 user 表中时，我们直接使用对象中的 id 属性来插入主键值。\",\"使用这种方式，我们可以方便地插入 UUID 作为字符串类型主键。当然，还有其他插入方式可以使用，如使用Java代码生成UUID并在类中显式设置值等。需要根据具体应用场景和需求选择合适的插入方式。\"]},\"513\":{\"h\":\"2.3.7 实体类属性和数据库字段对应关系\",\"t\":[\"别名对应\",\"将字段的别名设置成和实体类属性一致。\",\"<!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --> <!-- resultType属性：指定封装查询结果的Java实体类的全类名 --> <select id=\\\"selectEmployee\\\" resultType=\\\"com.atguigu.mybatis.entity.Employee\\\"> <!-- Mybatis负责把SQL语句中的#{}部分替换成“?”占位符 --> <!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --> select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#{maomi} </select>\",\"关于实体类属性的约定： getXxx()方法、setXxx()方法把方法名中的get或set去掉，首字母小写。\",\"全局配置自动识别驼峰式命名规则\",\"在Mybatis全局配置文件加入如下配置：\",\"<!-- 使用settings对Mybatis全局进行设置 --> <settings> <!-- 将xxx_xxx这样的列名自动映射到xxXxx这样驼峰式命名的属性名 --> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> </settings>\",\"SQL语句中可以不使用别名\",\"<!-- Employee selectEmployee(Integer empId); --> <select id=\\\"selectEmployee\\\" resultType=\\\"com.atguigu.mybatis.entity.Employee\\\"> select emp_id,emp_name,emp_salary from t_emp where emp_id=#{empId} </select>\",\"使用resultMap\",\"使用resultMap标签定义对应关系，再在后面的SQL语句中引用这个对应关系\",\"<!-- 专门声明一个resultMap设定column到property之间的对应关系 --> <resultMap id=\\\"selectEmployeeByRMResultMap\\\" type=\\\"com.atguigu.mybatis.entity.Employee\\\"> <!-- 使用id标签设置主键列和主键属性之间的对应关系 --> <!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --> <id column=\\\"emp_id\\\" property=\\\"empId\\\"/> <!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --> <result column=\\\"emp_name\\\" property=\\\"empName\\\"/> <result column=\\\"emp_salary\\\" property=\\\"empSalary\\\"/> </resultMap> <!-- Employee selectEmployeeByRM(Integer empId); --> <select id=\\\"selectEmployeeByRM\\\" resultMap=\\\"selectEmployeeByRMResultMap\\\"> select emp_id,emp_name,emp_salary from t_emp where emp_id=#{empId} </select>\"]},\"514\":{\"h\":\"2.4 CRUD强化练习\",\"t\":[\"准备数据库数据\",\"首先，我们需要准备一张名为 user 的表。该表包含字段 id（主键）、username、password。创建SQL如下：\",\"CREATE TABLE `user` ( `id` INT(11) NOT NULL AUTO_INCREMENT, `username` VARCHAR(50) NOT NULL, `password` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\",\"实体类准备\",\"接下来，我们需要定义一个实体类 User，来对应 user 表的一行数据。\",\"@Data //lombok public class User { private Integer id; private String username; private String password; }\",\"Mapper接口定义\",\"定义一个 Mapper 接口 UserMapper，并在其中添加 user 表的增、删、改、查方法。\",\"public interface UserMapper { int insert(User user); int update(User user); int delete(Integer id); User selectById(Integer id); List<User> selectAll(); }\",\"MapperXML编写\",\"在 resources /mappers目录下创建一个名为 UserMapper.xml 的 XML 文件，包含与 Mapper 接口中相同的五个 SQL 语句，并在其中，将查询结果映射到 User 实体中。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace等于mapper接口类的全限定名,这样实现对应 --> <mapper namespace=\\\"com.atguigu.mapper.UserMapper\\\"> <!-- 定义一个插入语句，并获取主键值 --> <insert id=\\\"insert\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"id\\\"> INSERT INTO user(username, password) VALUES(#{username}, #{password}) </insert> <update id=\\\"update\\\"> UPDATE user SET username=#{username}, password=#{password} WHERE id=#{id} </update> <delete id=\\\"delete\\\"> DELETE FROM user WHERE id=#{id} </delete> <!-- resultType使用user别名，稍后需要配置！--> <select id=\\\"selectById\\\" resultType=\\\"user\\\"> SELECT id, username, password FROM user WHERE id=#{id} </select> <!-- resultType返回值类型为集合，所以只写范型即可！ --> <select id=\\\"selectAll\\\" resultType=\\\"user\\\"> SELECT id, username, password FROM user </select> </mapper>\",\"MyBatis配置文件\",\"位置：resources: mybatis-config.xml \",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <settings> <!-- 开启驼峰式映射--> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> <!-- 开启logback日志输出--> <setting name=\\\"logImpl\\\" value=\\\"SLF4J\\\"/> </settings> <typeAliases> <!-- 给实体类起别名 --> <package name=\\\"com.atguigu.pojo\\\"/> </typeAliases> <!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --> <environments default=\\\"development\\\"> <!-- environment表示配置Mybatis的一个具体的环境 --> <environment id=\\\"development\\\"> <!-- Mybatis的内置的事务管理器 --> <transactionManager type=\\\"JDBC\\\"/> <!-- 配置数据源 --> <dataSource type=\\\"POOLED\\\"> <!-- 建立数据库连接的具体信息 --> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/mybatis-example\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"root\\\"/> </dataSource> </environment> </environments> <mappers> <!-- Mapper注册：指定Mybatis映射文件的具体位置 --> <!-- mapper标签：配置一个具体的Mapper映射文件 --> <!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --> <!-- 对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --> <mapper resource=\\\"mappers/UserMapper.xml\\\"/> </mappers> </configuration>\",\"效果测试\",\"package com.atguigu.test; import com.atguigu.mapper.UserMapper; import com.atguigu.pojo.User; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import org.junit.jupiter.api.AfterEach; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; import java.io.IOException; import java.util.List; /** * projectName: com.atguigu.test */ public class MyBatisTest { private SqlSession session; // junit会在每一个@Test方法前执行@BeforeEach方法 @BeforeEach public void init() throws IOException { session = new SqlSessionFactoryBuilder() .build( Resources.getResourceAsStream(\\\"mybatis-config.xml\\\")) .openSession(); } @Test public void createTest() { User user = new User(); user.setUsername(\\\"admin\\\"); user.setPassword(\\\"123456\\\"); UserMapper userMapper = session.getMapper(UserMapper.class); userMapper.insert(user); System.out.println(user); } @Test public void updateTest() { UserMapper userMapper = session.getMapper(UserMapper.class); User user = userMapper.selectById(1); user.setUsername(\\\"root\\\"); user.setPassword(\\\"111111\\\"); userMapper.update(user); user = userMapper.selectById(1); System.out.println(user); } @Test public void deleteTest() { UserMapper userMapper = session.getMapper(UserMapper.class); userMapper.delete(1); User user = userMapper.selectById(1); System.out.println(\\\"user = \\\" + user); } @Test public void selectByIdTest() { UserMapper userMapper = session.getMapper(UserMapper.class); User user = userMapper.selectById(1); System.out.println(\\\"user = \\\" + user); } @Test public void selectAllTest() { UserMapper userMapper = session.getMapper(UserMapper.class); List<User> userList = userMapper.selectAll(); System.out.println(\\\"userList = \\\" + userList); } // junit会在每一个@Test方法后执行@@AfterEach方法 @AfterEach public void clear() { session.commit(); session.close(); } }\"]},\"515\":{\"h\":\"2.5 mapperXML标签总结\",\"t\":[\"MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。\",\"SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：\",\"insert – 映射插入语句。\",\"update – 映射更新语句。\",\"delete – 映射删除语句。\",\"select – 映射查询语句。\",\"select标签：\",\"MyBatis 在查询和结果映射做了相当多的改进。一个简单查询的 select 元素是非常简单：\",\"<select id=\\\"selectPerson\\\" resultType=\\\"hashmap\\\" resultMap=\\\"自定义结构\\\"> SELECT * FROM PERSON WHERE ID = #{id} </select>\",\"这个语句名为 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。\",\"注意参数符号：#{id} $\",\"MyBatis 创建一个预处理语句（PreparedStatement）参数，在 JDBC 中，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样：\",\"// 近似的 JDBC 代码，非 MyBatis 代码... String selectPerson = \\\"SELECT * FROM PERSON WHERE ID=?\\\"; PreparedStatement ps = conn.prepareStatement(selectPerson); ps.setInt(1,id);\",\"select 元素允许你配置很多属性来配置每条语句的行为细节：\",\"属性\",\"描述\",\"id\",\"在命名空间中唯一的标识符，可以被用来引用这条语句。\",\"resultType\",\"期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。\",\"resultMap\",\"对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。\",\"timeout\",\"这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。\",\"statementType\",\"可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。\",\"insert, update 和 delete标签：\",\"数据变更语句 insert，update 和 delete 的实现非常接近：\",\"<insert id=\\\"insertAuthor\\\" statementType=\\\"PREPARED\\\" keyProperty=\\\"\\\" keyColumn=\\\"\\\" useGeneratedKeys=\\\"\\\" timeout=\\\"20\\\"> <update id=\\\"updateAuthor\\\" statementType=\\\"PREPARED\\\" timeout=\\\"20\\\"> <delete id=\\\"deleteAuthor\\\" statementType=\\\"PREPARED\\\" timeout=\\\"20\\\">\",\"属性\",\"描述\",\"id\",\"在命名空间中唯一的标识符，可以被用来引用这条语句。\",\"timeout\",\"这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。\",\"statementType\",\"可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。\",\"useGeneratedKeys\",\"（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。\",\"keyProperty\",\"（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。\",\"keyColumn\",\"（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。\"]},\"516\":{\"h\":\"三、MyBatis多表映射\"},\"517\":{\"h\":\"3.1 多表映射概念\",\"t\":[\"多表查询结果映射思路\",\"上面课程中，我全面讲解了单表的mybatis操作！但是开发中更多的是多表查询需求，这种情况我们如何让进行处理？\",\"MyBatis 思想是：数据库不可能永远是你所想或所需的那个样子。 我们希望每个数据库都具备良好的第三范式或 BCNF 范式，可惜它们并不都是那样。 如果能有一种数据库映射模式，完美适配所有的应用程序查询需求，那就太好了，而 ResultMap 就是 MyBatis 就是完美答案。 \",\"官方例子：我们如何映射下面这个语句？ \",\"<!-- 非常复杂的语句 --> <select id=\\\"selectBlogDetails\\\" resultMap=\\\"detailedBlogResultMap\\\"> select B.id as blog_id, B.title as blog_title, B.author_id as blog_author_id, A.id as author_id, A.username as author_username, A.password as author_password, A.email as author_email, A.bio as author_bio, A.favourite_section as author_favourite_section, P.id as post_id, P.blog_id as post_blog_id, P.author_id as post_author_id, P.created_on as post_created_on, P.section as post_section, P.subject as post_subject, P.draft as draft, P.body as post_body, C.id as comment_id, C.post_id as comment_post_id, C.name as comment_name, C.comment as comment_text, T.id as tag_id, T.name as tag_name from Blog B left outer join Author A on B.author_id = A.id left outer join Post P on B.id = P.blog_id left outer join Comment C on P.id = C.post_id left outer join Post_Tag PT on PT.post_id = P.id left outer join Tag T on PT.tag_id = T.id where B.id = #{id} </select>\",\"你可能想把它映射到一个智能的对象模型，这个对象表示了一篇博客，它由某位作者所写，有很多的博文，每篇博文有零或多条的评论和标签。 我们先来看看下面这个完整的例子，它是一个非常复杂的结果映射（假设作者，博客，博文，评论和标签都是类型别名）。 虽然它看起来令人望而生畏，但其实非常简单。 \",\"<!-- 非常复杂的结果映射 --> <resultMap id=\\\"detailedBlogResultMap\\\" type=\\\"Blog\\\"> <constructor> <idArg column=\\\"blog_id\\\" javaType=\\\"int\\\"/> </constructor> <result property=\\\"title\\\" column=\\\"blog_title\\\"/> <association property=\\\"author\\\" javaType=\\\"Author\\\"> <id property=\\\"id\\\" column=\\\"author_id\\\"/> <result property=\\\"username\\\" column=\\\"author_username\\\"/> <result property=\\\"password\\\" column=\\\"author_password\\\"/> <result property=\\\"email\\\" column=\\\"author_email\\\"/> <result property=\\\"bio\\\" column=\\\"author_bio\\\"/> <result property=\\\"favouriteSection\\\" column=\\\"author_favourite_section\\\"/> </association> <collection property=\\\"posts\\\" ofType=\\\"Post\\\"> <id property=\\\"id\\\" column=\\\"post_id\\\"/> <result property=\\\"subject\\\" column=\\\"post_subject\\\"/> <association property=\\\"author\\\" javaType=\\\"Author\\\"/> <collection property=\\\"comments\\\" ofType=\\\"Comment\\\"> <id property=\\\"id\\\" column=\\\"comment_id\\\"/> </collection> <collection property=\\\"tags\\\" ofType=\\\"Tag\\\" > <id property=\\\"id\\\" column=\\\"tag_id\\\"/> </collection> </collection> </resultMap>\",\"你现在可能看不懂，接下来我们要学习将多表查询结果使用ResultMap标签映射到实体类对象上！\",\"我们的学习目标：\",\"多表查询语句使用\",\"多表结果承接实体类设计\",\"使用ResultMap完成多表结果映射\",\"实体类设计方案\",\"多表关系回顾：（双向查看）\",\"一对一\",\"夫妻关系，人和身份证号\",\"一对多| 多对一\",\"用户和用户的订单，锁和钥匙\",\"多对多\",\"老师和学生，部门和员工 实体类设计关系(查询)：（单向查看）\",\"对一 ： 夫妻一方对应另一方，订单对应用户都是对一关系\",\"实体类设计：对一关系下，类中只要包含单个对方对象类型属性即可！\",\"例如：\",\"public class Customer { private Integer customerId; private String customerName; } public class Order { private Integer orderId; private String orderName; private Customer customer;// 体现的是对一的关系 }\",\"对多: 用户对应的订单，讲师对应的学生或者学生对应的讲师都是对多关系：\",\"实体类设计：对多关系下，类中只要包含对方类型集合属性即可！\",\"public class Customer { private Integer customerId; private String customerName; private List<Order> orderList;// 体现的是对多的关系 } public class Order { private Integer orderId; private String orderName; private Customer customer;// 体现的是对一的关系 } //查询客户和客户对应的订单集合 不要管!\",\"多表结果实体类设计小技巧：\",\"对一，属性中包含对方对象\",\"对多，属性中包含对方对象集合\",\"只有真实发生多表查询时，才需要设计和修改实体类，否则不提前设计和修改实体类！\",\"无论多少张表联查，实体类设计都是两两考虑!\",\"在查询映射的时候，只需要关注本次查询相关的属性！例如：查询订单和对应的客户，就不要关注客户中的订单集合！\",\"多表映射案例准备\",\"数据库：\",\"CREATE TABLE `t_customer` (`customer_id` INT NOT NULL AUTO_INCREMENT, `customer_name` CHAR(100), PRIMARY KEY (`customer_id`) ); CREATE TABLE `t_order` ( `order_id` INT NOT NULL AUTO_INCREMENT, `order_name` CHAR(100), `customer_id` INT, PRIMARY KEY (`order_id`) ); INSERT INTO `t_customer` (`customer_name`) VALUES ('c01'); INSERT INTO `t_order` (`order_name`, `customer_id`) VALUES ('o1', '1'); INSERT INTO `t_order` (`order_name`, `customer_id`) VALUES ('o2', '1'); INSERT INTO `t_order` (`order_name`, `customer_id`) VALUES ('o3', '1');\",\"实际开发时，一般在开发过程中，不给数据库表设置外键约束。 原因是避免调试不方便。 一般是功能开发完成，再加外键约束检查是否有bug。\",\"实体类设计：\",\"稍后会进行订单关联客户查询，也会进行客户关联订单查询，所以在这先练习设计\",\"@Data public class Customer { private Integer customerId; private String customerName; private List<Order> orderList;// 体现的是对多的关系 } @Data public class Order { private Integer orderId; private String orderName; private Customer customer;// 体现的是对一的关系 }\"]},\"518\":{\"h\":\"3.2 对一映射\",\"t\":[\"需求说明\",\"根据ID查询订单，以及订单关联的用户的信息！\",\"OrderMapper接口\",\"public interface OrderMapper { Order selectOrderWithCustomer(Integer orderId); }\",\"OrderMapper.xml配置文件\",\"<!-- 创建resultMap实现“对一”关联关系映射 --> <!-- id属性：通常设置为这个resultMap所服务的那条SQL语句的id加上“ResultMap” --> <!-- type属性：要设置为这个resultMap所服务的那条SQL语句最终要返回的类型 --> <resultMap id=\\\"selectOrderWithCustomerResultMap\\\" type=\\\"order\\\"> <!-- 先设置Order自身属性和字段的对应关系 --> <id column=\\\"order_id\\\" property=\\\"orderId\\\"/> <result column=\\\"order_name\\\" property=\\\"orderName\\\"/> <!-- 使用association标签配置“对一”关联关系 --> <!-- property属性：在Order类中对一的一端进行引用时使用的属性名 --> <!-- javaType属性：一的一端类的全类名 --> <association property=\\\"customer\\\" javaType=\\\"customer\\\"> <!-- 配置Customer类的属性和字段名之间的对应关系 --> <id column=\\\"customer_id\\\" property=\\\"customerId\\\"/> <result column=\\\"customer_name\\\" property=\\\"customerName\\\"/> </association> </resultMap> <!-- Order selectOrderWithCustomer(Integer orderId); --> <select id=\\\"selectOrderWithCustomer\\\" resultMap=\\\"selectOrderWithCustomerResultMap\\\"> SELECT order_id,order_name,c.customer_id,customer_name FROM t_order o LEFT JOIN t_customer c ON o.customer_id=c.customer_id WHERE o.order_id=#{orderId} </select>\",\"对应关系可以参考下图：\",\"Mybatis全局注册Mapper文件\",\"<!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --> <mappers> <!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --> <mapper resource=\\\"mappers/OrderMapper.xml\\\"/> </mappers>\",\"junit测试程序\",\"@Slf4j public class MyBatisTest { private SqlSession session; // junit会在每一个@Test方法前执行@BeforeEach方法 @BeforeEach public void init() throws IOException { session = new SqlSessionFactoryBuilder() .build( Resources.getResourceAsStream(\\\"mybatis-config.xml\\\")) .openSession(); } @Test public void testRelationshipToOne() { OrderMapper orderMapper = session.getMapper(OrderMapper.class); // 查询Order对象，检查是否同时查询了关联的Customer对象 Order order = orderMapper.selectOrderWithCustomer(2); log.info(\\\"order = \\\" + order); } // junit会在每一个@Test方法后执行@@AfterEach方法 @AfterEach public void clear() { session.commit(); session.close(); } }\",\"关键词\",\"在“对一”关联关系中，我们的配置比较多，但是关键词就只有：association和javaType\"]},\"519\":{\"h\":\"3.3 对多映射\",\"t\":[\"需求说明\",\"查询客户和客户关联的订单信息！\",\"CustomerMapper接口\",\"public interface CustomerMapper { Customer selectCustomerWithOrderList(Integer customerId); }\",\"CustomerMapper.xml文件\",\"<!-- 配置resultMap实现从Customer到OrderList的“对多”关联关系 --> <resultMap id=\\\"selectCustomerWithOrderListResultMap\\\" type=\\\"customer\\\"> <!-- 映射Customer本身的属性 --> <id column=\\\"customer_id\\\" property=\\\"customerId\\\"/> <result column=\\\"customer_name\\\" property=\\\"customerName\\\"/> <!-- collection标签：映射“对多”的关联关系 --> <!-- property属性：在Customer类中，关联“多”的一端的属性名 --> <!-- ofType属性：集合属性中元素的类型 --> <collection property=\\\"orderList\\\" ofType=\\\"order\\\"> <!-- 映射Order的属性 --> <id column=\\\"order_id\\\" property=\\\"orderId\\\"/> <result column=\\\"order_name\\\" property=\\\"orderName\\\"/> </collection> </resultMap> <!-- Customer selectCustomerWithOrderList(Integer customerId); --> <select id=\\\"selectCustomerWithOrderList\\\" resultMap=\\\"selectCustomerWithOrderListResultMap\\\"> SELECT c.customer_id,c.customer_name,o.order_id,o.order_name FROM t_customer c LEFT JOIN t_order o ON c.customer_id=o.customer_id WHERE c.customer_id=#{customerId} </select>\",\"对应关系可以参考下图：\",\"Mybatis全局注册Mapper文件\",\"<!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --> <mappers> <!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --> <mapper resource=\\\"mappers/OrderMapper.xml\\\"/> <mapper resource=\\\"mappers/CustomerMapper.xml\\\"/> </mappers>\",\"junit测试程序\",\"@Test public void testRelationshipToMulti() { CustomerMapper customerMapper = session.getMapper(CustomerMapper.class); // 查询Customer对象同时将关联的Order集合查询出来 Customer customer = customerMapper.selectCustomerWithOrderList(1); log.info(\\\"customer.getCustomerId() = \\\" + customer.getCustomerId()); log.info(\\\"customer.getCustomerName() = \\\" + customer.getCustomerName()); List<Order> orderList = customer.getOrderList(); for (Order order : orderList) { log.info(\\\"order = \\\" + order); } }\",\"关键词\",\"在“对多”关联关系中，同样有很多配置，但是提炼出来最关键的就是：“collection”和“ofType”\"]},\"520\":{\"h\":\"3.4 多表映射总结\"},\"521\":{\"h\":\"3.4.1 多表映射优化\",\"t\":[\"setting属性\",\"属性含义\",\"可选值\",\"默认值\",\"autoMappingBehavior\",\"指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。\",\"NONE, PARTIAL, FULL\",\"PARTIAL\",\"我们可以将autoMappingBehavior设置为full,进行多表resultMap映射的时候，可以省略符合列和属性命名映射规则（列名=属性名，或者开启驼峰映射也可以自定映射）的result标签！\",\"修改mybati-sconfig.xml:\",\"<!--开启resultMap自动映射 --> <setting name=\\\"autoMappingBehavior\\\" value=\\\"FULL\\\"/>\",\"修改teacherMapper.xml\",\"<resultMap id=\\\"teacherMap\\\" type=\\\"teacher\\\"> <id property=\\\"tId\\\" column=\\\"t_id\\\" /> <!-- 开启自动映射,并且开启驼峰式支持!可以省略 result!--> <!-- <result property=\\\"tName\\\" column=\\\"t_name\\\" />--> <collection property=\\\"students\\\" ofType=\\\"student\\\" > <id property=\\\"sId\\\" column=\\\"s_id\\\" /> <!-- <result property=\\\"sName\\\" column=\\\"s_name\\\" />--> </collection> </resultMap>\"]},\"522\":{\"h\":\"3.4.2 多表映射总结\",\"t\":[\"关联关系\",\"配置项关键词\",\"所在配置文件和具体位置\",\"对一\",\"association标签/javaType属性/property属性\",\"Mapper配置文件中的resultMap标签内\",\"对多\",\"collection标签/ofType属性/property属性\",\"Mapper配置文件中的resultMap标签内\"]},\"523\":{\"h\":\"四、MyBatis动态语句\"},\"524\":{\"h\":\"4.1 动态语句需求和简介\",\"t\":[\"经常遇到很多按照很多查询条件进行查询的情况，比如智联招聘的职位搜索等。其中经常出现很多条件不取值的情况，在后台应该如何完成最终的SQL语句呢？\",\"动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。\",\"使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。\",\"如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。\"]},\"525\":{\"h\":\"4.2 if和where标签\",\"t\":[\"使用动态 SQL 最常见情景是根据条件包含 where / if 子句的一部分。比如：\",\"<!-- List<Employee> selectEmployeeByCondition(Employee employee); --> <select id=\\\"selectEmployeeByCondition\\\" resultType=\\\"employee\\\"> select emp_id,emp_name,emp_salary from t_emp <!-- where标签会自动去掉“标签体内前面多余的and/or” --> <where> <!-- 使用if标签，让我们可以有选择的加入SQL语句的片段。这个SQL语句片段是否要加入整个SQL语句，就看if标签判断的结果是否为true --> <!-- 在if标签的test属性中，可以访问实体类的属性，不可以访问数据库表的字段 --> <if test=\\\"empName != null\\\"> <!-- 在if标签内部，需要访问接口的参数时还是正常写#{} --> or emp_name=#{empName} </if> <if test=\\\"empSalary &gt; 2000\\\"> or emp_salary>#{empSalary} </if> <!-- 第一种情况：所有条件都满足 WHERE emp_name=? or emp_salary>? 第二种情况：部分条件满足 WHERE emp_salary>? 第三种情况：所有条件都不满足 没有where子句 --> </where> </select>\"]},\"526\":{\"h\":\"4.3 set标签\",\"t\":[\"<!-- void updateEmployeeDynamic(Employee employee) --> <update id=\\\"updateEmployeeDynamic\\\"> update t_emp <!-- set emp_name=#{empName},emp_salary=#{empSalary} --> <!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 --> <set> <if test=\\\"empName != null\\\"> emp_name=#{empName}, </if> <if test=\\\"empSalary &lt; 3000\\\"> emp_salary=#{empSalary}, </if> </set> where emp_id=#{empId} <!-- 第一种情况：所有条件都满足 SET emp_name=?, emp_salary=? 第二种情况：部分条件满足 SET emp_salary=? 第三种情况：所有条件都不满足 update t_emp where emp_id=? 没有set子句的update语句会导致SQL语法错误 --> </update>\"]},\"527\":{\"h\":\"4.4 trim标签(了解)\",\"t\":[\"使用trim标签控制条件部分两端是否包含某些字符\",\"prefix属性：指定要动态添加的前缀\",\"suffix属性：指定要动态添加的后缀\",\"prefixOverrides属性：指定要动态去掉的前缀，使用“|”分隔有可能的多个值\",\"suffixOverrides属性：指定要动态去掉的后缀，使用“|”分隔有可能的多个值\",\"<!-- List<Employee> selectEmployeeByConditionByTrim(Employee employee) --> <select id=\\\"selectEmployeeByConditionByTrim\\\" resultType=\\\"com.atguigu.mybatis.entity.Employee\\\"> select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp <!-- prefix属性指定要动态添加的前缀 --> <!-- suffix属性指定要动态添加的后缀 --> <!-- prefixOverrides属性指定要动态去掉的前缀，使用“|”分隔有可能的多个值 --> <!-- suffixOverrides属性指定要动态去掉的后缀，使用“|”分隔有可能的多个值 --> <!-- 当前例子用where标签实现更简洁，但是trim标签更灵活，可以用在任何有需要的地方 --> <trim prefix=\\\"where\\\" suffixOverrides=\\\"and|or\\\"> <if test=\\\"empName != null\\\"> emp_name=#{empName} and </if> <if test=\\\"empSalary &gt; 3000\\\"> emp_salary>#{empSalary} and </if> <if test=\\\"empAge &lt;= 20\\\"> emp_age=#{empAge} or </if> <if test=\\\"empGender=='male'\\\"> emp_gender=#{empGender} </if> </trim> </select>\"]},\"528\":{\"h\":\"4.5 choose/when/otherwise标签\",\"t\":[\"在多个分支条件中，仅执行一个。\",\"从上到下依次执行条件判断\",\"遇到的第一个满足条件的分支会被采纳\",\"被采纳分支后面的分支都将不被考虑\",\"如果所有的when分支都不满足，那么就执行otherwise分支\",\"<!-- List<Employee> selectEmployeeByConditionByChoose(Employee employee) --> <select id=\\\"selectEmployeeByConditionByChoose\\\" resultType=\\\"com.atguigu.mybatis.entity.Employee\\\"> select emp_id,emp_name,emp_salary from t_emp where <choose> <when test=\\\"empName != null\\\">emp_name=#{empName}</when> <when test=\\\"empSalary &lt; 3000\\\">emp_salary &lt; 3000</when> <otherwise>1=1</otherwise> </choose> <!-- 第一种情况：第一个when满足条件 where emp_name=? 第二种情况：第二个when满足条件 where emp_salary < 3000 第三种情况：两个when都不满足 where 1=1 执行了otherwise --> </select>\"]},\"529\":{\"h\":\"4.6 foreach标签\",\"t\":[\"基本用法\",\"用批量插入举例\",\"<!-- collection属性：要遍历的集合 item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象 separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符 open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串 close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串 index属性：这里起一个名字，便于后面引用 遍历List集合，这里能够得到List集合的索引值 遍历Map集合，这里能够得到Map集合的key --> <foreach collection=\\\"empList\\\" item=\\\"emp\\\" separator=\\\",\\\" open=\\\"values\\\" index=\\\"myIndex\\\"> <!-- 在foreach标签内部如果需要引用遍历得到的具体的一个对象，需要使用item属性声明的名称 --> (#{emp.empName},#{myIndex},#{emp.empSalary},#{emp.empGender}) </foreach>\",\"批量更新时需要注意\",\"上面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：\",\"atguigu.dev.url=jdbc:mysql:///mybatis-example?allowMultiQueries=true\",\"对应的foreach标签如下：\",\"<!-- int updateEmployeeBatch(@Param(\\\"empList\\\") List<Employee> empList) --> <update id=\\\"updateEmployeeBatch\\\"> <foreach collection=\\\"empList\\\" item=\\\"emp\\\" separator=\\\";\\\"> update t_emp set emp_name=#{emp.empName} where emp_id=#{emp.empId} </foreach> </update>\",\"关于foreach标签的collection属性\",\"如果没有给接口中List类型的参数使用@Param注解指定一个具体的名字，那么在collection属性中默认可以使用collection或list来引用这个list集合。这一点可以通过异常信息看出来：\",\"Parameter 'empList' not found. Available parameters are [arg0, collection, list]\",\"在实际开发中，为了避免隐晦的表达造成一定的误会，建议使用@Param注解明确声明变量的名称，然后在foreach标签的collection属性中按照@Param注解指定的名称来引用传入的参数。\"]},\"530\":{\"h\":\"4.7 sql片段\",\"t\":[\"抽取重复的SQL片段\",\"<!-- 使用sql标签抽取重复出现的SQL片段 --> <sql id=\\\"mySelectSql\\\"> select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp </sql>\",\"引用已抽取的SQL片段\",\"<!-- 使用include标签引用声明的SQL片段 --> <include refid=\\\"mySelectSql\\\"/>\"]},\"531\":{\"h\":\"五、MyBatis高级扩展\"},\"532\":{\"h\":\"5.1 Mapper批量映射优化\",\"t\":[\"需求\",\"Mapper 配置文件很多时，在全局配置文件中一个一个注册太麻烦，希望有一个办法能够一劳永逸。\",\"配置方式\",\"Mybatis 允许在指定 Mapper 映射文件时，只指定其所在的包：\",\"<mappers> <package name=\\\"com.atguigu.mapper\\\"/> </mappers>\",\"此时这个包下的所有 Mapper 配置文件将被自动加载、注册，比较方便。\",\"资源创建要求\",\"Mapper 接口和 Mapper 配置文件名称一致 \",\"Mapper 接口：EmployeeMapper.java\",\"Mapper 配置文件：EmployeeMapper.xml\",\"Mapper 配置文件放在 Mapper 接口所在的包内 \",\"可以将mapperxml文件放在mapper接口所在的包！\",\"可以在sources下创建mapper接口包一致的文件夹结构存放mapperxml文件\"]},\"533\":{\"h\":\"5.2 插件和分页插件PageHelper\"},\"534\":{\"h\":\"5.2.1 插件机制和PageHelper插件介绍\",\"t\":[\"MyBatis 对插件进行了标准化的设计，并提供了一套可扩展的插件机制。插件可以在用于语句执行过程中进行拦截，并允许通过自定义处理程序来拦截和修改 SQL 语句、映射语句的结果等。\",\"具体来说，MyBatis 的插件机制包括以下三个组件：\",\"Interceptor（拦截器）：定义一个拦截方法 intercept，该方法在执行 SQL 语句、执行查询、查询结果的映射时会被调用。\",\"Invocation（调用）：实际上是对被拦截的方法的封装，封装了 Object target、Method method 和 Object[] args 这三个字段。\",\"InterceptorChain（拦截器链）：对所有的拦截器进行管理，包括将所有的 Interceptor 链接成一条链，并在执行 SQL 语句时按顺序调用。\",\"插件的开发非常简单，只需要实现 Interceptor 接口，并使用注解 @Intercepts 来标注需要拦截的对象和方法，然后在 MyBatis 的配置文件中添加插件即可。\",\"PageHelper 是 MyBatis 中比较著名的分页插件，它提供了多种分页方式（例如 MySQL 和 Oracle 分页方式），支持多种数据库，并且使用非常简单。下面就介绍一下 PageHelper 的使用方式。\",\"https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#如何配置数据库方言\"]},\"535\":{\"h\":\"5.2.2 PageHelper插件使用\",\"t\":[\"pom.xml引入依赖\",\"<dependency> <groupId>com.github.pagehelper</groupId> <artifactId>pagehelper</artifactId> <version>5.1.11</version> </dependency>\",\"mybatis-config.xml配置分页插件\",\"在 MyBatis 的配置文件中添加 PageHelper 的插件：\",\"<plugins> <plugin interceptor=\\\"com.github.pagehelper.PageInterceptor\\\"> <property name=\\\"helperDialect\\\" value=\\\"mysql\\\"/> </plugin> </plugins>\",\"其中，com.github.pagehelper.PageInterceptor 是 PageHelper 插件的名称，dialect 属性用于指定数据库类型（支持多种数据库）\",\"页插件使用\",\"在查询方法中使用分页：\",\"@Test public void testTeacherRelationshipToMulti() { TeacherMapper teacherMapper = session.getMapper(TeacherMapper.class); PageHelper.startPage(1,2); // 查询Customer对象同时将关联的Order集合查询出来 List<Teacher> allTeachers = teacherMapper.findAllTeachers(); // PageInfo<Teacher> pageInfo = new PageInfo<>(allTeachers); System.out.println(\\\"pageInfo = \\\" + pageInfo); long total = pageInfo.getTotal(); // 获取总记录数 System.out.println(\\\"total = \\\" + total); int pages = pageInfo.getPages(); // 获取总页数 System.out.println(\\\"pages = \\\" + pages); int pageNum = pageInfo.getPageNum(); // 获取当前页码 System.out.println(\\\"pageNum = \\\" + pageNum); int pageSize = pageInfo.getPageSize(); // 获取每页显示记录数 System.out.println(\\\"pageSize = \\\" + pageSize); List<Teacher> teachers = pageInfo.getList(); //获取查询页的数据集合 System.out.println(\\\"teachers = \\\" + teachers); teachers.forEach(System.out::println); }\"]},\"536\":{\"h\":\"5.3 逆向工程和MybatisX插件\"},\"537\":{\"h\":\"5.3.1 ORM思维介绍\",\"t\":[\"ORM（Object-Relational Mapping，对象-关系映射）是一种将数据库和面向对象编程语言中的对象之间进行转换的技术。它将对象和关系数据库的概念进行映射，最后我们就可以通过方法调用进行数据库操作!!\",\"最终: 让我们可以使用面向对象思维进行数据库操作！！！\",\"ORM 框架通常有半自动和全自动两种方式。\",\"半自动 ORM 通常需要程序员手动编写 SQL 语句或者配置文件，将实体类和数据表进行映射，还需要手动将查询的结果集转换成实体对象。\",\"全自动 ORM 则是将实体类和数据表进行自动映射，使用 API 进行数据库操作时，ORM 框架会自动执行 SQL 语句并将查询结果转换成实体对象，程序员无需再手动编写 SQL 语句和转换代码。\",\"下面是半自动和全自动 ORM 框架的区别：\",\"映射方式：半自动 ORM 框架需要程序员手动指定实体类和数据表之间的映射关系，通常使用 XML 文件或注解方式来指定；全自动 ORM 框架则可以自动进行实体类和数据表的映射，无需手动干预。\",\"查询方式：半自动 ORM 框架通常需要程序员手动编写 SQL 语句并将查询结果集转换成实体对象；全自动 ORM 框架可以自动组装 SQL 语句、执行查询操作，并将查询结果转换成实体对象。\",\"性能：由于半自动 ORM 框架需要手动编写 SQL 语句，因此程序员必须对 SQL 语句和数据库的底层知识有一定的了解，才能编写高效的 SQL 语句；而全自动 ORM 框架通过自动优化生成的 SQL 语句来提高性能，程序员无需进行优化。\",\"学习成本：半自动 ORM 框架需要程序员手动编写 SQL 语句和映射配置，要求程序员具备较高的数据库和 SQL 知识；全自动 ORM 框架可以自动生成 SQL 语句和映射配置，程序员无需了解过多的数据库和 SQL 知识。\",\"常见的半自动 ORM 框架包括 MyBatis 等；常见的全自动 ORM 框架包括 Hibernate、Spring Data JPA、MyBatis-Plus 等。\"]},\"538\":{\"h\":\"5.3.2 逆向工程\",\"t\":[\" MyBatis 的逆向工程是一种自动化生成持久层代码和映射文件的工具，它可以根据数据库表结构和设置的参数生成对应的实体类、Mapper.xml 文件、Mapper 接口等代码文件，简化了开发者手动生成的过程。逆向工程使开发者可以快速地构建起 DAO 层，并快速上手进行业务开发。 MyBatis 的逆向工程有两种方式：通过 MyBatis Generator 插件实现和通过 Maven 插件实现。无论是哪种方式，逆向工程一般需要指定一些配置参数，例如数据库连接 URL、用户名、密码、要生成的表名、生成的文件路径等等。 总的来说，MyBatis 的逆向工程为程序员提供了一种方便快捷的方式，能够快速地生成持久层代码和映射文件，是半自动 ORM 思维像全自动发展的过程，提高程序员的开发效率。\",\"注意：逆向工程只能生成单表crud的操作，多表查询依然需要我们自己编写！\"]},\"539\":{\"h\":\"5.3.3 逆向工程插件MyBatisX使用\",\"t\":[\" MyBatisX 是一个 MyBatis 的代码生成插件，可以通过简单的配置和操作快速生成 MyBatis Mapper、pojo 类和 Mapper.xml 文件。下面是使用 MyBatisX 插件实现逆向工程的步骤：\",\"安装插件：\",\"在 IntelliJ IDEA 中打开插件市场，搜索 MyBatisX 并安装。\",\"使用 IntelliJ IDEA连接数据库\",\"连接数据库\",\"填写信息\",\"展示库表\",\"逆向工程使用\",\"查看生成结果\",\"逆向工程案例使用\",\"正常使用即可，自动生成单表的crud方法！\",\"package com.atguigu.mapper; import com.atguigu.pojo.User; /** * @author Jackiechan * @description 针对表【user】的数据库操作Mapper * @createDate 2023-06-02 16:55:32 * @Entity com.atguigu.pojo.User */ public interface UserMapper { int deleteByPrimaryKey(Long id); int insert(User record); int insertSelective(User record); User selectByPrimaryKey(Long id); int updateByPrimaryKeySelective(User record); int updateByPrimaryKey(User record); }\"]},\"540\":{\"h\":\"六、MyBatis总结\",\"t\":[\"核心点\",\"掌握目标\",\"mybatis基础\",\"使用流程, 参数输入,#{} ${},参数输出\",\"mybatis多表\",\"实体类设计,resultMap多表结果映射\",\"mybatis动态语句\",\"Mybatis动态语句概念, where , if , foreach标签\",\"mybatis扩展\",\"Mapper批量处理,分页插件,逆向工程\"]},\"541\":{\"h\":\"二、SpringFramework实战指南\"},\"542\":{\"h\":\"目录\",\"t\":[\"一、技术体系结构\",\"1.1 总体技术体系\",\"1.2 框架概念和理解\",\"二、SpringFramework介绍\",\"2.1 Spring 和 SpringFramework概念\",\"2.2 SpringFramework主要功能模块\",\"2.3 SpringFramework 主要优势\",\"三、Spring IoC容器和核心概念\",\"3.1 组件和组件管理概念\",\"3.2 Spring IoC容器和容器实现\",\"3.3 Spring IoC / DI概念总结\",\"四、Spring IoC实践和应用\",\"4.1 Spring IoC / DI 实现步骤\",\"4.2 基于XML配置方式组件管理\",\"4.2.1 实验一： 组件（Bean）信息声明配置（IoC）\",\"4.2.2 实验二： 组件（Bean）依赖注入配置（DI）\",\"4.2.3 实验三： IoC容器创建和使用\",\"4.2.4 实验四： 高级特性：组件（Bean）作用域和周期方法配置\",\"4.2.5 实验五： 高级特性：FactoryBean特性和使用\",\"4.2.6 实验六： 基于XML方式整合三层架构组件\",\"4.3 基于 注解 方式管理 Bean\",\"4.3.1 实验一： Bean注解标记和扫描 (IoC)\",\"4.3.2 实验二： 组件（Bean）作用域和周期方法注解 \",\"4.3.3 实验三： Bean属性赋值：引用类型自动装配 (DI)\",\"4.3.4 实验四： Bean属性赋值：基本类型属性赋值 (DI)\",\"4.3.5 实验五： 基于注解+XML方式整合三层架构组件\",\"4.4 基于 配置类 方式管理 Bean\",\"4.4.1 完全注解开发理解\",\"4.4.2 实验一：配置类和扫描注解\",\"4.4.3 实验二：@Bean定义组件\",\"4.4.4 实验三：高级特性：@Bean注解细节\",\"4.4.5 实验四：高级特性：@Import扩展\",\"4.4.6 实验五：基于注解+配置类方式整合三层架构组件\",\"4.5 三种配置方式总结\",\"4.5.1 XML方式配置总结\",\"4.5.2 XML+注解方式配置总结\",\"4.5.3 完全注解方式配置总结\",\"4.6 整合Spring5-Test5搭建测试环境\",\"五、Spring AOP面向切面编程\",\"5.1 场景设定和问题复现\",\"5.2 解决技术代理模式\",\"5.3 面向切面编程思维（AOP）\",\"5.4 Spring AOP框架介绍和关系梳理\",\"5.5 Spring AOP基于注解方式实现和细节\",\"5.5.1 Spring AOP底层技术组成\",\"5.5.2 初步实现\",\"5.5.3 获取通知细节信息\",\"5.5.4 切点表达式语法\",\"5.5.5 重用（提取）切点表达式\",\"5.5.6 环绕通知\",\"5.5.7 切面优先级设置\",\"5.5.8 CGLib动态代理生效\",\"5.5.9 注解实现小结\",\"5.6 Spring AOP基于XML方式实现(了解)\",\"5.7 Spring AOP对获取Bean的影响理解\",\"5.7.1 根据类型装配 bean\",\"5.7.2 使用总结\",\"六、Spring 声明式事务\",\"6.1 声明式事务概念\",\"6.1.1 编程式事务\",\"6.1.2 声明式事务\",\"6.1.3 Spring事务管理器\",\"6.2 基于注解的声明式事务\",\"6.2.1 准备工作\",\"6.2.2 基本事务控制\",\"6.2.3 事务属性：只读\",\"6.2.4 事务属性：超时时间\",\"6.2.5 事务属性：事务异常\",\"6.2.6 事务属性：事务隔离级别\",\"6.2.7 事务属性：事务传播行为\",\"七、Spring核心掌握总结\"]},\"543\":{\"h\":\"一、技术体系结构\"},\"544\":{\"h\":\"1.1 总体技术体系\",\"t\":[\"单一架构\",\"一个项目，一个工程，导出为一个war包，在一个Tomcat上运行。也叫all in one。\",\"image_ubxbkc-DZ5\",\"单一架构，项目主要应用技术框架为：Spring , SpringMVC , Mybatis\",\"分布式架构\",\"一个项目（对应 IDEA 中的一个 project），拆分成很多个模块，每个模块是一个 IDEA 中的一个 module。每一个工程都是运行在自己的 Tomcat 上。模块之间可以互相调用。每一个模块内部可以看成是一个单一架构的应用。\",\"分布式架构，项目主要应用技术框架：SpringBoot (SSM), SpringCloud , 中间件等\"]},\"545\":{\"h\":\"1.2 框架概念和理解\",\"t\":[\"框架( Framework )是一个集成了基本结构、规范、设计模式、编程语言和程序库等基础组件的软件系统，它可以用来构建更高级别的应用程序。框架的设计和实现旨在解决特定领域中的常见问题，帮助开发人员更高效、更稳定地实现软件开发目标。\",\"框架的优点包括以下几点：\",\"提高开发效率：框架提供了许多预先设计好了的组件和工具，能够帮助开发人员快速进行开发。相较于传统手写代码，在框架提供的规范化环境中，开发者可以更快地实现项目的各种要求。\",\"降低开发成本：框架的提供标准化的编程语言、数据操作等代码片段，避免了重复开发的问题，降低了开发成本，提供深度优化的系统，降低了维护成本，增强了系统的可靠性。\",\"提高应用程序的稳定性：框架通常经过了很长时间的开发和测试，其中的许多组件、代码片段和设计模式都得到了验证。重复利用这些组件有助于减少bug的出现，从而提高了应用程序的稳定性。\",\"提供标准化的解决方案：框架通常是针对某个特定领域的，通过提供标准化的解决方案，可以为开发人员提供一种共同的语言和思想基础，有助于更好地沟通和协作。\",\"框架的缺点包括以下几个方面：\",\"学习成本高：框架通常具有特定的语言和编程范式。对于开发人员而言，需要花费时间学习其背后的架构、模式和逻辑，这对于新手而言可能会耗费较长时间。\",\"可能存在局限性：虽然框架提高了开发效率并可以帮助开发人员解决常见问题，但是在某些情况下，特定的应用需求可能超出框架的范围，从而导致应用程序无法满足要求。开发人员可能需要更多的控制权和自由度，同时需要在框架和应用程序之间进行权衡取舍。\",\"版本变更和兼容性问题：框架的版本发布和迭代通常会导致代码库的大规模变更，进而导致应用程序出现兼容性问题和漏洞。当框架变更时，需要考虑框架是否向下兼容，以及如何进行适当的测试、迁移和升级。\",\"架构风险：框架涉及到很多抽象和概念，如果开发者没有足够的理解和掌握其架构，可能会导致系统出现设计和架构缺陷，从而影响系统的健康性和安全性。\",\"站在文件结构的角度理解框架，可以将框架总结：框架 = jar包+配置文件\",\"莎士比亚说,\\\"一千个观众眼中有一千个哈姆雷特\\\" 即仁者见仁,智者见智.说每个人都会对作品有不同的理解，每个人对待任何事物都有自己的看法，同样的技术解决同样的问题会产生不同流程和风格的解决方案，而采用一种框架其实就是限制用户必须使用其规定的方案来实现，可以降低程序员之间沟通以及日后维护的成本！\",\"常用的单一架构JavaEE项目框架演进，从SSH、SSH2过渡到了SSM：SpringMVC、Spring、MyBatis。\",\"总之，框架已经对基础的代码进行了封装并提供相应的API，开发者在使用框架是直接调用封装好的API可以省去很多代码编写，从而提高工作效率和开发速度。\"]},\"546\":{\"h\":\"二、SpringFramework介绍\"},\"547\":{\"h\":\"2.1 Spring 和 SpringFramework概念\",\"t\":[\"https://spring.io/projects\",\"广义的 Spring：Spring 技术栈（全家桶）\",\"广义上的 Spring 泛指以 Spring Framework 为基础的 Spring 技术栈。\",\"经过十多年的发展，Spring 已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，例如 Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。\",\"这些子项目涵盖了从企业级应用开发到云计算等各方面的内容，能够帮助开发人员解决软件发展过程中不断产生的各种实际问题，给开发人员带来了更好的开发体验。\",\"狭义的 Spring：Spring Framework（基础框架）\",\"狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring 框架。\",\"Spring Framework（Spring框架）是一个开源的应用程序框架，由SpringSource公司开发，最初是为了解决企业级开发中各种常见问题而创建的。它提供了很多功能，例如：依赖注入（Dependency Injection）、面向切面编程（AOP）、声明式事务管理（TX）等。其主要目标是使企业级应用程序的开发变得更加简单和快速，并且Spring框架被广泛应用于Java企业开发领域。\",\"Spring全家桶的其他框架都是以SpringFramework框架为基础！\",\"对比理解：\",\"QQ 和 腾讯\",\"腾讯 = Spring\",\"QQ = SpringFramework\"]},\"548\":{\"h\":\"2.2 SpringFramework主要功能模块\",\"t\":[\"SpringFramework框架结构图：\",\"功能模块\",\"功能介绍\",\"Core Container\",\"核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。\",\"AOP&Aspects\",\"面向切面编程\",\"TX\",\"声明式事务管理。\",\"Spring MVC\",\"提供了面向Web应用程序的集成功能。\"]},\"549\":{\"h\":\"2.3 SpringFramework 主要优势\",\"t\":[\"丰富的生态系统：Spring 生态系统非常丰富，支持许多模块和库，如 Spring Boot、Spring Security、Spring Cloud 等等，可以帮助开发人员快速构建高可靠性的企业应用程序。\",\"模块化的设计：框架组件之间的松散耦合和模块化设计使得 Spring Framework 具有良好的可重用性、可扩展性和可维护性。开发人员可以轻松地选择自己需要的模块，根据自己的需求进行开发。\",\"简化 Java 开发：Spring Framework 简化了 Java 开发，提供了各种工具和 API，可以降低开发复杂度和学习成本。同时，Spring Framework 支持各种应用场景，包括 Web 应用程序、RESTful API、消息传递、批处理等等。\",\"不断创新和发展：Spring Framework 开发团队一直在不断创新和发展，保持与最新技术的接轨，为开发人员提供更加先进和优秀的工具和框架。\",\"因此，这些优点使得 Spring Framework 成为了一个稳定、可靠、且创新的框架，为企业级 Java 开发提供了一站式的解决方案。\",\"Spring 使创建 Java 企业应用程序变得容易。它提供了在企业环境中采用 Java 语言所需的一切，支持 Groovy 和 Kotlin 作为 JVM 上的替代语言，并且可以根据应用程序的需求灵活地创建多种架构。从Spring Framework 6.0.6开始，Spring 需要 Java 17+。\"]},\"550\":{\"h\":\"三、Spring IoC容器和核心概念\"},\"551\":{\"h\":\"3.1 组件和组件管理概念\",\"t\":[\"3.1.1 什么是组件?\",\"回顾常规的三层架构处理请求流程：\",\"整个项目就是由各种组件搭建而成的：\",\"3.1.2 我们的期待\",\"有人替我们创建组件的对象\",\"有人帮我们保存组件的对象\",\"有人帮助我们自动组装\",\"有人替我们管理事务\",\"有人协助我们整合其他框架\",\"......\",\"3.1.3 Spring充当组件管理角色（IoC）\",\"那么谁帮我们完成我们的期待，帮我们管理组件呢？\",\"当然是Spring 框架了！\",\"组件可以完全交给Spring 框架进行管理，Spring框架替代了程序员原有的new对象和对象属性赋值动作等！\",\"Spring具体的组件管理动作包含：\",\"组件对象实例化\",\"组件属性属性赋值\",\"组件对象之间引用\",\"组件对象存活周期管理\",\"...... 我们只需要编写元数据（配置文件）告知Spring 管理哪些类组件和他们的关系即可！ 注意：组件是映射到应用程序中所有可重用组件的Java对象，应该是可复用的功能对象！\",\"组件一定是对象\",\"对象不一定是组件 综上所述，Spring 充当一个组件容器，创建、管理、存储组件，减少了我们的编码压力，让我们更加专注进行业务编写！\",\"3.1.4 组件交给Spring管理优势!\",\"降低了组件之间的耦合性：Spring IoC容器通过依赖注入机制，将组件之间的依赖关系削弱，减少了程序组件之间的耦合性，使得组件更加松散地耦合。\",\"提高了代码的可重用性和可维护性：将组件的实例化过程、依赖关系的管理等功能交给Spring IoC容器处理，使得组件代码更加模块化、可重用、更易于维护。\",\"方便了配置和管理：Spring IoC容器通过XML文件或者注解，轻松的对组件进行配置和管理，使得组件的切换、替换等操作更加的方便和快捷。\",\"交给Spring管理的对象（组件），方可享受Spring框架的其他功能（AOP,声明事务管理）等\"]},\"552\":{\"h\":\"3.2 Spring IoC容器和容器实现\",\"t\":[\"3.2.1 普通和复杂容器\",\"普通容器\",\"生活中的普通容器\",\"img\",\"普通容器只能用来存储，没有更多功能。 程序中的普通容器\",\"数组\",\"集合：List\",\"集合：Set 复杂容器 生活中的复杂容器\",\"!!img\",\"政府管理我们的一生，生老病死都和政府有关。 程序中的复杂容器 Servlet 容器能够管理 Servlet(init,service,destroy)、Filter、Listener 这样的组件的一生，所以它是一个复杂容器。\",\"名称\",\"时机\",\"次数\",\"创建对象\",\"默认情况：接收到第一次请求 修改启动顺序后：Web应用启动过程中\",\"一次\",\"初始化操作\",\"创建对象之后\",\"一次\",\"处理请求\",\"接收到请求\",\"多次\",\"销毁操作\",\"Web应用卸载之前\",\"一次\",\"我们即将要学习的 SpringIoC 容器也是一个复杂容器。它们不仅要负责创建组件的对象、存储组件的对象，还要负责调用组件的方法让它们工作，最终在特定情况下销毁组件。\",\"总结：Spring管理组件的容器，就是一个复杂容器，不仅存储组件，也可以管理组件之间依赖关系，并且创建和销毁组件等！\",\"3.2.2 SpringIoC容器介绍\",\"Spring IoC 容器，负责实例化、配置和组装 bean（组件）。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。配置元数据以 XML、Java 注解或 Java 代码形式表现。它允许表达组成应用程序的组件以及这些组件之间丰富的相互依赖关系。\",\"上图显示了 Spring 容器工作原理的高级视图。应用程序类与配置元数据相结合，您拥有完全配置且可执行的系统或应用程序。\",\"3.2.3 SpringIoC容器具体接口和实现类\",\"SpringIoc容器接口： \",\"BeanFactory 接口提供了一种高级配置机制，能够管理任何类型的对象，它是SpringIoC容器标准化超接口！\",\"ApplicationContext 是 BeanFactory 的子接口。它扩展了以下功能：\",\"更容易与 Spring 的 AOP 功能集成\",\"消息资源处理（用于国际化）\",\"特定于应用程序给予此接口实现，例如Web 应用程序的 WebApplicationContext 简而言之， BeanFactory 提供了配置框架和基本功能，而 ApplicationContext 添加了更多特定于企业的功能。 ApplicationContext 是 BeanFactory 的完整超集！ ApplicationContext容器实现类：\",\"类型名\",\"简介\",\"ClassPathXmlApplicationContext\",\"通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象\",\"FileSystemXmlApplicationContext\",\"通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象\",\"AnnotationConfigApplicationContext\",\"通过读取Java配置类创建 IOC 容器对象\",\"WebApplicationContext\",\"专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。\",\"3.2.4 SpringIoC容器管理配置方式\",\"Spring IoC 容器使用多种形式的配置元数据。此配置元数据表示您作为应用程序开发人员如何告诉 Spring 容器实例化、配置和组装应用程序中的对象。\",\"Spring框架提供了多种配置方式：XML配置方式、注解方式和Java配置类方式\",\"XML配置方式：是Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，让Spring IoC容器来管理Bean之间的依赖关系。该方式从Spring框架的第一版开始提供支持。\",\"注解方式：从Spring 2.5版本开始提供支持，可以通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如@Component, @Service, @Autowired等），将Bean注册到Spring IoC容器中，这样Spring IoC容器就可以管理这些Bean之间的依赖关系。\",\"Java配置类方式：从Spring 3.0版本开始提供支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。Java配置类是一种使用Java编写配置信息的方式，通过@Configuration、@Bean等注解来实现Bean和依赖关系的配置。 为了迎合当下开发环境，我们将以配置类+注解方式为主进行讲解！\"]},\"553\":{\"h\":\"3.3 Spring IoC / DI概念总结\",\"t\":[\"IoC容器\",\"Spring IoC 容器，负责实例化、配置和组装 bean（组件）核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。\",\"IoC（Inversion of Control）控制反转\",\"IoC 主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，不再是应用程序直接创建该对象，而是由 IoC 容器来创建和管理，即控制权由应用程序转移到 IoC 容器中，也就是“反转”了控制权。这种方式基本上是通过依赖查找的方式来实现的，即 IoC 容器维护着构成应用程序的对象，并负责创建这些对象。\",\"DI (Dependency Injection) 依赖注入\",\"DI 是指在组件之间传递依赖关系的过程中，将依赖关系在容器内部进行处理，这样就不必在应用程序代码中硬编码对象之间的依赖关系，实现了对象之间的解耦合。在 Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。\"]},\"554\":{\"h\":\"四、Spring IoC实践和应用\"},\"555\":{\"h\":\"4.1 Spring IoC / DI 实现步骤\",\"t\":[\"我们总结下，组件交给Spring IoC容器管理，并且获取和使用的基本步骤！\",\"配置元数据（配置）\",\"配置元数据，既是编写交给SpringIoC容器管理组件的信息，配置方式有三种。\",\"基于 XML 的配置元数据的基本结构：\",\"<bean id=\\\"...\\\" [1] class=\\\"...\\\" [2]> <!-- collaborators and configuration for this bean go here --> </bean>\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!-- 此处要添加一些约束，配置文件的标签并不是随意命名 --> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"...\\\" [1] class=\\\"...\\\" [2]> <!-- collaborators and configuration for this bean go here --> </bean> <bean id=\\\"...\\\" class=\\\"...\\\"> <!-- collaborators and configuration for this bean go here --> </bean> <!-- more bean definitions go here --> </beans>\",\"Spring IoC 容器管理一个或多个组件。这些 组件是使用你提供给容器的配置元数据（例如，以 XML <bean/> 定义的形式）创建的。\",\"<bean /> 标签 == 组件信息声明\",\"id 属性是标识单个 Bean 定义的字符串。\",\"class 属性定义 Bean 的类型并使用完全限定的类名。\",\"实例化IoC容器\",\"提供给 ApplicationContext 构造函数的位置路径是资源字符串地址，允许容器从各种外部资源（如本地文件系统、Java CLASSPATH 等）加载配置元数据。\",\"我们应该选择一个合适的容器实现类，进行IoC容器的实例化工作：\",\"//实例化ioc容器,读取外部配置文件,最终会在容器内进行ioc和di动作 ApplicationContext context = new ClassPathXmlApplicationContext(\\\"services.xml\\\", \\\"daos.xml\\\");\",\"获取Bean（组件）\",\"ApplicationContext 是一个高级工厂的接口，能够维护不同 bean 及其依赖项的注册表。通过使用方法 T getBean(String name, Class<T> requiredType) ，您可以检索 bean 的实例。\",\"允许读取 Bean 定义并访问它们，如以下示例所示：\",\"//创建ioc容器对象，指定配置文件，ioc也开始实例组件对象 ApplicationContext context = new ClassPathXmlApplicationContext(\\\"services.xml\\\", \\\"daos.xml\\\"); //获取ioc容器的组件对象 PetStoreService service = context.getBean(\\\"petStore\\\", PetStoreService.class); //使用组件对象 List<String> userList = service.getUsernameList();\"]},\"556\":{\"h\":\"4.2 基于XML配置方式组件管理\"},\"557\":{\"h\":\"4.2.1 实验一： 组件（Bean）信息声明配置（IoC）\",\"t\":[\"目标\",\"Spring IoC 容器管理一个或多个 bean。这些 Bean 是使用您提供给容器的配置元数据创建的（例如，以 XML <bean/> 定义的形式）。\",\"我们学习，如何通过定义XML配置文件，声明组件类信息，交给 Spring 的 IoC 容器进行组件管理！\",\"思路\",\"img\",\"准备项目\",\"创建maven工程（spring-ioc-xml-01）\",\"导入SpringIoC相关依赖\",\"pom.xml\",\"<dependencies> <!--spring context依赖--> <!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.6</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> </dependencies>\",\"基于无参数构造函数\",\"当通过构造函数方法创建一个 bean（组件对象） 时，所有普通类都可以由 Spring 使用并与之兼容。也就是说，正在开发的类不需要实现任何特定的接口或以特定的方式进行编码。只需指定 Bean 类信息就足够了。但是，默认情况下，我们需要一个默认（空）构造函数。\",\"准备组件类\",\"package com.atguigu.ioc; public class HappyComponent { //默认包含无参数构造函数 public void doWork() { System.out.println(\\\"HappyComponent.doWork\\\"); } }\",\"xml配置文件编写\",\"创建携带spring约束的xml配置文件\",\"编写配置文件：\",\"文件：resources/spring-bean-01.xml\",\"<!-- 实验一 [重要]创建bean --> <bean id=\\\"happyComponent\\\" class=\\\"com.atguigu.ioc.HappyComponent\\\"/>\",\"bean标签：通过配置bean标签告诉IOC容器需要创建对象的组件信息\",\"id属性：bean的唯一标识,方便后期获取Bean！\",\"class属性：组件类的全限定符！\",\"注意：要求当前组件类必须包含无参数构造函数！\",\"基于静态工厂方法实例化\",\"除了使用构造函数实例化对象，还有一类是通过工厂模式实例化对象。接下来我们讲解如何定义使用静态工厂方法创建Bean的配置 ！\",\"准备组件类\",\"public class ClientService { private static ClientService clientService = new ClientService(); private ClientService() {} public static ClientService createInstance() { return clientService; } }\",\"xml配置文件编写\",\"文件：resources/spring-bean-01.xml\",\"<bean id=\\\"clientService\\\" class=\\\"examples.ClientService\\\" factory-method=\\\"createInstance\\\"/>\",\"class属性：指定工厂类的全限定符！\",\"factory-method: 指定静态工厂方法，注意，该方法必须是static方法。\",\"基于实例工厂方法实例化\",\"接下来我们讲解下如何定义使用实例工厂方法创建Bean的配置 ！\",\"准备组建类\",\"public class DefaultServiceLocator { private static ClientServiceImpl clientService = new ClientServiceImpl(); public ClientService createClientServiceInstance() { return clientService; } }\",\"2. xml配置文件编写 文件：resources/spring-bean-01.xml ```xml <!-- 将工厂类进行ioc配置 --> <bean id=\\\"serviceLocator\\\" class=\\\"examples.DefaultServiceLocator\\\"> </bean> <!-- 根据工厂对象的实例工厂方法进行实例化组件对象 --> <bean id=\\\"clientService\\\" factory-bean=\\\"serviceLocator\\\" factory-method=\\\"createClientServiceInstance\\\"/> ``` - factory-bean属性：指定当前容器中工厂Bean 的名称。 - factory-method: 指定实例工厂方法名。注意，实例方法必须是非static的！ \",\"图解IoC配置流程\"]},\"558\":{\"h\":\"4.2.2 实验二： 组件（Bean）依赖注入配置（DI）\",\"t\":[\"目标\",\"通过配置文件,实现IoC容器中Bean之间的引用（依赖注入DI配置）。\",\"主要涉及注入场景：基于构造函数的依赖注入和基于 Setter 的依赖注入。\",\"思路\",\"基于构造函数的依赖注入（单个构造参数）\",\"介绍\",\"基于构造函数的 DI 是通过容器调用具有多个参数的构造函数来完成的，每个参数表示一个依赖项。\",\"下面的示例演示一个只能通过构造函数注入进行依赖项注入的类！\",\"准备组件类\",\"public class UserDao { } public class UserService { private UserDao userDao; public UserService(UserDao userDao) { this.userDao = userDao; } }\",\"编写配置文件 文件：resources/spring-02.xml\",\" <beans> <!-- 引用类bean声明 --> <bean id=\\\"userService\\\" class=\\\"x.y.UserService\\\"> <!-- 构造函数引用 --> <constructor-arg ref=\\\"userDao\\\"/> </bean> <!-- 被引用类bean声明 --> <bean id=\\\"userDao\\\" class=\\\"x.y.UserDao\\\"/> </beans>\",\" - constructor-arg标签：可以引用构造参数 ref引用其他bean的标识。 value = 直接属性值 String name = \\\"张三\\\" 二选一 \",\"基于构造函数的依赖注入（多构造参数解析） \",\"介绍\",\"基于构造函数的 DI 是通过容器调用具有多个参数的构造函数来完成的，每个参数表示一个依赖项。\",\"下面的示例演示通过构造函数注入多个参数，参数包含其他bean和基本数据类型！\",\"准备组件类\",\"public class UserDao { } public class UserService { private UserDao userDao; private int age; private String name; public UserService(int age , String name ,UserDao userDao) { this.userDao = userDao; this.age = age; this.name = name; } }\",\"编写配置文件\",\" <!-- 场景1: 多参数，可以按照相应构造函数的顺序注入数据 --> <beans> <bean id=\\\"userService\\\" class=\\\"x.y.UserService\\\"> <!-- value直接注入基本类型值 --> <constructor-arg value=\\\"18\\\"/> <constructor-arg value=\\\"赵伟风\\\"/> <constructor-arg ref=\\\"userDao\\\"/> </bean> <!-- 被引用类bean声明 --> <bean id=\\\"userDao\\\" class=\\\"x.y.UserDao\\\"/> </beans> <!-- 场景2: 多参数，可以按照相应构造函数的名称注入数据 --> <beans> <bean id=\\\"userService\\\" class=\\\"x.y.UserService\\\"> <!-- value直接注入基本类型值 --> <constructor-arg name=\\\"name\\\" value=\\\"赵伟风\\\"/> <constructor-arg name=\\\"userDao\\\" ref=\\\"userDao\\\"/> <constructor-arg name=\\\"age\\\" value=\\\"18\\\"/> </bean> <!-- 被引用类bean声明 --> <bean id=\\\"userDao\\\" class=\\\"x.y.UserDao\\\"/> </beans> <!-- 场景3: 多参数，可以按照相应构造函数的角标注入数据 index从0开始 构造函数(0,1,2....) --> <beans> <bean id=\\\"userService\\\" class=\\\"x.y.UserService\\\"> <!-- value直接注入基本类型值 --> <constructor-arg index=\\\"1\\\" value=\\\"赵伟风\\\"/> <constructor-arg index=\\\"2\\\" ref=\\\"userDao\\\"/> <constructor-arg index=\\\"0\\\" value=\\\"18\\\"/> </bean> <!-- 被引用类bean声明 --> <bean id=\\\"userDao\\\" class=\\\"x.y.UserDao\\\"/> </beans>\",\" - constructor-arg标签：指定构造参数和对应的值 - constructor-arg标签：name属性指定参数名、index属性指定参数角标、value属性指定普通属性值 \",\"基于Setter方法依赖注入\",\"介绍\",\"开发中，除了构造函数注入（DI）更多的使用的Setter方法进行注入！\",\"下面的示例演示一个只能使用纯 setter 注入进行依赖项注入的类。\",\"准备组件类\",\"public Class MovieFinder{ } public class SimpleMovieLister { private MovieFinder movieFinder; private String movieName; public void setMovieFinder(MovieFinder movieFinder) { this.movieFinder = movieFinder; } public void setMovieName(String movieName){ this.movieName = movieName; } // business logic that actually uses the injected MovieFinder is omitted... }\",\"编写配置文件\",\"<bean id=\\\"simpleMovieLister\\\" class=\\\"examples.SimpleMovieLister\\\"> <!-- setter方法，注入movieFinder对象的标识id name = 属性名(setter方法 去set和首字母小写的值 调用set方法的名) ref = 引用bean的id值 --> <property name=\\\"movieFinder\\\" ref=\\\"movieFinder\\\" /> <!-- setter方法，注入基本数据类型movieName name = 属性名 value= 基本类型值 --> <property name=\\\"movieName\\\" value=\\\"消失的她\\\"/> </bean> <bean id=\\\"movieFinder\\\" class=\\\"examples.MovieFinder\\\"/>\",\"property标签： 可以给setter方法对应的属性赋值\",\"property 标签： name属性代表set方法标识、ref代表引用bean的标识id、value属性代表基本属性值\",\"总结：\",\"依赖注入（DI）包含引用类型和基本数据类型，同时注入的方式也有多种！主流的注入方式为setter方法注入和构造函数注入，两种注入语法都需要掌握！\",\"需要特别注意：引用其他bean，使用ref属性。直接注入基本类型值，使用value属性。\"]},\"559\":{\"h\":\"4.2.3 实验三： IoC容器创建和使用\",\"t\":[\"介绍\",\"上面的实验只是讲解了如何在XML格式的配置文件编写IoC和DI配置！\",\"如图：\",\"想要配置文件中声明组件类信息真正的进行实例化成Bean对象和形成Bean之间的引用关系，我们需要声明IoC容器对象，读取配置文件，实例化组件和关系维护的过程都是在IoC容器中实现的！\",\"容器实例化\",\"//方式1:实例化并且指定配置文件 //参数：String...locations 传入一个或者多个配置文件 ApplicationContext context = new ClassPathXmlApplicationContext(\\\"services.xml\\\", \\\"daos.xml\\\"); //方式2:先实例化，再指定配置文件，最后刷新容器触发Bean实例化动作 [springmvc源码和contextLoadListener源码方式] ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(); //设置配置配置文件,方法参数为可变参数,可以设置一个或者多个配置 context.setConfigLocations(\\\"services.xml\\\", \\\"daos.xml\\\"); //后配置的文件,需要调用refresh方法,触发刷新配置 context.refresh();\",\"Bean对象读取\",\"//方式1: 根据id获取 //没有指定类型,返回为Object,需要类型转化! HappyComponent happyComponent = (HappyComponent) iocContainer.getBean(\\\"bean的id标识\\\"); //使用组件对象 happyComponent.doWork(); //方式2: 根据类型获取 //ioc的配置一定是实现类,但是可以根据接口类型获取值 //根据类型获取,但是要求,同类型(当前类,或者之类,或者接口的实现类)只能有一个对象交给IoC容器管理 //配置两个或者以上出现: org.springframework.beans.factory.NoUniqueBeanDefinitionException 问题 HappyComponent happyComponent = iocContainer.getBean(HappyComponent.class); happyComponent.doWork(); //方式3: 根据id和类型获取 HappyComponent happyComponent = iocContainer.getBean(\\\"bean的id标识\\\", HappyComponent.class); happyComponent.doWork(); 根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 instanceof 指定的类型』的返回结果， 只要返回的是true就可以认定为和类型匹配，能够获取到。\"]},\"560\":{\"h\":\"4.2.4 实验四： 高级特性：组件（Bean）作用域和周期方法配置\",\"t\":[\"组件周期方法配置 \",\"周期方法概念\",\"我们可以在组件类中定义方法，然后当IoC容器实例化和销毁组件对象的时候进行调用！这两个方法我们成为生命周期方法！\",\"类似于Servlet的init/destroy方法,我们可以在周期方法完成初始化和释放资源等工作。\",\"周期方法声明\",\"public class BeanOne { //周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表 public void init() { // 初始化逻辑 } } public class BeanTwo { public void cleanup() { // 释放资源逻辑 } }\",\"周期方法配置\",\"<beans> <bean id=\\\"beanOne\\\" class=\\\"examples.BeanOne\\\" init-method=\\\"init\\\" /> <bean id=\\\"beanTwo\\\" class=\\\"examples.BeanTwo\\\" destroy-method=\\\"cleanup\\\" /> </beans>\",\"组件作用域配置 \",\"Bean作用域概念\",\"<bean 标签声明Bean，只是将Bean的信息配置给SpringIoC容器！\",\"在IoC容器中，这些<bean标签对应的信息转成Spring内部 BeanDefinition 对象，BeanDefinition 对象内，包含定义的信息（id,class,属性等等）！\",\"这意味着，BeanDefinition与类概念一样，SpringIoC容器可以可以根据BeanDefinition对象反射创建多个Bean对象实例。\",\"具体创建多少个Bean的实例对象，由Bean的作用域Scope属性指定！\",\"作用域可选值\",\"取值\",\"含义\",\"创建对象的时机\",\"默认值\",\"singleton\",\"在 IOC 容器中，这个 bean 的对象始终为单实例\",\"IOC 容器初始化时\",\"是\",\"prototype\",\"这个 bean 在 IOC 容器中有多个实例\",\"获取 bean 时\",\"否\",\"如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）\",\"取值\",\"含义\",\"创建对象的时机\",\"默认值\",\"request\",\"请求范围内有效的实例\",\"每次请求\",\"否\",\"session\",\"会话范围内有效的实例\",\"每次会话\",\"否\",\"3. 作用域配置 配置scope范围 ```xml <!--bean的作用域 准备两个引用关系的组件类即可！！ --> <!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --> <!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --> <bean id=\\\"happyMachine8\\\" scope=\\\"prototype\\\" class=\\\"com.atguigu.ioc.HappyMachine\\\"> <property name=\\\"machineName\\\" value=\\\"happyMachine\\\"/> </bean> <bean id=\\\"happyComponent8\\\" scope=\\\"singleton\\\" class=\\\"com.atguigu.ioc.HappyComponent\\\"> <property name=\\\"componentName\\\" value=\\\"happyComponent\\\"/> </bean> ``` \",\"作用域测试\",\" @Test public void testExperiment08() { ApplicationContext iocContainer = new ClassPathXmlApplicationContext(\\\"配置文件名\\\"); HappyMachine bean = iocContainer.getBean(HappyMachine.class); HappyMachine bean1 = iocContainer.getBean(HappyMachine.class); //多例对比 false System.out.println(bean == bean1); HappyComponent bean2 = iocContainer.getBean(HappyComponent.class); HappyComponent bean3 = iocContainer.getBean(HappyComponent.class); //单例对比 true System.out.println(bean2 == bean3); }\"]},\"561\":{\"h\":\"4.2.5 实验五： 高级特性：FactoryBean特性和使用\",\"t\":[\"FactoryBean简介\",\"FactoryBean 接口是Spring IoC容器实例化逻辑的可插拔性点。\",\"用于配置复杂的Bean对象，可以将创建过程存储在FactoryBean 的getObject方法！\",\"FactoryBean<T> 接口提供三种方法：\",\"T getObject(): \",\"返回此工厂创建的对象的实例。该返回值会被存储到IoC容器！\",\"boolean isSingleton(): \",\"如果此 FactoryBean 返回单例，则返回 true ，否则返回 false 。此方法的默认实现返回 true （注意，lombok插件使用，可能影响效果）。\",\"Class<?> getObjectType(): 返回 getObject() 方法返回的对象类型，如果事先不知道类型，则返回 null 。 \",\"FactoryBean使用场景\",\"代理类的创建\",\"第三方框架整合\",\"复杂对象实例化等\",\"Factorybean应用\",\"准备FactoryBean实现类\",\"// 实现FactoryBean接口时需要指定泛型 // 泛型类型就是当前工厂要生产的对象的类型 public class HappyFactoryBean implements FactoryBean<HappyMachine> { private String machineName; public String getMachineName() { return machineName; } public void setMachineName(String machineName) { this.machineName = machineName; } @Override public HappyMachine getObject() throws Exception { // 方法内部模拟创建、设置一个对象的复杂过程 HappyMachine happyMachine = new HappyMachine(); happyMachine.setMachineName(this.machineName); return happyMachine; } @Override public Class<?> getObjectType() { // 返回要生产的对象的类型 return HappyMachine.class; } }\",\"配置FactoryBean实现类\",\"<!-- FactoryBean机制 --> <!-- 这个bean标签中class属性指定的是HappyFactoryBean，但是将来从这里获取的bean是HappyMachine对象 --> <bean id=\\\"happyMachine7\\\" class=\\\"com.atguigu.ioc.HappyFactoryBean\\\"> <!-- property标签仍然可以用来通过setXxx()方法给属性赋值 --> <property name=\\\"machineName\\\" value=\\\"iceCreamMachine\\\"/> </bean>\",\"测试读取FactoryBean和FactoryBean.getObject对象\",\"@Test public void testExperiment07() { ApplicationContext iocContainer = new ClassPathXmlApplicationContext(\\\"spring-bean-07.xml\\\"); //注意: 直接根据声明FactoryBean的id,获取的是getObject方法返回的对象 HappyMachine happyMachine = iocContainer.getBean(\\\"happyMachine7\\\",HappyMachine.class); System.out.println(\\\"happyMachine = \\\" + happyMachine); //如果想要获取FactoryBean对象, 直接在id前添加&符号即可! &happyMachine7 这是一种固定的约束 Object bean = iocContainer.getBean(\\\"&happyMachine7\\\"); System.out.println(\\\"bean = \\\" + bean); }\",\"FactoryBean和BeanFactory区别\",\"**FactoryBean **是 Spring 中一种特殊的 bean，可以在 getObject() 工厂方法自定义的逻辑创建Bean！是一种能够生产其他 Bean 的 Bean。FactoryBean 在容器启动时被创建，而在实际使用时则是通过调用 getObject() 方法来得到其所生产的 Bean。因此，FactoryBean 可以自定义任何所需的初始化逻辑，生产出一些定制化的 bean。\",\"一般情况下，整合第三方框架，都是通过定义FactoryBean实现！！！\",\"BeanFactory 是 Spring 框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理 bean 的生命周期、配置文件的加载和解析、bean 的装配和依赖注入等。BeanFactory 接口提供了访问 bean 的方式，例如 getBean() 方法获取指定的 bean 实例。它可以从不同的来源（例如 Mysql 数据库、XML 文件、Java 配置类等）获取 bean 定义，并将其转换为 bean 实例。同时，BeanFactory 还包含很多子类（例如，ApplicationContext 接口）提供了额外的强大功能。\",\"总的来说，FactoryBean 和 BeanFactory 的区别主要在于前者是用于创建 bean 的接口，它提供了更加灵活的初始化定制功能，而后者是用于管理 bean 的框架基础接口，提供了基本的容器功能和 bean 生命周期管理。\"]},\"562\":{\"h\":\"4.2.6 实验六： 基于XML方式整合三层架构组件\",\"t\":[\"需求分析\",\"搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用XML方式进行组件管理！\",\"数据库准备\",\"create database studb; use studb; CREATE TABLE students ( id INT PRIMARY KEY, name VARCHAR(50) NOT NULL, gender VARCHAR(10) NOT NULL, age INT, class VARCHAR(50) ); INSERT INTO students (id, name, gender, age, class) VALUES (1, '张三', '男', 20, '高中一班'), (2, '李四', '男', 19, '高中二班'), (3, '王五', '女', 18, '高中一班'), (4, '赵六', '女', 20, '高中三班'), (5, '刘七', '男', 19, '高中二班'), (6, '陈八', '女', 18, '高中一班'), (7, '杨九', '男', 20, '高中三班'), (8, '吴十', '男', 19, '高中二班');\",\"项目准备\",\"项目创建\",\"spring-xml-practice-02\",\"依赖导入\",\"<dependencies> <!--spring context依赖--> <!--当你引入SpringContext依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.6</version> </dependency> <!-- 数据库驱动和连接池--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency> <!-- spring-jdbc --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>6.0.6</version> </dependency> </dependencies>\",\"实体类准备\",\"public class Student { private Integer id; private String name; private String gender; private Integer age; private String classes; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getGender() { return gender; } public void setGender(String gender) { this.gender = gender; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public String getClasses() { return classes; } public void setClasses(String classes) { this.classes = classes; } @Override public String toString() { return \\\"Student{\\\" + \\\"id=\\\" + id + \\\", name='\\\" + name + '\\\\'' + \\\", gender='\\\" + gender + '\\\\'' + \\\", age=\\\" + age + \\\", classes='\\\" + classes + '\\\\'' + '}'; } }\",\"JdbcTemplate技术讲解\",\"为了在特定领域帮助我们简化代码，Spring 封装了很多 『Template』形式的模板类。例如：RedisTemplate、RestTemplate 等等，包括我们今天要学习的 JdbcTemplate。 jdbc.properties 提取数据库连接信息\",\"atguigu.url=jdbc:mysql://localhost:3306/studb atguigu.driver=com.mysql.cj.jdbc.Driver atguigu.username=root atguigu.password=root\",\"springioc配置文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 导入外部属性文件 --> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\" /> <!-- 配置数据源 --> <bean id=\\\"druidDataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"url\\\" value=\\\"${atguigu.url}\\\"/> <property name=\\\"driverClassName\\\" value=\\\"${atguigu.driver}\\\"/> <property name=\\\"username\\\" value=\\\"${atguigu.username}\\\"/> <property name=\\\"password\\\" value=\\\"${atguigu.password}\\\"/> </bean> <!-- 配置 JdbcTemplate --> <bean id=\\\"jdbcTemplate\\\" class=\\\"org.springframework.jdbc.core.JdbcTemplate\\\"> <!-- 装配数据源 --> <property name=\\\"dataSource\\\" ref=\\\"druidDataSource\\\"/> </bean> </beans>\",\"基于jdbcTemplate的CRUD使用\",\"public class JdbcTemplateTest { /** * 使用jdbcTemplate进行DML动作 */ @Test public void testDML(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"spring-ioc.xml\\\"); JdbcTemplate jdbcTemplate = applicationContext.getBean(JdbcTemplate.class); //TODO 执行插入一条学员数据 String sql = \\\"insert into students (id,name,gender,age,class) values (?,?,?,?,?);\\\"; /* 参数1: sql语句 参数2: 可变参数,占位符的值 */ int rows = jdbcTemplate.update(sql, 9,\\\"十一\\\", \\\"男\\\", 18, \\\"二年三班\\\"); System.out.println(\\\"rows = \\\" + rows); } /** * 查询单条实体对象 * public class Student { * private Integer id; * private String name; * private String gender; * private Integer age; * private String classes; */ @Test public void testDQLForPojo(){ String sql = \\\"select id , name , age , gender , class as classes from students where id = ? ;\\\"; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"spring-ioc.xml\\\"); JdbcTemplate jdbcTemplate = applicationContext.getBean(JdbcTemplate.class); //根据id查询 Student student = jdbcTemplate.queryForObject(sql, (rs, rowNum) -> { //自己处理结果映射 Student stu = new Student(); stu.setId(rs.getInt(\\\"id\\\")); stu.setName(rs.getString(\\\"name\\\")); stu.setAge(rs.getInt(\\\"age\\\")); stu.setGender(rs.getString(\\\"gender\\\")); stu.setClasses(rs.getString(\\\"classes\\\")); return stu; }, 2); System.out.println(\\\"student = \\\" + student); } /** * 查询实体类集合 */ @Test public void testDQLForListPojo(){ String sql = \\\"select id , name , age , gender , class as classes from students ;\\\"; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"spring-ioc.xml\\\"); JdbcTemplate jdbcTemplate = applicationContext.getBean(JdbcTemplate.class); /* query可以返回集合! BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可 */ List<Student> studentList = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Student.class)); System.out.println(\\\"studentList = \\\" + studentList); } }\",\"三层架构搭建和实现\",\"持久层\",\"//接口 public interface StudentDao { /** * 查询全部学生数据 * @return */ List<Student> queryAll(); } //实现类 public class StudentDaoImpl implements StudentDao { private JdbcTemplate jdbcTemplate; public void setJdbcTemplate(JdbcTemplate jdbcTemplate) { this.jdbcTemplate = jdbcTemplate; } /** * 查询全部学生数据 * @return */ @Override public List<Student> queryAll() { String sql = \\\"select id , name , age , gender , class as classes from students ;\\\"; /* query可以返回集合! BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可 */ List<Student> studentList = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Student.class)); return studentList; } }\",\"业务层\",\"//接口 public interface StudentService { /** * 查询全部学员业务 * @return */ List<Student> findAll(); } //实现类 public class StudentServiceImpl implements StudentService { private StudentDao studentDao; public void setStudentDao(StudentDao studentDao) { this.studentDao = studentDao; } /** * 查询全部学员业务 * @return */ @Override public List<Student> findAll() { List<Student> studentList = studentDao.queryAll(); return studentList; } }\",\"表述层\",\"public class StudentController { private StudentService studentService; public void setStudentService(StudentService studentService) { this.studentService = studentService; } public void findAll(){ List<Student> studentList = studentService.findAll(); System.out.println(\\\"studentList = \\\" + studentList); } }\",\"三层架构IoC配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 导入外部属性文件 --> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\" /> <!-- 配置数据源 --> <bean id=\\\"druidDataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"url\\\" value=\\\"${atguigu.url}\\\"/> <property name=\\\"driverClassName\\\" value=\\\"${atguigu.driver}\\\"/> <property name=\\\"username\\\" value=\\\"${atguigu.username}\\\"/> <property name=\\\"password\\\" value=\\\"${atguigu.password}\\\"/> </bean> <!-- 配置 JdbcTemplate --> <bean id=\\\"jdbcTemplate\\\" class=\\\"org.springframework.jdbc.core.JdbcTemplate\\\"> <!-- 装配数据源 --> <property name=\\\"dataSource\\\" ref=\\\"druidDataSource\\\"/> </bean> <bean id=\\\"studentDao\\\" class=\\\"com.atguigu.dao.impl.StudentDaoImpl\\\"> <property name=\\\"jdbcTemplate\\\" ref=\\\"jdbcTemplate\\\" /> </bean> <bean id=\\\"studentService\\\" class=\\\"com.atguigu.service.impl.StudentServiceImpl\\\"> <property name=\\\"studentDao\\\" ref=\\\"studentDao\\\" /> </bean> <bean id=\\\"studentController\\\" class=\\\"com.atguigu.controller.StudentController\\\"> <property name=\\\"studentService\\\" ref=\\\"studentService\\\" /> </bean> </beans>\",\"运行测试\",\"public class ControllerTest { @Test public void testRun(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"spring-ioc.xml\\\"); StudentController studentController = applicationContext.getBean(StudentController.class); studentController.findAll(); } }\",\"XMLIoC方式问题总结\",\"注入的属性必须添加setter方法、代码结构乱！\",\"配置文件和Java代码分离、编写不是很方便！\",\"XML配置文件解析效率低\"]},\"563\":{\"h\":\"4.3 基于 注解 方式管理 Bean\"},\"564\":{\"h\":\"4.3.1 实验一： Bean注解标记和扫描 (IoC)\",\"t\":[\"注解理解\",\"和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。\",\"本质上：所有一切的操作都是 Java 代码来完成的，XML 和注解只是告诉框架中的 Java 代码如何执行。\",\"举例：元旦联欢会要布置教室，蓝色的地方贴上元旦快乐四个字，红色的地方贴上拉花，黄色的地方贴上气球。\",\"img\",\"班长做了所有标记，同学们来完成具体工作。墙上的标记相当于我们在代码中使用的注解，后面同学们做的工作，相当于框架的具体操作。\",\"扫描理解\",\"Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注解进行后续操作。\",\"准备Spring项目和组件\",\"准备项目pom.xml\",\"<dependencies> <!--spring context依赖--> <!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.6</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> </dependencies>\",\"准备组件类\",\"普通组件\",\"/** * projectName: com.atguigu.components * * description: 普通的组件 */ public class CommonComponent { }\",\"Controller组件\",\"/** * projectName: com.atguigu.components * * description: controller类型组件 */ public class XxxController { }\",\"Service组件\",\"/** * projectName: com.atguigu.components * * description: service类型组件 */ public class XxxService { }\",\"Dao组件\",\"/** * projectName: com.atguigu.components * * description: dao类型组件 */ public class XxxDao { }\",\"组件添加标记注解\",\"组件标记注解和区别\",\"Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。\",\"注解\",\"说明\",\"@Component\",\"该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。\",\"@Repository\",\"该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"@Service\",\"该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"@Controller\",\"该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字\",\"对于Spring使用IOC容器管理这些组件来说没有区别，也就是语法层面没有区别。所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。 注意：虽然它们本质上一样，但是为了代码的可读性、程序结构严谨！我们肯定不能随便胡乱标记。\",\"使用注解标记\",\"普通组件\",\" /** * projectName: com.atguigu.components * * description: 普通的组件 */ @Component public class CommonComponent { }\",\" Controller组件 ```java /** * projectName: com.atguigu.components * * description: controller类型组件 */ @Controller public class XxxController { } \",\" Service组件 ```java /** * projectName: com.atguigu.components * * description: service类型组件 */ @Service public class XxxService { }\",\" Dao组件 ```java /** * projectName: com.atguigu.components * * description: dao类型组件 */ @Repository public class XxxDao { } ``` \",\"配置文件确定扫描范围\",\"情况1：基本扫描配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 配置自动扫描的包 --> <!-- 1.包要精准,提高性能! 2.会扫描指定的包和子包内容 3.多个包可以使用,分割 例如: com.atguigu.controller,com.atguigu.service等 --> <context:component-scan base-package=\\\"com.atguigu.components\\\"/> </beans>\",\"情况2：指定排除组件\",\"<!-- 情况三：指定不扫描的组件 --> <context:component-scan base-package=\\\"com.atguigu.components\\\"> <!-- context:exclude-filter标签：指定排除规则 --> <!-- type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 --> <!-- expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 --> <context:exclude-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Controller\\\"/> </context:component-scan>\",\"情况3：指定扫描组件\",\"<!-- 情况四：仅扫描指定的组件 --> <!-- 仅扫描 = 关闭默认规则 + 追加规则 --> <!-- use-default-filters属性：取值false表示关闭默认扫描规则 --> <context:component-scan base-package=\\\"com.atguigu.ioc.components\\\" use-default-filters=\\\"false\\\"> <!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --> <context:include-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Controller\\\"/> </context:component-scan>\",\"组件BeanName问题\",\"在我们使用 XML 方式管理 bean 的时候，每个 bean 都有一个唯一标识——id 属性的值，便于在其他地方引用。现在使用注解后，每个组件仍然应该有一个唯一标识。\",\"默认情况：\",\"类名首字母小写就是 bean 的 id。例如：SoldierController 类对应的 bean 的 id 就是 soldierController。\",\"使用value属性指定：\",\"@Controller(value = \\\"tianDog\\\") public class SoldierController { }\",\"当注解中只设置一个属性时，value属性的属性名可以省略：\",\"@Service(\\\"smallDog\\\") public class SoldierService { }\",\"总结\",\"注解方式IoC只是标记哪些类要被Spring管理\",\"最终，我们还需要XML方式或者后面讲解Java配置类方式指定注解生效的包\",\"现阶段配置方式为 注解 （标记）+ XML（扫描）\"]},\"565\":{\"h\":\"4.3.2 实验二： 组件（Bean）作用域和周期方法注解\",\"t\":[\"组件周期方法配置 \",\"周期方法概念\",\"我们可以在组件类中定义方法，然后当IoC容器实例化和销毁组件对象的时候进行调用！这两个方法我们成为生命周期方法！\",\"类似于Servlet的init/destroy方法,我们可以在周期方法完成初始化和释放资源等工作。\",\"周期方法声明\",\"public class BeanOne { //周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表 @PostConstruct //注解制指定初始化方法 public void init() { // 初始化逻辑 } } public class BeanTwo { @PreDestroy //注解指定销毁方法 public void cleanup() { // 释放资源逻辑 } }\",\"组件作用域配置 \",\"Bean作用域概念\",\"<bean 标签声明Bean，只是将Bean的信息配置给SpringIoC容器！\",\"在IoC容器中，这些<bean标签对应的信息转成Spring内部 BeanDefinition 对象，BeanDefinition 对象内，包含定义的信息（id,class,属性等等）！\",\"这意味着，BeanDefinition与类概念一样，SpringIoC容器可以可以根据BeanDefinition对象反射创建多个Bean对象实例。\",\"具体创建多少个Bean的实例对象，由Bean的作用域Scope属性指定！\",\"作用域可选值\",\"取值\",\"含义\",\"创建对象的时机\",\"默认值\",\"singleton\",\"在 IOC 容器中，这个 bean 的对象始终为单实例\",\"IOC 容器初始化时\",\"是\",\"prototype\",\"这个 bean 在 IOC 容器中有多个实例\",\"获取 bean 时\",\"否\",\"如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：\",\"取值\",\"含义\",\"创建对象的时机\",\"默认值\",\"-------\",\"----------\",\"-------\",\"---\",\"request\",\"请求范围内有效的实例\",\"每次请求\",\"否\",\"session\",\"会话范围内有效的实例\",\"每次会话\",\"否\",\"作用域配置\",\"@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON) //单例,默认值 @Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE) //多例 二选一 public class BeanOne { //周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表 @PostConstruct //注解制指定初始化方法 public void init() { // 初始化逻辑 } }\"]},\"566\":{\"h\":\"4.3.3 实验三： Bean属性赋值：引用类型自动装配 (DI)\",\"t\":[\"设定场景\",\"SoldierController 需要 SoldierService\",\"SoldierService 需要 SoldierDao 同时在各个组件中声明要调用的方法。\",\"SoldierController中声明方法\",\"import org.springframework.stereotype.Controller; @Controller(value = \\\"tianDog\\\") public class SoldierController { private SoldierService soldierService; public void getMessage() { soldierService.getMessage(); } }\",\"SoldierService中声明方法\",\"@Service(\\\"smallDog\\\") public class SoldierService { private SoldierDao soldierDao; public void getMessage() { soldierDao.getMessage(); } }\",\"SoldierDao中声明方法\",\"@Repository public class SoldierDao { public void getMessage() { System.out.print(\\\"I am a soldier\\\"); } }\",\"自动装配实现\",\"前提\",\"参与自动装配的组件（需要装配、被装配）全部都必须在IoC容器中。\",\"注意：不区分IoC的方式！XML和注解都可以！\",\"@Autowired注解\",\"在成员变量上直接标记@Autowired注解即可，不需要提供setXxx()方法。以后我们在项目中的正式用法就是这样。\",\"给Controller装配Service\",\"@Controller(value = \\\"tianDog\\\") public class SoldierController { @Autowired private SoldierService soldierService; public void getMessage() { soldierService.getMessage(); } }\",\"给Service装配Dao\",\"@Service(\\\"smallDog\\\") public class SoldierService { @Autowired private SoldierDao soldierDao; public void getMessage() { soldierDao.getMessage(); } }\",\"@Autowired注解细节\",\"标记位置\",\"成员变量\",\"这是最主要的使用方式！\",\"与xml进行bean ref引用不同，他不需要有set方法！\",\"@Service(\\\"smallDog\\\") public class SoldierService { @Autowired private SoldierDao soldierDao; public void getMessage() { soldierDao.getMessage(); } }\",\"构造器\",\"@Controller(value = \\\"tianDog\\\") public class SoldierController { private SoldierService soldierService; @Autowired public SoldierController(SoldierService soldierService) { this.soldierService = soldierService; } ……\",\"setXxx()方法\",\"@Controller(value = \\\"tianDog\\\") public class SoldierController { private SoldierService soldierService; @Autowired public void setSoldierService(SoldierService soldierService) { this.soldierService = soldierService; } ……\",\"工作流程\",\"img\",\"首先根据所需要的组件类型到 IOC 容器中查找 \",\"能够找到唯一的 bean：直接执行装配\",\"如果完全找不到匹配这个类型的 bean：装配失败\",\"和所需类型匹配的 bean 不止一个 \",\"没有 @Qualifier 注解：根据 @Autowired 标记位置成员变量的变量名作为 bean 的 id 进行匹配 \",\"能够找到：执行装配\",\"找不到：装配失败\",\"使用 @Qualifier 注解：根据 @Qualifier 注解中指定的名称作为 bean 的id进行匹配 \",\"能够找到：执行装配\",\"找不到：装配失败\",\"@Controller(value = \\\"tianDog\\\") public class SoldierController { @Autowired @Qualifier(value = \\\"maomiService222\\\") // 根据面向接口编程思想，使用接口类型引入Service组件 private ISoldierService soldierService;\",\"佛系装配\",\"给 @Autowired 注解设置 required = false 属性表示：能装就装，装不上就不装。但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性\",\"@Controller(value = \\\"tianDog\\\") public class SoldierController { // 给@Autowired注解设置required = false属性表示：能装就装，装不上就不装 @Autowired(required = false) private ISoldierService soldierService;\",\"扩展JSR-250注解@Resource\",\"理解JSR系列注解\",\"JSR（Java Specification Requests）是Java平台标准化进程中的一种技术规范，而JSR注解是其中一部分重要的内容。按照JSR的分类以及注解语义的不同，可以将JSR注解分为不同的系列，主要有以下几个系列：\",\"JSR-175: 这个JSR是Java SE 5引入的，是Java注解最早的规范化版本，Java SE 5后的版本中都包含该JSR中定义的注解。主要包括以下几种标准注解：\",\"@Deprecated: 标识一个程序元素（如类、方法或字段）已过时，并且在将来的版本中可能会被删除。\",\"@Override: 标识一个方法重写了父类中的方法。\",\"@SuppressWarnings: 抑制编译时产生的警告消息。\",\"@SafeVarargs: 标识一个有安全性警告的可变参数方法。\",\"@FunctionalInterface: 标识一个接口只有一个抽象方法，可以作为lambda表达式的目标。\",\"JSR-250: 这个JSR主要用于在Java EE 5中定义一些支持注解。该JSR主要定义了一些用于进行对象管理的注解，包括：\",\"@Resource: 标识一个需要注入的资源，是实现Java EE组件之间依赖关系的一种方式。\",\"@PostConstruct: 标识一个方法作为初始化方法。\",\"@PreDestroy: 标识一个方法作为销毁方法。\",\"@Resource.AuthenticationType: 标识注入的资源的身份验证类型。\",\"@Resource.AuthenticationType: 标识注入的资源的默认名称。\",\"JSR-269: 这个JSR主要是Java SE 6中引入的一种支持编译时元数据处理的框架，即使用注解来处理Java源文件。该JSR定义了一些可以用注解标记的注解处理器，用于生成一些元数据，常用的注解有：\",\"@SupportedAnnotationTypes: 标识注解处理器所处理的注解类型。\",\"@SupportedSourceVersion: 标识注解处理器支持的Java源码版本。\",\"JSR-330: 该JSR主要为Java应用程序定义了一个依赖注入的标准，即Java依赖注入标准（javax.inject）。在此规范中定义了多种注解，包括：\",\"@Named: 标识一个被依赖注入的组件的名称。\",\"@Inject: 标识一个需要被注入的依赖组件。\",\"@Singleton: 标识一个组件的生命周期只有一个唯一的实例。\",\"JSR-250: 这个JSR主要是Java EE 5中定义一些支持注解。该JSR包含了一些支持注解，可以用于对Java EE组件进行管理，包括：\",\"@RolesAllowed: 标识授权角色\",\"@PermitAll: 标识一个活动无需进行身份验证。\",\"@DenyAll: 标识不提供针对该方法的访问控制。\",\"@DeclareRoles: 声明安全角色。 但是你要理解JSR是Java提供的技术规范，也就是说，他只是规定了注解和注解的含义，JSR并不是直接提供特定的实现，而是提供标准和指导方针，由第三方框架（Spring）和库来实现和提供对应的功能。\",\"JSR-250 @Resource注解\",\"@Resource注解也可以完成属性注入。那它和@Autowired注解有什么区别？\",\"@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)\",\"@Autowired注解是Spring框架自己的。\",\"@Resource注解默认根据Bean名称装配，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型装配。\",\"@Autowired注解默认根据类型装配，如果想根据名称装配，需要配合@Qualifier注解一起用。\",\"@Resource注解用在属性上、setter方法上。\",\"@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。 @Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【高于JDK11或低于JDK8需要引入以下依赖】\",\"<dependency> <groupId>jakarta.annotation</groupId> <artifactId>jakarta.annotation-api</artifactId> <version>2.1.1</version> </dependency>\",\"@Resource使用\",\"@Controller public class XxxController { /** * 1. 如果没有指定name,先根据属性名查找IoC中组件xxxService * 2. 如果没有指定name,并且属性名没有对应的组件,会根据属性类型查找 * 3. 可以指定name名称查找! @Resource(name='test') == @Autowired + @Qualifier(value='test') */ @Resource private XxxService xxxService; //@Resource(name = \\\"指定beanName\\\") //private XxxService xxxService; public void show(){ System.out.println(\\\"XxxController.show\\\"); xxxService.show(); } }\"]},\"567\":{\"h\":\"4.3.4 实验四： Bean属性赋值：基本类型属性赋值 (DI)\",\"t\":[\"@Value 通常用于注入外部化属性\",\"声明外部配置\",\"application.properties\",\"catalog.name=MovieCatalog\",\"xml引入外部配置\",\"<!-- 引入外部配置文件--> <context:property-placeholder location=\\\"application.properties\\\" />\",\"@Value注解读取配置\",\"package com.atguigu.components; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Component; /** * projectName: com.atguigu.components * * description: 普通的组件 */ @Component public class CommonComponent { /** * 情况1: ${key} 取外部配置key对应的值! * 情况2: ${key:defaultValue} 没有key,可以给与默认值 */ @Value(\\\"${catalog:hahaha}\\\") private String name; public String getName() { return name; } public void setName(String name) { this.name = name; } }\",\"catalog\"]},\"568\":{\"h\":\"4.3.5 实验五： 基于注解+XML方式整合三层架构组件\",\"t\":[\"需求分析\",\"搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用XML+注解方式进行组件管理！\",\"数据库准备\",\"create database studb; use studb; CREATE TABLE students ( id INT PRIMARY KEY, name VARCHAR(50) NOT NULL, gender VARCHAR(10) NOT NULL, age INT, class VARCHAR(50) ); INSERT INTO students (id, name, gender, age, class) VALUES (1, '张三', '男', 20, '高中一班'), (2, '李四', '男', 19, '高中二班'), (3, '王五', '女', 18, '高中一班'), (4, '赵六', '女', 20, '高中三班'), (5, '刘七', '男', 19, '高中二班'), (6, '陈八', '女', 18, '高中一班'), (7, '杨九', '男', 20, '高中三班'), (8, '吴十', '男', 19, '高中二班');\",\"项目准备\",\"项目创建\",\"spring-annotation-practice-04\",\"依赖导入\",\"<dependencies> <!--spring context依赖--> <!--当你引入SpringContext依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.6</version> </dependency> <!-- 数据库驱动和连接池--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency> <dependency> <groupId>jakarta.annotation</groupId> <artifactId>jakarta.annotation-api</artifactId> <version>2.1.1</version> </dependency> <!-- spring-jdbc --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>6.0.6</version> </dependency> </dependencies>\",\"实体类准备\",\"public class Student { private Integer id; private String name; private String gender; private Integer age; private String classes; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getGender() { return gender; } public void setGender(String gender) { this.gender = gender; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public String getClasses() { return classes; } public void setClasses(String classes) { this.classes = classes; } @Override public String toString() { return \\\"Student{\\\" + \\\"id=\\\" + id + \\\", name='\\\" + name + '\\\\'' + \\\", gender='\\\" + gender + '\\\\'' + \\\", age=\\\" + age + \\\", classes='\\\" + classes + '\\\\'' + '}'; } }\",\"三层架构搭建和实现\",\"持久层\",\"//接口 public interface StudentDao { /** * 查询全部学生数据 * @return */ List<Student> queryAll(); } //实现类 @Repository public class StudentDaoImpl implements StudentDao { @Autowired private JdbcTemplate jdbcTemplate; /** * 查询全部学生数据 * @return */ @Override public List<Student> queryAll() { String sql = \\\"select id , name , age , gender , class as classes from students ;\\\"; /* query可以返回集合! BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可 */ List<Student> studentList = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Student.class)); return studentList; } }\",\"业务层\",\"//接口 public interface StudentService { /** * 查询全部学员业务 * @return */ List<Student> findAll(); } //实现类 @Service public class StudentServiceImpl implements StudentService { @Autowired private StudentDao studentDao; /** * 查询全部学员业务 * @return */ @Override public List<Student> findAll() { List<Student> studentList = studentDao.queryAll(); return studentList; } }\",\"表述层\",\"@Controller public class StudentController { @Autowired private StudentService studentService; public void findAll(){ List<Student> studentList = studentService.findAll(); System.out.println(\\\"studentList = \\\" + studentList); } }\",\"三层架构IoC配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 导入外部属性文件 --> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\" /> <!-- 配置数据源 --> <bean id=\\\"druidDataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"url\\\" value=\\\"${atguigu.url}\\\"/> <property name=\\\"driverClassName\\\" value=\\\"${atguigu.driver}\\\"/> <property name=\\\"username\\\" value=\\\"${atguigu.username}\\\"/> <property name=\\\"password\\\" value=\\\"${atguigu.password}\\\"/> </bean> <bean class=\\\"org.springframework.jdbc.core.JdbcTemplate\\\"> <property name=\\\"dataSource\\\" ref=\\\"druidDataSource\\\" /> </bean> <!-- 扫描Ioc/DI注解 --> <context:component-scan base-package=\\\"com.atguigu.dao,com.atguigu.service,com.atguigu.controller\\\" /> </beans>\",\"运行测试\",\"public class ControllerTest { @Test public void testRun(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"spring-ioc.xml\\\"); StudentController studentController = applicationContext.getBean(StudentController.class); studentController.findAll(); } }\",\"注解+XML IoC方式问题总结\",\"自定义类可以使用注解方式，但是第三方依赖的类依然使用XML方式！\",\"XML格式解析效率低！\"]},\"569\":{\"h\":\"4.4 基于 配置类 方式管理 Bean\"},\"570\":{\"h\":\"4.4.1 完全注解开发理解\",\"t\":[\"Spring 完全注解配置（Fully Annotation-based Configuration）是指通过 Java配置类 代码来配置 Spring 应用程序，使用注解来替代原本在 XML 配置文件中的配置。相对于 XML 配置，完全注解配置具有更强的类型安全性和更好的可读性。\",\"两种方式思维转化：\"]},\"571\":{\"h\":\"4.4.2 实验一：配置类和扫描注解\",\"t\":[\"xml+注解方式\",\"配置文件application.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 配置自动扫描的包 --> <!-- 1.包要精准,提高性能! 2.会扫描指定的包和子包内容 3.多个包可以使用,分割 例如: com.atguigu.controller,com.atguigu.service等 --> <context:component-scan base-package=\\\"com.atguigu.components\\\"/> <!-- 引入外部配置文件--> <context:property-placeholder location=\\\"application.properties\\\" /> </beans>\",\"测试创建IoC容器\",\" // xml方式配置文件使用ClassPathXmlApplicationContext容器读取 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"application.xml\\\");\",\"配置类+注解方式（完全注解方式）\",\"配置类\",\"使用 @Configuration 注解将一个普通的类标记为 Spring 的配置类。\",\"import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; //标注当前类是配置类，替代application.xml @Configuration //使用注解读取外部配置，替代 <context:property-placeholder标签 @PropertySource(\\\"classpath:application.properties\\\") //使用@ComponentScan注解,可以配置扫描包,替代<context:component-scan标签 @ComponentScan(basePackages = {\\\"com.atguigu.components\\\"}) public class MyConfiguration { }\",\"测试创建IoC容器\",\"// AnnotationConfigApplicationContext 根据配置类创建 IOC 容器对象 ApplicationContext iocContainerAnnotation = new AnnotationConfigApplicationContext(MyConfiguration.class);\",\"可以使用 no-arg 构造函数实例化 AnnotationConfigApplicationContext ，然后使用 register() 方法对其进行配置。此方法在以编程方式生成 AnnotationConfigApplicationContext 时特别有用。以下示例演示如何执行此操作：\",\"// AnnotationConfigApplicationContext-IOC容器对象 ApplicationContext iocContainerAnnotation = new AnnotationConfigApplicationContext(); //外部设置配置类 iocContainerAnnotation.register(MyConfiguration.class); //刷新后方可生效！！ iocContainerAnnotation.refresh();\",\"总结：\",\"@Configuration指定一个类为配置类，可以添加配置注解，替代配置xml文件\",\"@ComponentScan(basePackages = {\\\"包\\\",\\\"包\\\"}) 替代<context:component-scan标签实现注解扫描\",\"@PropertySource(\\\"classpath:配置文件地址\\\") 替代 <context:property-placeholder标签\",\"配合IoC/DI注解，可以进行完整注解开发！\"]},\"572\":{\"h\":\"4.4.3 实验二：@Bean定义组件\",\"t\":[\"场景需求：将Druid连接池对象存储到IoC容器\",\"需求分析：第三方jar包的类，添加到ioc容器，无法使用@Component等相关注解！因为源码jar包内容为只读模式！\",\"xml方式实现：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 引入外部属性文件 --> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\"/> <!-- 实验六 [重要]给bean的属性赋值：引入外部属性文件 --> <bean id=\\\"druidDataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"url\\\" value=\\\"${jdbc.url}\\\"/> <property name=\\\"driverClassName\\\" value=\\\"${jdbc.driver}\\\"/> <property name=\\\"username\\\" value=\\\"${jdbc.user}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\"/> </bean> </beans>\",\"配置类方式实现：\",\"@Bean 注释用于指示方法实例化、配置和初始化要由 Spring IoC 容器管理的新对象。对于那些熟悉 Spring 的 <beans/> XML 配置的人来说， @Bean 注释与 <bean/> 元素起着相同的作用。\",\"//标注当前类是配置类，替代application.xml @Configuration //引入jdbc.properties文件 @PropertySource({\\\"classpath:application.properties\\\",\\\"classpath:jdbc.properties\\\"}) @ComponentScan(basePackages = {\\\"com.atguigu.components\\\"}) public class MyConfiguration { //如果第三方类进行IoC管理,无法直接使用@Component相关注解 //解决方案: xml方式可以使用<bean标签 //解决方案: 配置类方式,可以使用方法返回值+@Bean注解 @Bean public DataSource createDataSource(@Value(\\\"${jdbc.user}\\\") String username, @Value(\\\"${jdbc.password}\\\")String password, @Value(\\\"${jdbc.url}\\\")String url, @Value(\\\"${jdbc.driver}\\\")String driverClassName){ //使用Java代码实例化 DruidDataSource dataSource = new DruidDataSource(); dataSource.setUsername(username); dataSource.setPassword(password); dataSource.setUrl(url); dataSource.setDriverClassName(driverClassName); //返回结果即可 return dataSource; } }\"]},\"573\":{\"h\":\"4.4.4 实验三：高级特性：@Bean注解细节\",\"t\":[\"@Bean生成BeanName问题\",\"@Bean注解源码：\",\"public @interface Bean { //前两个注解可以指定Bean的标识 @AliasFor(\\\"name\\\") String[] value() default {}; @AliasFor(\\\"value\\\") String[] name() default {}; //autowireCandidate 属性来指示该 Bean 是否候选用于自动装配。 //autowireCandidate 属性默认值为 true，表示该 Bean 是一个默认的装配目标， //可被候选用于自动装配。如果将 autowireCandidate 属性设置为 false，则说明该 Bean 不是默认的装配目标，不会被候选用于自动装配。 boolean autowireCandidate() default true; //指定初始化方法 String initMethod() default \\\"\\\"; //指定销毁方法 String destroyMethod() default \\\"(inferred)\\\"; }\",\"指定@Bean的名称：\",\"@Configuration public class AppConfig { @Bean(\\\"myThing\\\") //指定名称 public Thing thing() { return new Thing(); } }\",\"@Bean 注释注释方法。使用此方法在指定为方法返回值的类型的 ApplicationContext 中注册 Bean 定义。缺省情况下，Bean 名称与方法名称相同。下面的示例演示 @Bean 方法声明：\",\"@Configuration public class AppConfig { @Bean public TransferServiceImpl transferService() { return new TransferServiceImpl(); } }\",\"前面的配置完全等同于下面的Spring XML：\",\"<beans> <bean id=\\\"transferService\\\" class=\\\"com.acme.TransferServiceImpl\\\"/> </beans>\",\"@Bean 初始化和销毁方法指定\",\"@Bean 注解支持指定任意初始化和销毁回调方法，非常类似于 Spring XML 在 bean 元素上的 init-method 和 destroy-method 属性，如以下示例所示：\",\"public class BeanOne { public void init() { // initialization logic } } public class BeanTwo { public void cleanup() { // destruction logic } } @Configuration public class AppConfig { @Bean(initMethod = \\\"init\\\") public BeanOne beanOne() { return new BeanOne(); } @Bean(destroyMethod = \\\"cleanup\\\") public BeanTwo beanTwo() { return new BeanTwo(); } }\",\"@Bean Scope作用域\",\"可以指定使用 @Bean 注释定义的 bean 应具有特定范围。您可以使用在 Bean 作用域部分中指定的任何标准作用域。\",\"默认作用域为 singleton ，但您可以使用 @Scope 注释覆盖此范围，如以下示例所示：\",\"@Configuration public class MyConfiguration { @Bean @Scope(\\\"prototype\\\") public Encryptor encryptor() { // ... } }\",\"@Bean方法之间依赖\",\"准备组件\",\"public class HappyMachine { private String machineName; public String getMachineName() { return machineName; } public void setMachineName(String machineName) { this.machineName = machineName; } }\",\"public class HappyComponent { //引用新组件 private HappyMachine happyMachine; public HappyMachine getHappyMachine() { return happyMachine; } public void setHappyMachine(HappyMachine happyMachine) { this.happyMachine = happyMachine; } public void doWork() { System.out.println(\\\"HappyComponent.doWork\\\"); } }\",\"Java配置类实现：\",\"方案1：\",\"直接调用方法返回 Bean 实例：在一个 @Bean 方法中直接调用其他 @Bean 方法来获取 Bean 实例，虽然是方法调用，也是通过IoC容器获取对应的Bean，例如：\",\"@Configuration public class JavaConfig { @Bean public HappyMachine happyMachine(){ return new HappyMachine(); } @Bean public HappyComponent happyComponent(){ HappyComponent happyComponent = new HappyComponent(); //直接调用方法即可! happyComponent.setHappyMachine(happyMachine()); return happyComponent; } }\",\"方案2：\",\"参数引用法：通过方法参数传递 Bean 实例的引用来解决 Bean 实例之间的依赖关系，例如：\",\"package com.atguigu.config; import com.atguigu.ioc.HappyComponent; import com.atguigu.ioc.HappyMachine; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; /** * projectName: com.atguigu.config * description: 配置HappyComponent和HappyMachine关系 */ @Configuration public class JavaConfig { @Bean public HappyMachine happyMachine(){ return new HappyMachine(); } /** * 可以直接在形参列表接收IoC容器中的Bean! * 情况1: 直接指定类型即可 * 情况2: 如果有多个bean,(HappyMachine 名称 ) 形参名称等于要指定的bean名称! * 例如: * @Bean * public Foo foo1(){ * return new Foo(); * } * @Bean * public Foo foo2(){ * return new Foo() * } * @Bean * public Component component(Foo foo1 / foo2 通过此处指定引入的bean) */ @Bean public HappyComponent happyComponent(HappyMachine happyMachine){ HappyComponent happyComponent = new HappyComponent(); //赋值 happyComponent.setHappyMachine(happyMachine); return happyComponent; } }\"]},\"574\":{\"h\":\"4.4.5 实验四：高级特性：@Import扩展\",\"t\":[\"@Import 注释允许从另一个配置类加载 @Bean 定义，如以下示例所示：\",\"@Configuration public class ConfigA { @Bean public A a() { return new A(); } } @Configuration @Import(ConfigA.class) public class ConfigB { @Bean public B b() { return new B(); } }\",\"现在，在实例化上下文时不需要同时指定 ConfigA.class 和 ConfigB.class ，只需显式提供 ConfigB ，如以下示例所示：\",\"public static void main(String[] args) { ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigB.class); // now both beans A and B will be available... A a = ctx.getBean(A.class); B b = ctx.getBean(B.class); }\",\"此方法简化了容器实例化，因为只需要处理一个类，而不是要求您在构造期间记住可能大量的 @Configuration 类。\"]},\"575\":{\"h\":\"4.4.6 实验五：基于注解+配置类方式整合三层架构组件\",\"t\":[\"需求分析\",\"搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用注解+配置类方式进行组件管理！\",\"数据库准备\",\"create database studb; use studb; CREATE TABLE students ( id INT PRIMARY KEY, name VARCHAR(50) NOT NULL, gender VARCHAR(10) NOT NULL, age INT, class VARCHAR(50) ); INSERT INTO students (id, name, gender, age, class) VALUES (1, '张三', '男', 20, '高中一班'), (2, '李四', '男', 19, '高中二班'), (3, '王五', '女', 18, '高中一班'), (4, '赵六', '女', 20, '高中三班'), (5, '刘七', '男', 19, '高中二班'), (6, '陈八', '女', 18, '高中一班'), (7, '杨九', '男', 20, '高中三班'), (8, '吴十', '男', 19, '高中二班');\",\"项目准备\",\"项目创建\",\"spring-java-practice-06\",\"依赖导入\",\"<dependencies> <!--spring context依赖--> <!--当你引入SpringContext依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.6</version> </dependency> <!-- 数据库驱动和连接池--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency> <dependency> <groupId>jakarta.annotation</groupId> <artifactId>jakarta.annotation-api</artifactId> <version>2.1.1</version> </dependency> <!-- spring-jdbc --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>6.0.6</version> </dependency> </dependencies>\",\"实体类准备\",\"public class Student { private Integer id; private String name; private String gender; private Integer age; private String classes; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getGender() { return gender; } public void setGender(String gender) { this.gender = gender; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public String getClasses() { return classes; } public void setClasses(String classes) { this.classes = classes; } @Override public String toString() { return \\\"Student{\\\" + \\\"id=\\\" + id + \\\", name='\\\" + name + '\\\\'' + \\\", gender='\\\" + gender + '\\\\'' + \\\", age=\\\" + age + \\\", classes='\\\" + classes + '\\\\'' + '}'; } }\",\"三层架构搭建和实现\",\"持久层\",\"//接口 public interface StudentDao { /** * 查询全部学生数据 * @return */ List<Student> queryAll(); } //实现类 @Repository public class StudentDaoImpl implements StudentDao { @Autowired private JdbcTemplate jdbcTemplate; /** * 查询全部学生数据 * @return */ @Override public List<Student> queryAll() { String sql = \\\"select id , name , age , gender , class as classes from students ;\\\"; /* query可以返回集合! BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可 */ List<Student> studentList = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Student.class)); return studentList; } }\",\"业务层\",\"//接口 public interface StudentService { /** * 查询全部学员业务 * @return */ List<Student> findAll(); } //实现类 @Service public class StudentServiceImpl implements StudentService { @Autowired private StudentDao studentDao; /** * 查询全部学员业务 * @return */ @Override public List<Student> findAll() { List<Student> studentList = studentDao.queryAll(); return studentList; } }\",\"表述层\",\"@Controller public class StudentController { @Autowired private StudentService studentService; public void findAll(){ List<Student> studentList = studentService.findAll(); System.out.println(\\\"studentList = \\\" + studentList); } }\",\"三层架构IoC配置类\",\"@Configuration @ComponentScan(basePackages = \\\"com.atguigu\\\") @PropertySource(\\\"classpath:jdbc.properties\\\") public class JavaConfig { @Value(\\\"${atguigu.url}\\\") private String url; @Value(\\\"${atguigu.driver}\\\") private String driver; @Value(\\\"${atguigu.username}\\\") private String username; @Value(\\\"${atguigu.password}\\\") private String password; @Bean(destroyMethod = \\\"close\\\") public DruidDataSource dataSource(){ DruidDataSource dataSource = new DruidDataSource(); dataSource.setUrl(url); dataSource.setDriverClassName(driver); dataSource.setUsername(username); dataSource.setPassword(password); return dataSource; } @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) @Bean public JdbcTemplate jdbcTemplate(DataSource dataSource){ JdbcTemplate jdbcTemplate = new JdbcTemplate(); jdbcTemplate.setDataSource(dataSource); return jdbcTemplate; } }\",\"运行测试\",\"public class ControllerTest { @Test public void testRun(){ AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(JavaConfig.class); StudentController studentController = applicationContext.getBean(StudentController.class); studentController.findAll(); } }\",\"注解+配置类 IoC方式总结\",\"完全摒弃了XML配置文件\",\"自定义类使用IoC和DI注解标记\",\"第三方类使用配置类声明方法+@Bean方式处理\",\"完全注解方式（配置类+注解）是现在主流配置方式\"]},\"576\":{\"h\":\"4.5 三种配置方式总结\"},\"577\":{\"h\":\"4.5.1 XML方式配置总结\",\"t\":[\"所有内容写到xml格式配置文件中\",\"声明bean通过<bean标签\",\"<bean标签包含基本信息（id,class）和属性信息 <property name value / ref\",\"引入外部的properties文件可以通过<context:property-placeholder\",\"IoC具体容器实现选择ClassPathXmlApplicationContext对象\"]},\"578\":{\"h\":\"4.5.2 XML+注解方式配置总结\",\"t\":[\"注解负责标记IoC的类和进行属性装配\",\"xml文件依然需要，需要通过<context:component-scan标签指定注解范围\",\"标记IoC注解：@Component,@Service,@Controller,@Repository \",\"标记DI注解：@Autowired @Qualifier @Resource @Value\",\"IoC具体容器实现选择ClassPathXmlApplicationContext对象\"]},\"579\":{\"h\":\"4.5.3 完全注解方式配置总结\",\"t\":[\"完全注解方式指的是去掉xml文件，使用配置类 + 注解实现\",\"xml文件替换成使用@Configuration注解标记的类\",\"标记IoC注解：@Component,@Service,@Controller,@Repository \",\"标记DI注解：@Autowired @Qualifier @Resource @Value\",\"<context:component-scan标签指定注解范围使用@ComponentScan(basePackages = {\\\"com.atguigu.components\\\"})替代\",\"<context:property-placeholder引入外部配置文件使用@PropertySource({\\\"classpath:application.properties\\\",\\\"classpath:jdbc.properties\\\"})替代\",\"<bean 标签使用@Bean注解和方法实现\",\"IoC具体容器实现选择AnnotationConfigApplicationContext对象\"]},\"580\":{\"h\":\"4.6 整合Spring5-Test5搭建测试环境\",\"t\":[\"整合测试环境作用\",\"好处1：不需要自己创建IOC容器对象了\",\"好处2：任何需要的bean都可以在测试类中直接享受自动装配\",\"导入相关依赖\",\"<!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>6.0.6</version> <scope>test</scope> </dependency>\",\"整合测试注解使用\",\"//@SpringJUnitConfig(locations = {\\\"classpath:spring-context.xml\\\"}) //指定配置文件xml @SpringJUnitConfig(value = {BeanConfig.class}) //指定配置类 public class Junit5IntegrationTest { @Autowired private User user; @Test public void testJunit5() { System.out.println(user); } }\"]},\"581\":{\"h\":\"五、Spring AOP面向切面编程\"},\"582\":{\"h\":\"5.1 场景设定和问题复现\",\"t\":[\"准备AOP项目\",\"项目名：spring-aop-annotation\",\"pom.xml\",\"<dependencies> <!--spring context依赖--> <!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.6</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>6.0.6</version> <scope>test</scope> </dependency> <dependency> <groupId>jakarta.annotation</groupId> <artifactId>jakarta.annotation-api</artifactId> <version>2.1.1</version> </dependency> </dependencies>\",\"声明接口\",\"/** * + - * / 运算的标准接口! */ public interface Calculator { int add(int i, int j); int sub(int i, int j); int mul(int i, int j); int div(int i, int j); }\",\"接口实现\",\"package com.atguigu.proxy; /** * 实现计算接口,单纯添加 + - * / 实现! 掺杂其他功能! */ public class CalculatorPureImpl implements Calculator { @Override public int add(int i, int j) { int result = i + j; return result; } @Override public int sub(int i, int j) { int result = i - j; return result; } @Override public int mul(int i, int j) { int result = i * j; return result; } @Override public int div(int i, int j) { int result = i / j; return result; } }\",\"声明带日志接口实现\",\"新需求： 需要在每个方法中，添加控制台输出，输出参数和输出计算后的返回值！\",\"img\",\"package com.atguigu.proxy; /** * 在每个方法中,输出传入的参数和计算后的返回结果! */ public class CalculatorLogImpl implements Calculator { @Override public int add(int i, int j) { System.out.println(\\\"参数是：\\\" + i + \\\",\\\" + j); int result = i + j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } @Override public int sub(int i, int j) { System.out.println(\\\"参数是：\\\" + i + \\\",\\\" + j); int result = i - j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } @Override public int mul(int i, int j) { System.out.println(\\\"参数是：\\\" + i + \\\",\\\" + j); int result = i * j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } @Override public int div(int i, int j) { System.out.println(\\\"参数是：\\\" + i + \\\",\\\" + j); int result = i / j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } }\",\"代码问题分析\",\"代码缺陷\",\"对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力\",\"附加功能代码重复，分散在各个业务功能方法中！冗余，且不方便统一维护！\",\"解决思路\",\" 核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。\",\" 将重复的代码统一提取，并且[[动态插入]]到每个业务方法！\",\"技术困难\",\"解决问题的困难：提取重复附加功能代码到一个类中，可以实现\",\"但是如何将代码插入到各个方法中，我们不会，我们需要引用新技术！！！\"]},\"583\":{\"h\":\"5.2 解决技术代理模式\",\"t\":[\"代理模式\",\"二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——解耦。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。\",\"无代理场景：\",\"img\",\"有代理场景：\",\"img\",\"生活中的代理：\",\"广告商找大明星拍广告需要经过经纪人\",\"合作伙伴找大老板谈合作要约见面时间需要经过秘书\",\"房产中介是买卖双方的代理\",\"太监是大臣和皇上之间的代理 相关术语：\",\"代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。(中介) \",\"动词：指做代理这个动作，或这项工作\",\"名词：扮演代理这个角色的类、对象、方法\",\"目标：被代理“套用”了核心逻辑代码的类、对象、方法。(房东) 代理在开发中实现的方式具体有两种：静态代理，[动态代理技术]\",\"静态代理\",\"主动创建代理类：\",\"public class CalculatorStaticProxy implements Calculator { // 将被代理的目标对象声明为成员变量 private Calculator target; public CalculatorStaticProxy(Calculator target) { this.target = target; } @Override public int add(int i, int j) { // 附加功能由代理类中的代理方法来实现 System.out.println(\\\"参数是：\\\" + i + \\\",\\\" + j); // 通过目标对象来实现核心业务逻辑 int addResult = target.add(i, j); System.out.println(\\\"方法内部 result = \\\" + result); return addResult; } ……\",\"静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。\",\"提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。\",\"动态代理\",\"动态代理技术分类\",\"JDK动态代理：JDK原生的实现方式，需要被代理的目标类必须实现接口！他会根据目标类的接口动态生成一个代理对象！代理对象和目标对象有相同的接口！（拜把子）\",\"cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口！（认干爹） JDK动态代理技术实现（了解） \",\"代理工程：基于jdk代理技术，生成代理对象\",\"public class ProxyFactory { private Object target; public ProxyFactory(Object target) { this.target = target; } public Object getProxy(){ /** * newProxyInstance()：创建一个代理实例 * 其中有三个参数： * 1、classLoader：加载动态生成的代理类的类加载器 * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组 * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法 */ ClassLoader classLoader = target.getClass().getClassLoader(); Class<?>[] interfaces = target.getClass().getInterfaces(); InvocationHandler invocationHandler = new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { /** * proxy：代理对象 * method：代理对象需要实现的方法，即其中需要重写的方法 * args：method所对应方法的参数 */ Object result = null; try { System.out.println(\\\"[动态代理][日志] \\\"+method.getName()+\\\"，参数：\\\"+ Arrays.toString(args)); result = method.invoke(target, args); System.out.println(\\\"[动态代理][日志] \\\"+method.getName()+\\\"，结果：\\\"+ result); } catch (Exception e) { e.printStackTrace(); System.out.println(\\\"[动态代理][日志] \\\"+method.getName()+\\\"，异常：\\\"+e.getMessage()); } finally { System.out.println(\\\"[动态代理][日志] \\\"+method.getName()+\\\"，方法执行完毕\\\"); } return result; } }; return Proxy.newProxyInstance(classLoader, interfaces, invocationHandler); } }\",\"测试代码：\",\"@Test public void testDynamicProxy(){ ProxyFactory factory = new ProxyFactory(new CalculatorLogImpl()); Calculator proxy = (Calculator) factory.getProxy(); proxy.div(1,0); //proxy.div(1,1); }\",\"代理总结\",\"代理方式可以解决附加功能代码干扰核心代码和不方便统一维护的问题！\",\"他主要是将附加功能代码提取到代理中执行，不干扰目标核心代码！\",\"但是我们也发现，无论使用静态代理和动态代理(jdk,cglib)，程序员的工作都比较繁琐！\",\"需要自己编写代理工厂等！\",\"但是，提前剧透，我们在实际开发中，不需要编写代理代码，我们可以使用[Spring AOP]框架，\",\"他会简化动态代理的实现！！！\"]},\"584\":{\"h\":\"5.3 面向切面编程思维（AOP）\",\"t\":[\"面向切面编程思想AOP\",\"AOP：Aspect Oriented Programming面向切面编程\",\"AOP可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\",\"AOP技术恰恰相反，它利用一种称为\\\"横切\\\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\\\"Aspect\\\"，即切面。所谓\\\"切面\\\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\",\"使用AOP，可以在不修改原来代码的基础上添加新功能。\",\"AOP思想主要的应用场景\",\"AOP（面向切面编程）是一种编程范式，它通过将通用的横切关注点（如日志、事务、权限控制等）与业务逻辑分离，使得代码更加清晰、简洁、易于维护。AOP可以应用于各种场景，以下是一些常见的AOP应用场景：\",\"日志记录：在系统中记录日志是非常重要的，可以使用AOP来实现日志记录的功能，可以在方法执行前、执行后或异常抛出时记录日志。\",\"事务处理：在数据库操作中使用事务可以保证数据的一致性，可以使用AOP来实现事务处理的功能，可以在方法开始前开启事务，在方法执行完毕后提交或回滚事务。\",\"安全控制：在系统中包含某些需要安全控制的操作，如登录、修改密码、授权等，可以使用AOP来实现安全控制的功能。可以在方法执行前进行权限判断，如果用户没有权限，则抛出异常或转向到错误页面，以防止未经授权的访问。\",\"性能监控：在系统运行过程中，有时需要对某些方法的性能进行监控，以找到系统的瓶颈并进行优化。可以使用AOP来实现性能监控的功能，可以在方法执行前记录时间戳，在方法执行完毕后计算方法执行时间并输出到日志中。\",\"异常处理：系统中可能出现各种异常情况，如空指针异常、数据库连接异常等，可以使用AOP来实现异常处理的功能，在方法执行过程中，如果出现异常，则进行异常处理（如记录日志、发送邮件等）。\",\"缓存控制：在系统中有些数据可以缓存起来以提高访问速度，可以使用AOP来实现缓存控制的功能，可以在方法执行前查询缓存中是否有数据，如果有则返回，否则执行方法并将方法返回值存入缓存中。\",\"动态代理：AOP的实现方式之一是通过动态代理，可以代理某个类的所有方法，用于实现各种功能。 综上所述，AOP可以应用于各种场景，它的作用是将通用的横切关注点与业务逻辑分离，使得代码更加清晰、简洁、易于维护。\",\"AOP术语名词介绍\",\"1-横切关注点\",\"从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。\",\"这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。\",\"img\",\"AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事务、异常等。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\",\"2-通知(增强)\",\"每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。\",\"前置通知：在被代理的目标方法前执行\",\"返回通知：在被代理的目标方法成功结束后执行（寿终正寝）\",\"异常通知：在被代理的目标方法异常结束后执行（死于非命）\",\"后置通知：在被代理的目标方法最终结束后执行（盖棺定论）\",\"环绕通知：使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置 3-连接点 joinpoint\",\"这也是一个纯逻辑概念，不是语法定义的。\",\"指那些被拦截到的点。在 Spring 中，可以被动态代理拦截目标类的方法\",\"img\",\"4-切入点 pointcut\",\"定位连接点的方式，或者可以理解成被选中的连接点！\",\"是一个表达式，比如execution(* com.spring.service.impl..(..))。符合条件的每个方法都是一个具体的连接点。\",\"5-切面 aspect\",\"切入点和通知的结合。是一个类。\",\"img\",\"6-目标 target\",\"被代理的目标对象。\",\"7-代理 proxy\",\"向目标对象应用通知之后创建的代理对象。\",\"8-织入 weave\",\"指把通知应用到目标上，生成代理对象的过程。可以在编译期织入，也可以在运行期织入，Spring采用后者。\"]},\"585\":{\"h\":\"5.4 Spring AOP框架介绍和关系梳理\",\"t\":[\"AOP一种区别于OOP的编程思维，用来完善和解决OOP的非核心代码冗余和不方便统一维护问题！\",\"代理技术（动态代理|静态代理）是实现AOP思维编程的具体技术，但是自己使用动态代理实现代码比较繁琐！\",\"Spring AOP框架，基于AOP编程思维，封装动态代理技术，简化动态代理技术实现的框架！SpringAOP内部帮助我们实现动态代理，我们只需写少量的配置，指定生效范围即可,即可完成面向切面思维编程的实现！\"]},\"586\":{\"h\":\"5.5 Spring AOP基于注解方式实现和细节\"},\"587\":{\"h\":\"5.5.1 Spring AOP底层技术组成\",\"t\":[\"img\",\"动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。\",\"cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。\",\"AspectJ：早期的AOP实现的框架，SpringAOP借用了AspectJ中的AOP注解。\"]},\"588\":{\"h\":\"5.5.2 初步实现\",\"t\":[\"加入依赖\",\"<!-- spring-aspects会帮我们传递过来aspectjweaver --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> <version>6.0.6</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>6.0.6</version> </dependency>\",\"准备接口\",\"public interface Calculator { int add(int i, int j); int sub(int i, int j); int mul(int i, int j); int div(int i, int j); }\",\"纯净实现类\",\"package com.atguigu.proxy; /** * 实现计算接口,单纯添加 + - * / 实现! 掺杂其他功能! */ @Component public class CalculatorPureImpl implements Calculator { @Override public int add(int i, int j) { int result = i + j; return result; } @Override public int sub(int i, int j) { int result = i - j; return result; } @Override public int mul(int i, int j) { int result = i * j; return result; } @Override public int div(int i, int j) { int result = i / j; return result; } }\",\"声明切面类\",\"package com.atguigu.advice; import org.aspectj.lang.annotation.*; import org.springframework.stereotype.Component; // @Aspect表示这个类是一个切面类 @Aspect // @Component注解保证这个切面类能够放入IOC容器 @Component public class LogAspect { // @Before注解：声明当前方法是前置通知方法 // value属性：指定切入点表达式，由切入点表达式控制当前通知方法要作用在哪一个目标方法上 @Before(value = \\\"execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))\\\") public void printLogBeforeCore() { System.out.println(\\\"[AOP前置通知] 方法开始了\\\"); } @AfterReturning(value = \\\"execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))\\\") public void printLogAfterSuccess() { System.out.println(\\\"[AOP返回通知] 方法成功返回了\\\"); } @AfterThrowing(value = \\\"execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))\\\") public void printLogAfterException() { System.out.println(\\\"[AOP异常通知] 方法抛异常了\\\"); } @After(value = \\\"execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))\\\") public void printLogFinallyEnd() { System.out.println(\\\"[AOP后置通知] 方法最终结束了\\\"); } }\",\"开启aspectj注解支持 \",\"xml方式\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd\\\"> <!-- 进行包扫描--> <context:component-scan base-package=\\\"com.atguigu\\\" /> <!-- 开启aspectj框架注解支持--> <aop:aspectj-autoproxy /> </beans>\",\"配置类方式\",\"@Configuration @ComponentScan(basePackages = \\\"com.atguigu\\\") //作用等于 <aop:aspectj-autoproxy /> 配置类上开启 Aspectj注解支持! @EnableAspectJAutoProxy public class MyConfig { }\",\"测试效果\",\"//@SpringJUnitConfig(locations = \\\"classpath:spring-aop.xml\\\") @SpringJUnitConfig(value = {MyConfig.class}) public class AopTest { @Autowired private Calculator calculator; @Test public void testCalculator(){ calculator.add(1,1); } }\",\"输出结果：\",\"\\\"C:\\\\Program Files\\\\Java\\\\jdk-17\\\\bin\\\\java.exe\\\" -ea -Didea.test.cyclic.buffer.size=1048576 \\\"-javaagent:D:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2022.3.2\\\\lib\\\\idea_rt.jar=65511:D:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2022.3.2\\\\bin\\\" -Dfile.encoding=UTF-8 -classpath \\\"C:\\\\Users\\\\Jackiechan\\\\.m2\\\\repository\\\\org\\\\junit\\\\platform\\\\junit-platform-launcher\\\\1.3.1\\\\junit-platform-launcher-1.3.1.jar;C:\\\\Users\\\\Jackiechan\\\\.m2\\\\repository\\\\org\\\\apiguardian\\\\apiguardian-api\\\\1.0.0\\\\apiguardian-api-1.0.0.jar;C:\\\\Users\\\\Jackiechan\\\\.m2\\\\repository\\\\org\\\\junit\\\\platform\\\\junit-platform-engine\\\\1.3.1\\\\junit-platform-engine-1.3.1.jar;C:\\\\Users\\\\Jackiechan\\\\.m2\\\\repository\\\\org\\\\junit\\\\platform\\\\junit-platform-commons\\\\1.3.1\\\\junit-platform-commons-1.3.1.jar;C:\\\\Users\\\\Jackiechan\\\\.m2\\\\repository\\\\org\\\\opentest4j\\\\opentest4j\\\\1.1.1\\\\opentest4j-1.1.1.jar;C:\\\\Users\\\\Jackiechan\\\\.m2\\\\repository\\\\org\\\\junit\\\\jupiter\\\\junit-jupiter-engine\\\\5.3.1\\\\junit-jupiter-engine-5.3.1.jar;C:\\\\Users\\\\Jackiechan\\\\.m2\\\\repository\\\\org\\\\junit\\\\jupiter\\\\junit-jupiter-api\\\\5.3.1\\\\junit-jupiter-api-5.3.1.jar;D:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2022.3.2\\\\lib\\\\idea_rt.jar;D:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2022.3.2\\\\plugins\\\\junit\\\\lib\\\\junit5-rt.jar;D:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2022.3.2\\\\plugins\\\\junit\\\\lib\\\\junit-rt.jar;D:\\\\javaprojects\\\\backend-engineering\\\\part01-spring\\\\spring-aop-annotation\\\\target\\\\test-classes;D:\\\\javaprojects\\\\backend-engineering\\\\part01-spring\\\\spring-aop-annotation\\\\target\\\\classes;D:\\\\repository\\\\org\\\\springframework\\\\spring-context\\\\6.0.6\\\\spring-context-6.0.6.jar;D:\\\\repository\\\\org\\\\springframework\\\\spring-beans\\\\6.0.6\\\\spring-beans-6.0.6.jar;D:\\\\repository\\\\org\\\\springframework\\\\spring-core\\\\6.0.6\\\\spring-core-6.0.6.jar;D:\\\\repository\\\\org\\\\springframework\\\\spring-jcl\\\\6.0.6\\\\spring-jcl-6.0.6.jar;D:\\\\repository\\\\org\\\\springframework\\\\spring-expression\\\\6.0.6\\\\spring-expression-6.0.6.jar;D:\\\\repository\\\\org\\\\junit\\\\jupiter\\\\junit-jupiter-api\\\\5.3.1\\\\junit-jupiter-api-5.3.1.jar;D:\\\\repository\\\\org\\\\apiguardian\\\\apiguardian-api\\\\1.0.0\\\\apiguardian-api-1.0.0.jar;D:\\\\repository\\\\org\\\\opentest4j\\\\opentest4j\\\\1.1.1\\\\opentest4j-1.1.1.jar;D:\\\\repository\\\\org\\\\junit\\\\platform\\\\junit-platform-commons\\\\1.3.1\\\\junit-platform-commons-1.3.1.jar;D:\\\\repository\\\\org\\\\springframework\\\\spring-test\\\\6.0.6\\\\spring-test-6.0.6.jar;D:\\\\repository\\\\jakarta\\\\annotation\\\\jakarta.annotation-api\\\\2.1.1\\\\jakarta.annotation-api-2.1.1.jar;D:\\\\repository\\\\mysql\\\\mysql-connector-java\\\\8.0.25\\\\mysql-connector-java-8.0.25.jar;D:\\\\repository\\\\com\\\\google\\\\protobuf\\\\protobuf-java\\\\3.11.4\\\\protobuf-java-3.11.4.jar;D:\\\\repository\\\\com\\\\alibaba\\\\druid\\\\1.2.8\\\\druid-1.2.8.jar;D:\\\\repository\\\\javax\\\\annotation\\\\javax.annotation-api\\\\1.3.2\\\\javax.annotation-api-1.3.2.jar;D:\\\\repository\\\\org\\\\springframework\\\\spring-aop\\\\6.0.6\\\\spring-aop-6.0.6.jar;D:\\\\repository\\\\org\\\\springframework\\\\spring-aspects\\\\6.0.6\\\\spring-aspects-6.0.6.jar;D:\\\\repository\\\\org\\\\aspectj\\\\aspectjweaver\\\\1.9.9.1\\\\aspectjweaver-1.9.9.1.jar\\\" com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit5 com.atguigu.test.AopTest,testCalculator [AOP前置通知] 方法开始了 [AOP返回通知] 方法成功返回了 [AOP后置通知] 方法最终结束了\"]},\"589\":{\"h\":\"5.5.3 获取通知细节信息\",\"t\":[\"JointPoint接口\",\"需要获取方法签名、传入的实参等信息时，可以在通知方法声明JoinPoint类型的形参。\",\"要点1：JoinPoint 接口通过 getSignature() 方法获取目标方法的签名（方法声明时的完整信息）\",\"要点2：通过目标方法签名对象获取方法名\",\"要点3：通过 JoinPoint 对象获取外界调用目标方法时传入的实参列表组成的数组\",\"// @Before注解标记前置通知方法 // value属性：切入点表达式，告诉Spring当前通知方法要套用到哪个目标方法上 // 在前置通知方法形参位置声明一个JoinPoint类型的参数，Spring就会将这个对象传入 // 根据JoinPoint对象就可以获取目标方法名称、实际参数列表 @Before(value = \\\"execution(public int com.atguigu.aop.api.Calculator.add(int,int))\\\") public void printLogBeforeCore(JoinPoint joinPoint) { // 1.通过JoinPoint对象获取目标方法签名对象 // 方法的签名：一个方法的全部声明信息 Signature signature = joinPoint.getSignature(); // 2.通过方法的签名对象获取目标方法的详细信息 String methodName = signature.getName(); System.out.println(\\\"methodName = \\\" + methodName); int modifiers = signature.getModifiers(); System.out.println(\\\"modifiers = \\\" + modifiers); String declaringTypeName = signature.getDeclaringTypeName(); System.out.println(\\\"declaringTypeName = \\\" + declaringTypeName); // 3.通过JoinPoint对象获取外界调用目标方法时传入的实参列表 Object[] args = joinPoint.getArgs(); // 4.由于数组直接打印看不到具体数据，所以转换为List集合 List<Object> argList = Arrays.asList(args); System.out.println(\\\"[AOP前置通知] \\\" + methodName + \\\"方法开始了，参数列表：\\\" + argList); }\",\"方法返回值\",\"在返回通知中，通过 @AfterReturning注解的returning属性获取目标方法的返回值！\",\"// @AfterReturning注解标记返回通知方法 // 在返回通知中获取目标方法返回值分两步： // 第一步：在@AfterReturning注解中通过returning属性设置一个名称 // 第二步：使用returning属性设置的名称在通知方法中声明一个对应的形参 @AfterReturning( value = \\\"execution(public int com.atguigu.aop.api.Calculator.add(int,int))\\\", returning = \\\"targetMethodReturnValue\\\" ) public void printLogAfterCoreSuccess(JoinPoint joinPoint, Object targetMethodReturnValue) { String methodName = joinPoint.getSignature().getName(); System.out.println(\\\"[AOP返回通知] \\\"+methodName+\\\"方法成功结束了，返回值是：\\\" + targetMethodReturnValue); }\",\"异常对象捕捉\",\"在异常通知中，通过@AfterThrowing注解的throwing属性获取目标方法抛出的异常对象\",\"// @AfterThrowing注解标记异常通知方法 // 在异常通知中获取目标方法抛出的异常分两步： // 第一步：在@AfterThrowing注解中声明一个throwing属性设定形参名称 // 第二步：使用throwing属性指定的名称在通知方法声明形参，Spring会将目标方法抛出的异常对象从这里传给我们 @AfterThrowing( value = \\\"execution(public int com.atguigu.aop.api.Calculator.add(int,int))\\\", throwing = \\\"targetMethodException\\\" ) public void printLogAfterCoreException(JoinPoint joinPoint, Throwable targetMethodException) { String methodName = joinPoint.getSignature().getName(); System.out.println(\\\"[AOP异常通知] \\\"+methodName+\\\"方法抛异常了，异常类型是：\\\" + targetMethodException.getClass().getName()); }\"]},\"590\":{\"h\":\"5.5.4 切点表达式语法\",\"t\":[\"切点表达式作用\",\"AOP切点表达式（Pointcut Expression）是一种用于指定切点的语言，它可以通过定义匹配规则，来选择需要被切入的目标对象。\",\"img\",\"切点表达式语法\",\"切点表达式总结\",\"img\",\"语法细节\",\"第一位：execution( ) 固定开头\",\"第二位：方法访问修饰符\",\"public private 直接描述对应修饰符即可\",\"第三位：方法返回值\",\"int String void 直接描述返回值类型\",\"注意：\",\"特殊情况 不考虑 访问修饰符和返回值\",\"execution(* * ) 这是错误语法\",\"execution( *) == 你只要考虑返回值 或者 不考虑访问修饰符 相当于全部不考虑了\",\"第四位：指定包的地址\",\" 固定的包: com.atguigu.api | service | dao 单层的任意命名: com.atguigu.* = com.atguigu.api com.atguigu.dao * = 任意一层的任意命名 任意层任意命名: com.. = com.atguigu.api.erdaye com.a.a.a.a.a.a.a ..任意层,任意命名 用在包上! 注意: ..不能用作包开头 public int .. 错误语法 com.. 找到任何包下: *..\",\"第五位：指定类名称\",\"固定名称: UserService 任意类名: * 部分任意: com..service.impl.*Impl 任意包任意类: *..*\",\"第六位：指定方法名称\",\"语法和类名一致 任意访问修饰符,任意类的任意方法: * *..*.*\",\"第七位：方法参数\",\"第七位: 方法的参数描述 具体值: (String,int) != (int,String) 没有参数 () 模糊值: 任意参数 有 或者 没有 (..) ..任意参数的意识 部分具体和模糊: 第一个参数是字符串的方法 (String..) 最后一个参数是字符串 (..String) 字符串开头,int结尾 (String..int) 包含int类型(..int..)\",\"切点表达式案例\",\"1.查询某包某类下，访问修饰符是公有，返回值是int的全部方法 2.查询某包下类中第一个参数是String的方法 3.查询全部包下，无参数的方法！ 4.查询com包下，以int参数类型结尾的方法 5.查询指定包下，Service开头类的私有返回值int的无参数方法\"]},\"591\":{\"h\":\"5.5.5 重用（提取）切点表达式\",\"t\":[\"重用切点表达式优点\",\" // @Before注解：声明当前方法是前置通知方法 // value属性：指定切入点表达式，由切入点表达式控制当前通知方法要作用在哪一个目标方法上 @Before(value = \\\"execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))\\\") public void printLogBeforeCore() { System.out.println(\\\"[AOP前置通知] 方法开始了\\\"); } @AfterReturning(value = \\\"execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))\\\") public void printLogAfterSuccess() { System.out.println(\\\"[AOP返回通知] 方法成功返回了\\\"); } @AfterThrowing(value = \\\"execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))\\\") public void printLogAfterException() { System.out.println(\\\"[AOP异常通知] 方法抛异常了\\\"); } @After(value = \\\"execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))\\\") public void printLogFinallyEnd() { System.out.println(\\\"[AOP后置通知] 方法最终结束了\\\"); }\",\"上面案例，是我们之前编写切点表达式的方式，发现， 所有增强方法的切点表达式相同！\",\"出现了冗余，如果需要切换也不方便统一维护！\",\"我们可以将切点提取，在增强上进行引用即可！\",\"同一类内部引用\",\"提取\",\"// 切入点表达式重用 @Pointcut(\\\"execution(public int com.atguigu.aop.api.Calculator.add(int,int)))\\\") public void declarPointCut() {}\",\"注意：提取切点注解使用@Pointcut(切点表达式) ， 需要添加到一个无参数无返回值方法上即可！\",\"引用\",\"@Before(value = \\\"declarPointCut()\\\") public void printLogBeforeCoreOperation(JoinPoint joinPoint) {\",\"不同类中引用\",\"不同类在引用切点，只需要添加类的全限定符+方法名即可！\",\"@Before(value = \\\"com.atguigu.spring.aop.aspect.LogAspect.declarPointCut()\\\") public Object roundAdvice(ProceedingJoinPoint joinPoint) {\",\"切点统一管理\",\"建议：将切点表达式统一存储到一个类中进行集中管理和维护！\",\"@Component public class AtguiguPointCut { @Pointcut(value = \\\"execution(public int *..Calculator.sub(int,int))\\\") public void atguiguGlobalPointCut(){} @Pointcut(value = \\\"execution(public int *..Calculator.add(int,int))\\\") public void atguiguSecondPointCut(){} @Pointcut(value = \\\"execution(* *..*Service.*(..))\\\") public void transactionPointCut(){} }\"]},\"592\":{\"h\":\"5.5.6 环绕通知\",\"t\":[\"环绕通知对应整个 try...catch...finally 结构，包括前面四种通知的所有功能。\",\"// 使用@Around注解标明环绕通知方法 @Around(value = \\\"com.atguigu.aop.aspect.AtguiguPointCut.transactionPointCut()\\\") public Object manageTransaction( // 通过在通知方法形参位置声明ProceedingJoinPoint类型的形参， // Spring会将这个类型的对象传给我们 ProceedingJoinPoint joinPoint) { // 通过ProceedingJoinPoint对象获取外界调用目标方法时传入的实参数组 Object[] args = joinPoint.getArgs(); // 通过ProceedingJoinPoint对象获取目标方法的签名对象 Signature signature = joinPoint.getSignature(); // 通过签名对象获取目标方法的方法名 String methodName = signature.getName(); // 声明变量用来存储目标方法的返回值 Object targetMethodReturnValue = null; try { // 在目标方法执行前：开启事务（模拟） log.debug(\\\"[AOP 环绕通知] 开启事务，方法名：\\\" + methodName + \\\"，参数列表：\\\" + Arrays.asList(args)); // 过ProceedingJoinPoint对象调用目标方法 // 目标方法的返回值一定要返回给外界调用者 targetMethodReturnValue = joinPoint.proceed(args); // 在目标方法成功返回后：提交事务（模拟） log.debug(\\\"[AOP 环绕通知] 提交事务，方法名：\\\" + methodName + \\\"，方法返回值：\\\" + targetMethodReturnValue); }catch (Throwable e){ // 在目标方法抛异常后：回滚事务（模拟） log.debug(\\\"[AOP 环绕通知] 回滚事务，方法名：\\\" + methodName + \\\"，异常：\\\" + e.getClass().getName()); }finally { // 在目标方法最终结束后：释放数据库连接 log.debug(\\\"[AOP 环绕通知] 释放数据库连接，方法名：\\\" + methodName); } return targetMethodReturnValue; }\"]},\"593\":{\"h\":\"5.5.7 切面优先级设置\",\"t\":[\"相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。\",\"优先级高的切面：外面\",\"优先级低的切面：里面\",\"使用 @Order 注解可以控制切面的优先级：\",\"@Order(较小的数)：优先级高\",\"@Order(较大的数)：优先级低\",\"img\",\"实际意义\",\"实际开发时，如果有多个切面嵌套的情况，要慎重考虑。例如：如果事务切面优先级高，那么在缓存中命中数据的情况下，事务切面的操作都浪费了。\",\"img\",\"此时应该将缓存切面的优先级提高，在事务操作之前先检查缓存中是否存在目标数据。\"]},\"594\":{\"h\":\"5.5.8 CGLib动态代理生效\",\"t\":[\"在目标类没有实现任何接口的情况下，Spring会自动使用cglib技术实现代理。为了证明这一点，我们做下面的测试：\",\"@Service public class EmployeeService { public void getEmpList() { System.out.print(\\\"方法内部 com.atguigu.aop.imp.EmployeeService.getEmpList\\\"); } }\",\"测试：\",\" @Autowired private EmployeeService employeeService; @Test public void testNoInterfaceProxy() { employeeService.getEmpList(); }\",\"没有接口：\",\"图片不存在\",\"有接口：\",\"图片不存在\",\"使用总结：\",\"a. 如果目标类有接口,选择使用jdk动态代理\",\"b. 如果目标类没有接口,选择cglib动态代理\",\"c. 如果有接口,接口接值\",\"d. 如果没有接口,类进行接值\"]},\"595\":{\"h\":\"5.5.9 注解实现小结\",\"t\":[\"img\"]},\"596\":{\"h\":\"5.6 Spring AOP基于XML方式实现(了解)\",\"t\":[\"准备工作\",\"加入依赖\",\"和基于注解的 AOP 时一样。\",\"准备代码\",\"把测试基于注解功能时的Java类复制到新module中，去除所有注解。\",\"配置Spring配置文件\",\"<!-- 配置目标类的bean --> <bean id=\\\"calculatorPure\\\" class=\\\"com.atguigu.aop.imp.CalculatorPureImpl\\\"/> <!-- 配置切面类的bean --> <bean id=\\\"logAspect\\\" class=\\\"com.atguigu.aop.aspect.LogAspect\\\"/> <!-- 配置AOP --> <aop:config> <!-- 配置切入点表达式 --> <aop:pointcut id=\\\"logPointCut\\\" expression=\\\"execution(* *..*.*(..))\\\"/> <!-- aop:aspect标签：配置切面 --> <!-- ref属性：关联切面类的bean --> <aop:aspect ref=\\\"logAspect\\\"> <!-- aop:before标签：配置前置通知 --> <!-- method属性：指定前置通知的方法名 --> <!-- pointcut-ref属性：引用切入点表达式 --> <aop:before method=\\\"printLogBeforeCore\\\" pointcut-ref=\\\"logPointCut\\\"/> <!-- aop:after-returning标签：配置返回通知 --> <!-- returning属性：指定通知方法中用来接收目标方法返回值的参数名 --> <aop:after-returning method=\\\"printLogAfterCoreSuccess\\\" pointcut-ref=\\\"logPointCut\\\" returning=\\\"targetMethodReturnValue\\\"/> <!-- aop:after-throwing标签：配置异常通知 --> <!-- throwing属性：指定通知方法中用来接收目标方法抛出异常的异常对象的参数名 --> <aop:after-throwing method=\\\"printLogAfterCoreException\\\" pointcut-ref=\\\"logPointCut\\\" throwing=\\\"targetMethodException\\\"/> <!-- aop:after标签：配置后置通知 --> <aop:after method=\\\"printLogCoreFinallyEnd\\\" pointcut-ref=\\\"logPointCut\\\"/> <!-- aop:around标签：配置环绕通知 --> <!--<aop:around method=\\\"……\\\" pointcut-ref=\\\"logPointCut\\\"/>--> </aop:aspect> </aop:config>\",\"测试\",\"@SpringJUnitConfig(locations = \\\"classpath:spring-aop.xml\\\") public class AopTest { @Autowired private Calculator calculator; @Test public void testCalculator(){ System.out.println(calculator); calculator.add(1,1); } }\"]},\"597\":{\"h\":\"5.7 Spring AOP对获取Bean的影响理解\"},\"598\":{\"h\":\"5.7.1 根据类型装配 bean\",\"t\":[\"情景一 \",\"bean 对应的类没有实现任何接口\",\"根据 bean 本身的类型获取 bean \",\"测试：IOC容器中同类型的 bean 只有一个\",\"正常获取到 IOC 容器中的那个 bean 对象\",\"测试：IOC 容器中同类型的 bean 有多个\",\"会抛出 NoUniqueBeanDefinitionException 异常，表示 IOC 容器中这个类型的 bean 有多个\",\"情景二 \",\"bean 对应的类实现了接口，这个接口也只有这一个实现类 \",\"测试：根据接口类型获取 bean\",\"测试：根据类获取 bean\",\"结论：上面两种情况其实都能够正常获取到 bean，而且是同一个对象\",\"情景三 \",\"声明一个接口\",\"接口有多个实现类\",\"接口所有实现类都放入 IOC 容器 \",\"测试：根据接口类型获取 bean\",\"会抛出 NoUniqueBeanDefinitionException 异常，表示 IOC 容器中这个类型的 bean 有多个\",\"测试：根据类获取bean\",\"正常\",\"情景四 \",\"声明一个接口\",\"接口有一个实现类\",\"创建一个切面类，对上面接口的实现类应用通知\",\"测试：根据接口类型获取bean\",\"正常\",\"测试：根据类获取bean\",\"无法获取 原因分析：\",\"应用了切面后，真正放在IOC容器中的是代理类的对象\",\"目标类并没有被放到IOC容器中，所以根据目标类的类型从IOC容器中是找不到的\",\"情景五 \",\"声明一个类\",\"创建一个切面类，对上面的类应用通知\",\"测试：根据类获取 bean，能获取到 debug查看实际类型：\"]},\"599\":{\"h\":\"5.7.2 使用总结\",\"t\":[\"对实现了接口的类应用切面\",\"对没实现接口的类应用切面new\",\"如果使用AOP技术，目标类有接口，必须使用接口类型接收IoC容器中代理组件！\"]},\"600\":{\"h\":\"六、Spring 声明式事务\"},\"601\":{\"h\":\"6.1 声明式事务概念\"},\"602\":{\"h\":\"6.1.1 编程式事务\",\"t\":[\"编程式事务是指手动编写程序来管理事务，即通过编写代码的方式直接控制事务的提交和回滚。在 Java 中，通常使用事务管理器(如 Spring 中的 PlatformTransactionManager)来实现编程式事务。\",\"编程式事务的主要优点是灵活性高，可以按照自己的需求来控制事务的粒度、模式等等。但是，编写大量的事务控制代码容易出现问题，对代码的可读性和可维护性有一定影响。\",\"Connection conn = ...; try { // 开启事务：关闭事务的自动提交 conn.setAutoCommit(false); // 核心操作 // 业务代码 // 提交事务 conn.commit(); }catch(Exception e){ // 回滚事务 conn.rollBack(); }finally{ // 释放数据库连接 conn.close(); }\",\"编程式的实现方式存在缺陷：\",\"细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。\",\"代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。\"]},\"603\":{\"h\":\"6.1.2 声明式事务\",\"t\":[\"声明式事务是指使用注解或 XML 配置的方式来控制事务的提交和回滚。\",\"开发者只需要添加配置即可， 具体事务的实现由第三方框架实现，避免我们直接进行事务操作！\",\"使用声明式事务可以将事务的控制和业务逻辑分离开来，提高代码的可读性和可维护性。\",\"区别：\",\"编程式事务需要手动编写代码来管理事务\",\"而声明式事务可以通过配置文件或注解来控制事务。\"]},\"604\":{\"h\":\"6.1.3 Spring事务管理器\",\"t\":[\"Spring声明式事务对应依赖\",\"spring-tx: 包含声明式事务实现的基本规范（事务管理器规范接口和事务增强等等）\",\"spring-jdbc: 包含DataSource方式事务管理器实现类DataSourceTransactionManager\",\"spring-orm: 包含其他持久层框架的事务管理器实现类例如：Hibernate/Jpa等\",\"Spring声明式事务对应事务管理器接口\",\"我们现在要使用的事务管理器是org.springframework.jdbc.datasource.DataSourceTransactionManager，将来整合 JDBC方式、JdbcTemplate方式、Mybatis方式的事务实现！\",\"DataSourceTransactionManager类中的主要方法：\",\"doBegin()：开启事务\",\"doSuspend()：挂起事务\",\"doResume()：恢复挂起的事务\",\"doCommit()：提交事务\",\"doRollback()：回滚事务\"]},\"605\":{\"h\":\"6.2 基于注解的声明式事务\"},\"606\":{\"h\":\"6.2.1 准备工作\",\"t\":[\"准备项目\",\"<dependencies> <!--spring context依赖--> <!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.6</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>6.0.6</version> <scope>test</scope> </dependency> <dependency> <groupId>jakarta.annotation</groupId> <artifactId>jakarta.annotation-api</artifactId> <version>2.1.1</version> </dependency> <!-- 数据库驱动 和 连接池--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency> <!-- spring-jdbc --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>6.0.6</version> </dependency> <!-- 声明式事务依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>6.0.6</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> <version>6.0.6</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>6.0.6</version> </dependency> </dependencies>\",\"外部配置文件\",\"jdbc.properties\",\"atguigu.url=jdbc:mysql://localhost:3306/studb atguigu.driver=com.mysql.cj.jdbc.Driver atguigu.username=root atguigu.password=root\",\"spring配置文件\",\"@Configuration @ComponentScan(\\\"com.atguigu\\\") @PropertySource(\\\"classpath:jdbc.properties\\\") public class JavaConfig { @Value(\\\"${atguigu.driver}\\\") private String driver; @Value(\\\"${atguigu.url}\\\") private String url; @Value(\\\"${atguigu.username}\\\") private String username; @Value(\\\"${atguigu.password}\\\") private String password; //druid连接池 @Bean public DataSource dataSource(){ DruidDataSource dataSource = new DruidDataSource(); dataSource.setDriverClassName(driver); dataSource.setUrl(url); dataSource.setUsername(username); dataSource.setPassword(password); return dataSource; } @Bean //jdbcTemplate public JdbcTemplate jdbcTemplate(DataSource dataSource){ JdbcTemplate jdbcTemplate = new JdbcTemplate(); jdbcTemplate.setDataSource(dataSource); return jdbcTemplate; } }\",\"准备dao/service层\",\"dao\",\"@Repository public class StudentDao { @Autowired private JdbcTemplate jdbcTemplate; public void updateNameById(String name,Integer id){ String sql = \\\"update students set name = ? where id = ? ;\\\"; int rows = jdbcTemplate.update(sql, name, id); } public void updateAgeById(Integer age,Integer id){ String sql = \\\"update students set age = ? where id = ? ;\\\"; jdbcTemplate.update(sql,age,id); } }\",\"service\",\"@Service public class StudentService { @Autowired private StudentDao studentDao; public void changeInfo(){ studentDao.updateAgeById(100,1); System.out.println(\\\"-----------\\\"); studentDao.updateNameById(\\\"test1\\\",1); } }\",\"测试环境搭建\",\"/** * projectName: com.atguigu.test * * description: */ @SpringJUnitConfig(JavaConfig.class) public class TxTest { @Autowired private StudentService studentService; @Test public void testTx(){ studentService.changeInfo(); } }\"]},\"607\":{\"h\":\"6.2.2 基本事务控制\",\"t\":[\"配置事务管理器\",\"数据库相关的配置\",\"/** * projectName: com.atguigu.config * * description: 数据库和连接池配置类 */ @Configuration @ComponenScan(\\\"com.atguigu\\\") @PropertySource(value = \\\"classpath:jdbc.properties\\\") @EnableTransactionManagement public class DataSourceConfig { /** * 实例化dataSource加入到ioc容器 * @param url * @param driver * @param username * @param password * @return */ @Bean public DataSource dataSource(@Value(\\\"${atguigu.url}\\\")String url, @Value(\\\"${atguigu.driver}\\\")String driver, @Value(\\\"${atguigu.username}\\\")String username, @Value(\\\"${atguigu.password}\\\")String password){ DruidDataSource dataSource = new DruidDataSource(); dataSource.setDriverClassName(driver); dataSource.setUrl(url); dataSource.setUsername(username); dataSource.setPassword(password); return dataSource; } /** * 实例化JdbcTemplate对象,需要使用ioc中的DataSource * @param dataSource * @return */ @Bean public JdbcTemplate jdbcTemplate(DataSource dataSource){ JdbcTemplate jdbcTemplate = new JdbcTemplate(); jdbcTemplate.setDataSource(dataSource); return jdbcTemplate; } /** * 装配事务管理实现对象 * @param dataSource * @return */ @Bean public TransactionManager transactionManager(DataSource dataSource){ return new DataSourceTransactionManager(dataSource); } }\",\"使用声明事务注解@Transactional\",\"/** * projectName: com.atguigu.service * */ @Service public class StudentService { @Autowired private StudentDao studentDao; @Transactional public void changeInfo(){ studentDao.updateAgeById(100,1); System.out.println(\\\"-----------\\\"); int i = 1/0; studentDao.updateNameById(\\\"test1\\\",1); } }\",\"测试事务效果\",\"/** * projectName: com.atguigu.test * * description: */ //@SpringJUnitConfig(locations = \\\"classpath:application.xml\\\") @SpringJUnitConfig(classes = DataSourceConfig.class) public class TxTest { @Autowired private StudentService studentService; @Test public void testTx(){ studentService.changeInfo(); } }\"]},\"608\":{\"h\":\"6.2.3 事务属性：只读\",\"t\":[\"只读介绍\",\"对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。\",\"设置方式\",\"// readOnly = true把当前事务设置为只读 默认是false! @Transactional(readOnly = true)\",\"针对DML动作设置只读模式\",\"会抛出下面异常：\",\"Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed\",\"@Transactional注解放在类上\",\"生效原则\",\"如果一个类中每一个方法上都使用了 @Transactional 注解，那么就可以将 @Transactional 注解提取到类上。反过来说：@Transactional 注解在类级别标记，会影响到类中的每一个方法。同时，类级别标记的 @Transactional 注解中设置的事务属性也会延续影响到方法执行时的事务属性。除非在方法上又设置了 @Transactional 注解。\",\"对一个方法来说，离它最近的 @Transactional 注解中的事务属性设置生效。\",\"用法举例\",\"在类级别@Transactional注解中设置只读，这样类中所有的查询方法都不需要设置@Transactional注解了。因为对查询操作来说，其他属性通常不需要设置，所以使用公共设置即可。\",\"然后在这个基础上，对增删改方法设置@Transactional注解 readOnly 属性为 false。\",\"@Service @Transactional(readOnly = true) public class EmpService { // 为了便于核对数据库操作结果，不要修改同一条记录 @Transactional(readOnly = false) public void updateTwice(……) { …… } // readOnly = true把当前事务设置为只读 // @Transactional(readOnly = true) public String getEmpName(Integer empId) { …… } }\"]},\"609\":{\"h\":\"6.2.4 事务属性：超时时间\",\"t\":[\"需求\",\"事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。\",\"此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。\",\"概括来说就是一句话：超时回滚，释放资源。\",\"设置超时时间\",\"@Service public class StudentService { @Autowired private StudentDao studentDao; /** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! */ @Transactional(readOnly = false,timeout = 3) public void changeInfo(){ studentDao.updateAgeById(100,1); //休眠4秒,等待方法超时! try { Thread.sleep(4000); } catch (InterruptedException e) { throw new RuntimeException(e); } studentDao.updateNameById(\\\"test1\\\",1); } }\",\"测试超时效果\",\"执行抛出事务超时异常\",\"org.springframework.transaction.TransactionTimedOutException: Transaction timed out: deadline was Wed May 24 09:10:43 IRKT 2023 at org.springframework.transaction.support.ResourceHolderSupport.checkTransactionTimeout(ResourceHolderSupport.java:155) at org.springframework.transaction.support.ResourceHolderSupport.getTimeToLiveInMillis(ResourceHolderSupport.java:144) at org.springframework.transaction.support.ResourceHolderSupport.getTimeToLiveInSeconds(ResourceHolderSupport.java:128) at org.springframework.jdbc.datasource.DataSourceUtils.applyTimeout(DataSourceUtils.java:341) at org.springframework.jdbc.core.JdbcTemplate.applyStatementSettings(JdbcTemplate.java:1467)\"]},\"610\":{\"h\":\"6.2.5 事务属性：事务异常\",\"t\":[\"默认情况\",\"默认只针对运行时异常回滚，编译时异常不回滚。情景模拟代码如下：\",\"@Service public class StudentService { @Autowired private StudentDao studentDao; /** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚! * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内! */ @Transactional(readOnly = false,timeout = 3) public void changeInfo() throws FileNotFoundException { studentDao.updateAgeById(100,1); //主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! new FileInputStream(\\\"xxxx\\\"); studentDao.updateNameById(\\\"test1\\\",1); } }\",\"设置回滚异常\",\"rollbackFor属性：指定哪些异常类才会回滚,默认是 RuntimeException and Error 异常方可回滚!\",\"/** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚! * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内! */ @Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class) public void changeInfo() throws FileNotFoundException { studentDao.updateAgeById(100,1); //主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! new FileInputStream(\\\"xxxx\\\"); studentDao.updateNameById(\\\"test1\\\",1); }\",\"设置不回滚的异常\",\"在默认设置和已有设置的基础上，再指定一个异常类型，碰到它不回滚。\",\"noRollbackFor属性：指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!\",\"@Service public class StudentService { @Autowired private StudentDao studentDao; /** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚! * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内! */ @Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class,noRollbackFor = FileNotFoundException.class) public void changeInfo() throws FileNotFoundException { studentDao.updateAgeById(100,1); //主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! new FileInputStream(\\\"xxxx\\\"); studentDao.updateNameById(\\\"test1\\\",1); } }\"]},\"611\":{\"h\":\"6.2.6 事务属性：事务隔离级别\",\"t\":[\"事务隔离级别\",\"数据库事务的隔离级别是指在多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定。常见的隔离级别包括：\",\"读未提交（Read Uncommitted）：事务可以读取未被提交的数据，容易产生脏读、不可重复读和幻读等问题。实现简单但不太安全，一般不用。\",\"读已提交（Read Committed）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。\",\"可重复读（Repeatable Read）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改。可以避免脏读和不可重复读，但仍有幻读的问题。\",\"串行化（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务。可以避免以上所有问题，但效率较低，不适用于高并发场景。 不同的隔离级别适用于不同的场景，需要根据实际业务需求进行选择和调整。\",\"事务隔离级别设置\",\"package com.atguigu.service; import com.atguigu.dao.StudentDao; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Isolation; import org.springframework.transaction.annotation.Transactional; import java.io.FileInputStream; import java.io.FileNotFoundException; /** * projectName: com.atguigu.service */ @Service public class StudentService { @Autowired private StudentDao studentDao; /** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚! * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内! * isolation = 设置事务的隔离级别,mysql默认是repeatable read! */ @Transactional(readOnly = false, timeout = 3, rollbackFor = Exception.class, noRollbackFor = FileNotFoundException.class, isolation = Isolation.REPEATABLE_READ) public void changeInfo() throws FileNotFoundException { studentDao.updateAgeById(100,1); //主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! new FileInputStream(\\\"xxxx\\\"); studentDao.updateNameById(\\\"test1\\\",1); } }\"]},\"612\":{\"h\":\"6.2.7 事务属性：事务传播行为\",\"t\":[\"事务传播行为要研究的问题\",\"img\",\"举例代码：\",\"@Transactional public void MethodA(){ // ... MethodB(); // ... } //在被调用的子方法中设置传播行为，代表如何处理调用的事务！ 是加入，还是新事务等！ @Transactional(propagation = Propagation.REQUIRES_NEW) public void MethodB(){ // ... }\",\"propagation属性\",\"@Transactional 注解通过 propagation 属性设置事务的传播行为。它的默认值是：\",\"Propagation propagation() default Propagation.REQUIRED;\",\"propagation 属性的可选值由 org.springframework.transaction.annotation.Propagation 枚举类提供：\",\"名称\",\"含义\",\"REQUIRED 默认值\",\"如果父方法有事务，就加入，如果没有就新建自己独立！\",\"REQUIRES_NEW\",\"不管父方法是否有事务，我都新建事务，都是独立的！\",\"测试\",\"声明两个业务方法\",\"@Service public class StudentService { @Autowired private StudentDao studentDao; /** * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间! * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚! * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内! * isolation = 设置事务的隔离级别,mysql默认是repeatable read! */ @Transactional(readOnly = false, timeout = 3, rollbackFor = Exception.class, noRollbackFor = FileNotFoundException.class, isolation = Isolation.REPEATABLE_READ) public void changeInfo() throws FileNotFoundException { studentDao.updateAgeById(100,1); //主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! new FileInputStream(\\\"xxxx\\\"); studentDao.updateNameById(\\\"test1\\\",1); } /** * 声明两个独立修改数据库的事务业务方法 */ @Transactional(propagation = Propagation.REQUIRED) public void changeAge(){ studentDao.updateAgeById(99,1); } @Transactional(propagation = Propagation.REQUIRED) public void changeName(){ studentDao.updateNameById(\\\"test2\\\",1); int i = 1/0; } }\",\"声明一个整合业务方法\",\"@Service public class TopService { @Autowired private StudentService studentService; @Transactional public void topService(){ studentService.changeAge(); studentService.changeName(); } }\",\"添加传播行为测试\",\"@SpringJUnitConfig(classes = AppConfig.class) public class TxTest { @Autowired private StudentService studentService; @Autowired private TopService topService; @Test public void testTx() throws FileNotFoundException { topService.topService(); } }\",\"注意：\",\"在同一个类中，对于@Transactional注解的方法调用，事务传播行为不会生效。这是因为Spring框架中使用代理模式实现了事务机制，在同一个类中的方法调用并不经过代理，而是通过对象的方法调用，因此@Transactional注解的设置不会被代理捕获，也就不会产生任何事务传播行为的效果。\",\"其他传播行为值（了解）\",\"Propagation.REQUIRED：如果当前存在事务，则加入当前事务，否则创建一个新事务。\",\"Propagation.REQUIRES_NEW：创建一个新事务，并在新事务中执行。如果当前存在事务，则挂起当前事务，即使新事务抛出异常，也不会影响当前事务。\",\"Propagation.NESTED：如果当前存在事务，则在该事务中嵌套一个新事务，如果没有事务，则与Propagation.REQUIRED一样。\",\"Propagation.SUPPORTS：如果当前存在事务，则加入该事务，否则以非事务方式执行。\",\"Propagation.NOT_SUPPORTED：以非事务方式执行，如果当前存在事务，挂起该事务。\",\"Propagation.MANDATORY：必须在一个已有的事务中执行，否则抛出异常。\",\"Propagation.NEVER：必须在没有事务的情况下执行，否则抛出异常。\"]},\"613\":{\"h\":\"七、Spring核心掌握总结\",\"t\":[\"核心点\",\"掌握目标\",\"spring框架理解\",\"spring家族和spring framework框架\",\"spring核心功能\",\"ioc/di , aop , tx\",\"spring ioc / di\",\"组件管理、ioc容器、ioc/di , 三种配置方式\",\"spring aop\",\"aop和aop框架和代理技术、基于注解的aop配置\",\"spring tx\",\"声明式和编程式事务、动态事务管理器、事务注解、属性\"]},\"614\":{\"h\":\"五、框架实战：SSM整合原理和实战\"},\"615\":{\"h\":\"目录\",\"t\":[\"一、SSM整合理解\",\"1.1 什么是SSM整合？\",\"1.2 SSM整合核心问题明确\",\"1.2.1 第一问：SSM整合需要几个IoC容器？\",\"1.2.2 第二问：每个IoC容器对应哪些类型组件？\",\"1.2.3 第三问：IoC容器之间关系和调用方向？\",\"1.2.4 第四问：具体多少配置类以及对应容器关系？\",\"1.2.5 第五问：IoC初始化方式和配置位置？\",\"二、SSM整合配置实战\",\"2.1 依赖整合和添加\",\"2.2 控制层配置编写(SpringMVC整合)\",\"2.3 业务层配置编写(AOP / TX整合）\",\"2.4 持久层配置编写(MyBatis整合)\",\"2.5 容器初始化配置类\",\"2.6 整合测试\",\"三、《任务列表案例》前端程序搭建和运行\",\"3.1 整合案例介绍和接口分析\",\"3.1.1 案例功能预览\",\"3.1.2接口分析\",\"3.2 前端工程导入\",\"3.2.1 前端环境搭建\",\"3.2.2 导入前端程序\",\"3.3 启动测试\",\"四、《任务列表案例》后端程序实现和测试\",\"4.1 准备工作\",\"4.2 功能实现\",\"4.3 前后联调\"]},\"616\":{\"h\":\"一、SSM整合理解\"},\"617\":{\"h\":\"1.1 什么是SSM整合？\",\"t\":[\"微观：将学习的Spring SpringMVC Mybatis框架应用到项目中!\",\"SpringMVC框架负责控制层\",\"Spring 框架负责整体和业务层的声明式事务管理\",\"MyBatis框架负责数据库访问层\",\"宏观：Spring接管一切（将框架核心组件交给Spring进行IoC管理），代码更加简洁。\",\"SpringMVC管理表述层、SpringMVC相关组件\",\"Spring管理业务层、持久层、以及数据库相关（DataSource,MyBatis）的组件\",\"使用IoC的方式管理一切所需组件\",\"实施：通过编写配置文件，实现SpringIoC容器接管一切组件。\"]},\"618\":{\"h\":\"1.2 SSM整合核心问题明确\"},\"619\":{\"h\":\"1.2.1 第一问：SSM整合需要几个IoC容器？\",\"t\":[\"两个容器\",\"本质上说，整合就是将三层架构和框架核心API组件交给SpringIoC容器管理！\",\"一个容器可能就够了，但是我们常见的操作是创建两个IoC容器（web容器和root容器），组件分类管理！\",\"这种做法有以下好处和目的：\",\"分离关注点：通过初始化两个容器，可以将各个层次的关注点进行分离。这种分离使得各个层次的组件能够更好地聚焦于各自的责任和功能。\",\"解耦合：各个层次组件分离装配不同的IoC容器，这样可以进行解耦。这种解耦合使得各个模块可以独立操作和测试，提高了代码的可维护性和可测试性。\",\"灵活配置：通过使用两个容器，可以为每个容器提供各自的配置，以满足不同层次和组件的特定需求。每个配置文件也更加清晰和灵活。\",\"总的来说，初始化两个容器在SSM整合中可以实现关注点分离、解耦合、灵活配置等好处。它们各自负责不同的层次和功能，并通过合适的集成方式协同工作，提供一个高效、可维护和可扩展的应用程序架构！\"]},\"620\":{\"h\":\"1.2.2 第二问：每个IoC容器对应哪些类型组件？\",\"t\":[\"图解：\",\"总结：\",\"容器名\",\"盛放组件\",\"web容器\",\"web相关组件（controller,springmvc核心组件）\",\"root容器\",\"业务和持久层相关组件（service,aop,tx,dataSource,mybatis,mapper等）\"]},\"621\":{\"h\":\"1.2.3 第三问：IoC容器之间关系和调用方向？\",\"t\":[\"情况1：两个无关联IoC容器之间的组件无法注入！\",\"情况2：子IoC容器可以单向的注入父IoC容器的组件！\",\"结论：web容器是root容器的子容器，父子容器关系。\",\"父容器：root容器，盛放service、mapper、mybatis等相关组件\",\"子容器：web容器，盛放controller、web相关组件\",\"源码体现：\",\"FrameworkServlet 655行！\",\"protected WebApplicationContext createWebApplicationContext(@Nullable ApplicationContext parent) { Class<?> contextClass = getContextClass(); if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) { throw new ApplicationContextException( \\\"Fatal initialization error in servlet with name '\\\" + getServletName() + \\\"': custom WebApplicationContext class [\\\" + contextClass.getName() + \\\"] is not of type ConfigurableWebApplicationContext\\\"); } ConfigurableWebApplicationContext wac = (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass); wac.setEnvironment(getEnvironment()); //wac 就是web ioc容器 //parent 就是root ioc容器 //web容器设置root容器为父容器，所以web容器可以引用root容器 wac.setParent(parent); String configLocation = getContextConfigLocation(); if (configLocation != null) { wac.setConfigLocation(configLocation); } configureAndRefreshWebApplicationContext(wac); return wac; }\",\"调用流程图解：\"]},\"622\":{\"h\":\"1.2.4 第四问：具体多少配置类以及对应容器关系？\",\"t\":[\"配置类的数量不是固定的，但是至少要两个，为了方便编写，我们可以三层架构每层对应一个配置类，分别指定两个容器加载即可！\",\"建议配置文件：\",\"配置名\",\"对应内容\",\"对应容器\",\"WebJavaConfig\",\"controller,springmvc相关\",\"web容器\",\"ServiceJavaConfig\",\"service,aop,tx相关\",\"root容器\",\"MapperJavaConfig\",\"mapper,datasource,mybatis相关\",\"root容器\"]},\"623\":{\"h\":\"1.2.5 第五问：IoC初始化方式和配置位置？\",\"t\":[\"在web项目下，我们可以选择web.xml和配置类方式进行ioc配置，推荐配置类。\",\"对于使用基于 web 的 Spring 配置的应用程序，建议这样做，如以下示例所示：\",\"public class MyWebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer { //指定root容器对应的配置类 //root容器的配置类 @Override protected Class<?>[] getRootConfigClasses() { return new Class<?>[] { ServiceJavaConfig.class,MapperJavaConfig.class }; } //指定web容器对应的配置类 webioc容器的配置类 @Override protected Class<?>[] getServletConfigClasses() { return new Class<?>[] { WebJavaConfig.class }; } //指定dispatcherServlet处理路径，通常为 / @Override protected String[] getServletMappings() { return new String[] { \\\"/\\\" }; } }\",\"图解配置类和容器配置：\"]},\"624\":{\"h\":\"二、SSM整合配置实战\"},\"625\":{\"h\":\"2.1 依赖整合和添加\",\"t\":[\"数据库准备\",\"依然沿用mybatis数据库测试脚本！\",\"CREATE DATABASE `mybatis-example`; USE `mybatis-example`; CREATE TABLE `t_emp`( emp_id INT AUTO_INCREMENT, emp_name CHAR(100), emp_salary DOUBLE(10,5), PRIMARY KEY(emp_id) ); INSERT INTO `t_emp`(emp_name,emp_salary) VALUES(\\\"tom\\\",200.33); INSERT INTO `t_emp`(emp_name,emp_salary) VALUES(\\\"jerry\\\",666.66); INSERT INTO `t_emp`(emp_name,emp_salary) VALUES(\\\"andy\\\",777.77);\",\"准备项目\",\"part04-ssm-integration\",\"转成web项目\",\"依赖导入\",\"pom.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.atguigu</groupId> <artifactId>part04-ssm-integration</artifactId> <version>1.0-SNAPSHOT</version> <packaging>war</packaging> <properties> <spring.version>6.0.6</spring.version> <jakarta.annotation-api.version>2.1.1</jakarta.annotation-api.version> <jakarta.jakartaee-web-api.version>9.1.0</jakarta.jakartaee-web-api.version> <jackson-databind.version>2.15.0</jackson-databind.version> <hibernate-validator.version>8.0.0.Final</hibernate-validator.version> <mybatis.version>3.5.11</mybatis.version> <mysql.version>8.0.25</mysql.version> <pagehelper.version>5.1.11</pagehelper.version> <druid.version>1.2.8</druid.version> <mybatis-spring.version>3.0.2</mybatis-spring.version> <jakarta.servlet.jsp.jstl-api.version>3.0.0</jakarta.servlet.jsp.jstl-api.version> <logback.version>1.2.3</logback.version> <lombok.version>1.18.26</lombok.version> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <!-- 需要依赖清单分析: spring ioc/di spring-context / 6.0.6 jakarta.annotation-api / 2.1.1 jsr250 aop spring-aspects / 6.0.6 tx spring-tx / 6.0.6 spring-jdbc / 6.0.6 springmvc spring-webmvc 6.0.6 jakarta.jakartaee-web-api 9.1.0 jackson-databind 2.15.0 hibernate-validator / hibernate-validator-annotation-processor 8.0.0.Final mybatis mybatis / 3.5.11 mysql / 8.0.25 pagehelper / 5.1.11 整合需要 加载spring容器 spring-web / 6.0.6 整合mybatis mybatis-spring x x 数据库连接池 druid / x lombok lombok / 1.18.26 logback logback/ 1.2.3 --> <dependencies> <!--spring pom.xml依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>jakarta.annotation</groupId> <artifactId>jakarta.annotation-api</artifactId> <version>${jakarta.annotation-api.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>${spring.version}</version> </dependency> <!-- springmvc spring-webmvc 6.0.6 jakarta.jakartaee-web-api 9.1.0 jackson-databind 2.15.0 hibernate-validator / hibernate-validator-annotation-processor 8.0.0.Final --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>jakarta.platform</groupId> <artifactId>jakarta.jakartaee-web-api</artifactId> <version>${jakarta.jakartaee-web-api.version}</version> <scope>provided</scope> </dependency> <!-- jsp需要依赖! jstl--> <dependency> <groupId>jakarta.servlet.jsp.jstl</groupId> <artifactId>jakarta.servlet.jsp.jstl-api</artifactId> <version>${jakarta.servlet.jsp.jstl-api.version}</version> </dependency> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>${jackson-databind.version}</version> </dependency> <!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --> <dependency> <groupId>org.hibernate.validator</groupId> <artifactId>hibernate-validator</artifactId> <version>${hibernate-validator.version}</version> </dependency> <!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --> <dependency> <groupId>org.hibernate.validator</groupId> <artifactId>hibernate-validator-annotation-processor</artifactId> <version>${hibernate-validator.version}</version> </dependency> <!-- mybatis mybatis / 3.5.11 mysql / 8.0.25 pagehelper / 5.1.11 --> <!-- mybatis依赖 --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>${mybatis.version}</version> </dependency> <!-- MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带! --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>${mysql.version}</version> </dependency> <dependency> <groupId>com.github.pagehelper</groupId> <artifactId>pagehelper</artifactId> <version>${pagehelper.version}</version> </dependency> <!-- 整合第三方特殊依赖 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>${mybatis-spring.version}</version> </dependency> <!-- 日志 ， 会自动传递slf4j门面--> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>${logback.version}</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>${lombok.version}</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>${druid.version}</version> </dependency> </dependencies> </project>\",\"实体类添加\",\"com.atguigu.pojo\",\"@Data public class Employee { private Integer empId; private String empName; private Double empSalary; }\",\"logback配置\",\"位置：resources/logback.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration debug=\\\"true\\\"> <!-- 指定日志输出的位置，ConsoleAppender表示输出到控制台 --> <appender name=\\\"STDOUT\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder> <!-- 日志输出的格式 --> <!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --> <pattern>[%d{HH:mm:ss.SSS}] [%-5level] [%thread] [%logger] [%msg]%n</pattern> <charset>UTF-8</charset> </encoder> </appender> <!-- 设置全局日志级别。日志级别按顺序分别是：TRACE、DEBUG、INFO、WARN、ERROR --> <!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --> <root level=\\\"DEBUG\\\"> <!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --> <appender-ref ref=\\\"STDOUT\\\" /> </root> <!-- 根据特殊需求指定局部日志级别，可也是包名或全类名。 --> <logger name=\\\"com.atguigu.mybatis\\\" level=\\\"DEBUG\\\" /> </configuration>\"]},\"626\":{\"h\":\"2.2 控制层配置编写(SpringMVC整合)\",\"t\":[\"主要配置controller,springmvc相关组件配置 \",\"位置：WebJavaConfig.java(命名随意)\",\"/** * projectName: com.atguigu.config * * 1.实现Springmvc组件声明标准化接口WebMvcConfigurer 提供了各种组件对应的方法 * 2.添加配置类注解@Configuration * 3.添加mvc复合功能开关@EnableWebMvc * 4.添加controller层扫描注解 * 5.开启默认处理器,支持静态资源处理 */ @Configuration @EnableWebMvc @ComponentScan(\\\"com.atguigu.controller\\\") public class WebJavaConfig implements WebMvcConfigurer { //开启静态资源 @Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) { configurer.enable(); } }\"]},\"627\":{\"h\":\"2.3 业务层配置编写(AOP / TX整合）\",\"t\":[\"主要配置service,注解aop和声明事务相关配置\",\"位置：ServiceJavaConfig.java(命名随意)\",\"/** * projectName: com.atguigu.config * * 1. 声明@Configuration注解,代表配置类 * 2. 声明@EnableTransactionManagement注解,开启事务注解支持 * 3. 声明@EnableAspectJAutoProxy注解,开启aspect aop注解支持 * 4. 声明@ComponentScan(\\\"com.atguigu.service\\\")注解,进行业务组件扫描 * 5. 声明transactionManager(DataSource dataSource)方法,指定具体的事务管理器 */ @EnableTransactionManagement @EnableAspectJAutoProxy @Configuration @ComponentScan(\\\"com.atguigu.service\\\") public class ServiceJavaConfig { @Bean public DataSourceTransactionManager transactionManager(DataSource dataSource){ DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(); transactionManager.setDataSource(dataSource); return transactionManager; } }\"]},\"628\":{\"h\":\"2.4 持久层配置编写(MyBatis整合)\",\"t\":[\"主要配置mapper代理对象，连接池和mybatis核心组件配置\",\"mybatis整合思路\",\"mybatis核心api使用回顾：\",\"//1.读取外部配置文件 InputStream ips = Resources.getResourceAsStream(\\\"mybatis-config.xml\\\"); //2.创建sqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(ips); //3.创建sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); //4.获取mapper代理对象 EmpMapper empMapper = sqlSession.getMapper(EmpMapper.class); //5.数据库方法调用 int rows = empMapper.deleteEmpById(1); System.out.println(\\\"rows = \\\" + rows); //6.提交和回滚 sqlSession.commit(); sqlSession.close();\",\"mybatis核心api介绍回顾：\",\"SqlSessionFactoryBuilder\",\"这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 无需ioc容器管理！\",\"SqlSessionFactory\",\"一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，因此 SqlSessionFactory 的最佳作用域是应用作用域。 需要ioc容器管理！\",\"SqlSession\",\"每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 无需ioc容器管理！\",\"Mapper映射器实例\",\"映射器是一些绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的。虽然从技术层面上来讲，任何映射器实例的最大作用域与请求它们的 SqlSession 相同。但方法作用域才是映射器实例的最合适的作用域。\",\"从作用域的角度来说，映射器实例不应该交给ioc容器管理！\",\"但是从使用的角度来说，业务类（service）需要注入mapper接口，所以mapper应该交给ioc容器管理！\",\"总结\",\"将SqlSessionFactory实例存储到IoC容器\",\"将Mapper实例存储到IoC容器 mybatis整合思路理解： mybatis的api实例化需要复杂的过程。\",\"例如，自己实现sqlSessionFactory加入ioc容器：\",\"@Bean public SqlSessionFactory sqlSessionFactory(){ //1.读取外部配置文件 InputStream ips = Resources.getResourceAsStream(\\\"mybatis-config.xml\\\"); //2.创建sqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(ips); return sqlSessionFactory; }\",\"过程比较繁琐，为了提高整合效率，mybatis提供了提供封装SqlSessionFactory和Mapper实例化的逻辑的FactoryBean组件，我们只需要声明和指定少量的配置即可！\",\"SqlSessionFactoryBean源码展示(mybatis提供)：\",\"package org.mybatis.spring; public class SqlSessionFactoryBean implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ContextRefreshedEvent> { //封装了实例化流程 public SqlSessionFactory getObject() throws Exception { if (this.sqlSessionFactory == null) { //实例化对象逻辑 afterPropertiesSet(); } //返回对象逻辑 return this.sqlSessionFactory; } }\",\"mybatis整合思路总结：\",\"需要将SqlSessionFactory和Mapper实例加入到IoC容器\",\"使用mybatis整合包提供的FactoryBean快速整合\",\"准备外部配置文件\",\"数据库连接信息 位置：resources/jdbc.properties\",\"jdbc.user=root jdbc.password=root jdbc.url=jdbc:mysql:///mybatis-example jdbc.driver=com.mysql.cj.jdbc.Driver\",\"整合方式1 （保留mybatis-config.xml）\",\"介绍\",\"依然保留mybatis的外部配置文件（xml）, 但是数据库连接信息交给Druid连接池配置！\",\"缺点：依然需要mybatis-config.xml文件，进行xml文件解析，效率偏低！\",\"mybatis配置文件\",\"数据库信息以及mapper扫描包设置使用Java配置类处理！mybatis其他的功能（别名、settings、插件等信息）依然在mybatis-config.xml配置！\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <settings> <!-- 开启驼峰式映射--> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> <!-- 开启logback日志输出--> <setting name=\\\"logImpl\\\" value=\\\"SLF4J\\\"/> <!--开启resultMap自动映射 --> <setting name=\\\"autoMappingBehavior\\\" value=\\\"FULL\\\"/> </settings> <typeAliases> <!-- 给实体类起别名 --> <package name=\\\"com.atguigu.pojo\\\"/> </typeAliases> <plugins> <plugin interceptor=\\\"com.github.pagehelper.PageInterceptor\\\"> <!-- helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect属性来指定分页插件使用哪种方言。配置时，可以使用下面的缩写值： oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012,derby （完整内容看 PageAutoDialect） 特别注意：使用 SqlServer2012 数据库时， https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E8%A8%80 --> <property name=\\\"helperDialect\\\" value=\\\"mysql\\\"/> </plugin> </plugins> </configuration>\",\"mybatis和持久层配置类\",\"持久层Mapper配置、数据库配置、Mybatis配置信息 位置：MapperJavaConfig.java(命名随意)\",\"@Configuration @PropertySource(\\\"classpath:jdbc.properties\\\") public class MapperJavaConfig { @Value(\\\"${jdbc.user}\\\") private String user; @Value(\\\"${jdbc.password}\\\") private String password; @Value(\\\"${jdbc.url}\\\") private String url; @Value(\\\"${jdbc.driver}\\\") private String driver; //数据库连接池配置 @Bean public DataSource dataSource(){ DruidDataSource dataSource = new DruidDataSource(); dataSource.setUsername(user); dataSource.setPassword(password); dataSource.setUrl(url); dataSource.setDriverClassName(driver); return dataSource; } /** * 配置SqlSessionFactoryBean,指定连接池对象和外部配置文件即可 * @param dataSource 需要注入连接池对象 * @return 工厂Bean */ @Bean public SqlSessionFactoryBean sqlSessionFactoryBean(DataSource dataSource){ //实例化SqlSessionFactory工厂 SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); //设置连接池 sqlSessionFactoryBean.setDataSource(dataSource); //设置配置文件 //包裹外部配置文件地址对象 Resource resource = new ClassPathResource(\\\"mybatis-config.xml\\\"); sqlSessionFactoryBean.setConfigLocation(resource); return sqlSessionFactoryBean; } /** * 配置Mapper实例扫描工厂,配置 <mapper <package 对应接口和mapperxml文件所在的包 * @return */ @Bean public MapperScannerConfigurer mapperScannerConfigurer(){ MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer(); //设置mapper接口和xml文件所在的共同包 mapperScannerConfigurer.setBasePackage(\\\"com.atguigu.mapper\\\"); return mapperScannerConfigurer; } }\",\"问题：\",\"当你在Spring配置类中添加了sqlSessionFactoryBean和mapperScannerConfigurer配置方法时，可能会导致@Value注解读取不到值为null的问题。这是因为SqlSessionFactoryBean和MapperScannerConfigurer是基于MyBatis框架的配置，它们的初始化顺序可能会导致属性注入的问题。\",\"SqlSessionFactoryBean和MapperScannerConfigurer在配置类中通常是用来配置MyBatis相关的Bean，例如数据源、事务管理器、Mapper扫描等。这些配置类通常在@Configuration注解下定义，并且使用@Value注解来注入属性值。\",\"当配置类被加载时，Spring容器会首先处理Bean的定义和初始化，其中包括sqlSessionFactoryBean和mapperScannerConfigurer的初始化。在这个过程中，如果@Value注解所在的Bean还没有被完全初始化，可能会导致注入的属性值为null。\",\"解决方案：\",\"分成两个配置类独立配置，互不影响，数据库提取一个配置类，mybatis提取一个配置类即可解决！\",\"拆分配置\",\"数据库配置类（DataSourceJavaConfig.java）\",\"@Configuration @PropertySource(\\\"classpath:jdbc.properties\\\") public class DataSourceJavaConfig { @Value(\\\"${jdbc.user}\\\") private String user; @Value(\\\"${jdbc.password}\\\") private String password; @Value(\\\"${jdbc.url}\\\") private String url; @Value(\\\"${jdbc.driver}\\\") private String driver; //数据库连接池配置 @Bean public DataSource dataSource(){ DruidDataSource dataSource = new DruidDataSource(); dataSource.setUsername(user); dataSource.setPassword(password); dataSource.setUrl(url); dataSource.setDriverClassName(driver); return dataSource; } }\",\"mybatis配置类（MapperJavaConfig.java）\",\"@Configuration public class MapperJavaConfig { /** * 配置SqlSessionFactoryBean,指定连接池对象和外部配置文件即可 * @param dataSource 需要注入连接池对象 * @return 工厂Bean */ @Bean public SqlSessionFactoryBean sqlSessionFactoryBean(DataSource dataSource){ //实例化SqlSessionFactory工厂 SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); //设置连接池 sqlSessionFactoryBean.setDataSource(dataSource); //设置配置文件 //包裹外部配置文件地址对象 Resource resource = new ClassPathResource(\\\"mybatis-config.xml\\\"); sqlSessionFactoryBean.setConfigLocation(resource); return sqlSessionFactoryBean; } /** * 配置Mapper实例扫描工厂,配置 <mapper <package 对应接口和mapperxml文件所在的包 * @return */ @Bean public MapperScannerConfigurer mapperScannerConfigurer(){ MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer(); //设置mapper接口和xml文件所在的共同包 mapperScannerConfigurer.setBasePackage(\\\"com.atguigu.mapper\\\"); return mapperScannerConfigurer; } }\",\"整合方式2（完全配置类 去掉mybatis-config.xml）\",\"介绍\",\"不在保留mybatis的外部配置文件（xml）, 所有配置信息（settings、插件、别名等）全部在声明SqlSessionFactoryBean的代码中指定！数据库信息依然使用DruidDataSource实例替代！\",\"优势：全部配置类，避免了XML文件解析效率低问题！\",\"mapper配置类\",\"/** * projectName: com.atguigu.config * * description: 持久层配置和Druid和Mybatis配置 使用一个配置文件 */ @Configuration public class MapperJavaConfigNew { /** * 配置SqlSessionFactoryBean,指定连接池对象和外部配置文件即可 * @param dataSource 需要注入连接池对象 * @return 工厂Bean */ @Bean public SqlSessionFactoryBean sqlSessionFactoryBean(DataSource dataSource){ //实例化SqlSessionFactory工厂 SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); //设置连接池 sqlSessionFactoryBean.setDataSource(dataSource); //TODO: 替代xml文件的java配置 /* <settings> <!-- 开启驼峰式映射--> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> <!-- 开启logback日志输出--> <setting name=\\\"logImpl\\\" value=\\\"SLF4J\\\"/> <!--开启resultMap自动映射 --> <setting name=\\\"autoMappingBehavior\\\" value=\\\"FULL\\\"/> </settings> <typeAliases> <!-- 给实体类起别名 --> <package name=\\\"com.atguigu.pojo\\\"/> </typeAliases> <plugins> <plugin interceptor=\\\"com.github.pagehelper.PageInterceptor\\\"> <!-- helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect属性来指定分页插件使用哪种方言。配置时，可以使用下面的缩写值： oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012,derby （完整内容看 PageAutoDialect） 特别注意：使用 SqlServer2012 数据库时， https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E8%A8%80 --> <property name=\\\"helperDialect\\\" value=\\\"mysql\\\"/> </plugin> </plugins> */ //settings [包裹到一个configuration对象,切记别倒错包] org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration(); configuration.setMapUnderscoreToCamelCase(true); configuration.setLogImpl(Slf4jImpl.class); configuration.setAutoMappingBehavior(AutoMappingBehavior.FULL); sqlSessionFactoryBean.setConfiguration(configuration); //typeAliases sqlSessionFactoryBean.setTypeAliasesPackage(\\\"com.atguigu.pojo\\\"); //分页插件配置 PageInterceptor pageInterceptor = new PageInterceptor(); Properties properties = new Properties(); properties.setProperty(\\\"helperDialect\\\",\\\"mysql\\\"); pageInterceptor.setProperties(properties); sqlSessionFactoryBean.addPlugins(pageInterceptor); return sqlSessionFactoryBean; } /** * 配置Mapper实例扫描工厂,配置 <mapper <package 对应接口和mapperxml文件所在的包 * @return */ @Bean public MapperScannerConfigurer mapperScannerConfigurer(){ MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer(); //设置mapper接口和xml文件所在的共同包 mapperScannerConfigurer.setBasePackage(\\\"com.atguigu.mapper\\\"); return mapperScannerConfigurer; } }\"]},\"629\":{\"h\":\"2.5 容器初始化配置类\",\"t\":[\"public class MyWebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer { //指定root容器对应的配置类 @Override protected Class<?>[] getRootConfigClasses() { return new Class<?>[] {MapperJavaConfig.class, ServiceJavaConfig.class, DataSourceJavaConfig.class }; } //指定web容器对应的配置类 @Override protected Class<?>[] getServletConfigClasses() { return new Class<?>[] { WebJavaConfig.class }; } //指定dispatcherServlet处理路径，通常为 / @Override protected String[] getServletMappings() { return new String[] { \\\"/\\\" }; } }\"]},\"630\":{\"h\":\"2.6 整合测试\",\"t\":[\"需求\",\"查询所有员工信息,返回对应json数据！\",\"controller\",\"@Slf4j @RestController @RequestMapping(\\\"/employee\\\") public class EmployeeController { @Autowired private EmployeeService employeeService; @GetMapping(\\\"list\\\") public List<Employee> retList(){ List<Employee> employees = employeeService.findAll(); log.info(\\\"员工数据:{}\\\",employees); return employees; } }\",\"service \",\"@Service public class EmployeeServiceImpl implements EmployeeService { @Autowired private EmployeeMapper employeeMapper; /** * 查询所有员工信息 */ @Override public List<Employee> findAll() { List<Employee> employeeList = employeeMapper.queryAll(); return employeeList; } }\",\"mapper\",\"mapper接口 包：com.atguigu.mapper \",\"public interface EmployeeMapper { List<Employee> queryAll(); }\",\"mapper XML 文件位置： resources/mappers\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace等于mapper接口类的全限定名,这样实现对应 --> <mapper namespace=\\\"com.atguigu.mapper.EmployeeMapper\\\"> <select id=\\\"queryAll\\\" resultType=\\\"employee\\\"> <!-- #{empId}代表动态传入的参数,并且进行赋值!后面详细讲解 --> select emp_id empId,emp_name empName, emp_salary empSalary from t_emp </select> </mapper>\"]},\"631\":{\"h\":\"三、《任务列表案例》前端程序搭建和运行\"},\"632\":{\"h\":\"3.1 整合案例介绍和接口分析\"},\"633\":{\"h\":\"3.1.1 案例功能预览\"},\"634\":{\"h\":\"3.1.2接口分析\",\"t\":[\"学习计划分页查询\",\"/* 需求说明 查询全部数据页数据 请求uri schedule/{pageSize}/{currentPage} 请求方式 get 响应的json { \\\"code\\\":200, \\\"flag\\\":true, \\\"data\\\":{ //本页数据 data: [ {id:1,title:'学习java',completed:true}, {id:2,title:'学习html',completed:true}, {id:3,title:'学习css',completed:true}, {id:4,title:'学习js',completed:true}, {id:5,title:'学习vue',completed:true} ], //分页参数 pageSize:5, // 每页数据条数 页大小 total:0 , // 总记录数 currentPage:1 // 当前页码 } } */\",\"学习计划删除\",\"/* 需求说明 根据id删除日程 请求uri schedule/{id} 请求方式 delete 响应的json { \\\"code\\\":200, \\\"flag\\\":true, \\\"data\\\":null } */\",\"学习计划保存\",\"/* 需求说明 增加日程 请求uri schedule 请求方式 post 请求体中的JSON { title: '', completed: false } 响应的json { \\\"code\\\":200, \\\"flag\\\":true, \\\"data\\\":null } */\",\"学习计划修改\",\"/* 需求说明 根据id修改数据 请求uri schedule 请求方式 put 请求体中的JSON { id: 1, title: '', completed: false } 响应的json { \\\"code\\\":200, \\\"flag\\\":true, \\\"data\\\":null } */\"]},\"635\":{\"h\":\"3.2 前端工程导入\"},\"636\":{\"h\":\"3.2.1 前端环境搭建\",\"t\":[\" Node.js 是前端程序运行的服务器，类似Java程序运行的服务器Tomcat Npm 是前端依赖包管理工具，类似maven依赖管理工具软件\",\"node安装\",\"课程node版本：16.16.0\",\"https://nodejs.org/download/release/v16.16.0/\",\"node安装和测试：\",\"打开官网 https://nodejs.org/en/ 下载对应操作系统的 LTS 版本。（16.16.0）\",\"node-v16.16.0-x64.msi\",\"双击安装包进行安装，安装过程中遵循默认选项即可。安装完成后，可以在命令行终端输入 node -v 和 npm -v 查看 Node.js 和 npm 的版本号。\",\"npm使用 （maven）\",\"NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于后端的Maven 。\",\"配置阿里镜像\",\"npm config set registry https://registry.npmjs.org/\",\"更新npm版本 \",\"node16.16.0对应的npm版本过低！需要升级！\",\"npm install -g npm@9.6.6\",\"npm依赖下载命令\",\"npm install 依赖名 / npm install 依赖名@版本\",\"安装vscode \",\"VSCodeUserSetup-x64-1.74.0.exe\"]},\"637\":{\"h\":\"3.2.2 导入前端程序\",\"t\":[\"vue3-demo2.rar\",\"点击加载前端程序！\"]},\"638\":{\"h\":\"3.3 启动测试\",\"t\":[\"npm install //安装依赖 npm run dev //运行测试\"]},\"639\":{\"h\":\"四、《任务列表案例》后端程序实现和测试\"},\"640\":{\"h\":\"4.1 准备工作\",\"t\":[\"准备数据库脚本\",\"CREATE TABLE schedule ( id INT NOT NULL AUTO_INCREMENT, title VARCHAR(255) NOT NULL, completed BOOLEAN NOT NULL, PRIMARY KEY (id) ); INSERT INTO schedule (title, completed) VALUES ('学习java', true), ('学习Python', false), ('学习C++', true), ('学习JavaScript', false), ('学习HTML5', true), ('学习CSS3', false), ('学习Vue.js', true), ('学习React', false), ('学习Angular', true), ('学习Node.js', false), ('学习Express', true), ('学习Koa', false), ('学习MongoDB', true), ('学习MySQL', false), ('学习Redis', true), ('学习Git', false), ('学习Docker', true), ('学习Kubernetes', false), ('学习AWS', true), ('学习Azure', false);\",\"准备pojo\",\"包：com.atguigu.pojo\",\"/** * projectName: com.atguigu.pojo * * description: 任务实体类 */ @Data public class Schedule { private Integer id; private String title; private Boolean completed; }\",\"准备 R\",\"包：com.atguigu.utils\",\"** * projectName: com.atguigu.utils * * description: 返回结果类 */ public class R { private int code = 200; //200成功状态码 private boolean flag = true; //返回状态 private Object data; //返回具体数据 public static R ok(Object data){ R r = new R(); r.data = data; return r; } public static R fail(Object data){ R r = new R(); r.code = 500; //错误码 r.flag = false; //错误状态 r.data = data; return r; } public int getCode() { return code; } public void setCode(int code) { this.code = code; } public boolean isFlag() { return flag; } public void setFlag(boolean flag) { this.flag = flag; } public Object getData() { return data; } public void setData(Object data) { this.data = data; } }\",\"准备 PageBean\",\"包：com.atguigu.utils\",\"@Data @NoArgsConstructor @AllArgsConstructor public class PageBean<T> { private int currentPage; // 当前页码 private int pageSize; // 每页显示的数据量 private long total; // 总数据条数 private List<T> data; // 当前页的数据集合 }\"]},\"641\":{\"h\":\"4.2 功能实现\",\"t\":[\"分页查询 \",\"controller\",\"/* @CrossOrigin 注释在带注释的控制器方法上启用跨源请求 */ @CrossOrigin @RequestMapping(\\\"schedule\\\") @RestController public class ScheduleController { @Autowired private ScheduleService scheduleService; @GetMapping(\\\"/{pageSize}/{currentPage}\\\") public R showList(@PathVariable(name = \\\"pageSize\\\") int pageSize, @PathVariable(name = \\\"currentPage\\\") int currentPage){ PageBean<Schedule> pageBean = scheduleService.findByPage(pageSize,currentPage); return R.ok(pageBean); } }\",\"service\",\"@Slf4j @Service public class ScheduleServiceImpl implements ScheduleService { @Autowired private ScheduleMapper scheduleMapper; /** * 分页数据查询,返回分页pageBean * * @param pageSize * @param currentPage * @return */ @Override public PageBean<Schedule> findByPage(int pageSize, int currentPage) { //1.设置分页参数 PageHelper.startPage(currentPage,pageSize); //2.数据库查询 List<Schedule> list = scheduleMapper.queryPage(); //3.结果获取 PageInfo<Schedule> pageInfo = new PageInfo<>(list); //4.pageBean封装 PageBean<Schedule> pageBean = new PageBean<>(pageInfo.getPageNum(),pageInfo.getPageSize(),pageInfo.getTotal(),pageInfo.getList()); log.info(\\\"分页查询结果:{}\\\",pageBean); return pageBean; } }\",\"mapper\",\"mapper接口\",\"public interface ScheduleMapper { List<Schedule> queryPage(); }\",\"mapperxml文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace等于mapper接口类的全限定名,这样实现对应 --> <mapper namespace=\\\"com.atguigu.mapper.ScheduleMapper\\\"> <select id=\\\"queryPage\\\" resultType=\\\"schedule\\\"> select * from schedule </select> </mapper>\",\"计划添加 \",\"controller\",\"@PostMapping public R saveSchedule(@RequestBody Schedule schedule){ scheduleService.saveSchedule(schedule); return R.ok(null); }\",\"service\",\"/** * 保存学习计划 * * @param schedule */ @Override public void saveSchedule(Schedule schedule) { scheduleMapper.insert(schedule); }\",\"mapper\",\"mapper接口\",\"void insert(Schedule schedule);\",\"mapperxml文件\",\"<insert id=\\\"insert\\\"> insert into schedule (title, completed) values (#{title}, #{completed}); </insert>\",\"计划删除 \",\"controller\",\"@DeleteMapping(\\\"/{id}\\\") public R removeSchedule(@PathVariable Integer id){ scheduleService.removeById(id); return R.ok(null); }\",\"service\",\"/** * 移除学习计划 * * @param id */ @Override public void removeById(Integer id) { scheduleMapper.delete(id); }\",\"mapper mapper接口\",\"void delete(Integer id);\",\"mapperxml文件\",\"<delete id=\\\"delete\\\"> delete from schedule where id = #{id} </delete>\",\"计划修改 \",\"controller\",\"@PutMapping public R changeSchedule(@RequestBody Schedule schedule){ scheduleService.updateSchedule(schedule); return R.ok(null); }\",\"service\",\"/** * 更新学习计划 * * @param schedule */ @Override public void updateSchedule(Schedule schedule) { scheduleMapper.update(schedule); }\",\"mapper mapper接口\",\"void update(Schedule schedule);\",\"mapperxml文件\",\"<update id=\\\"update\\\"> update schedule set title = #{title} , completed = #{completed} where id = #{id} </update>\"]},\"642\":{\"h\":\"4.3 前后联调\",\"t\":[\"后台项目根路径设计\",\"启动测试即可\"]},\"643\":{\"h\":\"八、终极实战：SpringBoot版微头条实战\"},\"644\":{\"h\":\"目录\",\"t\":[\"一、微头条案例介绍\",\"微头条业务简介\",\"技术栈介绍\",\"功能展示\",\"二、微头条前端搭建\",\"三、基于SpringBoot搭建项目基础架构\",\"1. 数据库脚本执行\",\"2. 搭建SprintBoot工程\",\"3. MybatisX逆向工程\",\"四、后台功能开发\",\"4.1 用户模块开发\",\"4.2 首页模块开发\",\"4.3 头条模块开发\",\"五、前后端联调\"]},\"645\":{\"h\":\"一、微头条案例介绍\"},\"646\":{\"h\":\"微头条业务简介\",\"t\":[\"用户功能 \",\"注册功能\",\"登录功能\",\"jwt实现\",\"头条新闻 \",\"新闻的分页浏览\",\"通过标题关键字搜索新闻\",\"查看新闻详情\",\"新闻的修改和删除\"]},\"647\":{\"h\":\"技术栈介绍\",\"t\":[\"前端技术栈\",\"ES6作为基础JS语法\",\"nodejs用于运行环境\",\"npm用于项目依赖管理工具\",\"vite用于项目的构建架工具\",\"Vue3用于项目数据的渲染框架\",\"Axios用于前后端数据的交互\",\"Router用于页面的跳转\",\"Pinia用于存储用户的数据\",\"LocalStorage作为用户校验token的存储手段\",\"Element-Plus提供组件\",\"后端技术栈\",\"JAVA作为开发语言,版本为JDK17\",\"Tomcat作为服务容器,版本为10.1.7\",\"Mysql8用于项目存储数据\",\"SpringMVC用于控制层实现前后端数据交互\",\"MyBatis-Plus用于实现数据的CURD\",\"Druid用于提供数据源的连接池\",\"SpringBoot作为项目基础架构\",\"MD5用于用户密码的加密\",\"Jwt用于token的生成和校验\",\"Jackson用于转换JSON\"]},\"648\":{\"h\":\"功能展示\",\"t\":[\"头条首页信息搜索\",\"登录功能\",\"注册功能\",\"展示功能\",\"发布头条功能\",\"修改头条功能\",\"删除头条功能\"]},\"649\":{\"h\":\"二、微头条前端搭建\",\"t\":[\"确保本地node，npm，vscode安装完毕！ 如果没有安装可以回看ssm整合实战！\",\"解压前端项目代码并存放到磁盘的合适位置\",\"atguigu-headline.rar\",\"使用vscode打开工程\",\"进入项目后打开集成终端或者在src上右击选择在集成终端中打开\",\"通过 npm run dev启动前端项目\",\"npm install npm run dev\"]},\"650\":{\"h\":\"三、基于SpringBoot搭建项目基础架构\"},\"651\":{\"h\":\"1. 数据库脚本执行\",\"t\":[\"执行数据库脚本:\",\"top_news.sql\",\"CREATE DATABASE sm_db; USE sm_db; SET NAMES utf8mb4; SET FOREIGN_KEY_CHECKS = 0; -- ---------------------------- -- Table structure for news_headline -- ---------------------------- DROP TABLE IF EXISTS `news_headline`; CREATE TABLE `news_headline` ( `hid` INT NOT NULL AUTO_INCREMENT COMMENT '头条id', `title` VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '头条标题', `article` VARCHAR(5000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '头条新闻内容', `type` INT NOT NULL COMMENT '头条类型id', `publisher` INT NOT NULL COMMENT '头条发布用户id', `page_views` INT NOT NULL COMMENT '头条浏览量', `create_time` DATETIME(0) NULL DEFAULT NULL COMMENT '头条发布时间', `update_time` DATETIME(0) NULL DEFAULT NULL COMMENT '头条最后的修改时间', `version` INT DEFAULT 1 COMMENT '乐观锁', `is_deleted` INT DEFAULT 0 COMMENT '头条是否被删除 1 删除 0 未删除', PRIMARY KEY (`hid`) USING BTREE ) ENGINE = INNODB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC; -- ---------------------------- -- Records of news_headline -- ---------------------------- INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (1, '特色产业激发乡村振兴新活力', '推进中国式现代化，必须全面推进乡村振兴。习近平总书记指出，产业振兴是乡村振兴的重中之重，也是实际工作的切入点。近日，记者走进乡村一线，看到各地以特色产业为抓手，拓展产业链发展产业集群，一二三产业融合发展，培育乡村振兴新动能。\\\\n\\\\n 这个端午，广东茂名高州市根子镇柏桥村的荔枝迎来了丰收。今年4月，习近平总书记来到柏桥村考察调研。总书记走进荔枝种植园，了解当地发展特色种植产业和文旅产业等情况，并同现场技术人员亲切交流。', 1, 1, 0, '2023-06-25 09:26:20', '2023-06-25 09:26:20', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (2, '北京连续三天最高温超40℃，6月“炎值”因何爆表？', ' 中新社北京6月24日电 (记者 陈杭 徐婧)京城连续三日“热晴不减”，且高温红色预警持续生效。截至24日13时51分，作为北京地区气象观测代表站的南郊观象台气温突破40℃，这是该站观测史上首次连续三天气温超40℃。22日以来，北京高温“烤验”突出。22日，北京南郊观象台最高气温达41.1℃，这是有观测纪录以来历史第二高(并列)。北京市气象局表示，观象台1951年建站以来极端最高气温为41.9℃，出现在1999年7月24日。\\\\n\\\\n 23日，北京南郊观象台最高气温为40.3℃，这是该观象台建站以来首次出现连续两天最高气温超40℃。当天，北京时隔9年再次发布最高级别的高温红色预警信号。', 1, 1, 0, '2023-06-25 09:28:06', '2023-06-25 09:28:06', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (3, '今年夏天，极端高温是否会成为常态？', '针对京津冀地区持续高温天气，23日下午，中国气象局召开高温天气新闻通气会。\\\\n\\\\n 刚过6月就出现极端高温天，今年夏天还会有多少高温天呢？对此，国家气候中心首席预报员高辉表示，根据国家气候中心预计，今年夏天全国大部分地区气温都比常年同期要偏高，这也对应着高温日数也要高于常年同期。但不同的地区，高温集中时段不一样，比如南方地区是在盛夏时间段进入高温季，而北方地区往往是在初夏时间段，所以从今年夏季来说，要区分不同的地区来考虑高温的影响。\\\\n\\\\n 我国各地高温集中时段有明显的地域差异。对华北地区来说，通常雨季前的6月至7月初更容易出现高温天气，连续数天的高温在6月也比较常见。高辉说，这段时间主要是干热型高温为主，表现为气温高湿度小。进入7月后期，随着副高北跳和夏季风往北推进，水汽输送和大气湿度增加，云量也会增多，会出现闷热天气，也就是湿热型高温。就最高气温而言，前一时段气温最高值通常高于后一时段。但也需要说明的是，人体体感温度不仅和气温有关，还受到湿度影响，往往这种湿热型高温会加重人体体感温度。', 1, 1, 0, '2023-06-25 09:31:00', '2023-06-25 09:31:00', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (4, '中央气象台发布今年首个高温橙色预警', '新华社北京6月22日电（记者黄垚）22日18时，中央气象台升级发布今年首个高温橙色预警。预计23日白天，华北、黄淮等地将继续出现35℃以上的高温天气，北京、天津、河北中南部、山东中北部等地部分地区最高气温可达40℃左右。\\\\n\\\\n 气象监测显示，22日8时至16时，北京、天津、河北中部、山东北部等地气温上升迅猛，最高气温升至40℃以上。上述4省份共有17个国家气象观测站最高气温突破历史极值。', 1, 1, 0, '2023-06-25 09:31:36', '2023-06-25 09:31:36', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (5, '江南水乡 龙舟竞渡', '江南水乡 龙舟竞渡---6月18日，浙江省湖州市“我们的节日·端午”暨第七届江南·民当端午民俗文化旅游节在南浔区和孚镇民当村开幕，来自南浔区各个乡镇的农民选手在河道中赛龙舟、划菱桶，体验传统端午民俗。', 1, 1, 0, '2023-06-25 09:32:13', '2023-06-25 09:32:13', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (6, '螃蟹粽、印花蛋、艾草凉粉……你知道端午有哪些创意美食吗？', '端午有旅行路上的见闻，有诗画里的艺术，也少不了舌尖上的风韵。听风入夏粽香佐茶，您还知道端午有哪些创意美食吗？端午至味，总少不了粽子这一味。甜的、咸的，肉馅的、蛋黄的、红枣的、豆沙的……一起来寻味端午！\\\\n\\\\n 古人其实早就喜欢把各种果干放进粽子里，美食家苏轼还发明了杨梅粽。《玉台新咏》中说，“酒中喜桃子，粽里觅杨梅。”后来苏轼曾借用过这个典故，在元祐三年所写的端午帖子中说，“不独盘中见卢橘，时于粽里得杨梅”。', 1, 1, 0, '2023-06-25 09:32:40', '2023-06-25 09:32:40', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (7, '尼克斯拒绝执行罗斯球队选项 罗斯成自由球员', '北京时间6月25日，据多方消息源报道，尼克斯拒绝执行德里克-罗斯下赛季的球队选项，罗斯成为完全自由球员。\\\\n\\\\n 34岁的罗斯在刚刚结束的赛季队内角色严重下滑，他仅出战27场比赛，场均登场12.5分钟，得到5.6分1.5篮板1.7助攻。\\\\n\\\\n 2021年，罗斯与尼克斯签下3年4300万美元的续约合同，其中最后一年为1560万美元球队选项。', 2, 2, 0, '2023-06-25 09:34:26', '2023-06-25 09:34:26', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (8, '班凯罗承诺代表美国男篮打世界杯 名单仅差1人', '北京时间6月25日，据著名NBA记者沙姆斯-查拉尼亚报道，魔术前锋保罗-班凯罗承诺将代表美国男篮参加2023年男篮世界杯。\\\\n\\\\n 班凯罗在刚刚结束的赛季场均能够砍下20.0分6.9篮板3.7助攻，获得了NBA2022-23赛季年度最佳新秀。', 2, 2, 0, '2023-06-25 09:34:59', '2023-06-25 09:34:59', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (9, 'F1加拿大大奖赛正赛：维斯塔潘冠军 阿隆索亚军', '2023年F1加拿大大奖赛正式比赛结束。红牛车队维斯塔潘杆位发车一路轻松领跑，再次完成了Pole-to-Win！这是红牛车队历史上的第100座分站冠军！同时也是维斯塔潘F1生涯的第41座分站冠军，追平了“车神”埃尔顿·塞纳的冠军数！阿斯顿马丁车队阿隆索亚军，梅赛德斯车队汉密尔顿季军。', 2, 2, 0, '2023-06-25 09:35:43', '2023-06-25 09:35:43', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (10, 'CTCC绍兴柯桥站圆满落幕 张志强曹宏炜各取一冠', '6月24日，2023赛季CTCC中国汽车场地职业联赛绍兴柯桥站在雨中的浙江国际赛车场上演了两回合决赛的巅峰角逐。在线上线下观众的共同见证下，超级杯-TCR中国系列赛、运动杯-长三角赛车节联袂献上高水平对决，以精彩的比赛献礼这个端午节假期！TCR 中国系列赛第三回合于今天上午率先开战。来自壳牌捷凯领克车队的张志强穿云破雾夺得冠军；夺得该回合亚军的是驾驶新赛车出战的东风本田车手高度，季军则由Z.SPEED N车队的张臻东斩获。这也是超级杯四冠王本赛季首次登台。', 2, 2, 0, '2023-06-25 09:36:18', '2023-06-25 09:36:18', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (11, '国象联赛常规赛收兵：杭州银行第一 山东成功上岸', '6月17日，“武陵山大裂谷杯”中国国际象棋甲级联赛常规赛在武陵云海国际酒店进行了最后一轮的争夺，杭州银行弈和山东队，抢到常规赛的冠军；山东队也是凭借这场平局，成功脱离保级区。本轮最大的悬念是第八名的争夺——在年底进行的甲级联赛总决赛中，前八名为上半区争冠组，保级无忧；而第九至十二名为保级区，不仅夺冠无望，还要为保级而苦战。', 2, 2, 0, '2023-06-25 09:36:51', '2023-06-25 09:36:51', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (12, '围棋名宿解读高考作文:人生如棋 要先学会下“本手”', '今年高考开考了，在语文考试后，体育借势冲上了社交媒体的热搜榜。奥运相关话题进入高考，是意料之中。不过当记者看到关于围棋术语“本手、妙手和俗手”的作文命题时，着实觉得有些难。在被迅速刷屏的朋友圈里，记者感受到了很多从业者的激动、兴奋乃至油然而生的自豪感。但也有人则为那些没学过棋的孩子感到担心，这么难的题目，究竟该如何解题？\\\\n\\\\n “围棋正在深入人心。题目有些难，‘俗手’如何定义？但确实应该先下好‘本手’。”翻到中国围棋协会副主席、国家围棋队领队华学明的这条朋友圈动态时，记者瞬间觉得这道公认的难题有了解题的思路。正如高考作文材料中所说，本手是基础。只有持之以恒地打好基础，补强短板，守住不发生系统性风险的底线，才有可能在本手的基础上，下出妙手，避免俗手。而如果脱离了基础，所谓的妙手很可能就是花拳绣腿，经不起推敲，更经不起对手的冲击。世界冠军柯洁表示：“很多人在对局中经常会拘泥于局部，下出假妙手。想下出真正的妙手，必须在平日里有一定的经验积累和训练，才可能完成真正卓越的妙手。”人生如棋，棋如人生。“其实人生中大部分时间都是在下本手”，围棋名宿曹大元九段说。', 2, 2, 0, '2023-06-25 09:37:43', '2023-06-25 09:37:43', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (13, '不甘人后：被生成式AI弥漫的亚马逊', '今年早些时候，随着ChatGPT席卷全球，亚马逊的经理们要求员工开动脑筋，想想如何使用人工智能（AI）聊天机器人技术来改进自家产品和工作流程。\\\\n\\\\n 其中一些想法被分享在一份名为《生成式AI——ChatGPT的影响和机会分析》的内部文件中。这份文件共列了ChatGPT和类似应用程序在亚马逊多个团队中的67个潜在应用案例。\\\\n\\\\n 早在20世纪90年代，亚马逊就靠在网上卖书创造了互联网界首个真正的商业奇迹。\\\\n\\\\n 随后，Kindle阅读器带来革命性体验，Alexa和Echo智能音箱又带来了语音计算，而AWS则创造了云计算行业，ChatGPT就运行在这个行业之上。\\\\n\\\\n 但这次热潮中拿到先发优势的是同为科技大厂的微软。微软现在是OpenAI背后的金主，且还在忙着把ChatGPT的底层技术融进微软产品和服务中。', 4, 5, 0, '2023-06-25 09:40:20', '2023-06-25 09:40:20', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (14, '微创新超实用：米家旅行箱居然想到了这一点', '旅行说走就走，除非老板没安排。名义上是旅游，实则执行任务，对内讲“为公司负重前行”，对外称“带薪游山玩水”，一介打工人，两副扑克脸，个中苦乐谁人知！\\\\n\\\\n“差旅人”精明如我，随身携带更偏向实用。\\\\n\\\\n必备日用之外，能路上买的尽量不带，华而不实的东西，往包里多塞一个都算我输。行李箱尺寸自然也要浓缩到小巧但够装的20英寸，拉着轻松又顺手，常用小物件转移到背包，“轻装上战场”。', 4, 5, 0, '2023-06-25 09:41:04', '2023-06-25 09:41:04', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (15, '小鹏G6动态试驾：辅助驾驶很惊喜', '这次我们开着小鹏G6上了赛道，又体验了最新版本的高速NGP和城市NGP，小鹏，还顺便测了下充电速度，那么小鹏G6驾驶感受如何？辅助驾驶表现怎么样？', 4, 5, 0, '2023-06-25 09:42:07', '2023-06-25 09:42:07', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (16, '养车市场陷入低价内卷，“虎猫狗”还没等到春天', '今年“618”期间，汽车后市场的玩家们都打出了“低价牌”。比如途虎养车宣布推出“6.18全民养车季”活动，在此期间北京车主可享受“轮胎买一送一”以及多品牌轮胎降价促销的活动。\\\\n\\\\n 与此同时，京东养车和天猫养车两大大厂玩家，在本次618期间也喊出了各自的营销口号。\\\\n\\\\n 前者不仅喊出了“养车爱车立省不止30%”的口号，还推出了轮胎、保养买贵赔两倍、“轮胎免费装、三年无忧质保”、5公里无服务门店赔双倍安装费等举措；天猫养车的618活动，则覆盖了更大的零部件范围，比如推出了空调清洗、机油和轮胎更换等低价服务。\\\\n\\\\n 这样看，在本次618期间，途虎养车、京东养车和天猫养车均贯彻着“以价换量”的战略，以至于让行业价格战一触即发。这些玩家会这样做，主要是为了与传统4S店、以及与彼此竞争，以便保证自身获得更多的市场份额。', 4, 5, 0, '2023-06-25 09:42:51', '2023-06-25 09:42:51', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (17, '微软股价历史新高 聊天机器人技术潜力显现', '周四，微软股价创下历史新高，成为今年继英伟达和苹果之后，又一家市值达到新高点的大型科技公司。这家软件巨头正致力于在其产品和服务中添加生成式人工智能功能，旨在全面改造其Office产品阵容，其中包括Excel、PowerPoint、Outlook和Word等。股价上涨3.2%，收于每股348.1美元，为2021年11月19日以来的最高收盘价。自今年初起，微软股价累计上涨了45%，市值增加约8006亿美元。微软持有OpenAI的大部分股份，这家初创公司凭借聊天机器人ChatGPT引发生成式人工智能的热潮。近几个月来，该工具广受欢迎，展示了聊天机器人技术所具有的巨大潜力。微软于今年1月宣布将再向OpenAI投资100亿美元。然而有报道称，微软与OpenAI之间既有合作，亦存竞争，这种特殊的双重关系导致了双方关系的紧张和潜在冲突。科技股如英伟达等同样受益于生成式人工智能技术的应用，各公司将此技术融入各自产品，进而推动相关芯片需求。英伟达股价今年已飙升192%，被视为最大赢家。', 4, 5, 0, '2023-06-25 09:43:48', '2023-06-25 09:43:48', 0); INSERT INTO `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) VALUES (18, '再获11亿美元投资：蔚来“长期主义”的底气', '如果说全系降价3万是李斌的“阳谋”，那么蔚来ET5T的发布，则是李斌的又一次诚意之作。\\\\n\\\\n ET5T是蔚来首款售价下探到30万元以下的新车，作为ET5的姐妹车型，ET5T和ET5的双车合璧，得以在30万以下快速开疆辟土。\\\\n\\\\n 这样的做法有迹可循：特斯拉曾经在Model Y上实践过，并大获成功。\\\\n\\\\n Model Y和Model 3共用平台，零部件复用率高达75%，研发成本骤降。尽管Model Y最初被用户吐槽是Model 3的放大版，但不置可否的是Model Y确实解决了用户对Model 3空间不足的槽点。\\\\n\\\\n 不过，最为关键的还是Model Y的价格足够低，直接降低了特斯拉的购买门槛，给那些对价格敏感，本犹豫要不要多花四五万的消费者一个充足的理由。\\\\n\\\\n 蔚来ET5T正在用一种经受了市场验证过的方式，直面与特斯拉的竞争。但同时，蔚来ET5T在智能化、空间表现、设计以及产品力上，都正在接近、超越特斯拉Model Y。\\\\n\\\\n 蔚来ET5T，平替特斯拉Model Y？\\\\n\\\\n 小家庭，预算30万左右，消费者到底会选哪款纯电动车？\\\\n\\\\n 全球市场的反馈是，特斯拉Model Y ——一款紧凑型SUV。2022年，Model Y的全球销量为74.7万辆，其在中国的销量为31.5万台，约占其全球份额的42.2%。\\\\n\\\\n 按照车型大小，SUV可以分为大型、中型、小型、紧凑型四大类。按照价位，SUV又可以分为实用型、经济型、中高档型、豪华型、超豪华型等。\\\\n\\\\n Model Y 在中高端SUV的细分市场中一骑绝尘，可以说是没有对手。因为无论是奔驰EQC、宝马iX3，还是国产的比亚迪唐EV等，和Model Y相比，都不能对其构成威胁。奔驰EQC、宝马iX3这两款车型都是“油改电”，算不上真正的电动车。而比亚迪的智能化能力，远及不特斯拉，座舱、智驾上的核心模块还来自于供应商方案，并非自研。\\\\n\\\\n 雷峰网认为，此前，国内的自主品牌中只有蔚来的ES6能和Model Y一较高下。不过ES6的均价比Model Y高出一大截，二者入门版之间的价差大约在10万左右。但在蔚来推出ET5T后，局势必然会发生逆转。', 4, 5, 0, '2023-06-25 09:44:20', '2023-06-25 09:44:20', 0); -- ---------------------------- -- Table structure for news_type -- ---------------------------- DROP TABLE IF EXISTS `news_type`; CREATE TABLE `news_type` ( `tid` INT NOT NULL AUTO_INCREMENT COMMENT '新闻类型id', `tname` VARCHAR(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '新闻类型描述', `version` INT DEFAULT 1 COMMENT '乐观锁', `is_deleted` INT DEFAULT 0 COMMENT '头条是否被删除 1 删除 0 未删除', PRIMARY KEY (`tid`) USING BTREE ) ENGINE = INNODB AUTO_INCREMENT = 8 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC; -- ---------------------------- -- Records of news_type -- ---------------------------- INSERT INTO `news_type` (tid,tname) VALUES (1, '新闻'); INSERT INTO `news_type` (tid,tname) VALUES (2, '体育'); INSERT INTO `news_type` (tid,tname) VALUES (3, '娱乐'); INSERT INTO `news_type` (tid,tname) VALUES (4, '科技'); INSERT INTO `news_type` (tid,tname) VALUES (5, '其他'); -- ---------------------------- -- Table structure for news_user -- ---------------------------- DROP TABLE IF EXISTS `news_user`; CREATE TABLE `news_user` ( `uid` INT NOT NULL AUTO_INCREMENT COMMENT '用户id', `username` VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户登录名', `user_pwd` VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户登录密码密文', `nick_name` VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户昵称', `version` INT DEFAULT 1 COMMENT '乐观锁', `is_deleted` INT DEFAULT 0 COMMENT '头条是否被删除 1 删除 0 未删除', PRIMARY KEY (`uid`) USING BTREE, UNIQUE INDEX `username_unique`(`username`) USING BTREE ) ENGINE = INNODB AUTO_INCREMENT = 9 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC; -- ---------------------------- -- Records of news_user -- ---------------------------- INSERT INTO `news_user` (uid,username,user_pwd,nick_name) VALUES (1, 'zhangsan', 'e10adc3949ba59abbe56e057f20f883e', '张三'); INSERT INTO `news_user` (uid,username,user_pwd,nick_name) VALUES (2, 'lisi', 'e10adc3949ba59abbe56e057f20f883e', '李四'); INSERT INTO `news_user` (uid,username,user_pwd,nick_name) VALUES (5, 'zhangxiaoming', 'e10adc3949ba59abbe56e057f20f883e', '张小明'); INSERT INTO `news_user` (uid,username,user_pwd,nick_name)VALUES (6, 'xiaohei', 'e10adc3949ba59abbe56e057f20f883e', '李小黑'); SET FOREIGN_KEY_CHECKS = 1;\"]},\"652\":{\"h\":\"2. 搭建SprintBoot工程\",\"t\":[\"创建boot工程\",\"导入依赖\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.0.5</version> </parent> <groupId>com.atguigu</groupId> <artifactId>springboot-headline</artifactId> <version>1.0-SNAPSHOT</version> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!-- mybatis-plus --> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.3.1</version> </dependency> <!-- 数据库相关配置启动器 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <!-- druid启动器的依赖 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-3-starter</artifactId> <version>1.2.18</version> </dependency> <!-- 驱动类--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.28</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> <!-- SpringBoot应用打包插件--> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build>\",\"编写配置\",\"application.yaml\",\"# server配置 server: port: 8080 servlet: context-path: / # 连接池配置 spring: datasource: type: com.alibaba.druid.pool.DruidDataSource druid: url: jdbc:mysql:///sm_db1 username: root password: root driver-class-name: com.mysql.cj.jdbc.Driver # mybatis-plus的配置 mybatis-plus: type-aliases-package: com.atguigu.pojo global-config: db-config: logic-delete-field: isDeleted #全局逻辑删除 id-type: auto #主键策略自增长 table-prefix: news_ # 设置表的前缀\",\"druid兼容springboot3文件\",\"文件名和内容\",\"文件名:org.springframework.boot.autoconfigure.AutoConfiguration.imports 内容:com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure\",\"启动类和mybatis-plus配置\",\"包: com.atguigu\",\"@SpringBootApplication @MapperScan(\\\"com.atguigu.mapper\\\") public class Main { public static void main(String[] args) { SpringApplication.run(Main.class,args); } //配置mybatis-plus插件 @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); //分页 interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor()); //乐观锁 interceptor.addInnerInterceptor(new BlockAttackInnerInterceptor()); //防全局修改和删除 return interceptor; } }\",\"工具类准备\",\"结果封装类\",\"/** * 全局统一返回结果类 */ public class Result<T> { // 返回码 private Integer code; // 返回消息 private String message; // 返回数据 private T data; public Result(){} // 返回数据 protected static <T> Result<T> build(T data) { Result<T> result = new Result<T>(); if (data != null) result.setData(data); return result; } public static <T> Result<T> build(T body, Integer code, String message) { Result<T> result = build(body); result.setCode(code); result.setMessage(message); return result; } public static <T> Result<T> build(T body, ResultCodeEnum resultCodeEnum) { Result<T> result = build(body); result.setCode(resultCodeEnum.getCode()); result.setMessage(resultCodeEnum.getMessage()); return result; } /** * 操作成功 * @param data baseCategory1List * @param <T> * @return */ public static<T> Result<T> ok(T data){ Result<T> result = build(data); return build(data, ResultCodeEnum.SUCCESS); } public Result<T> message(String msg){ this.setMessage(msg); return this; } public Result<T> code(Integer code){ this.setCode(code); return this; } public Integer getCode() { return code; } public void setCode(Integer code) { this.code = code; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public T getData() { return data; } public void setData(T data) { this.data = data; } }\",\"解决枚举类\",\"/** * 统一返回结果状态信息类 * */ public enum ResultCodeEnum { SUCCESS(200,\\\"success\\\"), USERNAME_ERROR(501,\\\"usernameError\\\"), PASSWORD_ERROR(503,\\\"passwordError\\\"), NOTLOGIN(504,\\\"notLogin\\\"), USERNAME_USED(505,\\\"userNameUsed\\\"); private Integer code; private String message; private ResultCodeEnum(Integer code, String message) { this.code = code; this.message = message; } public Integer getCode() { return code; } public String getMessage() { return message; } }\",\"MD5加密工具类\",\"import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; @Component public final class MD5Util { public static String encrypt(String strSrc) { try { char hexChars[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }; byte[] bytes = strSrc.getBytes(); MessageDigest md = MessageDigest.getInstance(\\\"MD5\\\"); md.update(bytes); bytes = md.digest(); int j = bytes.length; char[] chars = new char[j * 2]; int k = 0; for (int i = 0; i < bytes.length; i++) { byte b = bytes[i]; chars[k++] = hexChars[b >>> 4 & 0xf]; chars[k++] = hexChars[b & 0xf]; } return new String(chars); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); throw new RuntimeException(\\\"MD5加密出错！！+\\\" + e); } } }\"]},\"653\":{\"h\":\"3. MybatisX逆向工程\",\"t\":[\"逆向工程\",\"完善实体类注解\",\"删除tableName注解,全局统一设置\",\"添加主键,乐观锁,逻辑删除注解!!!\",\"@Data public class User implements Serializable { @TableId private Integer uid; private String username; private String userPwd; private String nickName; @Version private Integer version; @TableLogic private Integer isDeleted; private static final long serialVersionUID = 1L; }\"]},\"654\":{\"h\":\"四、后台功能开发\"},\"655\":{\"h\":\"4.1 用户模块开发\",\"t\":[\"1.1 jwt和token介绍\",\"token介绍\",\"令牌（Token）：在计算机领域，令牌是一种代表某种访问权限或身份认证信息的令牌。它可以是一串随机生成的字符或数字，用于验证用户的身份或授权用户对特定资源的访问。普通的令牌可能以各种形式出现，如访问令牌、身份令牌、刷新令牌等。\",\"简单理解 : 每个用户生成的唯一字符串标识,可以进行用户识别和校验\",\"类似技术: 天王盖地虎 ,小鸡炖蘑菇\",\"优势: token验证标识无法直接识别用户的信息,盗取token后也无法`登录`程序! 相对安全!\",\"jwt介绍\",\"Token是一项规范和标准(接口)\",\"JWT(JSON Web Token)是具体可以生成,校验,解析等动作Token的技术(实现类)\",\"jwt工作流程\",\"用户提供其凭据（通常是用户名和密码）进行身份验证。\",\"服务器对这些凭据进行验证，并在验证成功后创建一个JWT。\",\"服务器将JWT发送给客户端，并客户端在后续的请求中将JWT附加在请求头或参数中。\",\"服务器接收到请求后，验证JWT的签名和有效性，并根据JWT中的声明进行身份验证和授权操作\",\"jwt数据组成和包含信息\",\"JWT由三部分组成: header(头部).payload(载荷).signature(签名)\",\"我们需要理解的是, jwt可以携带很多信息! 一般情况,需要加入:有效时间,签名秘钥,其他用户标识信息!\",\"有效时间为了保证token的时效性,过期可以重新登录获取!\",\"签名秘钥为了防止其他人随意解析和校验token数据!\",\"用户信息为了我们自己解析的时候,知道Token对应的具体用户!\",\"jwt使用和测试\",\"导入依赖\",\"<dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> <version>0.9.1</version> </dependency> <dependency> <groupId>javax.xml.bind</groupId> <artifactId>jaxb-api</artifactId> <version>2.3.0</version> </dependency>\",\"编写配置\",\"application.yaml\",\"#jwt配置 jwt: token: tokenExpiration: 120 #有效时间,单位分钟 tokenSignKey: headline123456 #当前程序签名秘钥 自定义\",\"导入工具类\",\"封装jwt技术工具类\",\"package com.atguigu.utils; import com.alibaba.druid.util.StringUtils; import io.jsonwebtoken.*; import lombok.Data; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.annotation.Configuration; import org.springframework.stereotype.Component; import java.util.Date; @Data @Component @ConfigurationProperties(prefix = \\\"jwt.token\\\") public class JwtHelper { private long tokenExpiration; //有效时间,单位毫秒 1000毫秒 == 1秒 private String tokenSignKey; //当前程序签名秘钥 //生成token字符串 public String createToken(Long userId) { System.out.println(\\\"tokenExpiration = \\\" + tokenExpiration); System.out.println(\\\"tokenSignKey = \\\" + tokenSignKey); String token = Jwts.builder() .setSubject(\\\"YYGH-USER\\\") .setExpiration(new Date(System.currentTimeMillis() + tokenExpiration*1000*60)) //单位分钟 .claim(\\\"userId\\\", userId) .signWith(SignatureAlgorithm.HS512, tokenSignKey) .compressWith(CompressionCodecs.GZIP) .compact(); return token; } //从token字符串获取userid public Long getUserId(String token) { if(StringUtils.isEmpty(token)) return null; Jws<Claims> claimsJws = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token); Claims claims = claimsJws.getBody(); Integer userId = (Integer)claims.get(\\\"userId\\\"); return userId.longValue(); } //判断token是否有效 public boolean isExpiration(String token){ try { boolean isExpire = Jwts.parser() .setSigningKey(tokenSignKey) .parseClaimsJws(token) .getBody() .getExpiration().before(new Date()); //没有过期，有效，返回false return isExpire; }catch(Exception e) { //过期出现异常，返回true return true; } } }\",\"使用和测试\",\"@org.springframework.boot.test.context.SpringBootTest public class SpringBootTest { @Autowired private JwtHelper jwtHelper; @Test public void test(){ //生成 传入用户标识 String token = jwtHelper.createToken(1L); System.out.println(\\\"token = \\\" + token); //解析用户标识 int userId = jwtHelper.getUserId(token).intValue(); System.out.println(\\\"userId = \\\" + userId); //校验是否到期! false 未到期 true到期 boolean expiration = jwtHelper.isExpiration(token); System.out.println(\\\"expiration = \\\" + expiration); } }\",\"1.2 登录功能实现\",\"需求描述\",\"用户在客户端输入用户名密码并向后端提交,后端根据用户名和密码判断登录是否成功,用户有误或者密码有误响应不同的提示信息！\",\"接口描述\",\"url地址： user/login\",\"请求方式：POST\",\"请求参数：\",\"{ \\\"username\\\":\\\"zhangsan\\\", //用户名 \\\"userPwd\\\":\\\"123456\\\" //明文密码 }\",\"响应数据：\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", // 成功状态码 \\\"message\\\":\\\"success\\\" // 成功状态描述 \\\"data\\\":{ \\\"token\\\":\\\"... ...\\\" // 用户id的token } }\",\"失败\",\"{ \\\"code\\\":\\\"501\\\", \\\"message\\\":\\\"用户名有误\\\" \\\"data\\\":{} }\",\"{ \\\"code\\\":\\\"503\\\", \\\"message\\\":\\\"密码有误\\\" \\\"data\\\":{} }\",\"实现代码\",\"controller\",\"@RestController @RequestMapping(\\\"user\\\") @CrossOrigin public class UserController { @Autowired private UserService userService; /** * 登录需求 * 地址: /user/login * 方式: post * 参数: * { * \\\"username\\\":\\\"zhangsan\\\", //用户名 * \\\"userPwd\\\":\\\"123456\\\" //明文密码 * } * 返回: * { * \\\"code\\\":\\\"200\\\", // 成功状态码 * \\\"message\\\":\\\"success\\\" // 成功状态描述 * \\\"data\\\":{ * \\\"token\\\":\\\"... ...\\\" // 用户id的token * } * } * * 大概流程: * 1. 账号进行数据库查询 返回用户对象 * 2. 对比用户密码(md5加密) * 3. 成功,根据userId生成token -> map key=token value=token值 - result封装 * 4. 失败,判断账号还是密码错误,封装对应的枚举错误即可 */ @PostMapping(\\\"login\\\") public Result login(@RequestBody User user){ Result result = userService.login(user); System.out.println(\\\"result = \\\" + result); return result; } }\",\"service\",\"@Service public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService{ @Autowired private JwtHelper jwtHelper; @Autowired private UserMapper userMapper; /** * 登录业务实现 * @param user * @return result封装 */ @Override public Result login(User user) { //根据账号查询 LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>(); queryWrapper.eq(User::getUsername,user.getUsername()); User loginUser = userMapper.selectOne(queryWrapper); //账号判断 if (loginUser == null) { //账号错误 return Result.build(null, ResultCodeEnum.USERNAME_ERROR); } //判断密码 if (!StringUtils.isEmpty(user.getUserPwd()) && loginUser.getUserPwd().equals(MD5Util.encrypt(user.getUserPwd()))) { //账号密码正确 //根据用户唯一标识生成token String token = jwtHelper.createToken(Long.valueOf(loginUser.getUid())); Map data = new HashMap(); data.put(\\\"token\\\",token); return Result.ok(data); } //密码错误 return Result.build(null,ResultCodeEnum.PASSWORD_ERROR); } }\",\"1.3 根据token获取用户数据\",\"需求描述\",\"客户端发送请求,提交token请求头,后端根据token请求头获取登录用户的详细信息并响应给客户端进行存储\",\"接口描述\",\"url地址：user/getUserInfo\",\"请求方式：GET\",\"请求头：\",\"token: token内容\",\"响应数据：\",\"成功\",\"{ \\\"code\\\": 200, \\\"message\\\": \\\"success\\\", \\\"data\\\": { \\\"loginUser\\\": { \\\"uid\\\": 1, \\\"username\\\": \\\"zhangsan\\\", \\\"userPwd\\\": \\\"\\\", \\\"nickName\\\": \\\"张三\\\" } } }\",\"失败\",\"{ \\\"code\\\": 504, \\\"message\\\": \\\"notLogin\\\", \\\"data\\\": null }\",\"代码实现\",\"controller\",\"/** * 地址: user/getUserInfo * 方式: get * 请求头: token = token内容 * 返回: * { * \\\"code\\\": 200, * \\\"message\\\": \\\"success\\\", * \\\"data\\\": { * \\\"loginUser\\\": { * \\\"uid\\\": 1, * \\\"username\\\": \\\"zhangsan\\\", * \\\"userPwd\\\": \\\"\\\", * \\\"nickName\\\": \\\"张三\\\" * } * } * } * * 大概流程: * 1.获取token,解析token对应的userId * 2.根据userId,查询用户数据 * 3.将用户数据的密码置空,并且把用户数据封装到结果中key = loginUser * 4.失败返回504 (本次先写到当前业务,后期提取到拦截器和全局异常处理器) */ @GetMapping(\\\"getUserInfo\\\") public Result userInfo(@RequestHeader String token){ Result result = userService.getUserInfo(token); return result; }\",\"service\",\"/** * 查询用户数据 * @param token * @return result封装 */ @Override public Result getUserInfo(String token) { //1.判定是否有效期 if (jwtHelper.isExpiration(token)) { //true过期,直接返回未登录 return Result.build(null,ResultCodeEnum.NOTLOGIN); } //2.获取token对应的用户 int userId = jwtHelper.getUserId(token).intValue(); //3.查询数据 User user = userMapper.selectById(userId); if (user != null) { user.setUserPwd(null); Map data = new HashMap(); data.put(\\\"loginUser\\\",user); return Result.ok(data); } return Result.build(null,ResultCodeEnum.NOTLOGIN); }\",\"1.4 注册用户名检查\",\"需求描述\",\"用户在注册时输入用户名时,立刻将用户名发送给后端,后端根据用户名查询用户名是否可用并做出响应\",\"接口描述\",\"url地址：user/checkUserName\",\"请求方式：POST\",\"请求参数：param形式\",\"username=zhangsan\",\"响应数据：\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"success\\\" \\\"data\\\":{} }\",\"失败\",\"{ \\\"code\\\":\\\"505\\\", \\\"message\\\":\\\"用户名占用\\\" \\\"data\\\":{} }\",\"代码实现\",\"controller\",\"/** * url地址：user/checkUserName * 请求方式：POST * 请求参数：param形式 * username=zhangsan * 响应数据: * { * \\\"code\\\":\\\"200\\\", * \\\"message\\\":\\\"success\\\" * \\\"data\\\":{} * } * * 实现步骤: * 1. 获取账号数据 * 2. 根据账号进行数据库查询 * 3. 结果封装 */ @PostMapping(\\\"checkUserName\\\") public Result checkUserName(String username){ Result result = userService.checkUserName(username); return result; }\",\"service \",\"/** * 检查账号是否可以注册 * * @param username 账号信息 * @return */ @Override public Result checkUserName(String username) { LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>(); queryWrapper.eq(User::getUsername,username); User user = userMapper.selectOne(queryWrapper); if (user != null){ return Result.build(null,ResultCodeEnum.USERNAME_USED); } return Result.ok(null); }\",\"1.5 用户注册功能\",\"需求描述\",\"客户端将新用户信息发送给服务端,服务端将新用户存入数据库,存入之前做用户名是否被占用校验,校验通过响应成功提示,否则响应失败提示\",\"接口描述\",\"url地址：user/regist\",\"请求方式：POST\",\"请求参数：\",\"{ \\\"username\\\":\\\"zhangsan\\\", \\\"userPwd\\\":\\\"123456\\\", \\\"nickName\\\":\\\"张三\\\" }\",\"响应数据：\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"success\\\" \\\"data\\\":{} }\",\"失败\",\"{ \\\"code\\\":\\\"505\\\", \\\"message\\\":\\\"用户名占用\\\" \\\"data\\\":{} }\",\"代码实现\",\"controller\",\"/** * url地址：user/regist * 请求方式：POST * 请求参数： * { * \\\"username\\\":\\\"zhangsan\\\", * \\\"userPwd\\\":\\\"123456\\\", * \\\"nickName\\\":\\\"张三\\\" * } * 响应数据： * { * \\\"code\\\":\\\"200\\\", * \\\"message\\\":\\\"success\\\" * \\\"data\\\":{} * } * * 实现步骤: * 1. 将密码加密 * 2. 将数据插入 * 3. 判断结果,成 返回200 失败 505 */ @PostMapping(\\\"regist\\\") public Result regist(@RequestBody User user){ Result result = userService.regist(user); return result; }\",\"service \",\"@Override public Result regist(User user) { LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>(); queryWrapper.eq(User::getUsername,user.getUsername()); Long count = userMapper.selectCount(queryWrapper); if (count > 0){ return Result.build(null,ResultCodeEnum.USERNAME_USED); } user.setUserPwd(MD5Util.encrypt(user.getUserPwd())); int rows = userMapper.insert(user); System.out.println(\\\"rows = \\\" + rows); return Result.ok(null); }\"]},\"656\":{\"h\":\"4.2 首页模块开发\",\"t\":[\"2.1 查询首页分类\",\"需求描述\",\"进入新闻首页,查询所有分类并动态展示新闻类别栏位\",\"接口描述\",\"url地址：portal/findAllTypes\",\"请求方式：get\",\"请求参数：无\",\"响应数据：\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"OK\\\" \\\"data\\\":{ [ { \\\"tid\\\":\\\"1\\\", \\\"tname\\\":\\\"新闻\\\" }, { \\\"tid\\\":\\\"2\\\", \\\"tname\\\":\\\"体育\\\" }, { \\\"tid\\\":\\\"3\\\", \\\"tname\\\":\\\"娱乐\\\" }, { \\\"tid\\\":\\\"4\\\", \\\"tname\\\":\\\"科技\\\" }, { \\\"tid\\\":\\\"5\\\", \\\"tname\\\":\\\"其他\\\" } ] } }\",\"代码实现\",\"controller\",\"@RestController @RequestMapping(\\\"portal\\\") @CrossOrigin public class PortalController { @Autowired private TypeService typeService; /** * 查询全部类别信息 * @return */ @GetMapping(\\\"findAllTypes\\\") public Result findAllTypes(){ //直接调用业务层,查询全部数据 List<Type> list = typeService.list(); return Result.ok(list); } }\",\"2.2 分页查询首页头条信息\",\"需求描述\",\"客户端向服务端发送查询关键字,新闻类别,页码数,页大小\",\"服务端根据条件搜索分页信息,返回含页码数,页大小,总页数,总记录数,当前页数据等信息,并根据时间降序,浏览量降序排序\",\"接口描述\",\"url地址：portal/findNewsPage\",\"请求方式：post\",\"请求参数:\",\"{ \\\"keyWords\\\":\\\"马斯克\\\", // 搜索标题关键字 \\\"type\\\":0, // 新闻类型 \\\"pageNum\\\":1, // 页码数 \\\"pageSize\\\":10 // 页大小 }\",\"响应数据：\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"success\\\" \\\"data\\\":{ \\\"pageInfo\\\":{ \\\"pageData\\\":[ { \\\"hid\\\":\\\"1\\\", // 新闻id \\\"title\\\":\\\"尚硅谷宣布 ... ...\\\", // 新闻标题 \\\"type\\\":\\\"1\\\", // 新闻所属类别编号 \\\"pageViews\\\":\\\"40\\\", // 新闻浏览量 \\\"pastHours\\\":\\\"3\\\" , // 发布时间已过小时数 \\\"publisher\\\":\\\"1\\\" // 发布用户ID }, { \\\"hid\\\":\\\"1\\\", // 新闻id \\\"title\\\":\\\"尚硅谷宣布 ... ...\\\", // 新闻标题 \\\"type\\\":\\\"1\\\", // 新闻所属类别编号 \\\"pageViews\\\":\\\"40\\\", // 新闻浏览量 \\\"pastHours\\\":\\\"3\\\", // 发布时间已过小时数 \\\"publisher\\\":\\\"1\\\" // 发布用户ID }, { \\\"hid\\\":\\\"1\\\", // 新闻id \\\"title\\\":\\\"尚硅谷宣布 ... ...\\\", // 新闻标题 \\\"type\\\":\\\"1\\\", // 新闻所属类别编号 \\\"pageViews\\\":\\\"40\\\", // 新闻浏览量 \\\"pastHours\\\":\\\"3\\\", // 发布时间已过小时数 \\\"publisher\\\":\\\"1\\\" // 发布用户ID } ], \\\"pageNum\\\":1, //页码数 \\\"pageSize\\\":10, // 页大小 \\\"totalPage\\\":20, // 总页数 \\\"totalSize\\\":200 // 总记录数 } } }\",\"代码实现\",\"准备条件实体类\",\"@Data public class PortalVo { private String keyWords; private Integer type; private Integer pageNum = 1; private Integer pageSize =10; }\",\"controller\",\"/** * 首页分页查询 * @return */ @PostMapping(\\\"findNewPage\\\") public Result findNewPage(@RequestBody PortalVo portalVo){ Result result = headlineService.findNewPage(portalVo); return result; }\",\"service\",\"@Service public class HeadlineServiceImpl extends ServiceImpl<HeadlineMapper, Headline> implements HeadlineService{ @Autowired private HeadlineMapper headlineMapper; /** * 首页数据查询 * @param portalVo * @return */ @Override public Result findNewPage(PortalVo portalVo) { //1.条件拼接 需要非空判断 LambdaQueryWrapper<Headline> queryWrapper = new LambdaQueryWrapper<>(); queryWrapper.like(!StringUtils.isEmpty(portalVo.getKeyWords()),Headline::getTitle,portalVo.getKeyWords()) .eq(portalVo.getType()!= null,Headline::getType,portalVo.getType()); //2.分页参数 IPage<Headline> page = new Page<>(portalVo.getPageNum(),portalVo.getPageSize()); //3.分页查询 //查询的结果 \\\"pastHours\\\":\\\"3\\\" // 发布时间已过小时数 我们查询返回一个map //自定义方法 headlineMapper.selectPageMap(page, portalVo); //4.结果封装 //分页数据封装 Map<String,Object> pageInfo =new HashMap<>(); pageInfo.put(\\\"pageData\\\",page.getRecords()); pageInfo.put(\\\"pageNum\\\",page.getCurrent()); pageInfo.put(\\\"pageSize\\\",page.getSize()); pageInfo.put(\\\"totalPage\\\",page.getPages()); pageInfo.put(\\\"totalSize\\\",page.getTotal()); Map<String,Object> pageInfoMap=new HashMap<>(); pageInfoMap.put(\\\"pageInfo\\\",pageInfo); // 响应JSON return Result.ok(pageInfoMap); } }\",\"mapper\",\"接口:\",\"public interface HeadlineMapper extends BaseMapper<Headline> { //自定义分页查询方法 IPage<Map> selectPageMap(IPage<Headline> page, @Param(\\\"portalVo\\\") PortalVo portalVo); }\",\"mapperxml:\",\"<select id=\\\"selectPageMap\\\" resultType=\\\"map\\\"> select hid,title,type,page_views pageViews,TIMESTAMPDIFF(HOUR,create_time,NOW()) pastHours, publisher from news_headline where is_deleted=0 <if test=\\\"portalVo.keyWords !=null and portalVo.keyWords.length()>0 \\\"> and title like concat('%',#{portalVo.keyWords},'%') </if> <if test=\\\"portalVo.type != null and portalVo.type != 0\\\"> and type = #{portalVo.type} </if> </select>\",\"2.3 查询头条详情\",\"需求描述\",\"用户点击\\\"查看全文\\\"时,向服务端发送新闻id\",\"后端根据新闻id查询完整新闻文章信息并返回\",\"后端要同时让新闻的浏览量+1\",\"接口描述\",\"url地址：portal/showHeadlineDetail\",\"请求方式：post\",\"请求参数:\",\"hid=1 param形成参数\",\"响应数据：\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"success\\\", \\\"data\\\":{ \\\"headline\\\":{ \\\"hid\\\":\\\"1\\\", // 新闻id \\\"title\\\":\\\"马斯克宣布 ... ...\\\", // 新闻标题 \\\"article\\\":\\\"... ...\\\" // 新闻正文 \\\"type\\\":\\\"1\\\", // 新闻所属类别编号 \\\"typeName\\\":\\\"科技\\\", // 新闻所属类别 \\\"pageViews\\\":\\\"40\\\", // 新闻浏览量 \\\"pastHours\\\":\\\"3\\\" , // 发布时间已过小时数 \\\"publisher\\\":\\\"1\\\" , // 发布用户ID \\\"author\\\":\\\"张三\\\" // 新闻作者 } } }\",\"代码实现\",\"controller\",\" /** * 首页详情接口 * @param hid * @return */ @PostMapping(\\\"showHeadlineDetail\\\") public Result showHeadlineDetail(Integer hid){ Result result = headlineService.showHeadlineDetail(hid); return result; }\",\"service\",\"/** * 详情数据查询 * \\\"headline\\\":{ * \\\"hid\\\":\\\"1\\\", // 新闻id * \\\"title\\\":\\\"马斯克宣布 ... ...\\\", // 新闻标题 * \\\"article\\\":\\\"... ...\\\" // 新闻正文 * \\\"type\\\":\\\"1\\\", // 新闻所属类别编号 * \\\"typeName\\\":\\\"科技\\\", // 新闻所属类别 * \\\"pageViews\\\":\\\"40\\\", // 新闻浏览量 * \\\"pastHours\\\":\\\"3\\\" , // 发布时间已过小时数 * \\\"publisher\\\":\\\"1\\\" , // 发布用户ID * \\\"author\\\":\\\"张三\\\" // 新闻作者 * } * 注意: 是多表查询 , 需要更新浏览量+1 * * @param hid * @return */ @Override public Result showHeadlineDetail(Integer hid) { //1.实现根据id的查询(多表 Map headLineDetail = headlineMapper.selectDetailMap(hid); //2.拼接头条对象(阅读量和version)进行数据更新 Headline headline = new Headline(); headline.setHid(hid); headline.setPageViews((Integer) headLineDetail.get(\\\"pageViews\\\")+1); //阅读量+1 headline.setVersion((Integer) headLineDetail.get(\\\"version\\\")); //设置版本 headlineMapper.updateById(headline); Map<String,Object> pageInfoMap=new HashMap<>(); pageInfoMap.put(\\\"headline\\\",headLineDetail); return Result.ok(pageInfoMap); }\",\"mapper\",\"接口:\",\"/** * 分页查询头条详情 * @param hid * @return */ Map selectDetailMap(Integer hid);\",\"mapperxml:\",\"<!-- Map selectDetailMap(Integer hid);--> <select id=\\\"selectDetailMap\\\" resultType=\\\"map\\\"> select hid,title,article,type, h.version ,tname typeName ,page_views pageViews ,TIMESTAMPDIFF(HOUR,create_time,NOW()) pastHours,publisher ,nick_name author from news_headline h left join news_type t on h.type = t.tid left join news_user u on h.publisher = u.uid where hid = #{hid} </select>\"]},\"657\":{\"h\":\"4.3 头条模块开发\",\"t\":[\"**3.1 登陆验证和保护 ** \",\"需求描述\",\"客户端在进入发布页前、发布新闻前、进入修改页前、修改前、删除新闻前先向服务端发送请求携带token请求头\",\"后端接收token请求头后,校验用户登录是否过期并做响应\",\"前端根据响应信息提示用户进入登录页还是进入正常业务页面\",\"接口描述\",\"url地址：user/checkLogin\",\"请求方式：get\",\"请求参数: 无\",\"请求头： token: 用户token\",\"响应数据：\",\"未过期：\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"success\\\", \\\"data\\\":{} }\",\"过期：\",\"{ \\\"code\\\":\\\"504\\\", \\\"message\\\":\\\"loginExpired\\\", \\\"data\\\":{} }\",\"代码实现\",\"controller 【登录检查】\",\"@GetMapping(\\\"checkLogin\\\") public Result checkLogin(@RequestHeader String token){ if (StringUtils.isEmpty(token) || jwtHelper.isExpiration(token)){ //没有传或者过期 未登录 return Result.build(null, ResultCodeEnum.NOTLOGIN); } return Result.ok(null); }\",\"拦截器 【所有/headline开头都需要检查登陆】\",\"@Component public class LoginProtectInterceptor implements HandlerInterceptor { @Autowired private JwtHelper jwtHelper; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { String token = request.getHeader(\\\"token\\\"); if (StringUtils.isEmpty(token) || jwtHelper.isExpiration(token)){ Result result = Result.build(null, ResultCodeEnum.NOTLOGIN); ObjectMapper objectMapper = new ObjectMapper(); String json = objectMapper.writeValueAsString(result); response.getWriter().print(json); //拦截 return false; }else{ //放行 return true; } } }\",\"拦截器配置\",\"@Configuration public class WebMvcConfig implements WebMvcConfigurer { @Autowired private LoginProtectInterceptor loginProtectInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(loginProtectInterceptor).addPathPatterns(\\\"/headline/**\\\"); } }\",\"3.2 头条发布实现\",\"需求描述\",\"用户在客户端输入发布的新闻信息完毕后\",\"发布前先请求后端的登录校验接口验证登录\",\"登录通过则提交新闻信息\",\"后端将新闻信息存入数据库\",\"接口描述\",\"url地址：headline/publish\",\"请求方式：post\",\"请求头: \",\"token: ... ...\",\"请求参数:\",\"{ \\\"title\\\":\\\"尚硅谷宣布 ... ...\\\", // 文章标题 \\\"article\\\":\\\"... ...\\\", // 文章内容 \\\"type\\\":\\\"1\\\" // 文章类别 }\",\"响应数据：\",\"未登录\",\"{ \\\"code\\\":\\\"504\\\", \\\"message\\\":\\\"loginExpired\\\", \\\"data\\\":{} }\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"success\\\", \\\"data\\\":{} }\",\"代码实现\",\"controller\",\"/** * 实现步骤: * 1. token获取userId [无需校验,拦截器会校验] * 2. 封装headline数据 * 3. 插入数据即可 */ @PostMapping(\\\"publish\\\") public Result publish(@RequestBody Headline headline,@RequestHeader String token){ int userId = jwtHelper.getUserId(token).intValue(); headline.setPublisher(userId); Result result = headlineService.publish(headline); return result; }\",\"service\",\"/** * 发布数据 * @param headline * @return */ @Override public Result publish(Headline headline) { headline.setCreateTime(new Date()); headline.setUpdateTime(new Date()); headline.setPageViews(0); headlineMapper.insert(headline); return Result.ok(null); }\",\"3.3 修改头条回显\",\"需求描述\",\"前端先调用登录校验接口,校验登录是否过期\",\"登录校验通过后 ,则根据新闻id查询新闻的完整信息并响应给前端\",\"接口描述\",\"url地址：headline/findHeadlineByHid\",\"请求方式：post\",\"请求参数:\",\"hid=1 param形成参数\",\"响应数据：\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"success\\\", \\\"data\\\":{ \\\"headline\\\":{ \\\"hid\\\":\\\"1\\\", \\\"title\\\":\\\"马斯克宣布\\\", \\\"article\\\":\\\"... ... \\\", \\\"type\\\":\\\"2\\\" } } }\",\"代码实现\",\"controller\",\"@PostMapping(\\\"findHeadlineByHid\\\") public Result findHeadlineByHid(Integer hid){ Result result = headlineService.findHeadlineByHid(hid); return result; }\",\"service\",\"/** * 根据id查询详情 * @param hid * @return */ @Override public Result findHeadlineByHid(Integer hid) { Headline headline = headlineMapper.selectById(hid); Map<String,Object> pageInfoMap=new HashMap<>(); pageInfoMap.put(\\\"headline\\\",headline); return Result.ok(pageInfoMap); }\",\"3.4 头条修改实现\",\"需求描述\",\"客户端将新闻信息修改后,提交前先请求登录校验接口校验登录状态\",\"登录校验通过则提交修改后的新闻信息,后端接收并更新进入数据库\",\"接口描述\",\"url地址：headline/update\",\"请求方式：post\",\"请求参数:\",\"{ \\\"hid\\\":\\\"1\\\", \\\"title\\\":\\\"尚硅谷宣布 ... ...\\\", \\\"article\\\":\\\"... ...\\\", \\\"type\\\":\\\"2\\\" }\",\"响应数据：\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"success\\\", \\\"data\\\":{} }\",\"代码实现\",\"controller\",\"@PostMapping(\\\"update\\\") public Result update(@RequestBody Headline headline){ Result result = headlineService.updateHeadLine(headline); return result; }\",\"service\",\" /** * 修改业务 * 1.查询version版本 * 2.补全属性,修改时间 , 版本! * * @param headline * @return */ @Override public Result updateHeadLine(Headline headline) { //读取版本 Integer version = headlineMapper.selectById(headline.getHid()).getVersion(); headline.setVersion(version); headline.setUpdateTime(new Date()); headlineMapper.updateById(headline); return Result.ok(null); }\",\"3.5 删除头条功能\",\"需求描述\",\"将要删除的新闻id发送给服务端\",\"服务端校验登录是否过期,未过期则直接删除,过期则响应登录过期信息\",\"接口描述\",\"url地址：headline/removeByHid\",\"请求方式：post\",\"请求参数:\",\"hid=1 param形成参数\",\"响应数据：\",\"成功\",\"{ \\\"code\\\":\\\"200\\\", \\\"message\\\":\\\"success\\\", \\\"data\\\":{} }\",\"代码实现\",\"controller\",\"@PostMapping(\\\"removeByHid\\\") public Result removeById(Integer hid){ headlineService.removeById(hid); return Result.ok(null); }\"]},\"658\":{\"h\":\"五、前后端联调\"},\"659\":{\"h\":\"六、快速启动框架：SpringBoot3实战\"},\"660\":{\"h\":\"目录\",\"t\":[\"一、SpringBoot3介绍\",\"1.1 SpringBoot3简介\",\"1.2 系统要求\",\"1.3 快速入门\",\"1.4 入门总结\",\"二、SpringBoot3配置文件\",\"2.1 统一配置管理概述\",\"2.2 属性配置文件使用\",\"2.3 YAML配置文件使用\",\"2.4 批量配置文件注入\",\"2.5 多环境配置和使用\",\"三、SpringBoot3整合SpringMVC\",\"3.1 实现过程\",\"3.2 web相关配置\",\"3.3 静态资源处理\",\"3.4 自定义拦截器(SpringMVC配置)\",\"四、SpringBoot3整合Druid数据源\",\"五、SpringBoot3整合Mybatis\",\"5.1 MyBatis整合步骤\",\"5.2 Mybatis整合实践\",\"5.3 声明式事务整合配置\",\"5.4 AOP整合配置\",\"六、SpringBoot3项目打包和运行\",\"6.1 添加打包插件\",\"6.2 执行打包\",\"6.3 命令启动和参数说明\"]},\"661\":{\"h\":\"一、SpringBoot3介绍\"},\"662\":{\"h\":\"1.1 SpringBoot3简介\",\"t\":[\"课程使用SpringBoot版本：3.0.5\",\"https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.introducing-spring-boot\",\"到目前为止，你已经学习了多种配置Spring程序的方式。但是无论使用XML、注解、Java配置类还是他们的混合用法，你都会觉得配置文件过于复杂和繁琐，让人头疼！\",\"SpringBoot 帮我们简单、快速地创建一个独立的、生产级别的 Spring 应用（说明：SpringBoot底层是Spring），大多数 SpringBoot 应用只需要编写少量配置即可快速整合 Spring 平台以及第三方技术！\",\"SpringBoot的主要目标是：\",\"为所有 Spring 开发提供更快速、可广泛访问的入门体验。\",\"开箱即用，设置合理的默认值，但是也可以根据需求进行适当的调整。\",\"提供一系列大型项目通用的非功能性程序（如嵌入式服务器、安全性、指标、运行检查等）。\",\"约定大于配置，基本不需要主动编写配置类、也不需要 XML 配置文件。\",\"总结：简化开发，简化配置，简化整合，简化部署，简化监控，简化运维。\"]},\"663\":{\"h\":\"1.2 系统要求\",\"t\":[\"技术&工具\",\"版本（or later）\",\"maven\",\"3.6.3 or later 3.6.3 或更高版本\",\"Tomcat\",\"10.0+\",\"Servlet\",\"9.0+\",\"JDK\",\"17+\"]},\"664\":{\"h\":\"1.3 快速入门\",\"t\":[\"场景：浏览器发送 /hello请求，返回\\\"Hello,Spring Boot 3!\\\"\",\"开发步骤\",\"创建Maven工程\",\"添加依赖(springboot父工程依赖 , web启动器依赖)\",\"编写启动引导类(springboot项目运行的入口)\",\"编写处理器Controller\",\"启动项目\",\"创建项目\",\"添加依赖\",\"3.1 添加父工程坐标\",\"SpringBoot可以帮我们方便的管理项目依赖 , 在Spring Boot提供了一个名为spring-boot-starter-parent的工程，里面已经对各种常用依赖的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标(不需要添加版本)即可！\",\"<!--所有springboot项目都必须继承自 spring-boot-starter-parent--> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.0.5</version> </parent>\",\"3.2 添加web启动器\",\"为了让Spring Boot帮我们完成各种自动配置，我们必须引入Spring Boot提供的自动配置依赖，我们称为启动器。因为我们是web项目，这里我们引入web启动器，在 pom.xml 文件中加入如下依赖：\",\"<dependencies> <!--web开发的场景启动器--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> </dependencies>\",\"创建启动类\",\"创建package：com.atguigu\",\"创建启动类：MainApplication\",\"package com.atguigu; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; /** * @SpringBootApplication是一个特殊的注解，用于标识一个Spring Boot应用程序的入口类。它的主要作用是将三个常用注解组合在一起，简化了配置的过程。 * * 具体而言，@SpringBootApplication注解包含以下三个注解的功能： * @Configuration：将该类标识为应用程序的配置类。它允许使用Java代码定义和配置Bean。 * @EnableAutoConfiguration：启用Spring Boot的自动配置机制。它根据项目的依赖项自动配置Spring应用程序的行为。自动配置根据类路径、注解和配置属性等条件来决定要使用的功能和配置。 * @ComponentScan：自动扫描并加载应用程序中的组件，如控制器、服务、存储库等。它默认扫描@SpringBootApplication注解所在类的包及其子包中的组件。 * * 使用@SpringBootApplication注解，可以将上述三个注解的功能集中在一个注解上，简化了配置文件的编写和组件的加载和扫描过程。它是Spring Boot应用程序的入口点，标识了应用程序的主类， * 并告诉Spring Boot在启动时应如何配置和加载应用程序。 */ @SpringBootApplication public class MainApplication { //SpringApplication.run() 方法是启动 Spring Boot 应用程序的关键步骤。它创建应用程序上下文、 // 自动配置应用程序、启动应用程序，并处理命令行参数，使应用程序能够运行和提供所需的功能 public static void main(String[] args) { SpringApplication.run(MainApplication.class,args); } }\",\"编写处理器Controller\",\"创建package：com.atguigu.controller\",\"创建类：HelloController\",\"注意： IoC和DI注解需要在启动类的同包或者子包下方可生效！无需指定，约束俗称。\",\"package com.atguigu.controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class HelloController { @GetMapping(\\\"/hello\\\") public String hello(){ return \\\"Hello,Spring Boot 3!\\\"; } }\",\"启动测试\"]},\"665\":{\"h\":\"1.4 入门总结\",\"t\":[\"为什么依赖不需要写版本？\",\"每个boot项目都有一个父项目spring-boot-starter-parent\",\"parent的父项目是spring-boot-dependencies\",\"父项目 版本仲裁中心，把所有常见的jar的依赖版本都声明好了。\",\"比如：mysql-connector-j\",\"启动器(Starter)是何方神圣？\",\"Spring Boot提供了一种叫做Starter的概念，它是一组预定义的依赖项集合，旨在简化Spring应用程序的配置和构建过程。Starter包含了一组相关的依赖项，以便在启动应用程序时自动引入所需的库、配置和功能。\",\"主要作用如下：\",\"简化依赖管理：Spring Boot Starter通过捆绑和管理一组相关的依赖项，减少了手动解析和配置依赖项的工作。只需引入一个相关的Starter依赖，即可获取应用程序所需的全部依赖。\",\"自动配置：Spring Boot Starter在应用程序启动时自动配置所需的组件和功能。通过根据类路径和其他设置的自动检测，Starter可以自动配置Spring Bean、数据源、消息传递等常见组件，从而使应用程序的配置变得简单和维护成本降低。\",\"提供约定优于配置：Spring Boot Starter遵循“约定优于配置”的原则，通过提供一组默认设置和约定，减少了手动配置的需要。它定义了标准的配置文件命名约定、默认属性值、日志配置等，使得开发者可以更专注于业务逻辑而不是繁琐的配置细节。\",\"快速启动和开发应用程序：Spring Boot Starter使得从零开始构建一个完整的Spring Boot应用程序变得容易。它提供了主要领域（如Web开发、数据访问、安全性、消息传递等）的Starter，帮助开发者快速搭建一个具备特定功能的应用程序原型。\",\"模块化和可扩展性：Spring Boot Starter的组织结构使得应用程序的不同模块可以进行分离和解耦。每个模块可以有自己的Starter和依赖项，使得应用程序的不同部分可以按需进行开发和扩展。 Spring Boot提供了许多预定义的Starter，例如spring-boot-starter-web用于构建Web应用程序，spring-boot-starter-data-jpa用于使用JPA进行数据库访问，spring-boot-starter-security用于安全认证和授权等等。\",\"使用Starter非常简单，只需要在项目的构建文件（例如Maven的pom.xml）中添加所需的Starter依赖，Spring Boot会自动处理依赖管理和配置。\",\"通过使用Starter，开发人员可以方便地引入和配置应用程序所需的功能，避免了手动添加大量的依赖项和编写冗长的配置文件的繁琐过程。同时，Starter也提供了一致的依赖项版本管理，确保依赖项之间的兼容性和稳定性。\",\"spring boot提供的全部启动器地址：\",\"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters\",\"命名规范：\",\"官方提供的场景：命名为：spring-boot-starter-*\",\"第三方提供场景：命名为：*-spring-boot-starter\",\"@SpringBootApplication注解的功效？\",\"@SpringBootApplication添加到启动类上，是一个组合注解，他的功效有具体的子注解实现！\",\"@SpringBootConfiguration @EnableAutoConfiguration @ComponentScan public @interface SpringBootApplication {}\",\"@SpringBootApplication注解是Spring Boot框架中的核心注解，它的主要作用是简化和加速Spring Boot应用程序的配置和启动过程。\",\"具体而言，@SpringBootApplication注解起到以下几个主要作用：\",\"自动配置：@SpringBootApplication注解包含了@EnableAutoConfiguration注解，用于启用Spring Boot的自动配置机制。自动配置会根据应用程序的依赖项和类路径，自动配置各种常见的Spring配置和功能，减少开发者的手动配置工作。它通过智能地分析类路径、加载配置和条件判断，为应用程序提供适当的默认配置。\",\"组件扫描：@SpringBootApplication注解包含了@ComponentScan注解，用于自动扫描并加载应用程序中的组件，例如控制器（Controllers）、服务（Services）、存储库（Repositories）等。它默认会扫描@SpringBootApplication注解所在类的包及其子包中的组件，并将它们纳入Spring Boot应用程序的上下文中，使它们可被自动注入和使用。\",\"声明配置类：@SpringBootApplication注解本身就是一个组合注解，它包含了@Configuration注解，将被标注的类声明为配置类。配置类可以包含Spring框架相关的配置、Bean定义，以及其他的自定义配置。通过@SpringBootApplication注解，开发者可以将配置类与启动类合并在一起，使得配置和启动可以同时发生。 总的来说，@SpringBootApplication注解的主要作用是简化Spring Boot应用程序的配置和启动过程。它自动配置应用程序、扫描并加载组件，并将配置和启动类合二为一，简化了开发者的工作量，提高了开发效率。\"]},\"666\":{\"h\":\"二、SpringBoot3配置文件\"},\"667\":{\"h\":\"2.1 统一配置管理概述\",\"t\":[\"SpringBoot工程下，进行统一的配置管理，你想设置的任何参数（端口号、项目根路径、数据库连接信息等等)都集中到一个固定位置和命名的配置文件（application.properties或application.yml）中！\",\"配置文件应该放置在Spring Boot工程的src/main/resources目录下。这是因为src/main/resources目录是Spring Boot默认的类路径（classpath），配置文件会被自动加载并可供应用程序访问。\",\"功能配置参数说明：\",\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties\",\"细节总结：\",\"集中式管理配置。统一在一个文件完成程序功能参数设置和自定义参数声明 。\",\"位置：resources文件夹下，必须命名application 后缀 .properties / .yaml / .yml 。\",\"如果同时存在application.properties | application.yml(.yaml) , properties的优先级更高。\",\"配置基本都有默认值。\"]},\"668\":{\"h\":\"2.2 属性配置文件使用\",\"t\":[\"配置文件\",\"在 resource 文件夹下面新建 application.properties 配置文件\",\"# application.properties 为统一配置文件 # 内部包含: 固定功能的key,自定义的key # 此处的配置信息,我们都可以在程序中@Value等注解读取 # 固定的key # 启动端口号 server.port=80 # 自定义 spring.jdbc.datasource.driverClassName=com.mysql.cj.jdbc.driver spring.jdbc.datasource.url=jdbc:mysql:///springboot_01 spring.jdbc.datasource.username=root spring.jdbc.datasource.password=root\",\"读取配置文件\",\"package com.atguigu.properties; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Component; @Component public class DataSourceProperties { @Value(\\\"${spring.jdbc.datasource.driverClassName}\\\") private String driverClassName; @Value(\\\"${spring.jdbc.datasource.url}\\\") private String url; @Value(\\\"${spring.jdbc.datasource.username}\\\") private String username; @Value(\\\"${spring.jdbc.datasource.password}\\\") private String password; // 生成get set 和 toString方法 public String getDriverClassName() { return driverClassName; } public void setDriverClassName(String driverClassName) { this.driverClassName = driverClassName; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } @Override public String toString() { return \\\"DataSourceProperties{\\\" + \\\"driverClassName='\\\" + driverClassName + '\\\\'' + \\\", url='\\\" + url + '\\\\'' + \\\", username='\\\" + username + '\\\\'' + \\\", password='\\\" + password + '\\\\'' + '}'; } }\",\"测试效果\",\"在controller注入，输出进行测试\",\"@Autowired private DataSourceProperties dataSourceProperties ; @RequestMapping(path = \\\"/hello\\\") public String sayHello() { System.out.println(dataSourceProperties); return \\\"Hello Spring Boot ! \\\" ; }\",\"浏览器访问路径，控制台查看效果\"]},\"669\":{\"h\":\"2.3 YAML配置文件使用\",\"t\":[\"yaml格式介绍\",\"YAML（YAML Ain’t Markup Language）是一种基于层次结构的数据序列化格式，旨在提供一种易读、人类友好的数据表示方式。\",\"与.properties文件相比，YAML格式有以下优势：\",\"层次结构：YAML文件使用缩进和冒号来表示层次结构，使得数据之间的关系更加清晰和直观。这样可以更容易理解和维护复杂的配置，特别适用于深层次嵌套的配置情况。\",\"自我描述性：YAML文件具有自我描述性，字段和值之间使用冒号分隔，并使用缩进表示层级关系。这使得配置文件更易于阅读和理解，并且可以减少冗余的标点符号和引号。\",\"注释支持：YAML格式支持注释，可以在配置文件中添加说明性的注释，使配置更具可读性和可维护性。相比之下，.properties文件不支持注释，无法提供类似的解释和说明。\",\"多行文本：YAML格式支持多行文本的表示，可以更方便地表示长文本或数据块。相比之下，.properties文件需要使用转义符或将长文本拆分为多行。\",\"类型支持：YAML格式天然支持复杂的数据类型，如列表、映射等。这使得在配置文件中表示嵌套结构或数据集合更加容易，而不需要进行额外的解析或转换。\",\"更好的可读性：由于YAML格式的特点，它更容易被人类读懂和解释。它减少了配置文件中需要的特殊字符和语法，让配置更加清晰明了，从而减少了错误和歧义。 综上所述，YAML格式相对于.properties文件具有更好的层次结构表示、自我描述性、注释支持、多行文本表示、复杂数据类型支持和更好的可读性。这些特点使YAML成为一种有力的配置文件格式，尤其适用于复杂的配置需求和人类可读的场景。然而，选择使用YAML还是.properties取决于实际需求和团队的偏好，简单的配置可以使用.properties，而复杂的配置可以选择YAML以获得更多的灵活性和可读性\",\"yaml语法说明\",\"数据结构用树形结构呈现，通过缩进来表示层级，\",\"连续的项目（集合）通过减号 ” - ” 来表示\",\"键值结构里面的key/value对用冒号 ” : ” 来分隔。\",\"YAML配置文件的扩展名是yaml 或 yml\",\"例如：\",\"# YAML配置文件示例 app_name: 我的应用程序 version: 1.0.0 author: 张三 database: host: localhost port: 5432 username: admin password: password123 features: - 登录 - 注册 - 仪表盘 settings: analytics: true theme: dark\",\"配置文件\",\"spring: jdbc: datasource: driverClassName: com.mysql.jdbc.Driver url: jdbc:mysql:///springboot_02 username: root password: root server: port: 80\",\"读取配置文件\",\"读取方式和properties一致\",\"package com.atguigu.properties; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Component; @Component public class DataSourceProperties { @Value(\\\"${spring.jdbc.datasource.driverClassName}\\\") private String driverClassName; @Value(\\\"${spring.jdbc.datasource.url}\\\") private String url; @Value(\\\"${spring.jdbc.datasource.username}\\\") private String username; @Value(\\\"${spring.jdbc.datasource.password}\\\") private String password; // 生成get set 和 toString方法 public String getDriverClassName() { return driverClassName; } public void setDriverClassName(String driverClassName) { this.driverClassName = driverClassName; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } @Override public String toString() { return \\\"DataSourceProperties{\\\" + \\\"driverClassName='\\\" + driverClassName + '\\\\'' + \\\", url='\\\" + url + '\\\\'' + \\\", username='\\\" + username + '\\\\'' + \\\", password='\\\" + password + '\\\\'' + '}'; } }\",\"测试效果\",\"在controller注入，输出进行测试\",\"@Autowired private DataSourceProperties dataSourceProperties ; @RequestMapping(path = \\\"/hello\\\") public String sayHello() { System.out.println(dataSourceProperties); return \\\"Hello Spring Boot ! \\\" ; }\",\"浏览器访问路径，控制台查看效果\"]},\"670\":{\"h\":\"2.4 批量配置文件注入\",\"t\":[\"@ConfigurationProperties是SpringBoot提供的重要注解, 他可以将一些配置属性批量注入到bean对象。\",\"创建类，添加属性和注解\",\"在类上通过@ConfigurationProperties注解声明该类要读取属性配置\",\"prefix=\\\"spring.jdbc.datasource\\\" 读取属性文件中前缀为spring.jdbc.datasource的值。前缀和属性名称和配置文件中的key必须要保持一致才可以注入成功\",\"package com.atguigu.properties; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component; @Component @ConfigurationProperties(prefix = \\\"spring.jdbc.datasource\\\") public class DataSourceConfigurationProperties { private String driverClassName; private String url; private String username; private String password; public String getDriverClassName() { return driverClassName; } public void setDriverClassName(String driverClassName) { this.driverClassName = driverClassName; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } @Override public String toString() { return \\\"DataSourceConfigurationProperties{\\\" + \\\"driverClassName='\\\" + driverClassName + '\\\\'' + \\\", url='\\\" + url + '\\\\'' + \\\", username='\\\" + username + '\\\\'' + \\\", password='\\\" + password + '\\\\'' + '}'; } }\",\"测试效果\",\"@RestController public class HelloController { @Autowired private DataSourceProperties dataSourceProperties; @Autowired private DataSourceConfigurationProperties dataSourceConfigurationProperties; @GetMapping(\\\"/hello\\\") public String hello(){ System.out.println(\\\"dataSourceProperties = \\\" + dataSourceProperties); System.out.println(\\\"dataSourceConfigurationProperties = \\\" + dataSourceConfigurationProperties); return \\\"Hello,Spring Boot 3!\\\"; } }\",\"浏览器访问路径，控制台查看效果\"]},\"671\":{\"h\":\"2.5 多环境配置和使用\",\"t\":[\"需求\",\"在Spring Boot中，可以使用多环境配置来根据不同的运行环境（如开发、测试、生产）加载不同的配置。SpringBoot支持多环境配置让应用程序在不同的环境中使用不同的配置参数，例如数据库连接信息、日志级别、缓存配置等。\",\"以下是实现Spring Boot多环境配置的常见方法：\",\"属性文件分离：将应用程序的配置参数分离到不同的属性文件中，每个环境对应一个属性文件。例如，可以创建application-dev.properties、application-prod.properties和application-test.properties等文件。在这些文件中，可以定义各自环境的配置参数，如数据库连接信息、端口号等。然后，在application.properties中通过spring.profiles.active属性指定当前使用的环境。Spring Boot会根据该属性来加载对应环境的属性文件，覆盖默认的配置。\",\"YAML配置文件：与属性文件类似，可以将配置参数分离到不同的YAML文件中，每个环境对应一个文件。例如，可以创建application-dev.yml、application-prod.yml和application-test.yml等文件。在这些文件中，可以使用YAML语法定义各自环境的配置参数。同样，通过spring.profiles.active属性指定当前的环境，Spring Boot会加载相应的YAML文件。\",\"命令行参数(动态)：可以通过命令行参数来指定当前的环境。例如，可以使用--spring.profiles.active=dev来指定使用开发环境的配置。 通过上述方法，Spring Boot会根据当前指定的环境来加载相应的配置文件或参数，从而实现多环境配置。这样可以简化在不同环境之间的配置切换，并且确保应用程序在不同环境中具有正确的配置。\",\"多环境配置（基于方式b实践）\",\"创建开发、测试、生产三个环境的配置文件 application-dev.yml（开发）\",\"spring: jdbc: datasource: driverClassName: com.mysql.cj.jdbc.Driver url: jdbc:mysql:///dev username: root password: root\",\"application-test.yml（测试）\",\"spring: jdbc: datasource: driverClassName: com.mysql.cj.jdbc.Driver url: jdbc:mysql:///test username: root password: root\",\"application-prod.yml（生产）\",\"spring: jdbc: datasource: driverClassName: com.mysql.cj.jdbc.Driver url: jdbc:mysql:///prod username: root password: root\",\"环境激活\",\"spring: profiles: active: dev\",\"测试效果\",\"注意 :\",\"如果设置了spring.profiles.active，并且和application有重叠属性，以active设置优先。\",\"如果设置了spring.profiles.active，和application无重叠属性，application设置依然生效！\"]},\"672\":{\"h\":\"三、SpringBoot3整合SpringMVC\"},\"673\":{\"h\":\"3.1 实现过程\",\"t\":[\"创建程序\",\"引入依赖\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.0.5</version> </parent> <groupId>com.atguigu</groupId> <artifactId>springboot-starter-springmvc-03</artifactId> <version>1.0-SNAPSHOT</version> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- web开发的场景启动器 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> </dependencies> </project>\",\"创建启动类\",\"@SpringBootApplication public class MainApplication { public static void main(String[] args) { SpringApplication.run(MainApplication.class,args); } }\",\"创建实体类\",\"package com.atguigu.pojo; public class User { private String username ; private String password ; private Integer age ; private String sex ; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } }\",\"编写Controller\",\"package com.atguigu.controller; import com.atguigu.pojo.User; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseBody; @Controller @RequestMapping(\\\"/user\\\") public class UserController { @GetMapping(\\\"/getUser\\\") @ResponseBody public User getUser(){ User user = new User(); user.setUsername(\\\"杨过\\\"); user.setPassword(\\\"123456\\\"); user.setAge(18); user.setSex(\\\"男\\\"); return user; } }\",\"访问测试\"]},\"674\":{\"h\":\"3.2 web相关配置\",\"t\":[\"位置：application.yml\",\"# web相关的配置 # https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server server: # 端口号设置 port: 80 # 项目根路径 servlet: context-path: /boot\",\"当涉及Spring Boot的Web应用程序配置时，以下是五个重要的配置参数：\",\"server.port: 指定应用程序的HTTP服务器端口号。默认情况下，Spring Boot使用8080作为默认端口。您可以通过在配置文件中设置server.port来更改端口号。\",\"server.servlet.context-path: 设置应用程序的上下文路径。这是应用程序在URL中的基本路径。默认情况下，上下文路径为空。您可以通过在配置文件中设置server.servlet.context-path属性来指定自定义的上下文路径。\",\"spring.mvc.view.prefix和spring.mvc.view.suffix: 这两个属性用于配置视图解析器的前缀和后缀。视图解析器用于解析控制器返回的视图名称，并将其映射到实际的视图页面。spring.mvc.view.prefix定义视图的前缀，spring.mvc.view.suffix定义视图的后缀。\",\"spring.resources.static-locations: 配置静态资源的位置。静态资源可以是CSS、JavaScript、图像等。默认情况下，Spring Boot会将静态资源放在classpath:/static目录下。您可以通过在配置文件中设置spring.resources.static-locations属性来自定义静态资源的位置。\",\"spring.http.encoding.charset和spring.http.encoding.enabled: 这两个属性用于配置HTTP请求和响应的字符编码。spring.http.encoding.charset定义字符编码的名称（例如UTF-8），spring.http.encoding.enabled用于启用或禁用字符编码的自动配置。\",\"这些是在Spring Boot的配置文件中与Web应用程序相关的一些重要配置参数。根据您的需求，您可以在配置文件中设置这些参数来定制和配置您的Web应用程序\"]},\"675\":{\"h\":\"3.3 静态资源处理\",\"t\":[\"在WEB开发中我们需要引入一些静态资源 , 例如 : HTML , CSS , JS , 图片等 , 如果是普通的项目静态资源可以放在项目的webapp目录下。现在使用Spring Boot做开发 , 项目中没有webapp目录 , 我们的项目是一个jar工程，那么就没有webapp，我们的静态资源该放哪里呢？\",\"默认路径\",\"在springboot中就定义了静态资源的默认查找路径：\",\"package org.springframework.boot.autoconfigure.web; //.................. public static class Resources { private static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]{\\\"classpath:/META-INF/resources/\\\", \\\"classpath:/resources/\\\", \\\"classpath:/static/\\\", \\\"classpath:/public/\\\"}; private String[] staticLocations; private boolean addMappings; private boolean customized; private final Chain chain; private final Cache cache; public Resources() { this.staticLocations = CLASSPATH_RESOURCE_LOCATIONS; this.addMappings = true; this.customized = false; this.chain = new Chain(); this.cache = new Cache(); } //...........\",\"默认的静态资源路径为：\",\"· classpath:/META-INF/resources/\",\"· classpath:/resources/\",\"· classpath:/static/\",\"· classpath:/public/\",\"我们只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。 我们习惯会把静态资源放在classpath:/static/ 目录下。在resources目录下创建index.html文件\",\"打开浏览器输入 : http://localhost:8080/index.html\",\"覆盖路径\",\"# web相关的配置 # https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server server: # 端口号设置 port: 80 # 项目根路径 servlet: context-path: /boot spring: web: resources: # 配置静态资源地址,如果设置,会覆盖默认值 static-locations: classpath:/webapp\",\"访问地址：http://localhost/boot/login.html\"]},\"676\":{\"h\":\"3.4 自定义拦截器(SpringMVC配置)\",\"t\":[\"拦截器声明\",\"package com.atguigu.interceptor; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import org.springframework.stereotype.Component; import org.springframework.web.servlet.HandlerInterceptor; import org.springframework.web.servlet.ModelAndView; @Component public class MyInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"MyInterceptor拦截器的preHandle方法执行....\\\"); return true; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(\\\"MyInterceptor拦截器的postHandle方法执行....\\\"); } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\\\"MyInterceptor拦截器的afterCompletion方法执行....\\\"); } }\",\"拦截器配置\",\"正常使用配置类，只要保证，配置类要在启动类的同包或者子包方可生效！\",\"package com.atguigu.config; import com.atguigu.interceptor.MyInterceptor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; @Configuration public class MvcConfig implements WebMvcConfigurer { @Autowired private MyInterceptor myInterceptor ; /** * /** 拦截当前目录及子目录下的所有路径 /user/** /user/findAll /user/order/findAll * /* 拦截当前目录下的以及子路径 /user/* /user/findAll * @param registry */ @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(myInterceptor).addPathPatterns(\\\"/**\\\"); } }\",\"拦截器效果测试\"]},\"677\":{\"h\":\"四、SpringBoot3整合Druid数据源\",\"t\":[\"创建程序\",\"引入依赖\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.0.5</version> </parent> <groupId>com.atguigu</groupId> <artifactId>springboot-starter-druid-04</artifactId> <version>1.0-SNAPSHOT</version> <properties> <maven.compiler.source>17</maven.compiler.source> <maven.compiler.target>17</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- web开发的场景启动器 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!-- 数据库相关配置启动器 jdbctemplate 事务相关--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <!-- druid启动器的依赖 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-3-starter</artifactId> <version>1.2.18</version> </dependency> <!-- 驱动类--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.28</version> </dependency> </dependencies> <!-- SpringBoot应用打包插件--> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>\",\"启动类\",\"@SpringBootApplication public class MainApplication { public static void main(String[] args) { SpringApplication.run(MainApplication.class,args); } }\",\"配置文件编写\",\"添加druid连接池的基本配置\",\"spring: datasource: # 连接池类型 type: com.alibaba.druid.pool.DruidDataSource # Druid的其他属性配置 springboot3整合情况下,数据库连接信息必须在Druid属性下! druid: url: jdbc:mysql://localhost:3306/day01 username: root password: root driver-class-name: com.mysql.cj.jdbc.Driver # 初始化时建立物理连接的个数 initial-size: 5 # 连接池的最小空闲数量 min-idle: 5 # 连接池最大连接数量 max-active: 20 # 获取连接时最大等待时间，单位毫秒 max-wait: 60000 # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 test-while-idle: true # 既作为检测的间隔时间又作为testWhileIdel执行的依据 time-between-eviction-runs-millis: 60000 # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间) min-evictable-idle-time-millis: 30000 # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual) validation-query: select 1 # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true test-on-borrow: false # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true test-on-return: false # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。 pool-prepared-statements: false # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 max-pool-prepared-statement-per-connection-size: -1 # 合并多个DruidDataSource的监控数据 use-global-data-source-stat: true logging: level: root: debug\",\"编写Controller\",\"@Slf4j @Controller @RequestMapping(\\\"/user\\\") public class UserController { @Autowired private JdbcTemplate jdbcTemplate; @GetMapping(\\\"/getUser\\\") @ResponseBody public User getUser(){ String sql = \\\"select * from users where id = ? ; \\\"; User user = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper<>(User.class), 1); log.info(\\\"查询的user数据为:{}\\\",user.toString()); return user; } }\",\"启动测试\",\"问题解决\",\"通过源码分析，druid-spring-boot-3-starter目前最新版本是1.2.18，虽然适配了SpringBoot3，但缺少自动装配的配置文件，需要手动在resources目录下创建META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports，文件内容如下!\",\"com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure\"]},\"678\":{\"h\":\"五、SpringBoot3整合Mybatis\"},\"679\":{\"h\":\"5.1 MyBatis整合步骤\",\"t\":[\"导入依赖：在您的Spring Boot项目的构建文件（如pom.xml）中添加MyBatis和数据库驱动的相关依赖。例如，如果使用MySQL数据库，您需要添加MyBatis和MySQL驱动的依赖。\",\"配置数据源：在application.properties或application.yml中配置数据库连接信息，包括数据库URL、用户名、密码、mybatis的功能配置等。\",\"创建实体类：创建与数据库表对应的实体类。\",\"创建Mapper接口：创建与数据库表交互的Mapper接口。\",\"创建Mapper接口SQL实现： 可以使用mapperxml文件或者注解方式\",\"创建程序启动类\",\"注解扫描：在Spring Boot的主应用类上添加@MapperScan注解，用于扫描和注册Mapper接口。\",\"使用Mapper接口：在需要使用数据库操作的地方，通过依赖注入或直接实例化Mapper接口，并调用其中的方法进行数据库操作。\"]},\"680\":{\"h\":\"5.2 Mybatis整合实践\",\"t\":[\"创建项目\",\"导入依赖\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.0.5</version> </parent> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>3.0.1</version> </dependency> <!-- 数据库相关配置启动器 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <!-- druid启动器的依赖 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-3-starter</artifactId> <version>1.2.18</version> </dependency> <!-- 驱动类--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.28</version> </dependency> </dependencies>\",\"配置文件\",\"server: port: 80 servlet: context-path: / spring: datasource: type: com.alibaba.druid.pool.DruidDataSource druid: url: jdbc:mysql:///day01 username: root password: root driver-class-name: com.mysql.cj.jdbc.Driver mybatis: configuration: # setting配置 auto-mapping-behavior: full map-underscore-to-camel-case: true log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl type-aliases-package: com.atguigu.pojo # 配置别名 mapper-locations: classpath:/mapper/*.xml # mapperxml位置\",\"实体类准备\",\"package com.atguigu.pojo; public class User { private String account ; private String password ; private Integer id ; public String getAccount() { return account; } public void setAccount(String account) { this.account = account; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } @Override public String toString() { return \\\"User{\\\" + \\\"account='\\\" + account + '\\\\'' + \\\", password='\\\" + password + '\\\\'' + \\\", id=\\\" + id + '}'; } }\",\"Mapper接口准备\",\"public interface UserMapper { List<User> queryAll(); }\",\"Mapper接口实现（XML）\",\"位置：resources/mapper/UserMapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace = 接口的全限定符 --> <mapper namespace=\\\"com.atguigu.mapper.UserMapper\\\"> <select id=\\\"queryAll\\\" resultType=\\\"user\\\"> select * from users </select> </mapper>\",\"编写三层架构代码\",\"伪代码，不添加业务接口！\",\"controller\",\"@Slf4j @Controller @RequestMapping(\\\"/user\\\") public class UserController { @Autowired private UserService userService; @GetMapping(\\\"/list\\\") @ResponseBody public List<User> getUser(){ List<User> userList = userService.findList(); log.info(\\\"查询的user数据为:{}\\\",userList); return userList; } }\",\"service\",\"@Slf4j @Service public class UserService { @Autowired private UserMapper userMapper; public List<User> findList(){ List<User> users = userMapper.queryAll(); log.info(\\\"查询全部数据:{}\\\",users); return users; } }\",\"启动类和接口扫描\",\"@MapperScan(\\\"com.atguigu.mapper\\\") //mapper接口扫描配置 @SpringBootApplication public class MainApplication { public static void main(String[] args) { SpringApplication.run(MainApplication.class,args); } }\",\"启动测试\"]},\"681\":{\"h\":\"5.3 声明式事务整合配置\",\"t\":[\"依赖导入:\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency>\",\"注：SpringBoot项目会自动配置一个 DataSourceTransactionManager，所以我们只需在方法（或者类）加上 @Transactional 注解，就自动纳入 Spring 的事务管理了\",\"@Transactional public void update(){ User user = new User(); user.setId(1); user.setPassword(\\\"test2\\\"); user.setAccount(\\\"test2\\\"); userMapper.update(user); }\"]},\"682\":{\"h\":\"5.4 AOP整合配置\",\"t\":[\"依赖导入:\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency>\",\"直接使用aop注解即可: \",\"@Component @Aspect public class LogAdvice { @Before(\\\"execution(* com..service.*.*(..))\\\") public void before(JoinPoint joinPoint){ System.out.println(\\\"LogAdvice.before\\\"); System.out.println(\\\"joinPoint = \\\" + joinPoint); } }\"]},\"683\":{\"h\":\"六、SpringBoot3项目打包和运行\"},\"684\":{\"h\":\"6.1 添加打包插件\",\"t\":[\"在Spring Boot项目中添加spring-boot-maven-plugin插件是为了支持将项目打包成可执行的可运行jar包。如果不添加spring-boot-maven-plugin插件配置，使用常规的java -jar命令来运行打包后的Spring Boot项目是无法找到应用程序的入口点，因此导致无法运行。\",\"<!-- SpringBoot应用打包插件--> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build>\"]},\"685\":{\"h\":\"6.2 执行打包\",\"t\":[\"在idea点击package进行打包\",\"可以在编译的target文件中查看jar包\"]},\"686\":{\"h\":\"6.3 命令启动和参数说明\",\"t\":[\"java -jar命令用于在Java环境中执行可执行的JAR文件。下面是关于java -jar命令的说明：\",\"命令格式：java -jar [选项] [参数] <jar文件名>\",\"-D<name>=<value>：设置系统属性，可以通过System.getProperty()方法在应用程序中获取该属性值。例如：java -jar -Dserver.port=8080 myapp.jar。\",\"-X：设置JVM参数，例如内存大小、垃圾回收策略等。常用的选项包括： \",\"-Xmx<size>：设置JVM的最大堆内存大小，例如 -Xmx512m 表示设置最大堆内存为512MB。\",\"-Xms<size>：设置JVM的初始堆内存大小，例如 -Xms256m 表示设置初始堆内存为256MB。\",\"-Dspring.profiles.active=<profile>：指定Spring Boot的激活配置文件，可以通过application-<profile>.properties或application-<profile>.yml文件来加载相应的配置。例如：java -jar -Dspring.profiles.active=dev myapp.jar。\",\"启动和测试：\",\"注意： -D 参数必须要在jar之前！否者不生效！\"]},\"687\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"688\":{\"h\":\"Java\"},\"689\":{\"h\":\"Blogs\"},\"690\":{\"h\":\"Ssm笔记提炼\"},\"691\":{\"h\":\"前端\"},\"692\":{\"h\":\"后端\"},\"693\":{\"h\":\"日记\"},\"694\":{\"h\":\"算法\"},\"695\":{\"h\":\"Maven\"},\"696\":{\"h\":\"尚硅谷相关课程官方笔记\"},\"697\":{\"h\":\"一、高效构建 Java应用： Maven入门和进阶\"},\"698\":{\"h\":\"Ssm2023\"},\"699\":{\"h\":\"七、 My Batis Plus高级用法：最优化持久层开发\"},\"700\":{\"h\":\"三、 My Batis实践：提高持久层数据处理效率\"},\"701\":{\"h\":\"二、 Spring Framework实战指南\"},\"702\":{\"h\":\"五、框架实战： SSM整合原理和实战\"},\"703\":{\"h\":\"八、终极实战： Spring Boot版微头条实战\"},\"704\":{\"h\":\"六、快速启动框架： Spring Boot3实战\"}},\"dirtCount\":0,\"index\":[[\"垃圾回收策略等\",{\"1\":{\"686\":1}}],[\"伪代码\",{\"1\":{\"680\":1}}],[\"伪代码如下\",{\"1\":{\"416\":1}}],[\"归还连接时会执行validationquery检测连接是否有效\",{\"1\":{\"677\":1}}],[\"申请连接时会执行validationquery检测连接是否有效\",{\"1\":{\"677\":1}}],[\"申请连接的时候检测\",{\"1\":{\"677\":1}}],[\"杨过\",{\"1\":{\"673\":1}}],[\"杨九\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"缓存配置等\",{\"1\":{\"671\":1}}],[\"缓存控制\",{\"1\":{\"584\":1}}],[\"仪表盘\",{\"1\":{\"669\":1}}],[\"尤其适用于复杂的配置需求和人类可读的场景\",{\"1\":{\"669\":1}}],[\"集中式管理配置\",{\"1\":{\"667\":1}}],[\"集合属性中元素的类型\",{\"1\":{\"519\":1}}],[\"集合类型\",{\"1\":{\"501\":1}}],[\"集合的元素且同时remove等操作时\",{\"1\":{\"197\":1}}],[\"集合迭代器抛出异常的问题\",{\"1\":{\"197\":1}}],[\"集合\",{\"0\":{\"316\":1},\"1\":{\"69\":1,\"169\":2,\"471\":1,\"552\":2,\"669\":1}}],[\"集合参数\",{\"1\":{\"68\":1}}],[\"约定优于配置\",{\"1\":{\"665\":1}}],[\"约定大于配置\",{\"1\":{\"662\":1}}],[\"约束俗称\",{\"1\":{\"664\":1}}],[\"约占其全球份额的42\",{\"1\":{\"651\":1}}],[\"阅读量+1\",{\"1\":{\"656\":1}}],[\"阅读量和version\",{\"1\":{\"656\":1}}],[\"详情数据查询\",{\"1\":{\"656\":1}}],[\"马斯克宣布\",{\"1\":{\"656\":2,\"657\":1}}],[\"马斯克\",{\"1\":{\"656\":1}}],[\"浏览量降序排序\",{\"1\":{\"656\":1}}],[\"浏览器访问路径\",{\"1\":{\"668\":1,\"669\":1,\"670\":1}}],[\"浏览器发送\",{\"1\":{\"664\":1}}],[\"浏览器发起请求\",{\"1\":{\"61\":1}}],[\"浏览器\",{\"1\":{\"67\":1,\"189\":1,\"200\":1}}],[\"浏览器偏好语言\",{\"1\":{\"63\":1}}],[\"浏览器能接收资源类型\",{\"1\":{\"63\":1}}],[\"浏览器版本\",{\"1\":{\"63\":1}}],[\"浏览器会解析成<a>\",{\"1\":{\"52\":1}}],[\"浏览器对象\",{\"1\":{\"40\":1}}],[\"浏览器对象模型\",{\"1\":{\"40\":1}}],[\"浏览器窗口对象\",{\"1\":{\"40\":2}}],[\"浏览器弹出警告\",{\"1\":{\"38\":1}}],[\"立刻将用户名发送给后端\",{\"1\":{\"655\":1}}],[\"立刻出栈\",{\"1\":{\"150\":1}}],[\"账号信息\",{\"1\":{\"655\":1}}],[\"账号密码正确\",{\"1\":{\"655\":1}}],[\"账号错误\",{\"1\":{\"655\":1}}],[\"账号判断\",{\"1\":{\"655\":1}}],[\"账号进行数据库查询\",{\"1\":{\"655\":1}}],[\"知道token对应的具体用户\",{\"1\":{\"655\":1}}],[\"知识\",{\"1\":{\"537\":2}}],[\"知识点\",{\"1\":{\"431\":1,\"432\":1}}],[\"验证jwt的签名和有效性\",{\"1\":{\"655\":1}}],[\"验证maven工程是否创建成功\",{\"1\":{\"399\":1}}],[\"盗取token后也无法`登录`程序\",{\"1\":{\"655\":1}}],[\"科技\",{\"1\":{\"651\":1,\"656\":3}}],[\"科技股如英伟达等同样受益于生成式人工智能技术的应用\",{\"1\":{\"651\":1}}],[\"娱乐\",{\"1\":{\"651\":1,\"656\":1}}],[\"局势必然会发生逆转\",{\"1\":{\"651\":1}}],[\"局部变量就会立刻消失\",{\"1\":{\"150\":1}}],[\"局部变量是跟着方法走的\",{\"1\":{\"150\":1}}],[\"局部成员类\",{\"1\":{\"150\":1}}],[\"局部\",{\"1\":{\"150\":1}}],[\"局部内部类如果希望访问所在方法的局部变量\",{\"1\":{\"150\":1}}],[\"局部内部类名称\",{\"1\":{\"150\":1}}],[\"局部内部类\",{\"0\":{\"150\":1},\"1\":{\"148\":1}}],[\"雷峰网认为\",{\"1\":{\"651\":1}}],[\"座舱\",{\"1\":{\"651\":1}}],[\"远及不特斯拉\",{\"1\":{\"651\":1}}],[\"远程方法调用\",{\"1\":{\"187\":1}}],[\"远程仓库\",{\"1\":{\"55\":1}}],[\"油改电\",{\"1\":{\"651\":1}}],[\"奔驰eqc\",{\"1\":{\"651\":1}}],[\"宝马ix3这两款车型都是\",{\"1\":{\"651\":1}}],[\"宝马ix3\",{\"1\":{\"651\":1}}],[\"豪华型\",{\"1\":{\"651\":1}}],[\"紧凑型四大类\",{\"1\":{\"651\":1}}],[\"平台以及第三方技术\",{\"1\":{\"662\":1}}],[\"平替特斯拉model\",{\"1\":{\"651\":1}}],[\"平分剩余空间\",{\"1\":{\"258\":1}}],[\"尽管model\",{\"1\":{\"651\":1}}],[\"尽量不要修改老的类\",{\"1\":{\"137\":1}}],[\"研发成本骤降\",{\"1\":{\"651\":1}}],[\"零部件复用率高达75\",{\"1\":{\"651\":1}}],[\"零散的多个简单类型参数\",{\"1\":{\"504\":1}}],[\"零散的简单类型数据\",{\"1\":{\"489\":1}}],[\"阳谋\",{\"1\":{\"651\":1}}],[\"蔚来et5t\",{\"1\":{\"651\":1}}],[\"蔚来et5t在智能化\",{\"1\":{\"651\":1}}],[\"蔚来et5t正在用一种经受了市场验证过的方式\",{\"1\":{\"651\":1}}],[\"蔚来\",{\"1\":{\"651\":1}}],[\"英伟达股价今年已飙升192\",{\"1\":{\"651\":1}}],[\"英语\",{\"1\":{\"334\":2}}],[\"亦存竞争\",{\"1\":{\"651\":1}}],[\"亦是刺痛运行程序的基本单位\",{\"1\":{\"192\":1,\"203\":1}}],[\"然而\",{\"1\":{\"669\":1}}],[\"然而有报道称\",{\"1\":{\"651\":1}}],[\"然后\",{\"1\":{\"671\":1}}],[\"然后使用\",{\"1\":{\"571\":1}}],[\"然后根据注解进行后续操作\",{\"1\":{\"564\":1}}],[\"然后针对这个位置按照注解标记的功能来执行具体操作\",{\"1\":{\"564\":1}}],[\"然后当ioc容器实例化和销毁组件对象的时候进行调用\",{\"1\":{\"560\":1,\"565\":1}}],[\"然后在这个基础上\",{\"1\":{\"608\":1}}],[\"然后在\",{\"1\":{\"534\":1}}],[\"然后在foreach标签的collection属性中按照\",{\"1\":{\"529\":1}}],[\"然后插入语句会被调用\",{\"1\":{\"512\":1}}],[\"然后遍历即可\",{\"1\":{\"371\":1}}],[\"然后用类来创建对象\",{\"1\":{\"334\":1}}],[\"然后main只调用外部类的方法\",{\"1\":{\"149\":1}}],[\"然后重写\",{\"1\":{\"137\":1}}],[\"然后回车\",{\"1\":{\"107\":1}}],[\"然后查操作手册w3school\",{\"1\":{\"40\":1}}],[\"然后引入到html页面中\",{\"1\":{\"37\":1}}],[\"市值增加约8006亿美元\",{\"1\":{\"651\":1}}],[\"收于每股348\",{\"1\":{\"651\":1}}],[\"收集系统软硬件消息\",{\"1\":{\"271\":1}}],[\"股价上涨3\",{\"1\":{\"651\":1}}],[\"途虎养车\",{\"1\":{\"651\":1}}],[\"机油和轮胎更换等低价服务\",{\"1\":{\"651\":1}}],[\"天王盖地虎\",{\"1\":{\"655\":1}}],[\"天猫养车的618活动\",{\"1\":{\"651\":1}}],[\"天津\",{\"1\":{\"651\":2}}],[\"轮胎免费装\",{\"1\":{\"651\":1}}],[\"轮胎买一送一\",{\"1\":{\"651\":1}}],[\"养车爱车立省不止30\",{\"1\":{\"651\":1}}],[\"养车市场陷入低价内卷\",{\"1\":{\"651\":1}}],[\"活动\",{\"1\":{\"651\":1}}],[\"低价牌\",{\"1\":{\"651\":1}}],[\"低头思故乡\",{\"1\":{\"188\":2}}],[\"汽车后市场的玩家们都打出了\",{\"1\":{\"651\":1}}],[\"汽车和发动机的关系\",{\"1\":{\"148\":1}}],[\"期间\",{\"1\":{\"651\":1}}],[\"期望从这条语句中返回结果的类全限定名或别名\",{\"1\":{\"515\":1}}],[\"虎猫狗\",{\"1\":{\"651\":1}}],[\"辅助驾驶表现怎么样\",{\"1\":{\"651\":1}}],[\"辅助驾驶很惊喜\",{\"1\":{\"651\":1}}],[\"拉着轻松又顺手\",{\"1\":{\"651\":1}}],[\"拉伸\",{\"1\":{\"260\":2}}],[\"差旅人\",{\"1\":{\"651\":1}}],[\"差集\",{\"1\":{\"316\":2}}],[\"旅行说走就走\",{\"1\":{\"651\":1}}],[\"米家旅行箱居然想到了这一点\",{\"1\":{\"651\":1}}],[\"亚马逊就靠在网上卖书创造了互联网界首个真正的商业奇迹\",{\"1\":{\"651\":1}}],[\"亚马逊的经理们要求员工开动脑筋\",{\"1\":{\"651\":1}}],[\"早在20世纪90年代\",{\"1\":{\"651\":1}}],[\"早期的aop实现的框架\",{\"1\":{\"587\":1}}],[\"聊天机器人技术潜力显现\",{\"1\":{\"651\":1}}],[\"聊天机器人技术来改进自家产品和工作流程\",{\"1\":{\"651\":1}}],[\"聊天室项目\",{\"0\":{\"192\":1,\"203\":1}}],[\"棋如人生\",{\"1\":{\"651\":1}}],[\"守住不发生系统性风险的底线\",{\"1\":{\"651\":1}}],[\"补强短板\",{\"1\":{\"651\":1}}],[\"补全属性\",{\"1\":{\"657\":1}}],[\"补全终端命令\",{\"1\":{\"275\":1}}],[\"补全注解\",{\"1\":{\"212\":1}}],[\"翻到中国围棋协会副主席\",{\"1\":{\"651\":1}}],[\"俗手\",{\"1\":{\"651\":1}}],[\"俗称锁\",{\"1\":{\"197\":1,\"208\":1}}],[\"题目有些难\",{\"1\":{\"651\":1}}],[\"题目描述\",{\"0\":{\"375\":1}}],[\"围棋名宿曹大元九段说\",{\"1\":{\"651\":1}}],[\"围棋名宿解读高考作文\",{\"1\":{\"651\":1}}],[\"围棋正在深入人心\",{\"1\":{\"651\":1}}],[\"究竟该如何解题\",{\"1\":{\"651\":1}}],[\"兴奋乃至油然而生的自豪感\",{\"1\":{\"651\":1}}],[\"着实觉得有些难\",{\"1\":{\"651\":1}}],[\"妙手和俗手\",{\"1\":{\"651\":1}}],[\"奥运相关话题进入高考\",{\"1\":{\"651\":1}}],[\"抢到常规赛的冠军\",{\"1\":{\"651\":1}}],[\"抢占式调度\",{\"1\":{\"192\":1,\"203\":1}}],[\"杭州银行弈和山东队\",{\"1\":{\"651\":1}}],[\"杭州银行第一\",{\"1\":{\"651\":1}}],[\"武陵山大裂谷杯\",{\"1\":{\"651\":1}}],[\"季军则由z\",{\"1\":{\"651\":1}}],[\"夺得该回合亚军的是驾驶新赛车出战的东风本田车手高度\",{\"1\":{\"651\":1}}],[\"长期主义\",{\"1\":{\"651\":1}}],[\"长三角赛车节联袂献上高水平对决\",{\"1\":{\"651\":1}}],[\"长度设置为\",{\"1\":{\"286\":1}}],[\"长度\",{\"1\":{\"171\":1}}],[\"长度length\",{\"1\":{\"167\":1}}],[\"长度可变\",{\"1\":{\"40\":1}}],[\"梅赛德斯车队汉密尔顿季军\",{\"1\":{\"651\":1}}],[\"塞纳的冠军数\",{\"1\":{\"651\":1}}],[\"埃尔顿\",{\"1\":{\"651\":1}}],[\"车神\",{\"1\":{\"651\":1}}],[\"追平了\",{\"1\":{\"651\":1}}],[\"追加规则\",{\"1\":{\"231\":1,\"564\":1}}],[\"阿斯顿马丁车队阿隆索亚军\",{\"1\":{\"651\":1}}],[\"阿隆索亚军\",{\"1\":{\"651\":1}}],[\"阿里云同步文件夹\",{\"1\":{\"182\":1}}],[\"维斯塔潘冠军\",{\"1\":{\"651\":1}}],[\"维护不易且实际开发需求中\",{\"1\":{\"492\":1}}],[\"维护了一个byte\",{\"1\":{\"191\":1,\"202\":1}}],[\"获得了nba2022\",{\"1\":{\"651\":1}}],[\"获取账号数据\",{\"1\":{\"655\":1}}],[\"获取token对应的用户\",{\"1\":{\"655\":1}}],[\"获取token\",{\"1\":{\"655\":1}}],[\"获取mapper代理对象\",{\"1\":{\"628\":1}}],[\"获取ioc容器的组件对象\",{\"1\":{\"555\":1}}],[\"获取bean\",{\"1\":{\"555\":1}}],[\"获取button元素\",{\"1\":{\"253\":1}}],[\"获取查询页的数据集合\",{\"1\":{\"535\":1}}],[\"获取查询结果\",{\"1\":{\"7\":1}}],[\"获取每页显示记录数\",{\"1\":{\"535\":1}}],[\"获取总页数\",{\"1\":{\"535\":1}}],[\"获取总记录数\",{\"1\":{\"535\":1}}],[\"获取version数据\",{\"1\":{\"484\":1}}],[\"获取分页数据\",{\"1\":{\"472\":1}}],[\"获取的是getobject方法返回的对象\",{\"1\":{\"561\":1}}],[\"获取的是一个状态信息\",{\"1\":{\"351\":1}}],[\"获取的第三方\",{\"1\":{\"424\":1}}],[\"获取到单链表的节点个数\",{\"1\":{\"371\":1}}],[\"获取队列的数据\",{\"1\":{\"367\":1}}],[\"获取响应的数据\",{\"1\":{\"355\":1}}],[\"获取响应中的页面的源码\",{\"1\":{\"351\":1}}],[\"获取ua\",{\"1\":{\"353\":1}}],[\"获取url\",{\"1\":{\"93\":1}}],[\"获取索引再重新赋值即可\",{\"1\":{\"310\":1}}],[\"获取变量的内存地址\",{\"1\":{\"292\":1}}],[\"获取原始密码\",{\"1\":{\"277\":1}}],[\"获取原始图像的尺寸\",{\"1\":{\"22\":1}}],[\"获取目标方法信息\",{\"1\":{\"216\":1}}],[\"获取参数列表\",{\"1\":{\"213\":1}}],[\"获取方法名\",{\"1\":{\"213\":1}}],[\"获取方法运行结束时间\",{\"1\":{\"100\":1}}],[\"获取方法运行开始时间\",{\"1\":{\"100\":1}}],[\"获取类的信息\",{\"1\":{\"213\":1}}],[\"获取通知细节信息\",{\"0\":{\"589\":1},\"1\":{\"542\":1}}],[\"获取通知细节\",{\"0\":{\"213\":1}}],[\"获取线程的优先级\",{\"1\":{\"196\":1,\"207\":1}}],[\"获取线程名\",{\"1\":{\"196\":1,\"207\":1}}],[\"获取当前页码\",{\"1\":{\"535\":1}}],[\"获取当前\",{\"1\":{\"483\":1}}],[\"获取当前代码对应的线程\",{\"1\":{\"196\":1,\"207\":1}}],[\"获取当前被点击的条目对象\",{\"1\":{\"28\":1}}],[\"获取当前被操作的那个按钮对象\",{\"1\":{\"26\":1}}],[\"获取本机ip对应的inetaddress的实例\",{\"1\":{\"189\":1,\"200\":1}}],[\"获取了这种二进制流\",{\"1\":{\"187\":1}}],[\"获取指定元素首次出现的下标\",{\"1\":{\"311\":1}}],[\"获取指定元素出现的次数\",{\"1\":{\"311\":1}}],[\"获取指定ip对应的inetaddress的实例\",{\"1\":{\"189\":1,\"200\":1}}],[\"获取指定key的value值\",{\"1\":{\"177\":1}}],[\"获取指定索引的元素\",{\"1\":{\"171\":1}}],[\"获取一个随机的int数字\",{\"1\":{\"160\":1}}],[\"获取所有cookie\",{\"1\":{\"90\":1}}],[\"获取cookie\",{\"1\":{\"90\":1}}],[\"获取返回的主键\",{\"1\":{\"81\":1}}],[\"获取请求头中的令牌\",{\"1\":{\"93\":1}}],[\"获取请求参数\",{\"1\":{\"68\":2}}],[\"获取请求数据\",{\"1\":{\"67\":1}}],[\"获取服务响应数据\",{\"1\":{\"45\":1}}],[\"获取服务器响应数据\",{\"1\":{\"45\":1}}],[\"获取\",{\"1\":{\"40\":1,\"228\":1,\"230\":1,\"560\":1,\"561\":1,\"565\":1}}],[\"获取键盘上每一个按键的编号\",{\"1\":{\"28\":1}}],[\"获取图像对象\",{\"1\":{\"22\":1}}],[\"获取列的属性\",{\"1\":{\"11\":1}}],[\"获取preparedstatement\",{\"1\":{\"8\":1}}],[\"获取数据库连接池对象\",{\"1\":{\"11\":1}}],[\"获取数据库的连接\",{\"1\":{\"4\":1}}],[\"获取数据\",{\"1\":{\"7\":1}}],[\"获取执行sql对象\",{\"1\":{\"2\":1,\"5\":1}}],[\"获取连接时最大等待时间\",{\"1\":{\"677\":1}}],[\"获取连接\",{\"1\":{\"2\":1,\"10\":1,\"11\":1,\"78\":1}}],[\"魔术前锋保罗\",{\"1\":{\"651\":1}}],[\"据著名nba记者沙姆斯\",{\"1\":{\"651\":1}}],[\"据多方消息源报道\",{\"1\":{\"651\":1}}],[\"班凯罗在刚刚结束的赛季场均能够砍下20\",{\"1\":{\"651\":1}}],[\"班凯罗承诺将代表美国男篮参加2023年男篮世界杯\",{\"1\":{\"651\":1}}],[\"班凯罗承诺代表美国男篮打世界杯\",{\"1\":{\"651\":1}}],[\"班长做了所有标记\",{\"1\":{\"564\":1}}],[\"场均登场12\",{\"1\":{\"651\":1}}],[\"场景设定和问题复现\",{\"0\":{\"582\":1},\"1\":{\"542\":1}}],[\"场景概念\",{\"1\":{\"439\":1}}],[\"场景需求\",{\"1\":{\"236\":1,\"572\":1}}],[\"场景3\",{\"1\":{\"224\":1,\"558\":1}}],[\"场景2\",{\"1\":{\"224\":1,\"390\":1,\"439\":1,\"558\":1}}],[\"场景1\",{\"1\":{\"224\":1,\"390\":1,\"439\":1,\"558\":1}}],[\"场景\",{\"1\":{\"34\":1,\"99\":1,\"664\":1}}],[\"罗斯与尼克斯签下3年4300万美元的续约合同\",{\"1\":{\"651\":1}}],[\"罗斯成为完全自由球员\",{\"1\":{\"651\":1}}],[\"罗斯成自由球员\",{\"1\":{\"651\":1}}],[\"罗斯下赛季的球队选项\",{\"1\":{\"651\":1}}],[\"尼克斯拒绝执行德里克\",{\"1\":{\"651\":1}}],[\"尼克斯拒绝执行罗斯球队选项\",{\"1\":{\"651\":1}}],[\"粽里觅杨梅\",{\"1\":{\"651\":1}}],[\"酒中喜桃子\",{\"1\":{\"651\":1}}],[\"玉台新咏\",{\"1\":{\"651\":1}}],[\"玉麒麟\",{\"1\":{\"370\":1}}],[\"美食家苏轼还发明了杨梅粽\",{\"1\":{\"651\":1}}],[\"古人其实早就喜欢把各种果干放进粽子里\",{\"1\":{\"651\":1}}],[\"古老的实现类\",{\"1\":{\"169\":1,\"179\":1}}],[\"豆沙的\",{\"1\":{\"651\":1}}],[\"豆瓣电影\",{\"1\":{\"356\":1}}],[\"豆瓣电影top250\",{\"1\":{\"334\":1}}],[\"蛋黄的\",{\"1\":{\"651\":1}}],[\"肉馅的\",{\"1\":{\"651\":1}}],[\"咸的\",{\"1\":{\"651\":1}}],[\"甜的\",{\"1\":{\"651\":1}}],[\"听风入夏粽香佐茶\",{\"1\":{\"651\":1}}],[\"艾草凉粉\",{\"1\":{\"651\":1}}],[\"印花蛋\",{\"1\":{\"651\":1}}],[\"螃蟹粽\",{\"1\":{\"651\":1}}],[\"民当端午民俗文化旅游节在南浔区和孚镇民当村开幕\",{\"1\":{\"651\":1}}],[\"暨第七届江南\",{\"1\":{\"651\":1}}],[\"端午至味\",{\"1\":{\"651\":1}}],[\"端午有旅行路上的见闻\",{\"1\":{\"651\":1}}],[\"端午\",{\"1\":{\"651\":1}}],[\"端口号设置\",{\"1\":{\"674\":1,\"675\":1}}],[\"端口号等\",{\"1\":{\"671\":1}}],[\"端口号\",{\"1\":{\"353\":1,\"667\":1}}],[\"端口\",{\"1\":{\"90\":1}}],[\"端口的配置等\",{\"1\":{\"49\":1}}],[\"浙江省湖州市\",{\"1\":{\"651\":1}}],[\"江南水乡\",{\"1\":{\"651\":2}}],[\"山东队也是凭借这场平局\",{\"1\":{\"651\":1}}],[\"山东成功上岸\",{\"1\":{\"651\":1}}],[\"山东北部等地气温上升迅猛\",{\"1\":{\"651\":1}}],[\"山东中北部等地部分地区最高气温可达40℃左右\",{\"1\":{\"651\":1}}],[\"气象监测显示\",{\"1\":{\"651\":1}}],[\"河北中部\",{\"1\":{\"651\":1}}],[\"河北中南部\",{\"1\":{\"651\":1}}],[\"河南\",{\"1\":{\"17\":1}}],[\"黄淮等地将继续出现35℃以上的高温天气\",{\"1\":{\"651\":1}}],[\"黄色的地方贴上气球\",{\"1\":{\"564\":1}}],[\"华而不实的东西\",{\"1\":{\"651\":1}}],[\"华北\",{\"1\":{\"651\":1}}],[\"华库\",{\"1\":{\"460\":1}}],[\"云量也会增多\",{\"1\":{\"651\":1}}],[\"连续的项目\",{\"1\":{\"669\":1}}],[\"连续数天的高温在6月也比较常见\",{\"1\":{\"651\":1}}],[\"连接数据库\",{\"1\":{\"539\":1}}],[\"连接数据库的密码\",{\"1\":{\"76\":1}}],[\"连接数据库的用户名\",{\"1\":{\"76\":1}}],[\"连接数据库的url\",{\"1\":{\"76\":1}}],[\"连接池最大连接数量\",{\"1\":{\"677\":1}}],[\"连接池的最小空闲数量\",{\"1\":{\"677\":1}}],[\"连接池类型\",{\"1\":{\"677\":1}}],[\"连接池和mybatis核心组件配置\",{\"1\":{\"628\":1}}],[\"连接池配置\",{\"1\":{\"461\":1,\"652\":1}}],[\"连接池\",{\"1\":{\"244\":1,\"606\":1}}],[\"连接的对象存进集合\",{\"1\":{\"192\":1,\"203\":1}}],[\"连接服务器\",{\"1\":{\"192\":1,\"203\":1}}],[\"连接当前字符串与str\",{\"1\":{\"166\":1}}],[\"连接点\",{\"1\":{\"101\":1,\"211\":1,\"584\":1}}],[\"刚过6月就出现极端高温天\",{\"1\":{\"651\":1}}],[\"观象台1951年建站以来极端最高气温为41\",{\"1\":{\"651\":1}}],[\"突出\",{\"1\":{\"651\":1}}],[\"突出显示当前行\",{\"1\":{\"286\":1}}],[\"烤验\",{\"1\":{\"651\":1}}],[\"截至24日13时51分\",{\"1\":{\"651\":1}}],[\"截取字符串\",{\"1\":{\"317\":1}}],[\"热晴不减\",{\"1\":{\"651\":1}}],[\"热部署\",{\"1\":{\"48\":1}}],[\"徐婧\",{\"1\":{\"651\":1}}],[\"陈杭\",{\"1\":{\"651\":1}}],[\"陈八\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"炎值\",{\"1\":{\"651\":1}}],[\"今年\",{\"1\":{\"651\":1}}],[\"今年早些时候\",{\"1\":{\"651\":1}}],[\"今年高考开考了\",{\"1\":{\"651\":1}}],[\"今年夏天全国大部分地区气温都比常年同期要偏高\",{\"1\":{\"651\":1}}],[\"今年夏天还会有多少高温天呢\",{\"1\":{\"651\":1}}],[\"今年夏天\",{\"1\":{\"651\":1}}],[\"今年4月\",{\"1\":{\"651\":1}}],[\"今天是\",{\"1\":{\"334\":4}}],[\"培育乡村振兴新动能\",{\"1\":{\"651\":1}}],[\"拓展产业链发展产业集群\",{\"1\":{\"651\":1}}],[\"近几个月来\",{\"1\":{\"651\":1}}],[\"近日\",{\"1\":{\"651\":1}}],[\"近似的\",{\"1\":{\"515\":1}}],[\"习近平总书记来到柏桥村考察调研\",{\"1\":{\"651\":1}}],[\"习近平总书记指出\",{\"1\":{\"651\":1}}],[\"习惯上命名为\",{\"1\":{\"493\":1}}],[\"习惯上\",{\"1\":{\"131\":1}}],[\"推进中国式现代化\",{\"1\":{\"651\":1}}],[\"推荐配置类\",{\"1\":{\"623\":1}}],[\"推荐在xml文件中编写sql语句\",{\"1\":{\"493\":1}}],[\"推荐设置第二个\",{\"1\":{\"248\":1}}],[\"推荐事务中只有查询代码\",{\"1\":{\"245\":1}}],[\"推荐命名规则\",{\"1\":{\"143\":1}}],[\"推荐\",{\"1\":{\"96\":1,\"331\":1}}],[\"展示了聊天机器人技术所具有的巨大潜力\",{\"1\":{\"651\":1}}],[\"展示功能\",{\"1\":{\"648\":1}}],[\"展示库表\",{\"1\":{\"539\":1}}],[\"微软与openai之间既有合作\",{\"1\":{\"651\":1}}],[\"微软于今年1月宣布将再向openai投资100亿美元\",{\"1\":{\"651\":1}}],[\"微软持有openai的大部分股份\",{\"1\":{\"651\":1}}],[\"微软股价累计上涨了45\",{\"1\":{\"651\":1}}],[\"微软股价创下历史新高\",{\"1\":{\"651\":1}}],[\"微软股价历史新高\",{\"1\":{\"651\":1}}],[\"微软现在是openai背后的金主\",{\"1\":{\"651\":1}}],[\"微创新超实用\",{\"1\":{\"651\":1}}],[\"微头条前端搭建\",{\"0\":{\"649\":1},\"1\":{\"644\":1}}],[\"微头条业务简介\",{\"0\":{\"646\":1},\"1\":{\"644\":1}}],[\"微头条案例介绍\",{\"0\":{\"645\":1},\"1\":{\"644\":1}}],[\"微观\",{\"1\":{\"617\":1}}],[\"终极实战\",{\"0\":{\"643\":1,\"703\":1}}],[\"终端美化相关\",{\"0\":{\"278\":1}}],[\"拆分配置\",{\"1\":{\"628\":1}}],[\"拆分成很多个模块\",{\"1\":{\"544\":1}}],[\"互不影响\",{\"1\":{\"628\":1}}],[\"盛放controller\",{\"1\":{\"621\":1}}],[\"盛放service\",{\"1\":{\"621\":1}}],[\"盛放组件\",{\"1\":{\"620\":1}}],[\"灵活配置等好处\",{\"1\":{\"619\":1}}],[\"灵活配置\",{\"1\":{\"619\":1}}],[\"宏观\",{\"1\":{\"617\":1}}],[\"枚举类提供\",{\"1\":{\"612\":1}}],[\"枚举等\",{\"1\":{\"113\":1}}],[\"碰到它不回滚\",{\"1\":{\"610\":1}}],[\"休眠4秒\",{\"1\":{\"609\":1}}],[\"概括来说就是一句话\",{\"1\":{\"609\":1}}],[\"概念说明\",{\"1\":{\"489\":1}}],[\"概念梳理maven工程的gavp\",{\"0\":{\"398\":1}}],[\"概念\",{\"1\":{\"40\":2,\"94\":1,\"415\":1,\"481\":1}}],[\"撤销它已做的操作\",{\"1\":{\"609\":1}}],[\"离它最近的\",{\"1\":{\"608\":1}}],[\"情景模拟代码如下\",{\"1\":{\"610\":1}}],[\"情景五\",{\"1\":{\"598\":1}}],[\"情景四\",{\"1\":{\"598\":1}}],[\"情景三\",{\"1\":{\"598\":1}}],[\"情景二\",{\"1\":{\"598\":1}}],[\"情景一\",{\"1\":{\"598\":1}}],[\"情况1\",{\"1\":{\"235\":1,\"238\":1,\"564\":1,\"567\":1,\"573\":1,\"621\":1}}],[\"情况四\",{\"1\":{\"231\":1,\"564\":1}}],[\"情况3\",{\"1\":{\"231\":1,\"564\":1}}],[\"情况三\",{\"1\":{\"231\":1,\"564\":1}}],[\"情况2\",{\"1\":{\"231\":1,\"235\":1,\"238\":1,\"564\":1,\"567\":1,\"573\":1,\"621\":1}}],[\"固定的key\",{\"1\":{\"668\":1}}],[\"固定的包\",{\"1\":{\"590\":1}}],[\"固定功能的key\",{\"1\":{\"668\":1}}],[\"固定名称\",{\"1\":{\"590\":1}}],[\"固定开头\",{\"1\":{\"590\":1}}],[\"纯净实现类\",{\"1\":{\"588\":1}}],[\"兄弟两个拜把子模式\",{\"1\":{\"587\":1}}],[\"授权等\",{\"1\":{\"584\":1}}],[\"易于维护\",{\"1\":{\"584\":2}}],[\"易用\",{\"1\":{\"46\":1}}],[\"却为业务模块所共同调用的逻辑或责任封装起来\",{\"1\":{\"584\":1}}],[\"剖解开封装的对象内部\",{\"1\":{\"584\":1}}],[\"横切关注点的一个特点是\",{\"1\":{\"584\":1}}],[\"横切关注点\",{\"1\":{\"584\":1}}],[\"横切\",{\"1\":{\"584\":1}}],[\"附加功能由代理类中的代理方法来实现\",{\"1\":{\"583\":1}}],[\"附加功能代码重复\",{\"1\":{\"582\":1}}],[\"房东\",{\"1\":{\"583\":1}}],[\"房产中介是买卖双方的代理\",{\"1\":{\"583\":1}}],[\"套用\",{\"1\":{\"583\":1}}],[\"扮演代理这个角色的类\",{\"1\":{\"583\":1}}],[\"太监是大臣和皇上之间的代理\",{\"1\":{\"583\":1}}],[\"合作伙伴找大老板谈合作要约见面时间需要经过秘书\",{\"1\":{\"583\":1}}],[\"合并多个druiddatasource的监控数据\",{\"1\":{\"677\":1}}],[\"合并到第三个链表中\",{\"1\":{\"371\":1}}],[\"合并之后的链表依然有序\",{\"1\":{\"371\":1}}],[\"合并两个有序的单链表\",{\"1\":{\"371\":1}}],[\"合并字符串与凭借字符串不同\",{\"1\":{\"317\":1}}],[\"合并字符串\",{\"1\":{\"317\":1}}],[\"冗余\",{\"1\":{\"582\":1}}],[\"掺杂其他功能\",{\"1\":{\"582\":1,\"588\":1}}],[\"抑制编译时产生的警告消息\",{\"1\":{\"566\":1}}],[\"扩展jsr\",{\"1\":{\"566\":1}}],[\"扩展构建管理和插件配置\",{\"0\":{\"450\":1},\"1\":{\"436\":1}}],[\"扫描并加载组件\",{\"1\":{\"665\":1}}],[\"扫描ioc\",{\"1\":{\"568\":1}}],[\"扫描\",{\"1\":{\"564\":1}}],[\"扫描理解\",{\"1\":{\"564\":1}}],[\"扫描路径即可\",{\"1\":{\"461\":1}}],[\"墙上的标记相当于我们在代码中使用的注解\",{\"1\":{\"564\":1}}],[\"吴十\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"吴用\",{\"1\":{\"370\":1}}],[\"刘七\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"刘德华\",{\"1\":{\"176\":2}}],[\"女\",{\"1\":{\"562\":3,\"568\":3,\"575\":3}}],[\"泛型类型就是当前工厂要生产的对象的类型\",{\"1\":{\"561\":1}}],[\"泛指以\",{\"1\":{\"547\":1}}],[\"介绍\",{\"1\":{\"558\":3,\"559\":1,\"628\":2}}],[\"介绍版本号乐观锁技术的实现流程\",{\"1\":{\"483\":1}}],[\"及其依赖项的注册表\",{\"1\":{\"555\":1}}],[\"及时雨\",{\"1\":{\"370\":1}}],[\"次数\",{\"1\":{\"552\":1}}],[\"次版本号\",{\"1\":{\"398\":2,\"442\":2}}],[\"政府管理我们的一生\",{\"1\":{\"552\":1}}],[\"轻装上战场\",{\"1\":{\"651\":1}}],[\"轻松的对组件进行配置和管理\",{\"1\":{\"551\":1}}],[\"轻量级\",{\"1\":{\"492\":1}}],[\"充当一个组件容器\",{\"1\":{\"551\":1}}],[\"综上所述\",{\"1\":{\"551\":1,\"584\":1,\"669\":1}}],[\"告知spring\",{\"1\":{\"551\":1}}],[\"告诉spring当前通知方法要套用到哪个目标方法上\",{\"1\":{\"589\":1}}],[\"告诉mybatis我们的mapper配置文件的位置\",{\"1\":{\"518\":1,\"519\":1}}],[\"告诉浏览器为当前页面所在的域设置cookie\",{\"1\":{\"64\":1}}],[\"告诉客户端应该继续请求或者它已经完成则忽略它\",{\"1\":{\"64\":1}}],[\"帮我们简单\",{\"1\":{\"662\":1}}],[\"帮我们管理组件呢\",{\"1\":{\"551\":1}}],[\"帮助开发者快速搭建一个具备特定功能的应用程序原型\",{\"1\":{\"665\":1}}],[\"帮助开发人员更高效\",{\"1\":{\"545\":1}}],[\"帮助插入uuid作为字符串类型主键示例\",{\"1\":{\"512\":1}}],[\"帮助我们遍历原来的链表\",{\"1\":{\"371\":1}}],[\"帮助遍历整个链表\",{\"1\":{\"370\":1}}],[\"企业应用程序变得容易\",{\"1\":{\"549\":1}}],[\"批处理等等\",{\"1\":{\"549\":1}}],[\"批量配置文件注入\",{\"0\":{\"670\":1},\"1\":{\"660\":1}}],[\"批量更新时需要注意\",{\"1\":{\"529\":1}}],[\"批量更新\",{\"1\":{\"471\":2}}],[\"批量修改插入\",{\"1\":{\"471\":2}}],[\"批量\",{\"1\":{\"471\":2}}],[\"批量查询\",{\"1\":{\"466\":1,\"471\":1}}],[\"批量删除\",{\"1\":{\"85\":1,\"464\":1,\"471\":1}}],[\"丰富的生态系统\",{\"1\":{\"549\":1}}],[\"腾讯\",{\"1\":{\"547\":2}}],[\"腾讯面试题\",{\"1\":{\"371\":1}}],[\"狭义的\",{\"1\":{\"547\":2}}],[\"智驾上的核心模块还来自于供应商方案\",{\"1\":{\"651\":1}}],[\"智者见智\",{\"1\":{\"545\":1}}],[\"智多星\",{\"1\":{\"370\":1}}],[\"莎士比亚说\",{\"1\":{\"545\":1}}],[\"架构风险\",{\"1\":{\"545\":1}}],[\"迁移和升级\",{\"1\":{\"545\":1}}],[\"初步实现\",{\"0\":{\"588\":1},\"1\":{\"542\":1}}],[\"初始状态下\",{\"1\":{\"424\":1}}],[\"初始设置\",{\"0\":{\"423\":1}}],[\"初始→1\",{\"1\":{\"398\":1,\"442\":1}}],[\"初始化时建立物理连接的个数\",{\"1\":{\"677\":1}}],[\"初始化两个容器在ssm整合中可以实现关注点分离\",{\"1\":{\"619\":1}}],[\"初始化操作\",{\"1\":{\"552\":1}}],[\"初始化完毕\",{\"1\":{\"423\":1}}],[\"初始化\",{\"1\":{\"253\":1}}],[\"初始化和销毁方法指定\",{\"1\":{\"237\":1,\"573\":1}}],[\"初始化逻辑\",{\"1\":{\"232\":1,\"560\":1,\"565\":2}}],[\"初始化块\",{\"0\":{\"132\":1}}],[\"初始化化是一定要给行数\",{\"1\":{\"124\":1}}],[\"初始化数组与给数组赋值分开进行\",{\"1\":{\"124\":1}}],[\"初始化数组与给数组赋值同时进行\",{\"1\":{\"124\":1}}],[\"初始化方法和销毁方法都只调用一次\",{\"1\":{\"93\":1}}],[\"初始化菜单\",{\"1\":{\"28\":1}}],[\"初始化菜单那\",{\"1\":{\"28\":1}}],[\"初始化页面\",{\"1\":{\"28\":2}}],[\"信息\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"信息声明配置\",{\"0\":{\"557\":1},\"1\":{\"542\":1}}],[\"信号量\",{\"1\":{\"483\":1}}],[\"技术\",{\"1\":{\"663\":1}}],[\"技术困难\",{\"1\":{\"582\":1}}],[\"技术栈介绍\",{\"0\":{\"647\":1},\"1\":{\"644\":1}}],[\"技术栈\",{\"1\":{\"547\":2}}],[\"技术体系结构\",{\"0\":{\"543\":1},\"1\":{\"542\":1}}],[\"技巧\",{\"1\":{\"478\":1}}],[\"搜索标题关键字\",{\"1\":{\"656\":1}}],[\"搜索\",{\"1\":{\"539\":1}}],[\"搜索引擎优化\",{\"1\":{\"250\":1}}],[\"半自动\",{\"1\":{\"537\":4}}],[\"半分比\",{\"1\":{\"34\":1}}],[\"希望有一个办法能够一劳永逸\",{\"1\":{\"532\":1}}],[\"希望把多个实体类对象放在list集合中返回\",{\"1\":{\"511\":1}}],[\"抽取重复的sql片段\",{\"1\":{\"530\":1}}],[\"抽象基类|\",{\"1\":{\"181\":1}}],[\"抽象基类\",{\"1\":{\"181\":1}}],[\"抽象方法\",{\"1\":{\"138\":1,\"139\":1}}],[\"抽象类作为多个子类的通用模板\",{\"1\":{\"138\":1}}],[\"抽象类体现的就是一种模板模式的设计\",{\"1\":{\"138\":1}}],[\"抽象类是用来实现模型化那些父类无法确定全部实现\",{\"1\":{\"138\":1}}],[\"抽象类\",{\"1\":{\"138\":1}}],[\"抽象类abstract\",{\"0\":{\"138\":1}}],[\"抽象的\",{\"1\":{\"138\":1}}],[\"遇到的第一个满足条件的分支会被采纳\",{\"1\":{\"528\":1}}],[\"遇到非法字符就抛出异常\",{\"1\":{\"317\":1}}],[\"借助功能强大的基于\",{\"1\":{\"524\":1}}],[\"经济型\",{\"1\":{\"651\":1}}],[\"经不起推敲\",{\"1\":{\"651\":1}}],[\"经过十多年的发展\",{\"1\":{\"547\":1}}],[\"经过编译\",{\"1\":{\"338\":1}}],[\"经过编译后生成\",{\"1\":{\"106\":1}}],[\"经常遇到很多按照很多查询条件进行查询的情况\",{\"1\":{\"524\":1}}],[\"讲师对应的学生或者学生对应的讲师都是对多关系\",{\"1\":{\"517\":1}}],[\"夫妻一方对应另一方\",{\"1\":{\"517\":1}}],[\"夫妻关系\",{\"1\":{\"517\":1}}],[\"老师和学生\",{\"1\":{\"517\":1}}],[\"博文\",{\"1\":{\"517\":1}}],[\"博客\",{\"1\":{\"517\":1}}],[\"博客内图标设置链接直接复制名字使用\",{\"1\":{\"0\":1}}],[\"像\",{\"1\":{\"515\":2}}],[\"像string\",{\"1\":{\"174\":1}}],[\"许多复杂的映射问题都能迎刃而解\",{\"1\":{\"515\":1}}],[\"致力于减少使用成本\",{\"1\":{\"515\":1}}],[\"专门声明一个resultmap设定column到property之间的对应关系\",{\"1\":{\"513\":1}}],[\"专门为\",{\"1\":{\"221\":2,\"552\":1}}],[\"没法封装到实体类对象中\",{\"1\":{\"510\":1}}],[\"没有传或者过期\",{\"1\":{\"657\":1}}],[\"没有过期\",{\"1\":{\"655\":1}}],[\"没有任何理由丢弃它或重新创建另一个实例\",{\"1\":{\"628\":1}}],[\"没有接口\",{\"1\":{\"594\":1}}],[\"没有统一管理\",{\"1\":{\"583\":1}}],[\"没有统计头节点\",{\"1\":{\"371\":1}}],[\"没有\",{\"1\":{\"566\":1,\"590\":1}}],[\"没有更多功能\",{\"1\":{\"552\":1}}],[\"没有set子句的update语句会导致sql语法错误\",{\"1\":{\"526\":1}}],[\"没有where子句\",{\"1\":{\"525\":1}}],[\"没有真正的删除语句\",{\"1\":{\"481\":1}}],[\"没有修改方法签名的功能加强\",{\"1\":{\"398\":1,\"442\":1}}],[\"没有找到编号=\",{\"1\":{\"370\":1,\"371\":1}}],[\"没有达到复用的效果\",{\"1\":{\"369\":1}}],[\"没有数据\",{\"1\":{\"367\":2,\"370\":2}}],[\"没有棋子\",{\"1\":{\"366\":1}}],[\"没有错\",{\"1\":{\"351\":1}}],[\"没有错误时执行\",{\"1\":{\"334\":1}}],[\"没有生成a\",{\"1\":{\"338\":1}}],[\"没有全部完成\",{\"1\":{\"254\":1}}],[\"没有浏览历史\",{\"1\":{\"250\":1}}],[\"没有key\",{\"1\":{\"235\":1,\"567\":1}}],[\"没有指定类型\",{\"1\":{\"226\":1,\"559\":1}}],[\"没有参数\",{\"1\":{\"214\":1,\"590\":1}}],[\"没有的话\",{\"1\":{\"171\":1}}],[\"没有的话返回\",{\"1\":{\"171\":1}}],[\"没有使用多态\",{\"1\":{\"147\":1}}],[\"没有则向上找\",{\"1\":{\"145\":3}}],[\"没有重写所有抽象方法\",{\"1\":{\"138\":1}}],[\"没有方法体\",{\"1\":{\"138\":1}}],[\"没有请求体\",{\"1\":{\"63\":1}}],[\"没有按照xy放置还需要在initjframe\",{\"1\":{\"28\":2}}],[\"没有权重不会去分\",{\"1\":{\"24\":1}}],[\"没有最大最小化按钮\",{\"1\":{\"23\":1}}],[\"适用于sql查询返回的各个字段综合起来并不和任何一个现有的实体类对应\",{\"1\":{\"510\":1}}],[\"做了下面的配置\",{\"1\":{\"509\":1}}],[\"做一个校验\",{\"1\":{\"371\":1}}],[\"映射等\",{\"1\":{\"669\":1}}],[\"映射方式\",{\"1\":{\"537\":1}}],[\"映射语句的结果等\",{\"1\":{\"534\":1}}],[\"映射语句中的强大的动态\",{\"1\":{\"524\":1}}],[\"映射文件时\",{\"1\":{\"532\":1}}],[\"映射文件只有很少的几个顶级元素\",{\"1\":{\"515\":1}}],[\"映射order的属性\",{\"1\":{\"519\":1}}],[\"映射\",{\"1\":{\"519\":1}}],[\"映射customer本身的属性\",{\"1\":{\"519\":1}}],[\"映射查询语句\",{\"1\":{\"515\":1}}],[\"映射删除语句\",{\"1\":{\"515\":1}}],[\"映射更新语句\",{\"1\":{\"515\":1}}],[\"映射插入语句\",{\"1\":{\"515\":1}}],[\"映射的类型\",{\"1\":{\"508\":1}}],[\"映射器实例不应该交给ioc容器管理\",{\"1\":{\"628\":1}}],[\"映射器接口的实例是从\",{\"1\":{\"628\":1}}],[\"映射器是一些绑定映射语句的接口\",{\"1\":{\"628\":1}}],[\"映射器的\",{\"1\":{\"515\":1}}],[\"映射器\",{\"1\":{\"496\":1}}],[\"采取了特殊的命名风格\",{\"1\":{\"508\":1}}],[\"采用无锁数据结构\",{\"1\":{\"483\":1}}],[\"采用无布局格式后\",{\"1\":{\"21\":1}}],[\"采用\",{\"1\":{\"468\":1}}],[\"采用代码或者\",{\"1\":{\"460\":1}}],[\"采用负数索引从\",{\"1\":{\"305\":1}}],[\"采用整数索引从0开始往右递增\",{\"1\":{\"305\":1}}],[\"采用flex布局的元素\",{\"1\":{\"255\":1}}],[\"见下面的例子\",{\"1\":{\"508\":1}}],[\"见下面步骤compare\",{\"1\":{\"175\":1}}],[\"别名等\",{\"1\":{\"628\":1}}],[\"别名对应\",{\"1\":{\"513\":1}}],[\"别名问题\",{\"1\":{\"508\":1}}],[\"别名\",{\"1\":{\"508\":2,\"628\":1}}],[\"｜\",{\"1\":{\"508\":2}}],[\"细节总结\",{\"1\":{\"667\":1}}],[\"细节解释\",{\"1\":{\"508\":1}}],[\"细节没有被屏蔽\",{\"1\":{\"243\":1,\"602\":1}}],[\"肯定不用$\",{\"1\":{\"498\":1}}],[\"底层mybatis做的是字符串拼接操作\",{\"1\":{\"498\":1}}],[\"底层使用char\",{\"1\":{\"165\":1,\"167\":1}}],[\"粘贴\",{\"1\":{\"493\":1}}],[\"频繁修改的情况多见\",{\"1\":{\"492\":1}}],[\"频繁插入删除\",{\"1\":{\"169\":1}}],[\"夹杂在java代码中耦合度高\",{\"1\":{\"492\":1}}],[\"社区会持续更新开源项目\",{\"1\":{\"491\":1}}],[\"免除了几乎所有的\",{\"1\":{\"491\":1}}],[\"免除原生的js中的dom操作\",{\"1\":{\"42\":1}}],[\"阻止恶意的全表更新删除\",{\"1\":{\"485\":1}}],[\"阻塞其他线程的访问\",{\"1\":{\"483\":1}}],[\"阻塞是一个临时状态\",{\"1\":{\"196\":1,\"207\":1}}],[\"阻塞<\",{\"1\":{\"196\":1,\"207\":1}}],[\"阻塞式的方法\",{\"1\":{\"191\":1,\"202\":1}}],[\"失败返回504\",{\"1\":{\"655\":1}}],[\"失败\",{\"1\":{\"484\":1,\"655\":6}}],[\"证明有人已经修改了\",{\"1\":{\"483\":1}}],[\"证明没有人修改数据\",{\"1\":{\"483\":1}}],[\"锁和钥匙\",{\"1\":{\"517\":1}}],[\"锁机制\",{\"1\":{\"483\":1}}],[\"锁阻塞\",{\"1\":{\"196\":1,\"207\":1}}],[\"认为并发冲突的概率较低\",{\"1\":{\"483\":1}}],[\"认干爹模式\",{\"1\":{\"587\":1}}],[\"认干爹\",{\"1\":{\"211\":1,\"583\":1}}],[\"悲观锁实现方案和技术\",{\"1\":{\"483\":1}}],[\"悲观锁和乐观锁是两种解决并发数据问题的思路\",{\"1\":{\"483\":1}}],[\"悲观锁和乐观锁场景和介绍\",{\"0\":{\"483\":1},\"1\":{\"459\":1}}],[\"悲观锁的效率相对较低\",{\"1\":{\"483\":1}}],[\"悲观锁的核心思想是\",{\"1\":{\"483\":1}}],[\"悲观锁的基本思想是\",{\"1\":{\"483\":1}}],[\"悲观锁\",{\"1\":{\"483\":1}}],[\"乐观锁生效\",{\"1\":{\"484\":1}}],[\"乐观锁字段\",{\"1\":{\"484\":1}}],[\"乐观锁字段添加\",{\"1\":{\"484\":1}}],[\"乐观锁会导致较多的冲突处理和重试操作\",{\"1\":{\"483\":1}}],[\"乐观锁通过避免加锁操作\",{\"1\":{\"483\":1}}],[\"乐观锁的核心思想是\",{\"1\":{\"483\":1}}],[\"乐观锁的基本思想是\",{\"1\":{\"483\":1}}],[\"乐观锁\",{\"1\":{\"483\":1,\"651\":3,\"652\":1,\"653\":1}}],[\"乐观锁和悲观锁是在并发编程中用于处理并发访问和资源竞争的两种不同的锁机制\",{\"1\":{\"483\":1}}],[\"乐观锁实现方案和技术\",{\"1\":{\"483\":1}}],[\"乐观锁实现\",{\"0\":{\"482\":1},\"1\":{\"459\":1}}],[\"演示乐观锁生效场景\",{\"1\":{\"484\":1}}],[\"演示逻辑删除操作\",{\"1\":{\"481\":1}}],[\"演示代码\",{\"1\":{\"478\":1}}],[\"假设作者\",{\"1\":{\"517\":1}}],[\"假删除\",{\"1\":{\"481\":1}}],[\"假如有maven项目a\",{\"1\":{\"415\":1}}],[\"真正放在ioc容器中的是代理类的对象\",{\"1\":{\"598\":1}}],[\"真正的无序性\",{\"1\":{\"172\":1}}],[\"真实删除\",{\"1\":{\"481\":1}}],[\"广东茂名高州市根子镇柏桥村的荔枝迎来了丰收\",{\"1\":{\"651\":1}}],[\"广告商找大明星拍广告需要经过经纪人\",{\"1\":{\"583\":1}}],[\"广义上的\",{\"1\":{\"547\":1}}],[\"广义的\",{\"1\":{\"547\":1}}],[\"广义表\",{\"1\":{\"365\":1}}],[\"广泛应用于分布式系统中\",{\"1\":{\"480\":1}}],[\"精明如我\",{\"1\":{\"651\":1}}],[\"精确到毫秒级\",{\"1\":{\"480\":1}}],[\"精简版\",{\"1\":{\"25\":1}}],[\"雪花算法生成的数字\",{\"1\":{\"480\":1}}],[\"雪花算法生成的id是一个64位的整数\",{\"1\":{\"480\":1}}],[\"雪花算法是一种简单但有效的生成唯一id的算法\",{\"1\":{\"480\":1}}],[\"雪花算法依赖于系统的时钟\",{\"1\":{\"480\":1}}],[\"雪花算法的工作方式如下\",{\"1\":{\"480\":1}}],[\"雪花算法可以在分布式系统中生成全局唯一的id\",{\"1\":{\"480\":1}}],[\"雪花算法\",{\"1\":{\"480\":1}}],[\"雪花算法使用场景\",{\"1\":{\"480\":1}}],[\"理解jsr系列注解\",{\"1\":{\"566\":1}}],[\"理解点\",{\"1\":{\"483\":1}}],[\"理解\",{\"1\":{\"480\":1}}],[\"理解和介绍\",{\"1\":{\"480\":1}}],[\"理解继承和聚合作用\",{\"1\":{\"457\":1}}],[\"箭头符号\",{\"1\":{\"478\":2}}],[\"箭头操作符\",{\"1\":{\"17\":1}}],[\"示例\",{\"1\":{\"478\":3}}],[\"示例代码\",{\"1\":{\"478\":2}}],[\"括起来\",{\"1\":{\"478\":2}}],[\"受影响的行数\",{\"1\":{\"476\":2,\"477\":1}}],[\"策略插入\",{\"1\":{\"471\":1}}],[\"甚至连\",{\"1\":{\"461\":1}}],[\"甚至找到下载链接还发现需要通过特殊的工具下载\",{\"1\":{\"387\":1}}],[\"驱动程序等待数据库返回请求结果的秒数\",{\"1\":{\"515\":2}}],[\"驱动类\",{\"1\":{\"461\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"驱动实现依赖\",{\"1\":{\"411\":1}}],[\"邮箱\",{\"1\":{\"461\":1}}],[\"瀚高数据库\",{\"1\":{\"460\":1}}],[\"神通数据库\",{\"1\":{\"460\":1}}],[\"虚谷数据库\",{\"1\":{\"460\":1}}],[\"达梦数据库\",{\"1\":{\"460\":1}}],[\"物理删除\",{\"1\":{\"481\":1}}],[\"物理分页\",{\"1\":{\"460\":1}}],[\"物理+数据链路层\",{\"1\":{\"189\":1,\"200\":1}}],[\"种主键策略\",{\"1\":{\"460\":1}}],[\"满足各类使用需求\",{\"1\":{\"460\":1}}],[\"损耗小\",{\"1\":{\"460\":1}}],[\"防全局修改和删除\",{\"1\":{\"652\":1}}],[\"防全表更新和删除实现\",{\"0\":{\"485\":1},\"1\":{\"459\":1}}],[\"防止token被篡改\",{\"1\":{\"92\":1}}],[\"防止sql注入\",{\"1\":{\"5\":1,\"9\":1,\"80\":1}}],[\"报告周期\",{\"1\":{\"450\":1}}],[\"报错\",{\"1\":{\"485\":1}}],[\"报错了\",{\"1\":{\"338\":1}}],[\"报错时会提示这个\",{\"1\":{\"135\":1}}],[\"脚本使用\",{\"1\":{\"449\":1}}],[\"姓\",{\"1\":{\"442\":1}}],[\"姓名\",{\"1\":{\"334\":1,\"461\":1}}],[\"姓名=\",{\"1\":{\"12\":1}}],[\"绝大部分原因都是java\",{\"1\":{\"440\":1}}],[\"绝对路径\",{\"1\":{\"334\":1}}],[\"友好提示\",{\"1\":{\"440\":1}}],[\"掌握目标\",{\"1\":{\"457\":1,\"540\":1,\"613\":1}}],[\"掌握软件安装\",{\"1\":{\"438\":1}}],[\"掌握安装\",{\"1\":{\"390\":1}}],[\"搭建sprintboot工程\",{\"0\":{\"652\":1},\"1\":{\"644\":1}}],[\"搭建一个三层架构案例\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"搭建一个电商平台项目\",{\"1\":{\"429\":1,\"455\":1}}],[\"搭建微服务maven工程架构\",{\"0\":{\"454\":1},\"1\":{\"436\":1}}],[\"订单对应用户都是对一关系\",{\"1\":{\"517\":1}}],[\"订单模块\",{\"1\":{\"456\":1}}],[\"订单查看等\",{\"1\":{\"429\":1,\"455\":1}}],[\"订单支付\",{\"1\":{\"429\":1,\"455\":1}}],[\"订单服务\",{\"1\":{\"429\":2,\"455\":3}}],[\"九\",{\"0\":{\"428\":1}}],[\"供其他工程使用\",{\"1\":{\"450\":1}}],[\"供开发人员部署自己\",{\"1\":{\"424\":2}}],[\"供开发人员下载使用的组仓库\",{\"1\":{\"424\":1}}],[\"供内部maven项目使用\",{\"1\":{\"421\":1}}],[\"启用spring\",{\"1\":{\"664\":1}}],[\"启用还是禁用\",{\"1\":{\"423\":1}}],[\"启动和测试\",{\"1\":{\"686\":1}}],[\"启动端口号\",{\"1\":{\"668\":1}}],[\"启动器\",{\"1\":{\"665\":1}}],[\"启动应用程序\",{\"1\":{\"664\":1}}],[\"启动项目\",{\"1\":{\"664\":1}}],[\"启动时自动解析实体表关系映射转换为\",{\"1\":{\"462\":1}}],[\"启动类和接口扫描\",{\"1\":{\"680\":1}}],[\"启动类和mybatis\",{\"1\":{\"652\":1}}],[\"启动类\",{\"1\":{\"461\":1,\"677\":1}}],[\"启动即会自动注入基本\",{\"1\":{\"460\":1}}],[\"启动线程\",{\"1\":{\"194\":1,\"195\":1,\"196\":1,\"205\":1,\"206\":1,\"207\":1}}],[\"启动测试即可\",{\"1\":{\"642\":1}}],[\"启动测试\",{\"0\":{\"638\":1},\"1\":{\"73\":1,\"615\":1,\"664\":1,\"677\":1,\"680\":1}}],[\"ˈneksəs\",{\"1\":{\"421\":1}}],[\"降低模块之间的耦合度\",{\"1\":{\"584\":1}}],[\"降低了组件之间的耦合性\",{\"1\":{\"551\":1}}],[\"降低了维护成本\",{\"1\":{\"545\":1}}],[\"降低了开发成本\",{\"1\":{\"545\":1}}],[\"降低了中央仓库的负荷\",{\"1\":{\"421\":1}}],[\"降低开发成本\",{\"1\":{\"545\":1}}],[\"降低中央仓库得负荷压力\",{\"1\":{\"421\":1}}],[\"降低外网带宽压力\",{\"1\":{\"421\":1}}],[\"便于减少系统的重复代码\",{\"1\":{\"584\":1}}],[\"便于在其他地方引用\",{\"1\":{\"564\":1}}],[\"便于后面引用\",{\"1\":{\"529\":1}}],[\"便于后续的数据分析和恢复\",{\"1\":{\"481\":1}}],[\"便于部署第三方构件\",{\"1\":{\"421\":1}}],[\"便于并行\",{\"1\":{\"16\":1}}],[\"八\",{\"0\":{\"420\":1,\"643\":1,\"703\":1}}],[\"八进制整数以0o开头\",{\"1\":{\"292\":1}}],[\"聚合演示\",{\"1\":{\"419\":1,\"453\":1}}],[\"聚合语法和实践\",{\"1\":{\"457\":1}}],[\"聚合语法\",{\"1\":{\"419\":1,\"453\":1}}],[\"聚合作用\",{\"1\":{\"419\":1,\"453\":1}}],[\"聚合可以帮助我们更好地管理一组相关的子项目\",{\"1\":{\"419\":1}}],[\"聚合是指将多个项目组织到一个父级项目中\",{\"1\":{\"419\":1,\"453\":1}}],[\"聚合概念\",{\"1\":{\"419\":1,\"453\":1}}],[\"准确的\",{\"1\":{\"418\":1,\"452\":1}}],[\"准备条件实体类\",{\"1\":{\"656\":1}}],[\"准备pojo\",{\"1\":{\"640\":1}}],[\"准备外部配置文件\",{\"1\":{\"628\":1}}],[\"准备dao\",{\"1\":{\"606\":1}}],[\"准备代码\",{\"1\":{\"596\":1}}],[\"准备接口\",{\"1\":{\"588\":1}}],[\"准备aop项目\",{\"1\":{\"582\":1}}],[\"准备spring项目和组件\",{\"1\":{\"564\":1}}],[\"准备factorybean实现类\",{\"1\":{\"561\":1}}],[\"准备两个引用关系的组件类即可\",{\"1\":{\"560\":1}}],[\"准备组件\",{\"1\":{\"573\":1}}],[\"准备组件类\",{\"1\":{\"557\":2,\"558\":3,\"564\":1}}],[\"准备组建类\",{\"1\":{\"557\":1}}],[\"准备项目pom\",{\"1\":{\"564\":1}}],[\"准备项目\",{\"1\":{\"557\":1,\"606\":1,\"625\":1}}],[\"准备工作\",{\"0\":{\"606\":1,\"640\":1},\"1\":{\"542\":1,\"596\":1,\"615\":1}}],[\"准备mybatis配置文件\",{\"1\":{\"493\":1}}],[\"准备mapper接口和mapperxml文件\",{\"1\":{\"493\":1}}],[\"准备mapper接口empmapper\",{\"1\":{\"80\":1}}],[\"准备boot工程\",{\"1\":{\"461\":1}}],[\"准备插入的英雄的编号\",{\"1\":{\"370\":1}}],[\"准备了mybatis的配置文件\",{\"1\":{\"220\":1}}],[\"准备实体类\",{\"1\":{\"220\":1}}],[\"准备数据库数据\",{\"1\":{\"514\":1}}],[\"准备数据库脚本\",{\"1\":{\"461\":1,\"640\":1}}],[\"准备数据模型\",{\"1\":{\"493\":1}}],[\"准备数据表emp\",{\"1\":{\"80\":1}}],[\"准备数据地址\",{\"1\":{\"45\":1}}],[\"准备\",{\"1\":{\"80\":1,\"640\":2}}],[\"七\",{\"0\":{\"417\":1,\"458\":1,\"613\":1,\"699\":1},\"1\":{\"542\":1}}],[\"七层\",{\"1\":{\"189\":1,\"200\":1}}],[\"短路优先原则\",{\"1\":{\"416\":1,\"448\":1}}],[\"六\",{\"0\":{\"414\":1,\"457\":1,\"540\":1,\"600\":1,\"659\":1,\"683\":1,\"704\":1},\"1\":{\"436\":1,\"489\":1,\"542\":1,\"660\":1}}],[\"制定构建打包时\",{\"1\":{\"413\":1}}],[\"制表符\",{\"1\":{\"317\":1,\"345\":1}}],[\"退货\",{\"1\":{\"429\":1,\"455\":1}}],[\"退\",{\"1\":{\"412\":1}}],[\"退出队列\",{\"1\":{\"368\":1}}],[\"退出当前账户的时候程序不会停止\",{\"1\":{\"273\":1}}],[\"退出当前账户该程序就会停止运行\",{\"1\":{\"273\":1}}],[\"鉴于使用其会导致项目的可移植性降低\",{\"1\":{\"411\":1}}],[\"故不需要\",{\"1\":{\"411\":1}}],[\"故遍历map时\",{\"1\":{\"169\":1}}],[\"已过时\",{\"1\":{\"566\":1}}],[\"已提供依赖范围\",{\"1\":{\"411\":1}}],[\"已经不再是一个单纯的应用框架\",{\"1\":{\"547\":1}}],[\"已经上升到了完全不能靠人力手动解决的程度\",{\"1\":{\"387\":1}}],[\"已经基本不用\",{\"1\":{\"45\":1}}],[\"五\",{\"0\":{\"407\":1,\"454\":1,\"531\":1,\"581\":1,\"614\":1,\"658\":1,\"678\":1,\"702\":1},\"1\":{\"436\":1,\"489\":1,\"542\":1,\"644\":1,\"660\":1}}],[\"五子棋存盘退出和续上盘的功能\",{\"1\":{\"365\":1}}],[\"触发周期后的命令\",{\"1\":{\"406\":1,\"450\":1}}],[\"触发刷新配置\",{\"1\":{\"226\":1,\"559\":1}}],[\"四\",{\"0\":{\"402\":1,\"451\":1,\"523\":1,\"554\":1,\"639\":1,\"654\":1,\"677\":1},\"1\":{\"436\":1,\"459\":1,\"489\":1,\"542\":1,\"615\":1,\"644\":1,\"660\":1}}],[\"四要素\",{\"1\":{\"76\":1}}],[\"识别maven项目类型\",{\"1\":{\"398\":1,\"442\":1}}],[\"识时务者为俊杰\",{\"1\":{\"15\":1}}],[\"→\",{\"1\":{\"398\":2,\"442\":2,\"480\":1}}],[\"兼容性\",{\"1\":{\"398\":1,\"442\":1}}],[\"兼职有\",{\"1\":{\"334\":1}}],[\"兼职员工\",{\"1\":{\"334\":1}}],[\"保养买贵赔两倍\",{\"1\":{\"651\":1}}],[\"保级无忧\",{\"1\":{\"651\":1}}],[\"保留mybatis\",{\"1\":{\"628\":1}}],[\"保存学习计划\",{\"1\":{\"641\":1}}],[\"保存\",{\"1\":{\"471\":1}}],[\"保存在target目录下\",{\"1\":{\"405\":1}}],[\"保持与最新技术的接轨\",{\"1\":{\"549\":1}}],[\"保持\",{\"1\":{\"398\":1,\"442\":1}}],[\"保证目标方法被执行即可\",{\"1\":{\"216\":1}}],[\"级\",{\"1\":{\"398\":1,\"442\":1}}],[\"仔细检查即可\",{\"1\":{\"396\":1,\"440\":1}}],[\"针对京津冀地区持续高温天气\",{\"1\":{\"651\":1}}],[\"针对dml动作设置只读模式\",{\"1\":{\"608\":1}}],[\"针对表\",{\"1\":{\"539\":1}}],[\"针对\",{\"1\":{\"485\":1}}],[\"针对maven版本\",{\"1\":{\"393\":1}}],[\"针对于特定方法根据业务需要进行编程\",{\"1\":{\"100\":1}}],[\"绿色免安装\",{\"1\":{\"393\":1,\"440\":1}}],[\"必需包含java\",{\"1\":{\"393\":1,\"440\":1}}],[\"必须配置大于0\",{\"1\":{\"677\":1}}],[\"必须是一个查询语句\",{\"1\":{\"677\":1}}],[\"必须是子类构造方法第一个语句\",{\"1\":{\"136\":1}}],[\"必须命名application\",{\"1\":{\"667\":1}}],[\"必须全面推进乡村振兴\",{\"1\":{\"651\":1}}],[\"必须使用接口类型接收ioc容器中代理组件\",{\"1\":{\"599\":1}}],[\"必须指定\",{\"1\":{\"480\":2}}],[\"必须要进行编码\",{\"1\":{\"355\":1}}],[\"必须要显式的处理\",{\"1\":{\"155\":1}}],[\"必须要显示的进行处理\",{\"1\":{\"154\":1}}],[\"必须编码\",{\"1\":{\"354\":1}}],[\"必须保证一个线程a在操作ticket的过程中\",{\"1\":{\"197\":1,\"208\":1}}],[\"必须保证对象本来创建的时候\",{\"1\":{\"146\":1}}],[\"必须在平日里有一定的经验积累和训练\",{\"1\":{\"651\":1}}],[\"必须在没有事务的情况下执行\",{\"1\":{\"249\":1,\"612\":1}}],[\"必须在一个已有的事务中执行\",{\"1\":{\"249\":1,\"612\":1}}],[\"必须在主线程中创建新的线程对象\",{\"1\":{\"193\":1,\"204\":1}}],[\"必须在数据模型中声明\",{\"1\":{\"43\":1}}],[\"必须由io来完成\",{\"1\":{\"182\":1}}],[\"必须重写equals方法\",{\"1\":{\"171\":1}}],[\"必须进行赋值\",{\"1\":{\"143\":1}}],[\"必须有一个\",{\"1\":{\"139\":1}}],[\"必须有事务\",{\"1\":{\"98\":1}}],[\"必须没事务\",{\"1\":{\"98\":1}}],[\"必须和生成jwt令牌使用的密钥是配套的\",{\"1\":{\"92\":1}}],[\"版本仲裁中心\",{\"1\":{\"665\":1}}],[\"版本为10\",{\"1\":{\"647\":1}}],[\"版本为jdk17\",{\"1\":{\"647\":1}}],[\"版本变更和兼容性问题\",{\"1\":{\"545\":1}}],[\"版本会不断变化\",{\"1\":{\"491\":1}}],[\"版本提取\",{\"1\":{\"457\":1}}],[\"版本号\",{\"1\":{\"409\":1,\"447\":1,\"483\":1}}],[\"版本\",{\"1\":{\"393\":1,\"424\":2,\"636\":2,\"657\":1,\"663\":1}}],[\"版本信息\",{\"1\":{\"49\":1}}],[\"节点id是分布式系统中每个节点的唯一标识\",{\"1\":{\"480\":1}}],[\"节点id\",{\"1\":{\"480\":1}}],[\"节点流\",{\"1\":{\"181\":2}}],[\"节省外网带宽\",{\"1\":{\"421\":1}}],[\"节省大量时间\",{\"1\":{\"390\":1,\"439\":1}}],[\"节约时间和精力\",{\"1\":{\"418\":1,\"452\":1}}],[\"脱离\",{\"1\":{\"389\":1}}],[\"构建周期等\",{\"1\":{\"457\":1}}],[\"构建周期作用\",{\"1\":{\"406\":1}}],[\"构建场景\",{\"1\":{\"457\":1}}],[\"构建过程\",{\"1\":{\"457\":1}}],[\"构建命令周期\",{\"1\":{\"450\":1}}],[\"构建命令\",{\"1\":{\"450\":2}}],[\"构建概念\",{\"1\":{\"450\":1}}],[\"构建概念和构建过程\",{\"0\":{\"403\":1}}],[\"构建工具\",{\"1\":{\"448\":1}}],[\"构建工具配置\",{\"1\":{\"440\":1}}],[\"构建和发布一组相关的项目\",{\"1\":{\"419\":1}}],[\"构建配置是在pom\",{\"1\":{\"413\":1}}],[\"构建不需要额外配置\",{\"1\":{\"413\":1}}],[\"构建项目时\",{\"1\":{\"412\":1,\"449\":1}}],[\"构建生命周期可以理解成是一组固定构建命令的有序集合\",{\"1\":{\"406\":1,\"450\":1}}],[\"构建生命周期\",{\"1\":{\"406\":1}}],[\"构建插件\",{\"0\":{\"406\":1}}],[\"构建\",{\"1\":{\"401\":1,\"445\":1}}],[\"构建管理\",{\"1\":{\"390\":1,\"439\":1,\"457\":1}}],[\"构建是\",{\"1\":{\"388\":1}}],[\"构造函数实例化\",{\"1\":{\"571\":1}}],[\"构造函数的位置路径是资源字符串地址\",{\"1\":{\"555\":1}}],[\"构造函数引用\",{\"1\":{\"478\":1,\"558\":1}}],[\"构造函数\",{\"1\":{\"224\":1,\"557\":1,\"558\":1}}],[\"构造函数注入\",{\"1\":{\"221\":1,\"553\":1}}],[\"构造字符串对象\",{\"1\":{\"165\":1}}],[\"构造器带参数的注入\",{\"0\":{\"224\":1}}],[\"构造器中\",{\"1\":{\"132\":1}}],[\"构造器\",{\"0\":{\"127\":1},\"1\":{\"131\":1,\"138\":1,\"566\":1}}],[\"构造方法参数上\",{\"1\":{\"566\":1}}],[\"构造方法上\",{\"1\":{\"566\":1}}],[\"构造方法的权限修饰符跟所属类的修饰符一致\",{\"1\":{\"127\":1}}],[\"构造方法的名称必须和所在类名称完一样\",{\"1\":{\"127\":1}}],[\"构造方法不能return一个具体的返回值\",{\"1\":{\"127\":1}}],[\"构造方法不要写返回值类型\",{\"1\":{\"127\":1}}],[\"构造方法\",{\"0\":{\"127\":1}}],[\"极端高温是否会成为常态\",{\"1\":{\"651\":1}}],[\"极大的减轻了我们的工作量\",{\"1\":{\"387\":1}}],[\"极个别的地方调整一下即可\",{\"1\":{\"387\":1}}],[\"极简的web开发框架\",{\"1\":{\"252\":1}}],[\"框架负责整体和业务层的声明式事务管理\",{\"1\":{\"617\":1}}],[\"框架实战\",{\"0\":{\"614\":1,\"702\":1}}],[\"框架进行管理\",{\"1\":{\"551\":1}}],[\"框架了\",{\"1\":{\"551\":1}}],[\"框架组件之间的松散耦合和模块化设计使得\",{\"1\":{\"549\":1}}],[\"框架已经对基础的代码进行了封装并提供相应的api\",{\"1\":{\"545\":1}}],[\"框架涉及到很多抽象和概念\",{\"1\":{\"545\":1}}],[\"框架提供了许多预先设计好了的组件和工具\",{\"1\":{\"545\":1}}],[\"框架\",{\"1\":{\"545\":2,\"547\":1,\"583\":1}}],[\"框架概念和理解\",{\"0\":{\"545\":1},\"1\":{\"542\":1}}],[\"框架包括\",{\"1\":{\"537\":2}}],[\"框架可以自动生成\",{\"1\":{\"537\":1}}],[\"框架可以自动组装\",{\"1\":{\"537\":1}}],[\"框架通过自动优化生成的\",{\"1\":{\"537\":1}}],[\"框架通常具有特定的语言和编程范式\",{\"1\":{\"545\":1}}],[\"框架通常是针对某个特定领域的\",{\"1\":{\"545\":1}}],[\"框架通常经过了很长时间的开发和测试\",{\"1\":{\"545\":1}}],[\"框架通常需要程序员手动编写\",{\"1\":{\"537\":1}}],[\"框架通常有半自动和全自动两种方式\",{\"1\":{\"537\":1}}],[\"框架需要程序员手动编写\",{\"1\":{\"537\":1}}],[\"框架需要程序员手动指定实体类和数据表之间的映射关系\",{\"1\":{\"537\":1}}],[\"框架需要手动编写\",{\"1\":{\"537\":1}}],[\"框架则可以自动进行实体类和数据表的映射\",{\"1\":{\"537\":1}}],[\"框架的版本发布和迭代通常会导致代码库的大规模变更\",{\"1\":{\"545\":1}}],[\"框架的缺点包括以下几个方面\",{\"1\":{\"545\":1}}],[\"框架的提供标准化的编程语言\",{\"1\":{\"545\":1}}],[\"框架的优点包括以下几点\",{\"1\":{\"545\":1}}],[\"框架的设计和实现旨在解决特定领域中的常见问题\",{\"1\":{\"545\":1}}],[\"框架的区别\",{\"1\":{\"537\":1}}],[\"框架的基础\",{\"1\":{\"230\":1,\"561\":1}}],[\"框架会自动执行\",{\"1\":{\"537\":1}}],[\"框架下\",{\"1\":{\"493\":1}}],[\"框架中使用的\",{\"1\":{\"387\":1}}],[\"框架中的三个功能\",{\"1\":{\"387\":1}}],[\"框架环境\",{\"1\":{\"387\":1}}],[\"样例输出\",{\"0\":{\"380\":1}}],[\"样例输入\",{\"0\":{\"379\":1}}],[\"样例\",{\"0\":{\"378\":1}}],[\"洛谷刷题\",{\"0\":{\"374\":1}}],[\"稍后会进行订单关联客户查询\",{\"1\":{\"517\":1}}],[\"稍后需要配置\",{\"1\":{\"514\":1}}],[\"稍后即将播放\",{\"1\":{\"328\":2}}],[\"稍作修改即可\",{\"1\":{\"371\":1}}],[\"利用动态\",{\"1\":{\"524\":1}}],[\"利用栈的先进后出的特点就实现了逆序打印效果\",{\"1\":{\"371\":1}}],[\"利用套接字开发网路应用程序已被广泛的采用\",{\"1\":{\"190\":1,\"201\":1}}],[\"逆向工程案例使用\",{\"1\":{\"539\":1}}],[\"逆向工程使用\",{\"1\":{\"539\":1}}],[\"逆向工程使开发者可以快速地构建起\",{\"1\":{\"538\":1}}],[\"逆向工程只能生成单表crud的操作\",{\"1\":{\"538\":1}}],[\"逆向工程一般需要指定一些配置参数\",{\"1\":{\"538\":1}}],[\"逆向工程插件mybatisx使用\",{\"0\":{\"539\":1},\"1\":{\"489\":1}}],[\"逆向工程\",{\"0\":{\"538\":1},\"1\":{\"489\":1,\"540\":1,\"653\":1}}],[\"逆向工程和mybatisx插件\",{\"0\":{\"536\":1},\"1\":{\"489\":1}}],[\"逆向思维\",{\"1\":{\"15\":1}}],[\"逆序打印单链表\",{\"1\":{\"371\":1}}],[\"百度\",{\"1\":{\"371\":1}}],[\"百度翻译\",{\"0\":{\"355\":1}}],[\"暂时保存当前节点的下一个节点\",{\"1\":{\"371\":1}}],[\"个中苦乐谁人知\",{\"1\":{\"651\":1}}],[\"个整数\",{\"1\":{\"376\":1}}],[\"个\",{\"1\":{\"371\":1,\"387\":1}}],[\"个人理解将name\",{\"1\":{\"334\":1}}],[\"个人笔记\",{\"1\":{\"291\":1,\"350\":1}}],[\"到目前为止\",{\"1\":{\"662\":1}}],[\"到每个业务方法\",{\"1\":{\"582\":1}}],[\"到这里就够了\",{\"1\":{\"425\":1}}],[\"到了链表的最后\",{\"1\":{\"370\":1,\"371\":1}}],[\"到python的默认安装目录下查找\",{\"1\":{\"331\":1}}],[\"到pythonpath环境变量下的每个目录下查找\",{\"1\":{\"331\":1}}],[\"找一个用到框架的\",{\"1\":{\"425\":1}}],[\"找不到\",{\"1\":{\"566\":2}}],[\"找不到返回空\",{\"1\":{\"371\":1}}],[\"找不到就往上找\",{\"1\":{\"145\":1}}],[\"找到任何包下\",{\"1\":{\"590\":1}}],[\"找到后自我删除即可\",{\"1\":{\"371\":1}}],[\"找到返回该节点\",{\"1\":{\"371\":1}}],[\"找到了待删除节点的前一个节点\",{\"1\":{\"370\":1}}],[\"找到了\",{\"1\":{\"370\":1,\"371\":1}}],[\"找到需要修改的节点\",{\"1\":{\"370\":1,\"371\":1}}],[\"找到链表的最后\",{\"1\":{\"370\":1,\"371\":1}}],[\"找到当前链表最后节点\",{\"1\":{\"370\":1}}],[\"豹子头\",{\"1\":{\"370\":1}}],[\"林冲\",{\"1\":{\"370\":1}}],[\"卢俊义\",{\"1\":{\"370\":1}}],[\"宋江\",{\"1\":{\"370\":1}}],[\"宋红康系列\",{\"1\":{\"15\":1}}],[\"水汽输送和大气湿度增加\",{\"1\":{\"651\":1}}],[\"水浒英雄排行榜管理单项链表缺点分析\",{\"1\":{\"371\":1}}],[\"水浒英雄排行管理\",{\"1\":{\"370\":1}}],[\"水平向下\",{\"1\":{\"257\":1}}],[\"水平向右\",{\"1\":{\"257\":1}}],[\"水平线\",{\"1\":{\"34\":1}}],[\"既作为检测的间隔时间又作为testwhileidel执行的依据\",{\"1\":{\"677\":1}}],[\"既是编写交给springioc容器管理组件的信息\",{\"1\":{\"555\":1}}],[\"既然要填写的属性\",{\"1\":{\"442\":1}}],[\"既就是队列最后一个数据\",{\"1\":{\"367\":1}}],[\"既可以是现成的\",{\"1\":{\"155\":1}}],[\"既可以实现运算又不会更改s的数据类型\",{\"1\":{\"117\":1}}],[\"遵循先入后出的原则\",{\"1\":{\"366\":1}}],[\"尝试一下将数组保存进磁盘并读取\",{\"1\":{\"366\":1}}],[\"稀疏数组恢复成二维数组\",{\"1\":{\"366\":1}}],[\"稀疏数组转原始二位数组思路\",{\"1\":{\"365\":1}}],[\"稀疏数组的处理方法是\",{\"1\":{\"365\":1}}],[\"思维像全自动发展的过程\",{\"1\":{\"538\":1}}],[\"思想是\",{\"1\":{\"517\":1}}],[\"思路\",{\"1\":{\"365\":1,\"370\":4,\"371\":2,\"557\":1,\"558\":1}}],[\"思考一下为什么使用$\",{\"1\":{\"81\":1}}],[\"树结构\",{\"1\":{\"365\":1}}],[\"队列的第一个元素\",{\"1\":{\"370\":1}}],[\"队列的头数据是\",{\"1\":{\"368\":1}}],[\"队列中有效的数据的个数==\",{\"1\":{\"370\":1}}],[\"队列为空的条件\",{\"1\":{\"370\":1}}],[\"队列空的\",{\"1\":{\"367\":2,\"370\":2}}],[\"队列空\",{\"1\":{\"367\":1,\"370\":1}}],[\"队列满\",{\"1\":{\"367\":1,\"370\":1}}],[\"队列尾\",{\"1\":{\"367\":1}}],[\"队列头\",{\"1\":{\"367\":1}}],[\"队列是一个有序列表\",{\"1\":{\"366\":1}}],[\"队列\",{\"1\":{\"365\":1}}],[\"顺序表中的存储元素是连续的\",{\"1\":{\"365\":1}}],[\"顺序存储的线性表称为顺序表\",{\"1\":{\"365\":1}}],[\"链式存储的线性表称为链表\",{\"1\":{\"365\":1}}],[\"链表为空\",{\"1\":{\"370\":2,\"371\":3}}],[\"链表分带头节点的链表和没有头节点的链表\",{\"1\":{\"370\":1}}],[\"链表的各个节点不一定是连续存放的\",{\"1\":{\"370\":1}}],[\"链表是以节点的方式来存储的\",{\"1\":{\"370\":1}}],[\"链表和栈\",{\"1\":{\"365\":1}}],[\"链表中的存储元素不一定是连续的\",{\"1\":{\"365\":1}}],[\"链表\",{\"1\":{\"365\":1}}],[\"链接成一条链\",{\"1\":{\"534\":1}}],[\"链接依赖库\",{\"1\":{\"403\":1,\"413\":1,\"450\":1}}],[\"链接器把对象文件和库文件链接生成可执行文件\",{\"1\":{\"338\":1}}],[\"链接数据库信息\",{\"1\":{\"220\":1}}],[\"链接也会变\",{\"1\":{\"43\":1}}],[\"链接地址\",{\"1\":{\"1\":1}}],[\"链接详细描述\",{\"1\":{\"1\":1}}],[\"链接名称\",{\"1\":{\"1\":1}}],[\"链接\",{\"1\":{\"1\":1}}],[\"想想如何使用人工智能\",{\"1\":{\"651\":1}}],[\"想想~\",{\"1\":{\"185\":1}}],[\"想下出真正的妙手\",{\"1\":{\"651\":1}}],[\"想要配置文件中声明组件类信息真正的进行实例化成bean对象和形成bean之间的引用关系\",{\"1\":{\"559\":1}}],[\"想要将项目打成\",{\"1\":{\"439\":1}}],[\"想要学好算法\",{\"1\":{\"365\":1}}],[\"想了老半天\",{\"1\":{\"371\":1}}],[\"感觉这样一整\",{\"1\":{\"364\":1}}],[\"折腾了半天\",{\"1\":{\"364\":1}}],[\"案例功能预览\",{\"0\":{\"633\":1},\"1\":{\"615\":1}}],[\"案例\",{\"1\":{\"356\":1,\"415\":1}}],[\"案例部分功能运行较慢\",{\"1\":{\"99\":1}}],[\"锚点\",{\"1\":{\"353\":1}}],[\"严禁传播\",{\"1\":{\"350\":1}}],[\"续表\",{\"1\":{\"347\":1}}],[\"至少一个\",{\"1\":{\"346\":1}}],[\"垂直制表符\",{\"1\":{\"345\":1}}],[\"垂直居中\",{\"1\":{\"260\":1}}],[\"汇编文件经过汇编\",{\"1\":{\"338\":1}}],[\"爬取百度翻译\",{\"0\":{\"361\":1}}],[\"爬取豆瓣电影\",{\"1\":{\"334\":1}}],[\"爬虫案列\",{\"0\":{\"360\":1}}],[\"爬虫\",{\"0\":{\"350\":1},\"1\":{\"334\":1},\"2\":{\"359\":1,\"363\":1}}],[\"源码体现\",{\"1\":{\"621\":1}}],[\"源代码\",{\"1\":{\"401\":1,\"445\":1}}],[\"源代码目录\",{\"1\":{\"401\":1,\"445\":1}}],[\"源网页代码\",{\"1\":{\"334\":1}}],[\"源程序\",{\"1\":{\"106\":1}}],[\"拿到了键值对\",{\"1\":{\"361\":1}}],[\"拿到了那个页面的html源码\",{\"1\":{\"334\":1}}],[\"拿到一台崭新的ubuntu服务器你会做什么\",{\"0\":{\"288\":1}}],[\"拿到一台崭新的服务器后你会干什么\",{\"1\":{\"271\":1}}],[\"国内的自主品牌中只有蔚来的es6能和model\",{\"1\":{\"651\":1}}],[\"国家围棋队领队华学明的这条朋友圈动态时\",{\"1\":{\"651\":1}}],[\"国家气候中心首席预报员高辉表示\",{\"1\":{\"651\":1}}],[\"国象联赛常规赛收兵\",{\"1\":{\"651\":1}}],[\"国防建设尖端科学技术领域的计算机系统等\",{\"1\":{\"334\":1}}],[\"国际展馆\",{\"1\":{\"34\":1}}],[\"身份令牌\",{\"1\":{\"655\":1}}],[\"身高不能为0\",{\"1\":{\"334\":1}}],[\"身体和心脏的关系\",{\"1\":{\"148\":1}}],[\"捕捉异常\",{\"1\":{\"334\":2}}],[\"捕获所有异常\",{\"1\":{\"96\":1}}],[\"何似在人间\",{\"1\":{\"334\":1}}],[\"月薪\",{\"1\":{\"334\":1}}],[\"喵\",{\"1\":{\"334\":1}}],[\"钱的编号就能清晰的表示出来\",{\"1\":{\"334\":1}}],[\"依然在mybatis\",{\"1\":{\"628\":1}}],[\"依然需要mybatis\",{\"1\":{\"628\":1}}],[\"依然保留mybatis的外部配置文件\",{\"1\":{\"628\":1}}],[\"依然保持高速计算\",{\"1\":{\"365\":1}}],[\"依然沿用mybatis数据库测试脚本\",{\"1\":{\"625\":1}}],[\"依次点击\",{\"1\":{\"440\":1}}],[\"依次完成\",{\"1\":{\"334\":1}}],[\"依赖名\",{\"1\":{\"636\":2}}],[\"依赖整合和添加\",{\"0\":{\"625\":1},\"1\":{\"615\":1}}],[\"依赖关系的管理等功能交给spring\",{\"1\":{\"551\":1}}],[\"依赖关系的复杂程度\",{\"1\":{\"387\":1}}],[\"依赖数据库驱动\",{\"1\":{\"515\":2}}],[\"依赖导入\",{\"1\":{\"493\":1,\"562\":1,\"568\":1,\"575\":1,\"625\":1,\"681\":1,\"682\":1}}],[\"依赖导入失败场景和解决方案\",{\"0\":{\"449\":1},\"1\":{\"436\":1}}],[\"依赖添加\",{\"1\":{\"457\":1}}],[\"依赖于另一个模块或库\",{\"1\":{\"448\":1}}],[\"依赖路径长度相同情况下\",{\"1\":{\"416\":1,\"448\":1}}],[\"依赖其他两个依赖\",{\"1\":{\"415\":1,\"448\":1}}],[\"依赖冲突演示\",{\"1\":{\"448\":1}}],[\"依赖冲突避免出现重复依赖\",{\"1\":{\"416\":1,\"448\":1}}],[\"依赖冲突\",{\"1\":{\"415\":1}}],[\"依赖项的版本号或配置文件中的版本号错误\",{\"1\":{\"412\":1,\"449\":1}}],[\"依赖对于编译\",{\"1\":{\"411\":1}}],[\"依赖对应的\",{\"1\":{\"387\":1}}],[\"依赖只有在测试阶段才需要\",{\"1\":{\"411\":1}}],[\"依赖在上述三种\",{\"1\":{\"411\":1}}],[\"依赖版本提取和维护\",{\"1\":{\"447\":1}}],[\"依赖版本统一提取和维护\",{\"1\":{\"410\":1}}],[\"依赖版本管理等\",{\"1\":{\"390\":1,\"439\":1}}],[\"依赖信息查询方式\",{\"1\":{\"410\":1,\"447\":1}}],[\"依赖库和资源文件等转换成可执行或可部署的应用程序的过程\",{\"1\":{\"403\":1,\"413\":1,\"450\":1}}],[\"依赖本地缓存位置\",{\"1\":{\"395\":1,\"440\":1}}],[\"依赖的关系为\",{\"1\":{\"415\":1}}],[\"依赖的对象\",{\"1\":{\"73\":1}}],[\"依赖的jar包\",{\"1\":{\"59\":1}}],[\"依赖注入di配置\",{\"1\":{\"558\":1}}],[\"依赖注入配置\",{\"0\":{\"558\":1},\"1\":{\"542\":1}}],[\"依赖注入\",{\"1\":{\"72\":1,\"73\":1,\"221\":1,\"547\":1,\"553\":1,\"558\":1}}],[\"依赖具有传递性\",{\"1\":{\"59\":1}}],[\"依赖\",{\"1\":{\"59\":1,\"211\":1,\"387\":1,\"411\":4,\"415\":6,\"439\":1}}],[\"依赖范围\",{\"0\":{\"411\":1},\"1\":{\"59\":2,\"410\":1,\"411\":1}}],[\"依赖传递演示\",{\"1\":{\"448\":1}}],[\"依赖传递的作用是\",{\"1\":{\"448\":1}}],[\"依赖传递指的是当一个模块或库\",{\"1\":{\"448\":1}}],[\"依赖传递结果\",{\"1\":{\"433\":1}}],[\"依赖传递关系\",{\"1\":{\"415\":1}}],[\"依赖传递终止\",{\"1\":{\"415\":1}}],[\"依赖传递\",{\"1\":{\"59\":2,\"457\":1}}],[\"依赖配置\",{\"1\":{\"59\":2}}],[\"依赖管理和添加\",{\"1\":{\"447\":1}}],[\"依赖管理和配置\",{\"0\":{\"447\":1},\"1\":{\"436\":1}}],[\"依赖管理和依赖添加\",{\"1\":{\"410\":1}}],[\"依赖管理是\",{\"1\":{\"408\":1,\"447\":1}}],[\"依赖管理概念\",{\"0\":{\"408\":1}}],[\"依赖管理的工具\",{\"1\":{\"390\":1,\"438\":1}}],[\"依赖管理\",{\"1\":{\"55\":1,\"390\":2,\"431\":1,\"438\":1,\"439\":1,\"456\":1,\"457\":1}}],[\"依赖环境\",{\"1\":{\"48\":1}}],[\"肥胖\",{\"1\":{\"334\":1}}],[\"偏胖\",{\"1\":{\"334\":1}}],[\"偏瘦\",{\"1\":{\"334\":1}}],[\"恭喜发财\",{\"1\":{\"334\":4}}],[\"恭喜你\",{\"1\":{\"334\":4}}],[\"恭喜你没有挂科\",{\"1\":{\"334\":1}}],[\"周四\",{\"1\":{\"651\":1}}],[\"周杰伦\",{\"1\":{\"354\":2}}],[\"周二\",{\"1\":{\"334\":1}}],[\"周期\",{\"1\":{\"450\":1}}],[\"周期→包含若干命令→包含若干插件\",{\"1\":{\"406\":1,\"450\":1}}],[\"周期三者关系\",{\"1\":{\"406\":1}}],[\"周期方法配置\",{\"1\":{\"560\":1}}],[\"周期方法声明\",{\"1\":{\"560\":1,\"565\":1}}],[\"周期方法概念\",{\"1\":{\"560\":1,\"565\":1}}],[\"周期方法如何指定\",{\"1\":{\"237\":1}}],[\"周期方法要求\",{\"1\":{\"232\":1,\"560\":1,\"565\":2}}],[\"周期方法命名随意\",{\"1\":{\"232\":1}}],[\"周期管理\",{\"0\":{\"227\":1}}],[\"龙舟竞渡\",{\"1\":{\"651\":2}}],[\"龙\",{\"1\":{\"334\":1}}],[\"黑子\",{\"1\":{\"366\":1}}],[\"黑\",{\"1\":{\"334\":1}}],[\"白子\",{\"1\":{\"366\":1}}],[\"白色\",{\"1\":{\"334\":2}}],[\"白\",{\"1\":{\"334\":1}}],[\"蓝色的地方贴上元旦快乐四个字\",{\"1\":{\"564\":1}}],[\"蓝\",{\"1\":{\"334\":1}}],[\"硬盘\",{\"1\":{\"334\":1}}],[\"电竞椅\",{\"1\":{\"334\":1}}],[\"音箱\",{\"1\":{\"334\":1}}],[\"音频文件\",{\"1\":{\"186\":1}}],[\"完善实体类注解\",{\"1\":{\"653\":1}}],[\"完善连接池配置\",{\"1\":{\"461\":1}}],[\"完整内容看\",{\"1\":{\"628\":2}}],[\"完美适配所有的应用程序查询需求\",{\"1\":{\"517\":1}}],[\"完美解决主键问题\",{\"1\":{\"460\":1}}],[\"完成对英雄任务的增删改查操作\",{\"1\":{\"370\":1}}],[\"完成数组输入后\",{\"1\":{\"334\":2}}],[\"完全配置类\",{\"1\":{\"628\":1}}],[\"完全不具备任何的灵活性\",{\"1\":{\"583\":1}}],[\"完全摒弃了xml配置文件\",{\"1\":{\"575\":1}}],[\"完全注解配置具有更强的类型安全性和更好的可读性\",{\"1\":{\"570\":1}}],[\"完全注解配置\",{\"1\":{\"570\":1}}],[\"完全注解开发理解\",{\"0\":{\"570\":1},\"1\":{\"542\":1}}],[\"完全注解方式\",{\"1\":{\"571\":1,\"575\":1}}],[\"完全注解方式指的是去掉xml文件\",{\"1\":{\"242\":1,\"579\":1}}],[\"完全注解方式配置总结\",{\"0\":{\"242\":1,\"579\":1},\"1\":{\"542\":1}}],[\"完全禁止了并发\",{\"1\":{\"248\":1,\"611\":1}}],[\"完全替代xml配置\",{\"1\":{\"235\":1}}],[\"完全取决于你和你的团队\",{\"1\":{\"82\":1}}],[\"很多人在对局中经常会拘泥于局部\",{\"1\":{\"651\":1}}],[\"很遗憾\",{\"1\":{\"334\":1}}],[\"很抱歉\",{\"1\":{\"334\":1}}],[\"啊\",{\"1\":{\"334\":1}}],[\"世界冠军柯洁表示\",{\"1\":{\"651\":1}}],[\"世界\",{\"1\":{\"334\":1}}],[\"世界你好\",{\"1\":{\"16\":1}}],[\"起废弃\",{\"1\":{\"496\":1}}],[\"起舞弄清影\",{\"1\":{\"334\":1}}],[\"起始值\",{\"1\":{\"333\":1}}],[\"起步依赖\",{\"1\":{\"66\":1}}],[\"临时添加\",{\"1\":{\"331\":1}}],[\"临时状态码\",{\"1\":{\"64\":1}}],[\"红牛车队维斯塔潘杆位发车一路轻松领跑\",{\"1\":{\"651\":1}}],[\"红枣的\",{\"1\":{\"651\":1}}],[\"红色的地方贴上拉花\",{\"1\":{\"564\":1}}],[\"红包拿来\",{\"1\":{\"334\":4}}],[\"红楼梦\",{\"1\":{\"328\":3}}],[\"红米\",{\"1\":{\"187\":1}}],[\"战狼\",{\"1\":{\"328\":3}}],[\"首字母小写\",{\"1\":{\"513\":1}}],[\"首字母小写的驼峰式命名\",{\"1\":{\"509\":1}}],[\"首页详情接口\",{\"1\":{\"656\":1}}],[\"首页数据查询\",{\"1\":{\"656\":1}}],[\"首页分页查询\",{\"1\":{\"656\":1}}],[\"首页模块开发\",{\"0\":{\"656\":1},\"1\":{\"644\":1}}],[\"首页地址\",{\"1\":{\"422\":1}}],[\"首页\",{\"1\":{\"422\":1}}],[\"首尾双下划线表示定义特殊方法\",{\"1\":{\"327\":1}}],[\"首先根据所需要的组件类型到\",{\"1\":{\"566\":1}}],[\"首先\",{\"1\":{\"514\":1}}],[\"首先找到新添加节点的位置\",{\"1\":{\"370\":1}}],[\"首先按照comareto\",{\"1\":{\"174\":1}}],[\"首先调用此对象所在类的hashcode\",{\"1\":{\"172\":1}}],[\"双向查看\",{\"1\":{\"517\":1}}],[\"双向链表的第二种添加方式\",{\"1\":{\"371\":1}}],[\"双下划线表示\",{\"1\":{\"327\":1}}],[\"双击安装包进行安装\",{\"1\":{\"636\":1}}],[\"双击执行\",{\"1\":{\"59\":1}}],[\"双击导入\",{\"1\":{\"57\":1}}],[\"岁了\",{\"1\":{\"327\":1}}],[\"匹配前面的字符最少n次最多m次\",{\"1\":{\"347\":1}}],[\"匹配前面的字符最少n次\",{\"1\":{\"347\":1}}],[\"匹配前面的字符n次\",{\"1\":{\"347\":1}}],[\"匹配前面的字符零次或多次\",{\"1\":{\"347\":1}}],[\"匹配前面的字符零次或一次\",{\"1\":{\"347\":1}}],[\"匹配前面的字符一次或多次\",{\"1\":{\"347\":1}}],[\"匹配数字\",{\"1\":{\"347\":1}}],[\"匹配任意的字母数字下划线或汉字\",{\"1\":{\"347\":1}}],[\"匹配任意的空白符\",{\"1\":{\"347\":1}}],[\"匹配任意一个汉字\",{\"1\":{\"345\":1}}],[\"匹配字符串的结束\",{\"1\":{\"347\":1}}],[\"匹配字符串的开始\",{\"1\":{\"347\":1}}],[\"匹配零个或多个字符\",{\"1\":{\"346\":1}}],[\"匹配多个字符\",{\"0\":{\"346\":1}}],[\"匹配a\",{\"1\":{\"345\":1}}],[\"匹配0个或一个字符\",{\"1\":{\"346\":1}}],[\"匹配0\",{\"1\":{\"345\":1}}],[\"匹配单个字符\",{\"0\":{\"345\":1}}],[\"匹配的开始和结束位置\",{\"1\":{\"320\":1}}],[\"匹配连接点的条件\",{\"1\":{\"101\":1}}],[\"商店\",{\"1\":{\"320\":1}}],[\"忽略大小写\",{\"1\":{\"480\":1}}],[\"忽略模式字符串中未转义的空格和注释\",{\"1\":{\"320\":1}}],[\"忽略非法字符\",{\"1\":{\"317\":1}}],[\"特别适用于深层次嵌套的配置情况\",{\"1\":{\"669\":1}}],[\"特别注意\",{\"1\":{\"628\":2}}],[\"特斯拉model\",{\"1\":{\"651\":1}}],[\"特斯拉曾经在model\",{\"1\":{\"651\":1}}],[\"特色产业激发乡村振兴新活力\",{\"1\":{\"651\":1}}],[\"特定于应用程序给予此接口实现\",{\"1\":{\"552\":1}}],[\"特定的应用需求可能超出框架的范围\",{\"1\":{\"545\":1}}],[\"特指\",{\"1\":{\"547\":1}}],[\"特殊情况\",{\"1\":{\"480\":1,\"498\":1,\"590\":1}}],[\"特性\",{\"1\":{\"460\":1}}],[\"特征\",{\"1\":{\"314\":1}}],[\"特点\",{\"1\":{\"40\":1,\"62\":1,\"127\":1}}],[\"序列号用于记录在同一毫秒内生成的不同id的序号\",{\"1\":{\"480\":1}}],[\"序列号\",{\"1\":{\"480\":1}}],[\"序列中元素类型不同也可以\",{\"1\":{\"305\":1}}],[\"序列相加\",{\"1\":{\"305\":1}}],[\"序列化是rmi\",{\"1\":{\"187\":1}}],[\"序列化的好处\",{\"1\":{\"187\":1}}],[\"迭代变量\",{\"1\":{\"303\":1}}],[\"循环体\",{\"1\":{\"302\":1,\"303\":1}}],[\"幂\",{\"1\":{\"297\":1}}],[\"十一\",{\"1\":{\"562\":1}}],[\"十六进制0x\",{\"1\":{\"292\":1}}],[\"十进制表示\",{\"1\":{\"112\":1}}],[\"覆盖路径\",{\"1\":{\"675\":1}}],[\"覆盖默认的配置\",{\"1\":{\"671\":1}}],[\"覆盖文件时不备份\",{\"1\":{\"286\":1}}],[\"覆盖重写所有抽象方法\",{\"1\":{\"151\":1}}],[\"独立部署到外部服务器软件\",{\"1\":{\"450\":1}}],[\"独立出不同网站不同配置文件\",{\"1\":{\"283\":1}}],[\"独占一行\",{\"1\":{\"36\":1}}],[\"彩色的牛\",{\"0\":{\"281\":1}}],[\"名义上是旅游\",{\"1\":{\"651\":1}}],[\"名单仅差1人\",{\"1\":{\"651\":1}}],[\"名词\",{\"1\":{\"583\":1}}],[\"名\",{\"1\":{\"398\":1,\"442\":1}}],[\"名字任意\",{\"1\":{\"412\":1}}],[\"名字\",{\"1\":{\"325\":3}}],[\"名人名言\",{\"0\":{\"280\":1}}],[\"名称也可以是self以外的单词\",{\"1\":{\"327\":1}}],[\"名称\",{\"1\":{\"238\":1,\"249\":1,\"552\":1,\"573\":1,\"612\":1}}],[\"名称与方法名称相同\",{\"1\":{\"237\":1,\"573\":1}}],[\"库名\",{\"1\":{\"277\":1}}],[\"海贼王\",{\"1\":{\"269\":1}}],[\"排序\",{\"1\":{\"334\":1}}],[\"排列越靠前\",{\"1\":{\"265\":1}}],[\"排除依赖指主动断开依赖的资源\",{\"1\":{\"59\":1}}],[\"排除依赖\",{\"1\":{\"59\":2}}],[\"剩余空间就是整个的宽度\",{\"1\":{\"264\":1}}],[\"挤在一起居中\",{\"1\":{\"260\":1}}],[\"轴线\",{\"1\":{\"259\":1}}],[\"伸缩布局=弹性布局=伸缩盒子布局=flex布局\",{\"1\":{\"255\":1}}],[\"子容器\",{\"1\":{\"621\":1}}],[\"子容器可以横向排列也可以纵向排列\",{\"1\":{\"255\":1}}],[\"子ioc容器可以单向的注入父ioc容器的组件\",{\"1\":{\"621\":1}}],[\"子句的一部分\",{\"1\":{\"525\":1}}],[\"子句\",{\"1\":{\"512\":2}}],[\"子元素设置它的值\",{\"1\":{\"515\":1}}],[\"子元素\",{\"1\":{\"512\":1}}],[\"子元素的float\",{\"1\":{\"255\":1}}],[\"子工程引用父工程中的依赖信息时\",{\"1\":{\"418\":1,\"452\":1}}],[\"子工程引用版本\",{\"1\":{\"418\":1,\"452\":1}}],[\"子工程的坐标\",{\"1\":{\"418\":1,\"452\":1}}],[\"子工程\",{\"1\":{\"418\":1,\"452\":1}}],[\"子业务线可选\",{\"1\":{\"398\":1,\"442\":1}}],[\"子业务线\",{\"1\":{\"398\":1,\"442\":1}}],[\"子项在侧轴先分布在两头\",{\"1\":{\"261\":1}}],[\"子项在侧轴平分剩余空间\",{\"1\":{\"261\":1}}],[\"子盒子不要给高度\",{\"1\":{\"260\":1}}],[\"子类不能抛出比父类大\",{\"1\":{\"196\":1,\"207\":1}}],[\"子类不能覆盖声明为private的方法\",{\"1\":{\"135\":1}}],[\"子类properties\",{\"1\":{\"169\":1}}],[\"子类重写的父类方法\",{\"1\":{\"155\":1}}],[\"子类特有方法\",{\"1\":{\"146\":1}}],[\"子类方法\",{\"1\":{\"145\":1}}],[\"子类方法的权限必须大于等于父类方法的权限修饰符\",{\"1\":{\"137\":1}}],[\"子类方法的返回值必须小于等于父类方法的返回值范围\",{\"1\":{\"137\":1}}],[\"子类没有\",{\"1\":{\"145\":1}}],[\"子类\",{\"1\":{\"145\":1,\"179\":1}}],[\"子类在抽象类的基础上进行扩展\",{\"1\":{\"138\":1}}],[\"子类必须调用父类的构造方法\",{\"1\":{\"136\":1}}],[\"子类构造可以通过super\",{\"1\":{\"136\":1}}],[\"子类构造方法当中有一个默认隐含的\",{\"1\":{\"136\":1}}],[\"子类名称\",{\"1\":{\"136\":1,\"145\":1,\"146\":3,\"151\":1}}],[\"弹性布局\",{\"1\":{\"255\":1}}],[\"弹出相关类或方法名称\",{\"1\":{\"108\":1}}],[\"状态字符串\",{\"1\":{\"253\":1}}],[\"状态码大全\",{\"1\":{\"64\":1}}],[\"状态码\",{\"1\":{\"64\":2,\"253\":1}}],[\"监听端口启动服务\",{\"1\":{\"252\":1}}],[\"快捷又规范\",{\"1\":{\"387\":1}}],[\"快捷键\",{\"0\":{\"275\":1},\"1\":{\"107\":1}}],[\"快捷键注释注释当前行\",{\"1\":{\"107\":1}}],[\"快速启动和开发应用程序\",{\"1\":{\"665\":1}}],[\"快速启动框架\",{\"0\":{\"659\":1,\"704\":1}}],[\"快速地创建一个独立的\",{\"1\":{\"662\":1}}],[\"快速入门\",{\"0\":{\"461\":1,\"493\":1,\"664\":1},\"1\":{\"459\":1,\"489\":1,\"660\":1}}],[\"快速项目构建和打包\",{\"1\":{\"439\":1}}],[\"快速\",{\"1\":{\"252\":1}}],[\"体育\",{\"1\":{\"651\":1,\"656\":1}}],[\"体育借势冲上了社交媒体的热搜榜\",{\"1\":{\"651\":1}}],[\"体验传统端午民俗\",{\"1\":{\"651\":1}}],[\"体现的是对多的关系\",{\"1\":{\"517\":2}}],[\"体现的是对一的关系\",{\"1\":{\"517\":3}}],[\"体\",{\"1\":{\"252\":1,\"253\":1}}],[\"隔离级别设置\",{\"1\":{\"248\":1}}],[\"隔一个打印一个\",{\"1\":{\"170\":1}}],[\"串行化\",{\"1\":{\"248\":1,\"611\":1}}],[\"容易造成命名的混乱\",{\"1\":{\"334\":1}}],[\"容易产生脏读\",{\"1\":{\"248\":1,\"611\":1}}],[\"容器名\",{\"1\":{\"620\":1}}],[\"容器初始化配置类\",{\"0\":{\"629\":1},\"1\":{\"615\":1}}],[\"容器初始化时\",{\"1\":{\"228\":1,\"560\":1,\"565\":1}}],[\"容器进行组件管理\",{\"1\":{\"557\":1}}],[\"容器管理一个或多个\",{\"1\":{\"557\":1}}],[\"容器管理一个或多个组件\",{\"1\":{\"555\":1}}],[\"容器管理的新对象\",{\"1\":{\"236\":1,\"572\":1}}],[\"容器实例化\",{\"1\":{\"552\":1,\"559\":1}}],[\"容器使用多种形式的配置元数据\",{\"1\":{\"552\":1}}],[\"容器工作原理的高级视图\",{\"1\":{\"552\":1}}],[\"容器也是一个复杂容器\",{\"1\":{\"552\":1}}],[\"容器能够管理\",{\"1\":{\"552\":1}}],[\"容器对象\",{\"1\":{\"221\":6,\"552\":4,\"571\":1}}],[\"容器维护着构成应用程序的对象\",{\"1\":{\"221\":1,\"553\":1}}],[\"容器中这个类型的\",{\"1\":{\"598\":2}}],[\"容器中同类型的\",{\"1\":{\"598\":1}}],[\"容器中的那个\",{\"1\":{\"598\":1}}],[\"容器中查找\",{\"1\":{\"566\":1}}],[\"容器中有多个实例\",{\"1\":{\"228\":1,\"560\":1,\"565\":1}}],[\"容器中\",{\"1\":{\"221\":1,\"228\":1,\"553\":1,\"560\":1,\"565\":1}}],[\"容器来创建和管理\",{\"1\":{\"221\":1,\"553\":1}}],[\"容器通过读取配置元数据来获取有关要实例化\",{\"1\":{\"221\":1,\"552\":1,\"553\":1}}],[\"容器为应用程序提供运行时\",{\"1\":{\"72\":1}}],[\"容器\",{\"1\":{\"72\":1,\"167\":1,\"221\":1,\"255\":1,\"548\":1,\"552\":1,\"553\":1,\"598\":1}}],[\"永不超时\",{\"1\":{\"247\":3,\"248\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"永远不要拘泥于一种方式\",{\"1\":{\"82\":1}}],[\"超豪华型等\",{\"1\":{\"651\":1}}],[\"超越特斯拉model\",{\"1\":{\"651\":1}}],[\"超级杯\",{\"1\":{\"651\":1}}],[\"超时回滚\",{\"1\":{\"609\":1}}],[\"超时时间\",{\"0\":{\"609\":1},\"1\":{\"542\":1}}],[\"超过时间就会回滚事务和释放异常\",{\"1\":{\"246\":1}}],[\"超链接\",{\"1\":{\"50\":1}}],[\"秒数\",{\"1\":{\"246\":1}}],[\"恢复挂起的事务\",{\"1\":{\"243\":1,\"604\":1}}],[\"挂起该事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"挂起事务\",{\"1\":{\"243\":1,\"604\":1}}],[\"挂载完成\",{\"1\":{\"44\":1}}],[\"挂载前\",{\"1\":{\"44\":1}}],[\"任务实体类\",{\"1\":{\"640\":1}}],[\"任务列表案例\",{\"0\":{\"631\":1,\"639\":1},\"1\":{\"615\":2}}],[\"任何映射器实例的最大作用域与请求它们的\",{\"1\":{\"628\":1}}],[\"任何一个字母\",{\"1\":{\"345\":1}}],[\"任何一个字母或数字\",{\"1\":{\"345\":1}}],[\"任何一个字母数字字符\",{\"1\":{\"345\":1}}],[\"任何一个空白字符\",{\"1\":{\"345\":1}}],[\"任何一个非空白字符\",{\"1\":{\"345\":1}}],[\"任何一个非字母数字或下划线字符等价于\",{\"1\":{\"345\":1}}],[\"任何一个非数字字符\",{\"1\":{\"345\":1}}],[\"任何一个数字字符\",{\"1\":{\"345\":1}}],[\"任何一个容器都可以指定为flex布局\",{\"1\":{\"255\":1}}],[\"任何需要的bean都可以在测试类中直接享受自动装配\",{\"1\":{\"242\":1,\"580\":1}}],[\"任意参数的意识\",{\"1\":{\"590\":1}}],[\"任意参数\",{\"1\":{\"590\":1}}],[\"任意类的任意方法\",{\"1\":{\"590\":1}}],[\"任意类名\",{\"1\":{\"590\":1}}],[\"任意访问修饰符\",{\"1\":{\"590\":1}}],[\"任意包任意类\",{\"1\":{\"590\":1}}],[\"任意命名\",{\"1\":{\"590\":1}}],[\"任意层\",{\"1\":{\"590\":1}}],[\"任意层任意命名\",{\"1\":{\"590\":1}}],[\"任意层的模糊\",{\"1\":{\"214\":1}}],[\"任意一层的任意命名\",{\"1\":{\"590\":1}}],[\"任意级路径\",{\"1\":{\"94\":1}}],[\"配jdk的编译版本\",{\"1\":{\"413\":1}}],[\"配合ioc\",{\"1\":{\"235\":2,\"571\":1}}],[\"配置别名\",{\"1\":{\"680\":1}}],[\"配置连接在池中的最小生存时间\",{\"1\":{\"677\":1}}],[\"配置静态资源地址\",{\"1\":{\"675\":1}}],[\"配置静态资源的位置\",{\"1\":{\"674\":1}}],[\"配置基本都有默认值\",{\"1\":{\"667\":1}}],[\"配置阿里镜像\",{\"1\":{\"636\":1}}],[\"配置阿里云私服\",{\"1\":{\"56\":1}}],[\"配置时\",{\"1\":{\"628\":2}}],[\"配置名\",{\"1\":{\"622\":1}}],[\"配置事务管理器\",{\"1\":{\"607\":1}}],[\"配置factorybean实现类\",{\"1\":{\"561\":1}}],[\"配置filter\",{\"1\":{\"93\":1}}],[\"配置元数据\",{\"1\":{\"555\":2}}],[\"配置元数据以\",{\"1\":{\"552\":1}}],[\"配置方式有三种\",{\"1\":{\"555\":1}}],[\"配置方式\",{\"1\":{\"532\":1}}],[\"配置项关键词\",{\"1\":{\"522\":1}}],[\"配置resultmap实现从customer到orderlist的\",{\"1\":{\"519\":1}}],[\"配置customer类的属性和字段名之间的对应关系\",{\"1\":{\"518\":1}}],[\"配置common\",{\"1\":{\"433\":1,\"434\":1}}],[\"配置commons\",{\"1\":{\"432\":1}}],[\"配置后可以忽略不配置步骤2\",{\"1\":{\"481\":1}}],[\"配置后置通知\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置好插件之后\",{\"1\":{\"460\":1}}],[\"配置junit\",{\"1\":{\"432\":1}}],[\"配置jackson\",{\"1\":{\"432\":1}}],[\"配置jdk17版本项目构建\",{\"1\":{\"395\":1,\"440\":1}}],[\"配置sqlsessionfactorybean\",{\"1\":{\"628\":3}}],[\"配置sql提示\",{\"0\":{\"77\":1}}],[\"配置scope范围\",{\"1\":{\"560\":1}}],[\"配置spring配置文件\",{\"1\":{\"596\":1}}],[\"配置spring\",{\"1\":{\"432\":1}}],[\"配置依赖插件\",{\"1\":{\"413\":1}}],[\"配置更高版本插件\",{\"1\":{\"413\":1}}],[\"配置到idea开发工具中即可\",{\"1\":{\"396\":1,\"440\":1}}],[\"配置国内阿里镜像\",{\"1\":{\"395\":1,\"440\":1}}],[\"配置path\",{\"1\":{\"394\":1}}],[\"配置mapper实例扫描工厂\",{\"1\":{\"628\":3}}],[\"配置maven的参数\",{\"1\":{\"410\":1,\"447\":1}}],[\"配置maven\",{\"1\":{\"394\":1,\"440\":1}}],[\"配置mybatis\",{\"1\":{\"480\":2,\"652\":1}}],[\"配置mybatis日志\",{\"1\":{\"480\":1}}],[\"配置mybatis的日志\",{\"1\":{\"80\":1}}],[\"配置mysql执行日志\",{\"1\":{\"9\":1}}],[\"配置的应用程序\",{\"1\":{\"623\":1}}],[\"配置的方式来控制事务的提交和回滚\",{\"1\":{\"243\":1,\"603\":1}}],[\"配置的人来说\",{\"1\":{\"236\":1,\"572\":1}}],[\"配置happycomponent和happymachine关系\",{\"1\":{\"238\":1,\"573\":1}}],[\"配置和功能\",{\"1\":{\"665\":1}}],[\"配置和初始化要由\",{\"1\":{\"236\":1,\"572\":1}}],[\"配置和组装应用程序中的对象\",{\"1\":{\"552\":1}}],[\"配置和组装组件的指令\",{\"1\":{\"221\":1,\"552\":1,\"553\":1}}],[\"配置和组装\",{\"1\":{\"221\":1,\"552\":1,\"553\":1}}],[\"配置自动扫描的包\",{\"1\":{\"231\":1,\"564\":1,\"571\":1}}],[\"配置两个或者以上出现\",{\"1\":{\"226\":1,\"559\":1}}],[\"配置文件编写\",{\"1\":{\"677\":1}}],[\"配置文件会被自动加载并可供应用程序访问\",{\"1\":{\"667\":1}}],[\"配置文件应该放置在spring\",{\"1\":{\"667\":1}}],[\"配置文件application\",{\"1\":{\"571\":1}}],[\"配置文件中的配置\",{\"1\":{\"570\":1}}],[\"配置文件确定扫描范围\",{\"1\":{\"564\":1}}],[\"配置文件一样\",{\"1\":{\"564\":1}}],[\"配置文件和java代码分离\",{\"1\":{\"562\":1}}],[\"配置文件和启动类\",{\"1\":{\"461\":1}}],[\"配置文件名\",{\"1\":{\"560\":1}}],[\"配置文件名称一致\",{\"1\":{\"532\":1}}],[\"配置文件的标签并不是随意命名\",{\"1\":{\"555\":1}}],[\"配置文件的加载和解析\",{\"1\":{\"230\":1,\"561\":1}}],[\"配置文件放在\",{\"1\":{\"532\":1}}],[\"配置文件将被自动加载\",{\"1\":{\"532\":1}}],[\"配置文件很多时\",{\"1\":{\"532\":1}}],[\"配置文件地址\",{\"1\":{\"235\":2,\"571\":1}}],[\"配置文件\",{\"1\":{\"222\":1,\"286\":1,\"390\":1,\"401\":1,\"439\":1,\"440\":1,\"445\":1,\"532\":1,\"551\":1,\"662\":1,\"668\":2,\"669\":1,\"680\":1}}],[\"配置文件或注解的方式实现的\",{\"1\":{\"221\":1,\"553\":1}}],[\"配置一个新的\",{\"1\":{\"425\":1}}],[\"配置一个具体的mapper映射文件\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"配置一下日志开关\",{\"1\":{\"97\":1}}],[\"配置数据源\",{\"1\":{\"220\":1,\"493\":1,\"514\":1,\"562\":2,\"568\":1,\"679\":1}}],[\"配置数据库的连接信息\",{\"1\":{\"76\":1}}],[\"配置环绕通知\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置环境变量\",{\"1\":{\"56\":1}}],[\"配置异常通知\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置返回通知\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置前置通知\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置aop\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置切面\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置切面类的bean\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置切入点表达式\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置切点表达式\",{\"1\":{\"212\":1}}],[\"配置目标类的bean\",{\"1\":{\"219\":1,\"596\":1}}],[\"配置工作空间设置\",{\"1\":{\"108\":1}}],[\"配置类要在启动类的同包或者子包方可生效\",{\"1\":{\"676\":1}}],[\"配置类可以包含spring框架相关的配置\",{\"1\":{\"665\":1}}],[\"配置类的数量不是固定的\",{\"1\":{\"622\":1}}],[\"配置类+注解\",{\"1\":{\"575\":1}}],[\"配置类+注解方式\",{\"1\":{\"571\":1}}],[\"配置类和扫描注解\",{\"0\":{\"571\":1},\"1\":{\"542\":1}}],[\"配置类上开启\",{\"1\":{\"588\":1}}],[\"配置类上面加上\",{\"1\":{\"244\":1}}],[\"配置类上加这个注解\",{\"1\":{\"212\":1}}],[\"配置类方式\",{\"1\":{\"236\":1,\"572\":1,\"588\":1}}],[\"配置类方式实现\",{\"1\":{\"236\":1,\"572\":1}}],[\"配置类等\",{\"1\":{\"230\":1,\"561\":1}}],[\"配置类\",{\"0\":{\"569\":1},\"1\":{\"94\":1,\"235\":1,\"244\":1,\"542\":1,\"571\":1}}],[\"配置多个过滤器\",{\"1\":{\"93\":1}}],[\"配置拦截资源路径\",{\"1\":{\"93\":1}}],[\"配置相关信息\",{\"1\":{\"76\":1}}],[\"配置tomcat端口号\",{\"1\":{\"65\":1}}],[\"配置\",{\"0\":{\"244\":1},\"1\":{\"59\":1,\"390\":1,\"438\":1,\"496\":1,\"508\":1,\"555\":1,\"562\":2,\"570\":1,\"628\":3}}],[\"配置本地仓库地址\",{\"1\":{\"395\":1,\"440\":1}}],[\"配置本地仓库\",{\"1\":{\"56\":1}}],[\"替我们做的\",{\"1\":{\"388\":1}}],[\"替代xml文件的java配置\",{\"1\":{\"628\":1}}],[\"替代配置xml文件\",{\"1\":{\"235\":2,\"571\":1}}],[\"替代<context\",{\"1\":{\"235\":3,\"571\":2}}],[\"替代\",{\"1\":{\"235\":3,\"242\":2,\"571\":2,\"579\":2}}],[\"替代application\",{\"1\":{\"235\":1,\"236\":1,\"571\":1,\"572\":1}}],[\"替换等操作更加的方便和快捷\",{\"1\":{\"551\":1}}],[\"替换了之前的大部分元素\",{\"1\":{\"524\":1}}],[\"替换\",{\"1\":{\"334\":1}}],[\"替换非法字符\",{\"1\":{\"317\":1}}],[\"替换t1\",{\"1\":{\"194\":1,\"205\":1}}],[\"替换字符\",{\"1\":{\"166\":1}}],[\"替换为具体的宠物信息\",{\"1\":{\"188\":1}}],[\"替换为\",{\"1\":{\"81\":1}}],[\"装配失败\",{\"1\":{\"566\":3}}],[\"装配数据源\",{\"1\":{\"562\":2}}],[\"装配事务管理实现对象\",{\"1\":{\"244\":1,\"607\":1}}],[\"装饰器\",{\"1\":{\"328\":1}}],[\"装不上就不装\",{\"1\":{\"233\":1,\"566\":2}}],[\"装不上不报错\",{\"1\":{\"233\":1}}],[\"装备\",{\"1\":{\"139\":1}}],[\"佛系装配\",{\"1\":{\"233\":1,\"566\":1}}],[\"参与自动装配的组件\",{\"1\":{\"233\":1,\"566\":1}}],[\"参数必须要在jar之前\",{\"1\":{\"686\":1}}],[\"参数包含其他bean和基本数据类型\",{\"1\":{\"558\":1}}],[\"参数输出\",{\"1\":{\"540\":1}}],[\"参数输入\",{\"1\":{\"540\":1}}],[\"参数和返回值\",{\"1\":{\"493\":1}}],[\"参数说明\",{\"1\":{\"466\":1}}],[\"参数名\",{\"1\":{\"463\":1,\"464\":1,\"465\":1,\"466\":1}}],[\"参数名说明\",{\"1\":{\"81\":1}}],[\"参数是\",{\"1\":{\"582\":4,\"583\":1}}],[\"参数是放在请求对象定制的方法中\",{\"1\":{\"354\":1}}],[\"参数是usb类型\",{\"1\":{\"147\":1}}],[\"参数引用法\",{\"1\":{\"238\":1,\"573\":1}}],[\"参数代表了了范围\",{\"1\":{\"160\":1}}],[\"参数列表用小括号\",{\"1\":{\"478\":1}}],[\"参数列表\",{\"1\":{\"139\":1,\"140\":1,\"141\":1,\"142\":2,\"144\":5,\"150\":1,\"478\":1,\"589\":1,\"592\":1}}],[\"参数列表不一样\",{\"1\":{\"137\":1}}],[\"参数列表也一样\",{\"1\":{\"137\":1}}],[\"参数的填写方式\",{\"1\":{\"224\":1}}],[\"参数的类型不同\",{\"1\":{\"133\":1}}],[\"参数的个数不同\",{\"1\":{\"133\":1}}],[\"参数的小括号可以省略\",{\"1\":{\"17\":1}}],[\"参数传递\",{\"1\":{\"81\":1}}],[\"参数对应不一致可以使用\",{\"1\":{\"68\":1}}],[\"参数大小无限制的\",{\"1\":{\"34\":1}}],[\"参数this\",{\"1\":{\"28\":1}}],[\"参数类型\",{\"1\":{\"17\":1}}],[\"参数2\",{\"1\":{\"8\":2,\"39\":2,\"562\":1}}],[\"参数1\",{\"1\":{\"8\":3,\"39\":2,\"562\":1}}],[\"参数\",{\"1\":{\"7\":3,\"8\":1,\"26\":2,\"126\":1,\"141\":1,\"226\":1,\"353\":1,\"515\":1,\"559\":1,\"583\":1,\"655\":1,\"686\":1}}],[\"虽然适配了springboot3\",{\"1\":{\"677\":1}}],[\"虽然从技术层面上来讲\",{\"1\":{\"628\":1}}],[\"虽然框架提高了开发效率并可以帮助开发人员解决常见问题\",{\"1\":{\"545\":1}}],[\"虽然它看起来令人望而生畏\",{\"1\":{\"517\":1}}],[\"虽然它们本质上一样\",{\"1\":{\"231\":1,\"564\":1}}],[\"虽然是方法调用\",{\"1\":{\"238\":1,\"573\":1}}],[\"虽然仅是两个对象的\",{\"1\":{\"174\":1}}],[\"符合条件的每个方法都是一个具体的连接点\",{\"1\":{\"584\":1}}],[\"符号即可\",{\"1\":{\"229\":1,\"561\":1}}],[\"符串添加到字符串池中\",{\"1\":{\"165\":1}}],[\"工作流程\",{\"1\":{\"566\":1}}],[\"工作在web服务器上\",{\"1\":{\"493\":1}}],[\"工程创建\",{\"1\":{\"457\":1}}],[\"工程\",{\"1\":{\"425\":1,\"461\":1}}],[\"工具类准备\",{\"1\":{\"652\":1}}],[\"工具类对上面的生成和解析代码进行了封装\",{\"1\":{\"92\":1}}],[\"工具\",{\"1\":{\"393\":1,\"663\":1}}],[\"工号\",{\"1\":{\"334\":2}}],[\"工厂bean\",{\"1\":{\"628\":3}}],[\"工厂bean的标识为\",{\"1\":{\"229\":1}}],[\"工厂类\",{\"1\":{\"493\":1}}],[\"工厂模式\",{\"1\":{\"493\":1}}],[\"工厂\",{\"1\":{\"493\":1}}],[\"工厂方法自定义的逻辑创建bean\",{\"1\":{\"230\":1,\"561\":1}}],[\"否者不生效\",{\"1\":{\"686\":1}}],[\"否继续执行saveorupdate\",{\"1\":{\"471\":1}}],[\"否插入一条记录\",{\"1\":{\"471\":1}}],[\"否\",{\"1\":{\"228\":3,\"480\":4,\"560\":3,\"565\":3}}],[\"否则响应失败提示\",{\"1\":{\"655\":1}}],[\"否则执行方法并将方法返回值存入缓存中\",{\"1\":{\"584\":1}}],[\"否则不提前设计和修改实体类\",{\"1\":{\"517\":1}}],[\"否则不渲染\",{\"1\":{\"43\":1}}],[\"否则重新尝试\",{\"1\":{\"483\":1}}],[\"否则表示数据已被修改\",{\"1\":{\"483\":1}}],[\"否则说明有其他线程修改了该资源\",{\"1\":{\"483\":1}}],[\"否则可能会导致生成的id不唯一或不符合预期的顺序\",{\"1\":{\"480\":1}}],[\"否则可能无异于ddos攻击\",{\"1\":{\"334\":1}}],[\"否则插入不了\",{\"1\":{\"370\":1}}],[\"否则将产生语法错误\",{\"1\":{\"325\":1}}],[\"否则抛出异常\",{\"1\":{\"249\":2,\"612\":2}}],[\"否则抛异常\",{\"1\":{\"98\":2,\"186\":1}}],[\"否则以非事务方式执行\",{\"1\":{\"249\":1,\"612\":1}}],[\"否则创建一个新事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"否则返回空列表\",{\"1\":{\"322\":1}}],[\"否则返回none\",{\"1\":{\"320\":1,\"321\":1}}],[\"否则返回该子字符串首次出现的索引\",{\"1\":{\"317\":1}}],[\"否则返回\",{\"1\":{\"229\":1,\"561\":1}}],[\"否则返回false\",{\"1\":{\"170\":1}}],[\"否则会报异常\",{\"1\":{\"194\":1,\"205\":1}}],[\"否则怕抛filenotfoundexception\",{\"1\":{\"183\":1}}],[\"否则报错\",{\"1\":{\"154\":1}}],[\"否则\",{\"1\":{\"147\":1,\"165\":1}}],[\"时于粽里得杨梅\",{\"1\":{\"651\":1}}],[\"时一样\",{\"1\":{\"596\":1}}],[\"时特别有用\",{\"1\":{\"571\":1}}],[\"时创建对象\",{\"1\":{\"560\":1}}],[\"时机\",{\"1\":{\"552\":1}}],[\"时使用\",{\"1\":{\"415\":2}}],[\"时使用的依赖范围以及配置\",{\"1\":{\"415\":1}}],[\"时\",{\"1\":{\"228\":1,\"415\":1,\"557\":1,\"560\":1,\"565\":1,\"656\":1}}],[\"时间戳\",{\"1\":{\"480\":1,\"483\":1}}],[\"时间\",{\"1\":{\"34\":1,\"40\":2,\"246\":1,\"625\":1}}],[\"消费者到底会选哪款纯电动车\",{\"1\":{\"651\":1}}],[\"消费型\",{\"1\":{\"17\":1}}],[\"消息资源处理\",{\"1\":{\"552\":1}}],[\"消息传递等\",{\"1\":{\"665\":1}}],[\"消息传递等常见组件\",{\"1\":{\"665\":1}}],[\"消息传递\",{\"1\":{\"549\":1}}],[\"消除对外部远程仓库的大量重复请求\",{\"1\":{\"421\":1}}],[\"消除了主属性对主码的部分依赖和传递\",{\"1\":{\"341\":1}}],[\"消除传递依赖\",{\"1\":{\"341\":1}}],[\"消除非主属性对主码部分依赖\",{\"1\":{\"341\":1}}],[\"消失的她\",{\"1\":{\"225\":1,\"558\":1}}],[\"赵六\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"赵伟风\",{\"1\":{\"224\":3,\"558\":3}}],[\"赵亦\",{\"1\":{\"12\":1}}],[\"里面已经对各种常用依赖的版本进行了管理\",{\"1\":{\"664\":1}}],[\"里面所有的模块都是开源免费的\",{\"1\":{\"636\":1}}],[\"里面\",{\"1\":{\"593\":1}}],[\"里面的\",{\"1\":{\"465\":1}}],[\"里面的内容会被直接求值\",{\"1\":{\"334\":1}}],[\"里面将类交给ioc容器管理\",{\"1\":{\"224\":1}}],[\"里面可以有输出语句\",{\"1\":{\"132\":1}}],[\"送到需要它的地方\",{\"1\":{\"224\":1}}],[\"`nick\",{\"1\":{\"651\":1}}],[\"`news\",{\"1\":{\"651\":33}}],[\"`is\",{\"1\":{\"651\":3}}],[\"`id`\",{\"1\":{\"514\":2}}],[\"`version`\",{\"1\":{\"651\":3}}],[\"`uid`\",{\"1\":{\"651\":2}}],[\"`update\",{\"1\":{\"651\":1}}],[\"`username\",{\"1\":{\"651\":1}}],[\"`username`\",{\"1\":{\"514\":1,\"651\":2}}],[\"`user\",{\"1\":{\"651\":1}}],[\"`user`\",{\"1\":{\"514\":1}}],[\"`create\",{\"1\":{\"651\":1}}],[\"`customer\",{\"1\":{\"517\":8}}],[\"`page\",{\"1\":{\"651\":1}}],[\"`password`\",{\"1\":{\"514\":1}}],[\"`publisher`\",{\"1\":{\"651\":1}}],[\"`article`\",{\"1\":{\"651\":1}}],[\"`hid`\",{\"1\":{\"651\":2}}],[\"```java\",{\"1\":{\"564\":3}}],[\"```\",{\"1\":{\"557\":1,\"560\":1,\"564\":1}}],[\"```xml\",{\"1\":{\"223\":1,\"224\":1,\"557\":1,\"560\":1}}],[\"`order\",{\"1\":{\"517\":6}}],[\"`tname`\",{\"1\":{\"651\":1}}],[\"`tid`\",{\"1\":{\"651\":2}}],[\"`title`\",{\"1\":{\"651\":1}}],[\"`type`\",{\"1\":{\"651\":1}}],[\"`t\",{\"1\":{\"493\":4,\"517\":6,\"625\":4}}],[\"`mybatis\",{\"1\":{\"493\":2,\"625\":2}}],[\"`more`\",{\"1\":{\"0\":1}}],[\"`\",{\"1\":{\"401\":9,\"445\":9}}],[\"域中\",{\"1\":{\"221\":2,\"552\":1}}],[\"域名\",{\"1\":{\"90\":1,\"189\":1,\"200\":1,\"353\":1}}],[\"了核心逻辑代码的类\",{\"1\":{\"583\":1}}],[\"了控制权\",{\"1\":{\"221\":1,\"553\":1}}],[\"了解当地发展特色种植产业和文旅产业等情况\",{\"1\":{\"651\":1}}],[\"了解\",{\"0\":{\"219\":1,\"391\":1,\"527\":1,\"596\":1},\"1\":{\"164\":1,\"211\":1,\"249\":1,\"406\":1,\"489\":1,\"542\":1,\"583\":1,\"612\":1}}],[\"了解一下\",{\"0\":{\"156\":1}}],[\"建立私服后\",{\"1\":{\"421\":1}}],[\"建立私服之后\",{\"1\":{\"421\":1}}],[\"建立了\",{\"1\":{\"421\":1}}],[\"建立数据库连接的具体信息\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"建议这样做\",{\"1\":{\"623\":1}}],[\"建议配置文件\",{\"1\":{\"622\":1}}],[\"建议开发测试时启用该功能\",{\"1\":{\"460\":1}}],[\"建议替换成本地配置好的maven\",{\"1\":{\"396\":1,\"440\":1}}],[\"建议每行不超过80个字符\",{\"1\":{\"293\":1}}],[\"建议创建一个存储切点的类\",{\"1\":{\"215\":1}}],[\"建议使用\",{\"1\":{\"529\":1}}],[\"建议使用小括号\",{\"1\":{\"293\":1}}],[\"建议使用实现runnable接口的方式\",{\"1\":{\"195\":1,\"206\":1}}],[\"建议使用驼峰命名\",{\"1\":{\"38\":1}}],[\"建议\",{\"1\":{\"195\":1,\"206\":1,\"591\":1}}],[\"建议加上\",{\"1\":{\"38\":1}}],[\"较大的数\",{\"1\":{\"217\":1,\"593\":1}}],[\"较小的数\",{\"1\":{\"217\":1,\"593\":1}}],[\"语言所需的一切\",{\"1\":{\"549\":1}}],[\"语言的文本处理器\",{\"1\":{\"524\":1}}],[\"语言\",{\"1\":{\"524\":1}}],[\"语言就是面向过程的\",{\"1\":{\"334\":1}}],[\"语义不重复不遗漏\",{\"1\":{\"398\":1,\"442\":1}}],[\"语文\",{\"1\":{\"334\":2}}],[\"语法细节\",{\"1\":{\"590\":1}}],[\"语法为\",{\"1\":{\"478\":4}}],[\"语法\",{\"1\":{\"345\":1,\"450\":1,\"475\":1}}],[\"语法高亮\",{\"1\":{\"286\":1}}],[\"语法和类名一致\",{\"1\":{\"214\":1,\"590\":1}}],[\"语句来提高性能\",{\"1\":{\"537\":1}}],[\"语句和映射配置\",{\"1\":{\"537\":2}}],[\"语句和数据库的底层知识有一定的了解\",{\"1\":{\"537\":1}}],[\"语句和转换代码\",{\"1\":{\"537\":1}}],[\"语句并将查询结果集转换成实体对象\",{\"1\":{\"537\":1}}],[\"语句并将查询结果转换成实体对象\",{\"1\":{\"537\":1}}],[\"语句或者配置文件\",{\"1\":{\"537\":1}}],[\"语句时按顺序调用\",{\"1\":{\"534\":1}}],[\"语句有多痛苦\",{\"1\":{\"524\":1}}],[\"语句的\",{\"1\":{\"515\":1}}],[\"语句中只支持一个\",{\"1\":{\"512\":1}}],[\"语句以及其执行时间\",{\"1\":{\"460\":1}}],[\"语句块\",{\"1\":{\"301\":5}}],[\"语句\",{\"1\":{\"154\":1,\"465\":1,\"474\":1,\"485\":1,\"514\":1,\"534\":2,\"537\":3}}],[\"部门和员工\",{\"1\":{\"517\":1}}],[\"部门平均工资\",{\"1\":{\"510\":1}}],[\"部分具体和模糊\",{\"1\":{\"590\":1}}],[\"部分任意\",{\"1\":{\"590\":1}}],[\"部分条件满足\",{\"1\":{\"525\":1,\"526\":1}}],[\"部分替换成\",{\"1\":{\"509\":1,\"513\":1}}],[\"部分文件没有被编译\",{\"1\":{\"450\":1}}],[\"部分模糊\",{\"1\":{\"214\":2}}],[\"部署本地或者私服仓库\",{\"1\":{\"450\":1}}],[\"部署到公网的话员工在家里也可以办公使用\",{\"1\":{\"421\":1}}],[\"部署等构建过程\",{\"1\":{\"390\":1,\"439\":1}}],[\"部署等\",{\"1\":{\"59\":1}}],[\"之前的版本中\",{\"1\":{\"524\":1}}],[\"之间只能同时使用一个\",{\"1\":{\"515\":2}}],[\"之间都不会存在版本兼容性问题\",{\"1\":{\"448\":1}}],[\"之后\",{\"1\":{\"493\":1}}],[\"之后在数据库中仍旧能看到此条数据记录\",{\"1\":{\"481\":1}}],[\"之后查询不到此条被删除的数据\",{\"1\":{\"481\":1}}],[\"之两个整合一起写\",{\"1\":{\"214\":1}}],[\"之一\",{\"1\":{\"93\":1}}],[\"具有良好的可重用性\",{\"1\":{\"549\":1}}],[\"具有映射关系\",{\"1\":{\"169\":1}}],[\"具体而言\",{\"1\":{\"664\":1,\"665\":1}}],[\"具体多少配置类以及对应容器关系\",{\"0\":{\"622\":1},\"1\":{\"615\":1}}],[\"具体值\",{\"1\":{\"590\":1}}],[\"具体的功能是框架检测到注解标记的位置\",{\"1\":{\"564\":1}}],[\"具体的sql写到对应的mapper文件\",{\"1\":{\"493\":1}}],[\"具体创建多少个bean的实例对象\",{\"1\":{\"560\":1,\"565\":1}}],[\"具体来说\",{\"1\":{\"534\":1}}],[\"具体来说是由父工程的dependencymanagement来决定\",{\"1\":{\"418\":1,\"452\":1}}],[\"具体配置\",{\"1\":{\"509\":1}}],[\"具体技术和方案\",{\"1\":{\"483\":1}}],[\"具体还是得看公司业务的性质是否是保密的等等\",{\"1\":{\"421\":1}}],[\"具体事务的实现由第三方框架实现\",{\"1\":{\"243\":1,\"603\":1}}],[\"具体操作过程中\",{\"1\":{\"243\":1,\"602\":1}}],[\"具体包\",{\"1\":{\"214\":1}}],[\"具体定义几个方法\",{\"1\":{\"212\":1}}],[\"织入\",{\"1\":{\"211\":1,\"584\":1}}],[\"环形队列\",{\"0\":{\"370\":1}}],[\"环境激活\",{\"1\":{\"671\":1}}],[\"环境下使用任何功能都必须基于\",{\"1\":{\"548\":1}}],[\"环境配置\",{\"1\":{\"496\":1}}],[\"环境变量\",{\"1\":{\"440\":2,\"457\":1,\"496\":1}}],[\"环境执行构建操作\",{\"1\":{\"389\":1}}],[\"环境仍需构建\",{\"1\":{\"388\":1}}],[\"环境创建\",{\"1\":{\"221\":2,\"552\":1}}],[\"环境准备\",{\"0\":{\"48\":1}}],[\"环绕\",{\"1\":{\"212\":1}}],[\"环绕通知对应整个\",{\"1\":{\"592\":1}}],[\"环绕通知\",{\"0\":{\"592\":1},\"1\":{\"211\":1,\"216\":1,\"542\":1,\"584\":1,\"592\":4}}],[\"盖棺定论\",{\"1\":{\"211\":1,\"584\":1}}],[\"盖住其他窗口\",{\"1\":{\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"死于非命\",{\"1\":{\"211\":1,\"584\":1}}],[\"寿终正寝\",{\"1\":{\"211\":1,\"584\":1}}],[\"核心操作\",{\"1\":{\"602\":1}}],[\"核心就是\",{\"1\":{\"582\":1}}],[\"核心注解使用\",{\"0\":{\"480\":1},\"1\":{\"459\":1}}],[\"核心点\",{\"1\":{\"457\":1,\"540\":1,\"613\":1}}],[\"核心容器\",{\"1\":{\"221\":1,\"548\":1,\"553\":1}}],[\"核心关注点和横切关注点\",{\"1\":{\"211\":1,\"584\":1}}],[\"核心工作\",{\"1\":{\"59\":1}}],[\"拜把子\",{\"1\":{\"211\":1,\"583\":1}}],[\"产业振兴是乡村振兴的重中之重\",{\"1\":{\"651\":1}}],[\"产生反应堆\",{\"1\":{\"419\":1,\"453\":1}}],[\"产生其他错误时执行\",{\"1\":{\"334\":1}}],[\"产生除零错误时会执行\",{\"1\":{\"334\":1}}],[\"产生值错误时会运行\",{\"1\":{\"334\":1}}],[\"产生了大量重复代码\",{\"1\":{\"211\":1}}],[\"产品线名\",{\"1\":{\"398\":1,\"442\":1}}],[\"产品\",{\"1\":{\"46\":1}}],[\"减少开发者的手动配置工作\",{\"1\":{\"665\":1}}],[\"减少了手动配置的需要\",{\"1\":{\"665\":1}}],[\"减少了手动解析和配置依赖项的工作\",{\"1\":{\"665\":1}}],[\"减少了程序组件之间的耦合性\",{\"1\":{\"551\":1}}],[\"减少了我们的编码压力\",{\"1\":{\"551\":1}}],[\"减少重复依赖\",{\"1\":{\"448\":1}}],[\"减少对目标方法的调用和打扰\",{\"1\":{\"211\":1,\"583\":1}}],[\"减轻服务器端的存储压力\",{\"1\":{\"92\":1}}],[\"属于持久化层\",{\"1\":{\"493\":1}}],[\"属于表述层\",{\"1\":{\"493\":1}}],[\"属于结构型模式\",{\"1\":{\"211\":1,\"583\":1}}],[\"属性文件分离\",{\"1\":{\"671\":1}}],[\"属性配置文件使用\",{\"0\":{\"668\":1},\"1\":{\"660\":1}}],[\"属性的可选值由\",{\"1\":{\"612\":1}}],[\"属性的值\",{\"1\":{\"564\":1}}],[\"属性设置事务的传播行为\",{\"1\":{\"612\":1}}],[\"属性设置为\",{\"1\":{\"237\":1,\"573\":1}}],[\"属性表示\",{\"1\":{\"566\":1}}],[\"属性等等\",{\"1\":{\"560\":1,\"565\":1}}],[\"属性定义\",{\"1\":{\"555\":1}}],[\"属性是标识单个\",{\"1\":{\"555\":1}}],[\"属性用于指定数据库类型\",{\"1\":{\"535\":1}}],[\"属性含义\",{\"1\":{\"521\":1}}],[\"属性中包含对方对象集合\",{\"1\":{\"517\":1}}],[\"属性中包含对方对象\",{\"1\":{\"517\":1}}],[\"属性来插入主键值\",{\"1\":{\"512\":1}}],[\"属性来指定查询到的\",{\"1\":{\"512\":1}}],[\"属性来指示该\",{\"1\":{\"237\":1,\"573\":1}}],[\"属性指定了\",{\"1\":{\"512\":1}}],[\"属性一致\",{\"1\":{\"426\":1}}],[\"属性为\",{\"1\":{\"398\":3,\"442\":3,\"608\":1}}],[\"属性为可选项\",{\"1\":{\"398\":1,\"442\":1}}],[\"属性默认值为\",{\"1\":{\"237\":1,\"573\":1}}],[\"属性对象\",{\"1\":{\"40\":2}}],[\"属性名对应数据库的列名\",{\"1\":{\"480\":1}}],[\"属性名\",{\"1\":{\"40\":1,\"225\":2,\"558\":2}}],[\"属性3\",{\"1\":{\"40\":1}}],[\"属性值\",{\"1\":{\"98\":1,\"258\":1,\"259\":1}}],[\"属性值3\",{\"1\":{\"40\":1}}],[\"属性值2\",{\"1\":{\"40\":1}}],[\"属性值1\",{\"1\":{\"40\":1}}],[\"属性2\",{\"1\":{\"40\":1}}],[\"属性1\",{\"1\":{\"40\":1}}],[\"属性和方法时\",{\"1\":{\"131\":1}}],[\"属性和方法\",{\"1\":{\"40\":1}}],[\"属性\",{\"0\":{\"328\":1},\"1\":{\"40\":6,\"108\":1,\"126\":1,\"135\":1,\"237\":1,\"257\":1,\"260\":1,\"334\":3,\"480\":2,\"496\":1,\"512\":1,\"515\":2,\"573\":1,\"613\":1}}],[\"属性ation\",{\"1\":{\"34\":1}}],[\"影响了\",{\"1\":{\"197\":1}}],[\"值便是结果行中的对应值\",{\"1\":{\"515\":1}}],[\"值一样\",{\"1\":{\"425\":1}}],[\"值\",{\"1\":{\"197\":5,\"476\":1,\"478\":1,\"480\":1}}],[\"尚未结束的情况下\",{\"1\":{\"197\":1,\"208\":1}}],[\"尚硅谷相关课程官方笔记\",{\"0\":{\"696\":1}}],[\"尚硅谷宣布\",{\"1\":{\"656\":3,\"657\":2}}],[\"尚硅谷3小时ajax入门到精通\",{\"1\":{\"250\":1}}],[\"尚硅谷\",{\"1\":{\"15\":1}}],[\"尚硅谷全新ssm教程\",{\"1\":{\"0\":1}}],[\"尚硅谷文件夹内笔记由尚硅谷官方而来\",{\"1\":{\"0\":1}}],[\"计划修改\",{\"1\":{\"641\":1}}],[\"计划删除\",{\"1\":{\"641\":1}}],[\"计划添加\",{\"1\":{\"641\":1}}],[\"计时等待<\",{\"1\":{\"196\":1,\"207\":1}}],[\"计算月薪\",{\"1\":{\"334\":1}}],[\"计算在字符串中的有效python表达式\",{\"1\":{\"295\":1}}],[\"计算此对象的哈希值\",{\"1\":{\"172\":1}}],[\"计算计算执行耗时\",{\"1\":{\"100\":1}}],[\"计算新的尺寸\",{\"1\":{\"22\":1}}],[\"二者入门版之间的价差大约在10万左右\",{\"1\":{\"651\":1}}],[\"二者必须成对出现\",{\"1\":{\"196\":1,\"207\":1}}],[\"二年三班\",{\"1\":{\"562\":1}}],[\"二维数组转稀疏数组\",{\"1\":{\"366\":1}}],[\"二位数组\",{\"1\":{\"365\":1}}],[\"二进制数据转换为字符串\",{\"1\":{\"351\":1}}],[\"二\",{\"0\":{\"392\":1,\"441\":1,\"494\":1,\"541\":1,\"546\":1,\"624\":1,\"649\":1,\"666\":1,\"701\":1},\"1\":{\"315\":3,\"436\":1,\"459\":1,\"489\":1,\"542\":1,\"615\":1,\"644\":1,\"660\":1}}],[\"二选一的情况下\",{\"1\":{\"301\":1}}],[\"二选一\",{\"1\":{\"232\":1,\"558\":1,\"565\":1}}],[\"二十三种设计模式中的一种\",{\"1\":{\"211\":1,\"583\":1}}],[\"二号\",{\"1\":{\"130\":1}}],[\"好比播放器的暂停和回复\",{\"1\":{\"196\":1,\"207\":1}}],[\"好处2\",{\"1\":{\"242\":1,\"580\":1}}],[\"好处1\",{\"1\":{\"242\":1,\"580\":1}}],[\"好处\",{\"1\":{\"9\":1,\"10\":1}}],[\"联系\",{\"1\":{\"195\":1,\"206\":1}}],[\"联网的底层细节被隐藏在java的本机安装系统里面\",{\"1\":{\"189\":1,\"200\":1}}],[\"那就产生了大量重复的代码\",{\"1\":{\"583\":1}}],[\"那就太好了\",{\"1\":{\"517\":1}}],[\"那还得再声明更多个静态代理类\",{\"1\":{\"583\":1}}],[\"那它和\",{\"1\":{\"566\":1}}],[\"那应该设置为集合包含的类型\",{\"1\":{\"515\":1}}],[\"那个线程就能执行需要被同步的代码\",{\"1\":{\"197\":1,\"208\":1}}],[\"那个线程获取了锁\",{\"1\":{\"197\":1,\"208\":1}}],[\"那样就不是多线程了\",{\"1\":{\"194\":1,\"205\":1}}],[\"那么蔚来et5t的发布\",{\"1\":{\"651\":1}}],[\"那么小鹏g6驾驶感受如何\",{\"1\":{\"651\":1}}],[\"那么在缓存中命中数据的情况下\",{\"1\":{\"593\":1}}],[\"那么在collection属性中默认可以使用collection或list来引用这个list集合\",{\"1\":{\"529\":1}}],[\"那么谁帮我们完成我们的期待\",{\"1\":{\"551\":1}}],[\"那么mybatis无法识别自定义名称\",{\"1\":{\"504\":1}}],[\"那么maven项目的构件就高度依赖外部的远程仓库\",{\"1\":{\"421\":1}}],[\"那么\",{\"1\":{\"448\":1}}],[\"那么接下来我们还要继续配置\",{\"1\":{\"425\":1}}],[\"那么接口中可以包含的内容有\",{\"1\":{\"139\":1}}],[\"那么可以省略\",{\"1\":{\"418\":1,\"452\":1}}],[\"那么我们就可以把创建这个对象的相关代码封装到一个\",{\"1\":{\"493\":1}}],[\"那么我们执行项目c时\",{\"1\":{\"415\":1}}],[\"那么我们可以将需要的依赖项的信息编写到maven工程的配置文件\",{\"1\":{\"439\":1}}],[\"那么我们可以将想要的依赖项的信息编写到maven工程的配置文件\",{\"1\":{\"390\":1}}],[\"那么我们可以说\",{\"1\":{\"415\":1}}],[\"那么需要在open方法中\",{\"1\":{\"356\":1}}],[\"那么操作系统是如何在关系所有软件后\",{\"1\":{\"338\":1}}],[\"那么不会发生线程安全问题\",{\"1\":{\"197\":1,\"208\":1}}],[\"那么其后的代码的代码继续执行\",{\"1\":{\"154\":1}}],[\"那么程序就终止执行\",{\"1\":{\"153\":1}}],[\"那么必须给对象起个名字\",{\"1\":{\"151\":1}}],[\"那么就没有webapp\",{\"1\":{\"675\":1}}],[\"那么就可以将\",{\"1\":{\"608\":1}}],[\"那么就执行otherwise分支\",{\"1\":{\"528\":1}}],[\"那么就必须使用单独定义的实现类了\",{\"1\":{\"151\":1}}],[\"那么就无法调用子类原本特有的内容\",{\"1\":{\"146\":1}}],[\"那么final关键字就可以省略\",{\"1\":{\"150\":1}}],[\"那么格式是\",{\"1\":{\"149\":1}}],[\"那么这种情况下就可以省略该类的定义\",{\"1\":{\"151\":1}}],[\"那么这个局部变量必须是\",{\"1\":{\"150\":1}}],[\"那么这个实现类自己就必须是抽象类\",{\"1\":{\"139\":1}}],[\"那么这就是一个局部内部类\",{\"1\":{\"150\":1}}],[\"那么这就是一个类内部包含另一个类\",{\"1\":{\"148\":1}}],[\"那么只能用static\",{\"1\":{\"132\":1}}],[\"那么编译器将会默认赠送一个构造方法\",{\"1\":{\"127\":1}}],[\"那么传递参数时需要http\",{\"1\":{\"68\":1}}],[\"那么会重复的去调用keypressed方法\",{\"1\":{\"28\":1}}],[\"问题解决\",{\"1\":{\"677\":1}}],[\"问题是不规范\",{\"1\":{\"387\":1}}],[\"问题\",{\"0\":{\"369\":1},\"1\":{\"226\":1,\"559\":1,\"628\":1}}],[\"问题2\",{\"1\":{\"194\":1,\"205\":1}}],[\"问题1\",{\"1\":{\"194\":1,\"205\":1}}],[\"问题描述\",{\"1\":{\"142\":1}}],[\"他可以将一些配置属性批量注入到bean对象\",{\"1\":{\"670\":1}}],[\"他仅出战27场比赛\",{\"1\":{\"651\":1}}],[\"他们经常发生在核心关注点的多处\",{\"1\":{\"584\":1}}],[\"他们从同一个堆中分配对象\",{\"1\":{\"192\":1,\"203\":1}}],[\"他会简化动态代理的实现\",{\"1\":{\"583\":1}}],[\"他会根据目标类的接口动态生成一个代理对象\",{\"1\":{\"211\":1,\"583\":1}}],[\"他主要是将附加功能代码提取到代理中执行\",{\"1\":{\"583\":1}}],[\"他只是规定了注解和注解的含义\",{\"1\":{\"566\":1}}],[\"他不需要有set方法\",{\"1\":{\"566\":1}}],[\"他的功效有具体的子注解实现\",{\"1\":{\"665\":1}}],[\"他的元素可以随时删除或修改\",{\"1\":{\"313\":1}}],[\"他的用法类似var\",{\"1\":{\"38\":1}}],[\"系统要求\",{\"0\":{\"663\":1},\"1\":{\"660\":1}}],[\"系统中可能出现各种异常情况\",{\"1\":{\"584\":1}}],[\"系统依赖范围\",{\"1\":{\"411\":1}}],[\"系统在运行时会为每个进程分配不同的内存区域\",{\"1\":{\"192\":1,\"203\":1}}],[\"系统运行一个程序即是一个进程从创建\",{\"1\":{\"192\":1,\"203\":1}}],[\"系别\",{\"1\":{\"12\":1}}],[\"得以在30万以下快速开疆辟土\",{\"1\":{\"651\":1}}],[\"得到5\",{\"1\":{\"651\":1}}],[\"得到size之后\",{\"1\":{\"371\":1}}],[\"得到链表的总的长度getlength\",{\"1\":{\"371\":1}}],[\"得到的稀疏数组为\",{\"1\":{\"366\":1}}],[\"得到有效数据的个数sum\",{\"1\":{\"365\":1}}],[\"得到发来消息的ip\",{\"1\":{\"191\":1,\"202\":1}}],[\"得到一个输出流\",{\"1\":{\"191\":1,\"202\":1}}],[\"得出\",{\"1\":{\"116\":2}}],[\"过期则响应登录过期信息\",{\"1\":{\"657\":1}}],[\"过期\",{\"1\":{\"657\":1}}],[\"过期出现异常\",{\"1\":{\"655\":1}}],[\"过期可以重新登录获取\",{\"1\":{\"655\":1}}],[\"过程比较繁琐\",{\"1\":{\"628\":1}}],[\"过proceedingjoinpoint对象调用目标方法\",{\"1\":{\"592\":1}}],[\"过时的方法\",{\"1\":{\"196\":1,\"207\":1}}],[\"过于理想化\",{\"1\":{\"189\":1,\"200\":1}}],[\"过滤器filter会拦截所有的资源\",{\"1\":{\"94\":1}}],[\"过滤器需要实现filter接口\",{\"1\":{\"94\":1}}],[\"过滤器链\",{\"1\":{\"93\":1}}],[\"过滤器一般完成一些通用的操作\",{\"1\":{\"93\":1}}],[\"过滤器可以把对资源的请求拦截下来\",{\"1\":{\"93\":1}}],[\"过滤技术filter\",{\"0\":{\"93\":1}}],[\"读5个字节\",{\"1\":{\"351\":1}}],[\"读文件\",{\"1\":{\"334\":1}}],[\"读已提交\",{\"1\":{\"248\":1,\"611\":1}}],[\"读未提交\",{\"1\":{\"248\":1,\"611\":1}}],[\"读出文件出现乱码\",{\"1\":{\"188\":1}}],[\"读\",{\"1\":{\"188\":1}}],[\"读取属性文件中前缀为spring\",{\"1\":{\"670\":1}}],[\"读取方式和properties一致\",{\"1\":{\"669\":1}}],[\"读取版本\",{\"1\":{\"657\":1}}],[\"读取外部配置文件\",{\"1\":{\"555\":1,\"628\":2}}],[\"读取一行\",{\"1\":{\"351\":1}}],[\"读取配置文件\",{\"1\":{\"234\":1,\"559\":1,\"668\":1,\"669\":1}}],[\"读取来袭服务端的消息\",{\"1\":{\"191\":1,\"202\":1}}],[\"读取模板文件d\",{\"1\":{\"188\":1}}],[\"读取文件的一个字节\",{\"1\":{\"183\":1}}],[\"读取的文件一定要存在\",{\"1\":{\"183\":1}}],[\"读取其内容到程序中\",{\"1\":{\"183\":1}}],[\"读取字符串\",{\"1\":{\"109\":1}}],[\"您需要添加mybatis和mysql驱动的依赖\",{\"1\":{\"679\":1}}],[\"您还知道端午有哪些创意美食吗\",{\"1\":{\"651\":1}}],[\"您可以在配置文件中设置这些参数来定制和配置您的web应用程序\",{\"1\":{\"674\":1}}],[\"您可以通过在配置文件中设置spring\",{\"1\":{\"674\":1}}],[\"您可以通过在配置文件中设置server\",{\"1\":{\"674\":2}}],[\"您可以使用在\",{\"1\":{\"573\":1}}],[\"您可以检索\",{\"1\":{\"555\":1}}],[\"您可以获取并使用服务器的响应了\",{\"1\":{\"254\":1}}],[\"您拥有完全配置且可执行的系统或应用程序\",{\"1\":{\"552\":1}}],[\"您的bmi值为\",{\"1\":{\"334\":1}}],[\"您的bmi结果为\",{\"1\":{\"334\":1}}],[\"您的成绩为\",{\"1\":{\"334\":1}}],[\"您查询的值不在本字典中\",{\"1\":{\"334\":1}}],[\"您查询的\",{\"1\":{\"334\":1}}],[\"您点播的电影不存在\",{\"1\":{\"328\":1}}],[\"您选择了\",{\"1\":{\"328\":2}}],[\"您好\",{\"1\":{\"188\":1,\"334\":1}}],[\"您输入的数据有误\",{\"1\":{\"135\":1}}],[\"模糊值\",{\"1\":{\"590\":1}}],[\"模拟\",{\"1\":{\"592\":3}}],[\"模拟查询全部学生\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"模拟浏览器发送请求\",{\"1\":{\"355\":1}}],[\"模拟浏览器向服务器发送请求\",{\"1\":{\"351\":2}}],[\"模式和逻辑\",{\"1\":{\"545\":1}}],[\"模式\",{\"1\":{\"460\":1}}],[\"模式等等\",{\"1\":{\"243\":1,\"602\":1}}],[\"模型版本\",{\"1\":{\"409\":1,\"447\":1}}],[\"模板存放在\",{\"1\":{\"188\":1}}],[\"模板内容如下\",{\"1\":{\"188\":1}}],[\"模块之间可以互相调用\",{\"1\":{\"544\":1}}],[\"模块之间的依赖\",{\"1\":{\"72\":1}}],[\"模块名\",{\"1\":{\"398\":1,\"442\":1}}],[\"模块搜索\",{\"0\":{\"331\":1}}],[\"模块\",{\"0\":{\"330\":1},\"1\":{\"547\":1}}],[\"模块化和可扩展性\",{\"1\":{\"665\":1}}],[\"模块化的设计\",{\"1\":{\"549\":1}}],[\"模块化\",{\"1\":{\"47\":1}}],[\"举头望明月\",{\"1\":{\"188\":2}}],[\"举例代码\",{\"1\":{\"612\":1}}],[\"举例\",{\"1\":{\"17\":1,\"564\":1}}],[\"疑是地上霜\",{\"1\":{\"188\":2}}],[\"床前明月光\",{\"1\":{\"188\":2}}],[\"静夜思\",{\"1\":{\"188\":8}}],[\"静态资源可以是css\",{\"1\":{\"674\":1}}],[\"静态资源处理\",{\"0\":{\"675\":1},\"1\":{\"660\":1}}],[\"静态资源等\",{\"1\":{\"401\":2,\"445\":2}}],[\"静态编译后反汇编\",{\"1\":{\"338\":1}}],[\"静态代理确实实现了解耦\",{\"1\":{\"211\":1,\"583\":1}}],[\"静态代理\",{\"1\":{\"211\":1,\"583\":2}}],[\"静态代码块的执行要早于非静态代码块的执行\",{\"1\":{\"132\":1}}],[\"静态代码块\",{\"1\":{\"132\":1}}],[\"静态对象\",{\"1\":{\"192\":1,\"203\":1}}],[\"静态私有方法\",{\"1\":{\"142\":1,\"144\":1}}],[\"静态方法引用\",{\"1\":{\"478\":1}}],[\"静态方法名\",{\"1\":{\"141\":1,\"478\":1}}],[\"静态方法\",{\"1\":{\"139\":1,\"196\":2,\"207\":2}}],[\"静态只能覆盖静态\",{\"1\":{\"137\":1}}],[\"静态非静态都可以\",{\"1\":{\"132\":1}}],[\"静态的非静态的都可以\",{\"1\":{\"132\":1}}],[\"静态的代码块当中只能执行静态的结构\",{\"1\":{\"132\":1}}],[\"静态的结构\",{\"1\":{\"130\":1}}],[\"静态的方法内不可以有super和this关键字\",{\"1\":{\"130\":1}}],[\"静态的变量可以直接通过\",{\"1\":{\"130\":1}}],[\"静态的\",{\"1\":{\"130\":1}}],[\"静态域\",{\"1\":{\"125\":1}}],[\"静态初始化\",{\"1\":{\"124\":1}}],[\"郑州市\",{\"1\":{\"187\":1}}],[\"持久的保存在磁盘上\",{\"1\":{\"187\":1}}],[\"持久层配置和druid和mybatis配置\",{\"1\":{\"628\":1}}],[\"持久层配置编写\",{\"0\":{\"628\":1},\"1\":{\"615\":1}}],[\"持久层mapper配置\",{\"1\":{\"628\":1}}],[\"持久层使用jdbctemplate和druid技术\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"持久层框架对比\",{\"0\":{\"492\":1},\"1\":{\"489\":1}}],[\"持久层\",{\"1\":{\"71\":1,\"562\":1,\"568\":1,\"575\":1,\"617\":1}}],[\"允许读取\",{\"1\":{\"555\":1}}],[\"允许容器从各种外部资源\",{\"1\":{\"555\":1}}],[\"允许在指定\",{\"1\":{\"532\":1}}],[\"允许你根据用户事件来更新部分页面内容\",{\"1\":{\"250\":1}}],[\"允许把内存中的java对象转化成平台无关的二进制流\",{\"1\":{\"187\":1}}],[\"允许javascript与浏览器对话\",{\"1\":{\"40\":1}}],[\"允许jvm上运行js应用\",{\"1\":{\"16\":1}}],[\"块\",{\"1\":{\"186\":4,\"187\":4}}],[\"桌面\",{\"1\":{\"182\":1,\"185\":2,\"186\":3}}],[\"仅执行一个\",{\"1\":{\"528\":1}}],[\"仅适用于\",{\"1\":{\"515\":3}}],[\"仅适用于整个字符串的开始和结尾处\",{\"1\":{\"320\":1}}],[\"仅支持\",{\"1\":{\"484\":1}}],[\"仅仅只是建接口即可\",{\"1\":{\"493\":1}}],[\"仅仅通过少量配置即可实现单表大部分\",{\"1\":{\"460\":1}}],[\"仅仅表示容器中的一个组件\",{\"1\":{\"231\":1,\"564\":1}}],[\"仅限compile范围\",{\"1\":{\"433\":1,\"434\":1}}],[\"仅供学习交流参考\",{\"1\":{\"350\":1}}],[\"仅供参考\",{\"1\":{\"15\":1,\"32\":1,\"291\":1}}],[\"仅扫描\",{\"1\":{\"231\":1,\"564\":1}}],[\"仅扫描指定的组件\",{\"1\":{\"231\":1,\"564\":1}}],[\"仅涉及到如何创建\",{\"1\":{\"182\":1}}],[\"凡是与输入输出相关的类\",{\"1\":{\"182\":1}}],[\"凡是类都有构造器\",{\"1\":{\"138\":1}}],[\"刷新令牌等\",{\"1\":{\"655\":1}}],[\"刷新后方可生效\",{\"1\":{\"571\":1}}],[\"刷新重新下载即可\",{\"1\":{\"412\":1,\"449\":1}}],[\"刷新也不会重新下载\",{\"1\":{\"412\":1,\"449\":1}}],[\"刷新和校验\",{\"1\":{\"400\":1,\"444\":1}}],[\"刷新权限\",{\"1\":{\"277\":1}}],[\"刷新\",{\"1\":{\"181\":1}}],[\"刷新页面\",{\"1\":{\"28\":1}}],[\"流套接字\",{\"1\":{\"190\":1,\"201\":1}}],[\"流的分类\",{\"1\":{\"181\":1}}],[\"流\",{\"1\":{\"180\":1,\"181\":1,\"191\":1,\"202\":1}}],[\"流程控制\",{\"1\":{\"38\":1}}],[\"流程控制语句\",{\"1\":{\"38\":1}}],[\"站在文件结构的角度理解框架\",{\"1\":{\"545\":1}}],[\"站在程序的角度理解\",{\"1\":{\"180\":1}}],[\"站内文章更新时间仅为上传时间\",{\"1\":{\"0\":1}}],[\"操作成功\",{\"1\":{\"652\":1}}],[\"操作简便\",{\"1\":{\"492\":1}}],[\"操作智能分析阻断\",{\"1\":{\"460\":1}}],[\"操作\",{\"1\":{\"460\":3}}],[\"操作系统\",{\"0\":{\"337\":1},\"2\":{\"340\":1}}],[\"操作时间\",{\"0\":{\"246\":1}}],[\"操作collections以及map的工具类\",{\"1\":{\"180\":1}}],[\"操作失败\",{\"1\":{\"96\":1}}],[\"须在后面加一个逗号\",{\"1\":{\"312\":1}}],[\"须重写hashcode\",{\"1\":{\"177\":1}}],[\"须将子类放在父类的上面\",{\"1\":{\"154\":1}}],[\"李小黑\",{\"1\":{\"651\":1}}],[\"李敏镐\",{\"1\":{\"176\":2}}],[\"李四\",{\"1\":{\"124\":1,\"334\":2,\"562\":1,\"568\":1,\"575\":1,\"651\":1}}],[\"黎明\",{\"1\":{\"176\":2}}],[\"张小明\",{\"1\":{\"651\":1}}],[\"张志强曹宏炜各取一冠\",{\"1\":{\"651\":1}}],[\"张学友\",{\"1\":{\"176\":2}}],[\"张三\",{\"1\":{\"124\":1,\"135\":1,\"187\":1,\"224\":1,\"325\":2,\"327\":1,\"334\":3,\"558\":1,\"562\":1,\"568\":1,\"575\":1,\"651\":1,\"655\":4,\"656\":2,\"669\":1}}],[\"郭富城\",{\"1\":{\"176\":2}}],[\"万一返回false了呢\",{\"1\":{\"172\":1}}],[\"万国码\",{\"1\":{\"106\":1}}],[\"再获11亿美元投资\",{\"1\":{\"651\":1}}],[\"再次完成了pole\",{\"1\":{\"651\":1}}],[\"再指定一个异常类型\",{\"1\":{\"610\":1}}],[\"再指定配置文件\",{\"1\":{\"226\":1,\"559\":1}}],[\"再加外键约束检查是否有bug\",{\"1\":{\"517\":1}}],[\"再在后面的sql语句中引用这个对应关系\",{\"1\":{\"513\":1}}],[\"再修改\",{\"1\":{\"483\":1}}],[\"再读取稀疏数组后几行的数据\",{\"1\":{\"365\":1}}],[\"再平分剩余空间\",{\"1\":{\"258\":1,\"261\":1}}],[\"再提供一个分线程\",{\"1\":{\"194\":1,\"205\":1}}],[\"再通过equals\",{\"1\":{\"172\":1}}],[\"再做运算\",{\"1\":{\"114\":1}}],[\"进入修改页前\",{\"1\":{\"657\":1}}],[\"进入新闻首页\",{\"1\":{\"656\":1}}],[\"进入7月后期\",{\"1\":{\"651\":1}}],[\"进入项目后打开集成终端或者在src上右击选择在集成终端中打开\",{\"1\":{\"649\":1}}],[\"进入bin目录下\",{\"1\":{\"422\":1}}],[\"进一步封装\",{\"1\":{\"468\":1}}],[\"进一步增加了我们在\",{\"1\":{\"387\":1}}],[\"进度条消失即可\",{\"1\":{\"399\":1}}],[\"进程之间的数据交换和通信成本很高\",{\"1\":{\"192\":1,\"203\":1}}],[\"进程可进一步细化为线程\",{\"1\":{\"192\":1,\"203\":1}}],[\"进程作为操作系统调度和分配资源的最小单位\",{\"1\":{\"192\":1,\"203\":1}}],[\"进程是动态的\",{\"1\":{\"192\":1,\"203\":1}}],[\"进程\",{\"1\":{\"192\":1,\"203\":1}}],[\"进而推动相关芯片需求\",{\"1\":{\"651\":1}}],[\"进而导致应用程序出现兼容性问题和漏洞\",{\"1\":{\"545\":1}}],[\"进而后一个对象不能添加进来\",{\"1\":{\"174\":1}}],[\"进而保证set中元素的不可重复性\",{\"1\":{\"172\":1}}],[\"进行统一的配置管理\",{\"1\":{\"667\":1}}],[\"进行统一版本管理\",{\"1\":{\"452\":1}}],[\"进行数据更新\",{\"1\":{\"656\":1}}],[\"进行数据库操作时\",{\"1\":{\"537\":1}}],[\"进行身份验证\",{\"1\":{\"655\":1}}],[\"进行xml文件解析\",{\"1\":{\"628\":1}}],[\"进行业务组件扫描\",{\"1\":{\"627\":1}}],[\"进行包扫描\",{\"1\":{\"588\":1}}],[\"进行匹配\",{\"1\":{\"566\":1}}],[\"进行ioc容器的实例化工作\",{\"1\":{\"555\":1}}],[\"进行多表resultmap映射的时候\",{\"1\":{\"521\":1}}],[\"进行部分映射时比较困难\",{\"1\":{\"492\":1}}],[\"进行功能测试\",{\"1\":{\"461\":1}}],[\"进行重复依赖选择\",{\"1\":{\"416\":1,\"448\":1}}],[\"进行maven依赖管理\",{\"0\":{\"407\":1}}],[\"进行开发时\",{\"1\":{\"388\":1}}],[\"进行块注释\",{\"1\":{\"334\":1}}],[\"进行导入\",{\"1\":{\"239\":1}}],[\"进行完整注解开发\",{\"1\":{\"235\":1}}],[\"进行比较\",{\"1\":{\"174\":1}}],[\"进行处理\",{\"1\":{\"154\":1}}],[\"进行解析\",{\"1\":{\"151\":1}}],[\"进行\",{\"1\":{\"146\":1}}],[\"进行使用\",{\"1\":{\"139\":1}}],[\"进行初始化操作\",{\"1\":{\"132\":1}}],[\"共享数据\",{\"1\":{\"197\":1,\"208\":1}}],[\"共同点\",{\"1\":{\"195\":1,\"206\":1}}],[\"共有的结果复制给调用的集合\",{\"1\":{\"171\":1}}],[\"共用\",{\"1\":{\"130\":1}}],[\"求单链表中有效节点个数\",{\"1\":{\"371\":1}}],[\"求出当前队列有效数据的个数\",{\"1\":{\"370\":1}}],[\"求并集\",{\"1\":{\"171\":1}}],[\"求当前集合与coll的共有的元素\",{\"1\":{\"170\":1}}],[\"增删改操作返回的受影响行数\",{\"1\":{\"507\":1}}],[\"增加日程\",{\"1\":{\"634\":1}}],[\"增加全局配置自动识别对应关系\",{\"1\":{\"509\":1}}],[\"增加\",{\"1\":{\"331\":1}}],[\"增加当前行到文档末尾处的缩进层级\",{\"1\":{\"287\":1}}],[\"增强了系统的可靠性\",{\"1\":{\"545\":1}}],[\"增强对项目的控制\",{\"1\":{\"421\":1}}],[\"增强\",{\"1\":{\"211\":1,\"584\":1}}],[\"增强for循环\",{\"1\":{\"170\":1}}],[\"增\",{\"1\":{\"171\":1}}],[\"新闻作者\",{\"1\":{\"656\":2}}],[\"新闻所属类别\",{\"1\":{\"656\":2}}],[\"新闻所属类别编号\",{\"1\":{\"656\":5}}],[\"新闻正文\",{\"1\":{\"656\":2}}],[\"新闻浏览量\",{\"1\":{\"656\":5}}],[\"新闻标题\",{\"1\":{\"656\":5}}],[\"新闻id\",{\"1\":{\"656\":5}}],[\"新闻类别\",{\"1\":{\"656\":1}}],[\"新闻类型\",{\"1\":{\"656\":1}}],[\"新闻类型描述\",{\"1\":{\"651\":1}}],[\"新闻类型id\",{\"1\":{\"651\":1}}],[\"新闻\",{\"1\":{\"651\":1,\"656\":1}}],[\"新闻的修改和删除\",{\"1\":{\"646\":1}}],[\"新闻的分页浏览\",{\"1\":{\"646\":1}}],[\"新华社北京6月22日电\",{\"1\":{\"651\":1}}],[\"新需求\",{\"1\":{\"582\":1}}],[\"新增一列打包方式packaging\",{\"1\":{\"400\":1,\"444\":1}}],[\"新增类\",{\"1\":{\"398\":1,\"442\":1}}],[\"新增加的方法\",{\"1\":{\"171\":1}}],[\"新浪面试题\",{\"1\":{\"371\":1}}],[\"新的节点\",{\"1\":{\"370\":1}}],[\"新建\",{\"1\":{\"196\":2,\"207\":2}}],[\"新建html页面引入vue\",{\"1\":{\"42\":1}}],[\"明文密码\",{\"1\":{\"655\":2}}],[\"明文显示的输入框\",{\"1\":{\"29\":1}}],[\"明日科技\",{\"1\":{\"291\":1}}],[\"明确\",{\"1\":{\"170\":1}}],[\"弊端\",{\"1\":{\"169\":1}}],[\"高辉说\",{\"1\":{\"651\":1}}],[\"高温集中时段不一样\",{\"1\":{\"651\":1}}],[\"高中三班\",{\"1\":{\"562\":2,\"568\":2,\"575\":2}}],[\"高中二班\",{\"1\":{\"562\":3,\"568\":3,\"575\":3}}],[\"高中一班\",{\"1\":{\"562\":3,\"568\":3,\"575\":3}}],[\"高中的\",{\"1\":{\"169\":1}}],[\"高级特性\",{\"0\":{\"237\":1,\"560\":1,\"561\":1,\"573\":1,\"574\":1},\"1\":{\"542\":4}}],[\"高于jdk11或低于jdk8需要引入以下依赖\",{\"1\":{\"233\":1,\"566\":1}}],[\"高效构建\",{\"0\":{\"697\":1}}],[\"高效构建java应用\",{\"0\":{\"435\":1}}],[\"高效的查询条件\",{\"1\":{\"474\":1}}],[\"高效\",{\"1\":{\"192\":1,\"203\":1}}],[\"高度默认由内容撑开\",{\"1\":{\"36\":1}}],[\"线性结构常见的有\",{\"1\":{\"365\":1}}],[\"线性结构是最常用的数据结构\",{\"1\":{\"365\":1}}],[\"线程名称\",{\"1\":{\"625\":1}}],[\"线程在读取共享资源时不会加锁\",{\"1\":{\"483\":1}}],[\"线程在访问共享资源之前会获取到锁\",{\"1\":{\"483\":1}}],[\"线程1操作ticket的过程中\",{\"1\":{\"197\":1,\"208\":1}}],[\"线程的安全问题及线程的同步机制\",{\"1\":{\"197\":1,\"208\":1}}],[\"线程的优先级\",{\"1\":{\"196\":1,\"207\":1}}],[\"线程的常用结构\",{\"0\":{\"196\":1,\"207\":1}}],[\"线程a才结束阻塞状态\",{\"1\":{\"196\":1,\"207\":1}}],[\"线程中的常用方法\",{\"1\":{\"196\":1,\"207\":1}}],[\"线程中的构造器\",{\"1\":{\"196\":1,\"207\":1}}],[\"线程调度\",{\"1\":{\"192\":1,\"203\":1}}],[\"线程作为cpu调度和执行的最小单位\",{\"1\":{\"192\":1,\"203\":1}}],[\"线程\",{\"1\":{\"192\":1,\"203\":1}}],[\"线程安全问题及解决\",{\"0\":{\"197\":1,\"208\":1}}],[\"线程安全\",{\"1\":{\"179\":1}}],[\"线程安全的\",{\"1\":{\"169\":1}}],[\"线程不安全但是效率高于strinfbuffer\",{\"1\":{\"168\":1}}],[\"线条类型\",{\"1\":{\"36\":1}}],[\"效果测试\",{\"1\":{\"514\":1}}],[\"效果一样\",{\"1\":{\"120\":1}}],[\"效率偏低\",{\"1\":{\"628\":1}}],[\"效率不如上面的高\",{\"1\":{\"309\":1}}],[\"效率低\",{\"1\":{\"167\":1}}],[\"左移位\",{\"1\":{\"297\":1}}],[\"左闭右开\",{\"1\":{\"171\":1}}],[\"左闭右开区间\",{\"1\":{\"160\":1}}],[\"左边是对象右边是类\",{\"1\":{\"147\":1}}],[\"左边是fu\",{\"1\":{\"145\":1}}],[\"能路上买的尽量不带\",{\"1\":{\"651\":1}}],[\"能获取到\",{\"1\":{\"598\":1}}],[\"能获得索引值大于等于2所有剩下的字符串\",{\"1\":{\"334\":1}}],[\"能用\",{\"1\":{\"498\":1}}],[\"能快速揪出慢查询\",{\"1\":{\"460\":1}}],[\"能装就装\",{\"1\":{\"233\":1,\"566\":2}}],[\"能够找到\",{\"1\":{\"566\":2}}],[\"能够找到唯一的\",{\"1\":{\"233\":1,\"566\":1}}],[\"能够维护不同\",{\"1\":{\"555\":1}}],[\"能够帮助开发人员解决软件发展过程中不断产生的各种实际问题\",{\"1\":{\"547\":1}}],[\"能够帮助开发人员快速进行开发\",{\"1\":{\"545\":1}}],[\"能够快速地生成持久层代码和映射文件\",{\"1\":{\"538\":1}}],[\"能够封装成实体类类型的\",{\"1\":{\"510\":1}}],[\"能够大大的提高开发效率\",{\"1\":{\"486\":1}}],[\"能够自动解析项目的依赖关系\",{\"1\":{\"408\":1,\"447\":1}}],[\"能够获取到\",{\"1\":{\"226\":1,\"559\":1}}],[\"能够管理任何类型的对象\",{\"1\":{\"221\":1,\"552\":1}}],[\"能否使用t1\",{\"1\":{\"194\":1,\"205\":1}}],[\"能存储的最大整型值为$2^\",{\"1\":{\"158\":1}}],[\"能通过注解的形式自动生成构造器\",{\"1\":{\"79\":1}}],[\"若有注解\",{\"1\":{\"508\":1}}],[\"若有多个\",{\"1\":{\"166\":1}}],[\"若一致则进行更新操作\",{\"1\":{\"483\":1}}],[\"若一致则更新成功\",{\"1\":{\"483\":1}}],[\"若下载速度太慢\",{\"1\":{\"425\":1}}],[\"若外部网络不稳定\",{\"1\":{\"421\":1}}],[\"若外部远程仓库不存在所需构件\",{\"1\":{\"421\":1}}],[\"若私服中不存在所需构件\",{\"1\":{\"421\":1}}],[\"若本地仓库不存在所需构件\",{\"1\":{\"421\":1}}],[\"若本地仓库没有\",{\"1\":{\"387\":1}}],[\"若配置了以下标签\",{\"1\":{\"415\":1}}],[\"若第一次使用maven\",{\"1\":{\"399\":1}}],[\"若\",{\"1\":{\"396\":1}}],[\"若多个线程只有读操作\",{\"1\":{\"197\":1,\"208\":1}}],[\"若存在\",{\"1\":{\"184\":1}}],[\"若不存在\",{\"1\":{\"184\":1}}],[\"若上层文件目录不存在\",{\"1\":{\"182\":1}}],[\"若相同\",{\"1\":{\"177\":1}}],[\"若无此key\",{\"1\":{\"177\":1}}],[\"若无返回\",{\"1\":{\"166\":1}}],[\"若此位置已有对象存储\",{\"1\":{\"172\":1}}],[\"若此位置之前没有对象存储\",{\"1\":{\"172\":1}}],[\"若删除成功\",{\"1\":{\"170\":1}}],[\"若没有返回\",{\"1\":{\"166\":1}}],[\"若是一个exception\",{\"1\":{\"155\":1}}],[\"若catch中多个异常类型是\",{\"1\":{\"154\":1}}],[\"又一家市值达到新高点的大型科技公司\",{\"1\":{\"651\":1}}],[\"又体验了最新版本的高速ngp和城市ngp\",{\"1\":{\"651\":1}}],[\"又依赖于模块或库\",{\"1\":{\"448\":1}}],[\"又能够将以往的经验沉淀下来\",{\"1\":{\"418\":1,\"452\":1}}],[\"又称\",{\"1\":{\"259\":1}}],[\"又可以是手动创建的\",{\"1\":{\"155\":1}}],[\"又如\",{\"1\":{\"148\":1}}],[\"献给方法的调用者\",{\"1\":{\"155\":1}}],[\"抓抛模式\",{\"1\":{\"155\":1}}],[\"抓住上一步抛出来的异常类的对象\",{\"1\":{\"153\":1}}],[\"抓\",{\"1\":{\"153\":1,\"155\":1}}],[\"手动判断\",{\"1\":{\"476\":1}}],[\"手动添加web项目结构文件\",{\"1\":{\"444\":1}}],[\"手动排除\",{\"1\":{\"416\":1}}],[\"手动创建文件\",{\"1\":{\"412\":1}}],[\"手动创建\",{\"1\":{\"400\":1,\"444\":1}}],[\"手动选择配置文件\",{\"1\":{\"396\":1}}],[\"手动的抛出\",{\"1\":{\"155\":1}}],[\"手动抛出\",{\"1\":{\"153\":1}}],[\"手动转换\",{\"1\":{\"93\":1,\"95\":1}}],[\"抛出的异常类型若是runtimeexception\",{\"1\":{\"155\":1}}],[\"抛\",{\"1\":{\"153\":1,\"155\":1}}],[\"试图读取不存在的文件\",{\"1\":{\"152\":1}}],[\"匿名登录\",{\"1\":{\"423\":1}}],[\"匿名函数\",{\"0\":{\"326\":1}}],[\"匿名对象\",{\"1\":{\"151\":1}}],[\"匿名内部类和匿名对象不是一回事\",{\"1\":{\"151\":1}}],[\"匿名内部类是省略了\",{\"1\":{\"151\":1}}],[\"匿名内部类注意事项\",{\"1\":{\"151\":1}}],[\"匿名内部类的定义格式\",{\"1\":{\"151\":1}}],[\"匿名内部类\",{\"0\":{\"151\":1},\"1\":{\"151\":2}}],[\"匿名内部类用法多\",{\"1\":{\"148\":1}}],[\"另外\",{\"1\":{\"387\":1}}],[\"另外还需要注意的几点问题\",{\"1\":{\"151\":1}}],[\"另一种方法字符串前加f\",{\"1\":{\"334\":1}}],[\"另一方面\",{\"1\":{\"169\":1}}],[\"另一个向下转型的例子\",{\"1\":{\"146\":1}}],[\"出\",{\"1\":{\"412\":1}}],[\"出队列\",{\"1\":{\"367\":1}}],[\"出来带参对象时\",{\"1\":{\"224\":1}}],[\"出现在1999年7月24日\",{\"1\":{\"651\":1}}],[\"出现了冗余\",{\"1\":{\"591\":1}}],[\"出现了重票和错票\",{\"1\":{\"197\":1,\"208\":1}}],[\"出现了try\",{\"1\":{\"154\":1}}],[\"出现的问题\",{\"1\":{\"197\":1,\"208\":1}}],[\"出现乱码\",{\"1\":{\"181\":1}}],[\"出现类型不匹配的异常了\",{\"1\":{\"154\":1}}],[\"出现异常\",{\"1\":{\"97\":1,\"152\":2,\"155\":1}}],[\"出了这个方法外面就不能用了\",{\"1\":{\"150\":1}}],[\"随身携带更偏向实用\",{\"1\":{\"651\":1}}],[\"随后\",{\"1\":{\"651\":1}}],[\"随机取一条加上限制条件\",{\"1\":{\"471\":1}}],[\"随意访问\",{\"1\":{\"149\":1}}],[\"随着chatgpt席卷全球\",{\"1\":{\"651\":1}}],[\"随着副高北跳和夏季风往北推进\",{\"1\":{\"651\":1}}],[\"随着开发团队转投google\",{\"1\":{\"491\":1}}],[\"随着我们使用越来越多的框架\",{\"1\":{\"387\":1}}],[\"随着继承层次中一个个新子类的定义\",{\"1\":{\"138\":1}}],[\"随着类的加载而加载\",{\"1\":{\"130\":1,\"132\":1}}],[\"随着对象的创建而被加载的\",{\"1\":{\"130\":1}}],[\"随着用户的输入或外部条件的变化而变化的sql语句\",{\"1\":{\"84\":1}}],[\"笔记由黑马vue前端基础教程\",{\"1\":{\"268\":1}}],[\"笔记本关机\",{\"1\":{\"147\":1}}],[\"笔记本开机\",{\"1\":{\"147\":1}}],[\"笔记根据视频2019\",{\"1\":{\"15\":1}}],[\"正如高考作文材料中所说\",{\"1\":{\"651\":1}}],[\"正在开发的类不需要实现任何特定的接口或以特定的方式进行编码\",{\"1\":{\"557\":1}}],[\"正在处理中\",{\"1\":{\"254\":1}}],[\"正例\",{\"1\":{\"398\":2,\"442\":2}}],[\"正则表达式\",{\"0\":{\"344\":1},\"1\":{\"344\":1},\"2\":{\"349\":1}}],[\"正常使用配置类\",{\"1\":{\"676\":1}}],[\"正常使用即可\",{\"1\":{\"539\":1}}],[\"正常获取到\",{\"1\":{\"598\":1}}],[\"正常更新使用即可\",{\"1\":{\"484\":1}}],[\"正常查询\",{\"1\":{\"481\":1}}],[\"正常自定义方法\",{\"1\":{\"467\":1}}],[\"正常\",{\"1\":{\"334\":1,\"598\":2}}],[\"正确地调用父类的\",{\"1\":{\"197\":1}}],[\"正确\",{\"1\":{\"147\":1}}],[\"正确用法\",{\"1\":{\"141\":1}}],[\"正好传进去的就是usb鼠标\",{\"1\":{\"147\":1}}],[\"汪汪汪\",{\"1\":{\"146\":1}}],[\"错误状态\",{\"1\":{\"640\":1}}],[\"错误码\",{\"1\":{\"640\":1}}],[\"错误语法\",{\"1\":{\"590\":1}}],[\"错误的\",{\"1\":{\"191\":1,\"202\":1}}],[\"错误的写法两种fos\",{\"1\":{\"185\":1}}],[\"错误的向下转型\",{\"1\":{\"146\":1}}],[\"错误\",{\"1\":{\"152\":1}}],[\"错误写法\",{\"1\":{\"145\":1,\"146\":2}}],[\"猫抓老鼠\",{\"1\":{\"146\":2}}],[\"猫吃鱼\",{\"1\":{\"146\":2}}],[\"现阶段配置方式为\",{\"1\":{\"564\":1}}],[\"现有一张\",{\"1\":{\"461\":1}}],[\"现在使用spring\",{\"1\":{\"675\":1}}],[\"现在使用注解后\",{\"1\":{\"564\":1}}],[\"现在要学习的元素种类比原来的一半还要少\",{\"1\":{\"524\":1}}],[\"现在\",{\"1\":{\"239\":1,\"574\":1}}],[\"现在非要当狗\",{\"1\":{\"146\":1}}],[\"现在非要向下转型成为猫\",{\"1\":{\"146\":1}}],[\"现代的操作系统\",{\"1\":{\"192\":1,\"203\":1}}],[\"现多用于作为数据载体\",{\"1\":{\"40\":1}}],[\"才可能完成真正卓越的妙手\",{\"1\":{\"651\":1}}],[\"才有可能在本手的基础上\",{\"1\":{\"651\":1}}],[\"才需要设计和修改实体类\",{\"1\":{\"517\":1}}],[\"才会释放锁\",{\"1\":{\"483\":1}}],[\"才会被拦截\",{\"1\":{\"93\":1}}],[\"才结束整个程序\",{\"1\":{\"192\":1,\"203\":1}}],[\"才能编写高效的\",{\"1\":{\"537\":1}}],[\"才能返回true\",{\"1\":{\"182\":1}}],[\"才能判断集合中所有元素是否完全相同\",{\"1\":{\"171\":1}}],[\"才能向下转型成为猫\",{\"1\":{\"146\":1}}],[\"向服务端发送新闻id\",{\"1\":{\"656\":1}}],[\"向服务器发送请求\",{\"1\":{\"45\":1}}],[\"向sql语句传参\",{\"0\":{\"495\":1},\"1\":{\"489\":1}}],[\"向指定位置插入元素\",{\"1\":{\"309\":1}}],[\"向目标对象应用通知之后创建的代理对象\",{\"1\":{\"211\":1,\"584\":1}}],[\"向hashmap中添加元素时\",{\"1\":{\"177\":1}}],[\"向map中添加一个元素\",{\"1\":{\"177\":1}}],[\"向treeset中添加customer类的对象\",{\"1\":{\"175\":1}}],[\"向treeset中添加coparator接口中的compare方法中涉及的类的对象\",{\"1\":{\"175\":1}}],[\"向treeset中添加元素时\",{\"1\":{\"174\":1}}],[\"向treeset中添加的元素必须是同一个类的\",{\"1\":{\"174\":1}}],[\"向集合添加一个元素\",{\"1\":{\"170\":1}}],[\"向下转型\",{\"1\":{\"146\":2,\"147\":1}}],[\"向上转型\",{\"1\":{\"146\":2,\"147\":1}}],[\"向上转型一定是安全的\",{\"1\":{\"146\":1}}],[\"口诀\",{\"1\":{\"145\":1}}],[\"间接方式\",{\"1\":{\"149\":1}}],[\"间接通过成员方法访问成员变量\",{\"1\":{\"145\":1}}],[\"间接依赖\",{\"1\":{\"59\":1}}],[\"员工数据\",{\"1\":{\"630\":1}}],[\"员工工资\",{\"1\":{\"510\":1}}],[\"员工姓名\",{\"1\":{\"510\":1}}],[\"员工实体对象\",{\"1\":{\"493\":1}}],[\"员工id\",{\"1\":{\"493\":1}}],[\"员工名字\",{\"1\":{\"334\":1}}],[\"员工分为两类\",{\"1\":{\"334\":1}}],[\"员工\",{\"1\":{\"145\":1}}],[\"人生如棋\",{\"1\":{\"651\":2}}],[\"人体体感温度不仅和气温有关\",{\"1\":{\"651\":1}}],[\"人和身份证号\",{\"1\":{\"517\":1}}],[\"人大金仓数据库\",{\"1\":{\"460\":1}}],[\"人力系统\",{\"1\":{\"334\":1}}],[\"人类友好的数据表示方式\",{\"1\":{\"669\":1}}],[\"人类可读的形式\",{\"1\":{\"271\":1}}],[\"人类\",{\"1\":{\"145\":1}}],[\"人可以说话\",{\"1\":{\"138\":1}}],[\"普通的令牌可能以各种形式出现\",{\"1\":{\"655\":1}}],[\"普通的组件\",{\"1\":{\"564\":2,\"567\":1}}],[\"普通组件\",{\"1\":{\"564\":2}}],[\"普通容器只能用来存储\",{\"1\":{\"552\":1}}],[\"普通容器\",{\"1\":{\"552\":1}}],[\"普通和复杂容器\",{\"1\":{\"552\":1}}],[\"普通老式\",{\"1\":{\"491\":1}}],[\"普通优先级\",{\"1\":{\"196\":1,\"207\":1}}],[\"普通子类方法\",{\"1\":{\"146\":1}}],[\"普通私有方法\",{\"1\":{\"142\":1,\"144\":1}}],[\"普通执行sql对象\",{\"1\":{\"5\":1}}],[\"应具有特定范围\",{\"1\":{\"573\":1}}],[\"应如何自动映射列到字段或属性\",{\"1\":{\"521\":1}}],[\"应尽量调用其对应的迭代器\",{\"1\":{\"197\":1}}],[\"应用只需要编写少量配置即可快速整合\",{\"1\":{\"662\":1}}],[\"应用\",{\"1\":{\"662\":1}}],[\"应用了切面后\",{\"1\":{\"598\":1}}],[\"应用程序的关键步骤\",{\"1\":{\"664\":1}}],[\"应用程序的\",{\"1\":{\"552\":1}}],[\"应用程序的逻辑和数据都存储在服务端\",{\"1\":{\"67\":1}}],[\"应用程序类与配置元数据相结合\",{\"1\":{\"552\":1}}],[\"应用程序\",{\"1\":{\"549\":1,\"570\":1}}],[\"应用场景\",{\"1\":{\"413\":1}}],[\"应用的入口页面\",{\"1\":{\"401\":1,\"445\":1}}],[\"应用的配置文件\",{\"1\":{\"401\":1,\"445\":1}}],[\"应用的部署描述文件\",{\"1\":{\"401\":1,\"445\":1}}],[\"应用入口页面\",{\"1\":{\"401\":1,\"445\":1}}],[\"应用配置文件\",{\"1\":{\"401\":1,\"445\":1}}],[\"应用实例\",{\"1\":{\"370\":1}}],[\"应用视角的操作系统\",{\"0\":{\"338\":1}}],[\"应用类型\",{\"1\":{\"224\":1}}],[\"应用准备\",{\"1\":{\"221\":2,\"552\":1}}],[\"应用层\",{\"1\":{\"189\":1,\"200\":1}}],[\"应该是可复用的功能对象\",{\"1\":{\"551\":1}}],[\"应该是私有化的\",{\"1\":{\"142\":1}}],[\"应该在rollbackfor的范围内\",{\"1\":{\"247\":3,\"248\":1,\"610\":4,\"611\":1,\"612\":1}}],[\"应该通过接口名称进行调用\",{\"1\":{\"144\":1}}],[\"备注\",{\"1\":{\"140\":1,\"143\":1,\"150\":1}}],[\"②通用模块\",{\"0\":{\"432\":1}}],[\"②maven私服的优势\",{\"1\":{\"421\":1}}],[\"②脱离\",{\"1\":{\"388\":1}}],[\"②jar包的来源问题\",{\"1\":{\"387\":1}}],[\"②以输入流的形式加载mybatis配置文件\",{\"1\":{\"220\":1,\"493\":1}}],[\"②\",{\"1\":{\"195\":2,\"206\":2}}],[\"②创建treeset时传入comparator对象\",{\"1\":{\"176\":1}}],[\"②真实的数组存放的对象的个数是不可知的\",{\"1\":{\"169\":1}}],[\"②集合\",{\"1\":{\"169\":1}}],[\"②字符数组\",{\"1\":{\"169\":1}}],[\"②字节数组\",{\"1\":{\"169\":1}}],[\"②基本数据库\",{\"1\":{\"169\":1}}],[\"②对象的向下转型\",{\"1\":{\"146\":1}}],[\"②接口的默认方法\",{\"1\":{\"140\":1}}],[\"②抽象方法只保留方法的功能\",{\"1\":{\"138\":1}}],[\"②抽象类有构造器\",{\"1\":{\"138\":1}}],[\"去玩吧~\",{\"1\":{\"334\":1}}],[\"去set和首字母小写的值\",{\"1\":{\"225\":1,\"558\":1}}],[\"去除所有注解\",{\"1\":{\"596\":1}}],[\"去除右侧\",{\"1\":{\"317\":1}}],[\"去除左侧\",{\"1\":{\"317\":1}}],[\"去除当前字符中首尾出现的空格\",{\"1\":{\"166\":1}}],[\"去除字符串两边的空格\",{\"1\":{\"40\":1}}],[\"去掉mybatis\",{\"1\":{\"628\":1}}],[\"去掉runtime会报错\",{\"1\":{\"155\":1}}],[\"去掉abstract关键字\",{\"1\":{\"139\":1}}],[\"花费的时间是\",{\"1\":{\"138\":1}}],[\"花花\",{\"1\":{\"130\":1}}],[\"意在降低冗余的全限定类名书写\",{\"1\":{\"508\":1}}],[\"意为\",{\"1\":{\"255\":1}}],[\"意味着线程a进入阻塞状态\",{\"1\":{\"196\":1,\"207\":1}}],[\"意味着此类中仍有抽象方法\",{\"1\":{\"138\":1}}],[\"意思是\",{\"1\":{\"334\":1}}],[\"意思\",{\"1\":{\"64\":1}}],[\"④订单模块\",{\"0\":{\"434\":1}}],[\"④jar包之间的依赖\",{\"1\":{\"387\":1}}],[\"④若子类继承抽象类\",{\"1\":{\"138\":1}}],[\"④抽象类中可以没有抽象方法\",{\"1\":{\"138\":1}}],[\"③用户模块\",{\"0\":{\"433\":1}}],[\"③常见的maven私服产品\",{\"1\":{\"421\":1}}],[\"③jar包的导入问题\",{\"1\":{\"387\":1}}],[\"③基于读取mybatis配置文件的输入流创建sqlsessionfactory对象\",{\"1\":{\"220\":1,\"493\":1}}],[\"③\",{\"1\":{\"195\":1,\"206\":1}}],[\"③若子类继承抽象类并重写了所有的抽象方法\",{\"1\":{\"138\":1}}],[\"③抽象方法所在的类一定是抽象类\",{\"1\":{\"138\":1}}],[\"①父模块\",{\"0\":{\"431\":1}}],[\"①私服简介\",{\"1\":{\"421\":1}}],[\"①你没有注意过的构建\",{\"1\":{\"388\":1}}],[\"①jar\",{\"1\":{\"387\":1}}],[\"①声明mybatis全局配置文件的路径\",{\"1\":{\"220\":1,\"493\":1}}],[\"①\",{\"1\":{\"195\":2,\"206\":2}}],[\"①使employee实现comparable接口\",{\"1\":{\"176\":1}}],[\"①自然排序②定制排序\",{\"1\":{\"174\":1}}],[\"①一旦创建长度不变\",{\"1\":{\"169\":1}}],[\"①数组\",{\"1\":{\"169\":1}}],[\"①字符串\",{\"1\":{\"169\":3}}],[\"①try\",{\"1\":{\"155\":1}}],[\"①对象的向上转型\",{\"1\":{\"146\":1}}],[\"①接口的默认方法\",{\"1\":{\"140\":1}}],[\"①格式\",{\"1\":{\"138\":1}}],[\"①不可被实例化\",{\"1\":{\"138\":1}}],[\"①此常量不能使用默认初始化②可以是显式的赋值\",{\"1\":{\"131\":1}}],[\"说每个人都会对作品有不同的理解\",{\"1\":{\"545\":1}}],[\"说话的内容由工人或学生决定\",{\"1\":{\"138\":1}}],[\"说明编号存在\",{\"1\":{\"370\":1}}],[\"说明temp已经在链表最后\",{\"1\":{\"370\":1}}],[\"说明不可改变\",{\"1\":{\"143\":1}}],[\"说明是登录操作\",{\"1\":{\"93\":1}}],[\"说明\",{\"1\":{\"69\":1,\"74\":1,\"172\":1,\"197\":1,\"208\":1,\"231\":1,\"320\":1,\"345\":3,\"347\":2,\"398\":1,\"424\":2,\"442\":1,\"493\":1,\"564\":1,\"662\":1}}],[\"父项目\",{\"1\":{\"665\":1}}],[\"父项目中包含的子项目列表\",{\"1\":{\"419\":1,\"453\":1}}],[\"父容器\",{\"1\":{\"621\":1}}],[\"父模块搭建\",{\"1\":{\"456\":1}}],[\"父工程添加依赖\",{\"1\":{\"456\":1}}],[\"父工程不打包\",{\"1\":{\"456\":1}}],[\"父工程的打包方式为pom\",{\"1\":{\"431\":1}}],[\"父工程的坐标\",{\"1\":{\"418\":1,\"452\":1}}],[\"父工程声明版本\",{\"1\":{\"418\":1,\"452\":1}}],[\"父工程依赖统一管理\",{\"1\":{\"418\":1,\"452\":1}}],[\"父工程\",{\"1\":{\"418\":1,\"452\":1}}],[\"父子容器关系\",{\"1\":{\"621\":1}}],[\"父子都有\",{\"1\":{\"145\":1}}],[\"父子类构造方法的特点\",{\"1\":{\"136\":1}}],[\"父类对象\",{\"1\":{\"146\":1}}],[\"父类特有方法\",{\"1\":{\"145\":1,\"146\":2}}],[\"父类方法没有throws或者说抛出的异常很小\",{\"1\":{\"196\":1,\"207\":1}}],[\"父类方法\",{\"1\":{\"145\":1}}],[\"父类有向上找到父类\",{\"1\":{\"145\":1}}],[\"父类引用指向子类对象\",{\"1\":{\"145\":1}}],[\"父类\",{\"1\":{\"145\":1}}],[\"父类提供了多个子类的通用方法\",{\"1\":{\"138\":1}}],[\"父类用object子类也可以用object和string\",{\"1\":{\"137\":1}}],[\"父类名称\",{\"1\":{\"136\":1,\"145\":1,\"146\":1}}],[\"私有成员\",{\"1\":{\"327\":1}}],[\"私有方法\",{\"1\":{\"139\":1}}],[\"私有化\",{\"1\":{\"135\":1}}],[\"私服部署\",{\"1\":{\"450\":1}}],[\"私服软件\",{\"1\":{\"421\":1}}],[\"私服后\",{\"1\":{\"421\":1}}],[\"私服是一种特殊的maven远程仓库\",{\"1\":{\"421\":1}}],[\"私服\",{\"1\":{\"55\":1,\"421\":2}}],[\"封装headline数据\",{\"1\":{\"657\":1}}],[\"封装对应的枚举错误即可\",{\"1\":{\"655\":1}}],[\"封装jwt技术工具类\",{\"1\":{\"655\":1}}],[\"封装动态代理技术\",{\"1\":{\"585\":1}}],[\"封装这些非核心逻辑的类\",{\"1\":{\"583\":1}}],[\"封装了实例化流程\",{\"1\":{\"628\":1}}],[\"封装了很多\",{\"1\":{\"562\":1}}],[\"封装了\",{\"1\":{\"534\":1}}],[\"封装iservice\",{\"1\":{\"468\":1}}],[\"封装basemapper\",{\"1\":{\"462\":1}}],[\"封装指写类的人将内部实现细节隐藏起来\",{\"1\":{\"334\":1}}],[\"封装类类型\",{\"1\":{\"169\":1}}],[\"封装性\",{\"1\":{\"145\":1}}],[\"封装和隐藏\",{\"0\":{\"135\":1}}],[\"封装\",{\"1\":{\"134\":1,\"334\":1}}],[\"✨\",{\"1\":{\"133\":1}}],[\"显著地提升了这一特性的易用性\",{\"1\":{\"524\":1}}],[\"显式的抛出该异常对象的类型\",{\"1\":{\"155\":1}}],[\"显式的初始化或代码块初始化\",{\"1\":{\"132\":1}}],[\"显示链表\",{\"1\":{\"370\":1}}],[\"显示队列\",{\"1\":{\"368\":1}}],[\"显示队列的头部数据\",{\"1\":{\"367\":1}}],[\"显示目录或文件大小\",{\"1\":{\"271\":1}}],[\"显示本机局域网ip\",{\"1\":{\"189\":1,\"200\":1}}],[\"显示带有一段消息和确认按钮的警告框\",{\"1\":{\"40\":1}}],[\"显示带有一段消息和一个确认按钮的警告框\",{\"1\":{\"40\":1}}],[\"显示警告框\",{\"1\":{\"37\":1}}],[\"显示窗口\",{\"1\":{\"21\":1}}],[\"非\",{\"1\":{\"515\":1}}],[\"非自增长类型主键\",{\"1\":{\"512\":1}}],[\"非主键\",{\"1\":{\"480\":1}}],[\"非compile范围进行依赖传递\",{\"1\":{\"415\":1}}],[\"非默认名称\",{\"1\":{\"413\":1}}],[\"非常复杂的结果映射\",{\"1\":{\"517\":1}}],[\"非常复杂的语句\",{\"1\":{\"517\":1}}],[\"非常类似于\",{\"1\":{\"237\":1,\"573\":1}}],[\"非常重要的一点想想上面为什么这样写\",{\"1\":{\"181\":1}}],[\"非静态代码块的执行要早于构造器\",{\"1\":{\"132\":1}}],[\"非静态代码块就加载一次\",{\"1\":{\"132\":1}}],[\"非静态代码块\",{\"1\":{\"132\":1}}],[\"非静态的方法可以调用静态的属性和方法\",{\"1\":{\"130\":1}}],[\"非static修饰的属性\",{\"1\":{\"130\":1}}],[\"反过来说\",{\"1\":{\"608\":1}}],[\"反射操作太多\",{\"1\":{\"492\":1}}],[\"反向遍历\",{\"1\":{\"371\":1}}],[\"反向序列中的元素\",{\"1\":{\"333\":1}}],[\"反汇编\",{\"1\":{\"338\":1}}],[\"反斜杠转义字符\",{\"1\":{\"334\":1}}],[\"反斜杠将下面打印为了一行\",{\"1\":{\"334\":1}}],[\"反序列化\",{\"1\":{\"187\":1,\"188\":1}}],[\"反转list中元素的顺序\",{\"1\":{\"180\":1}}],[\"反转\",{\"1\":{\"167\":2,\"221\":1,\"553\":1}}],[\"反之返回false\",{\"1\":{\"170\":1}}],[\"反之\",{\"1\":{\"130\":1}}],[\"反证法\",{\"1\":{\"15\":1}}],[\"修复\",{\"1\":{\"398\":1,\"442\":1}}],[\"修订号\",{\"1\":{\"398\":2,\"442\":2}}],[\"修改时间\",{\"1\":{\"657\":1}}],[\"修改业务\",{\"1\":{\"657\":1}}],[\"修改头条回显\",{\"1\":{\"657\":1}}],[\"修改头条功能\",{\"1\":{\"648\":1}}],[\"修改前\",{\"1\":{\"657\":1}}],[\"修改启动顺序后\",{\"1\":{\"552\":1}}],[\"修改teachermapper\",{\"1\":{\"521\":1}}],[\"修改mybati\",{\"1\":{\"521\":1}}],[\"修改条件封装\",{\"1\":{\"475\":1}}],[\"修改或者保存\",{\"1\":{\"471\":1}}],[\"修改为\",{\"1\":{\"425\":1}}],[\"修改本地maven的核心配置文件settings\",{\"1\":{\"425\":1}}],[\"修改jdk版本\",{\"1\":{\"413\":1}}],[\"修改位置\",{\"1\":{\"400\":1,\"444\":1}}],[\"修改pom\",{\"1\":{\"400\":1,\"444\":1}}],[\"修改bug\",{\"1\":{\"398\":1,\"442\":1}}],[\"修改一个节点的内容\",{\"1\":{\"371\":1}}],[\"修改节点信息\",{\"1\":{\"370\":1}}],[\"修改删除\",{\"1\":{\"315\":1}}],[\"修改与删除元素\",{\"0\":{\"310\":1}}],[\"修改密码\",{\"1\":{\"277\":1,\"584\":1}}],[\"修改\",{\"1\":{\"167\":1,\"310\":1,\"398\":1,\"442\":1,\"465\":1,\"476\":1}}],[\"修改conf\",{\"1\":{\"56\":2}}],[\"修饰符\",{\"1\":{\"149\":2,\"150\":2}}],[\"修饰符必须是两个固定的关键字\",{\"1\":{\"139\":1}}],[\"修饰的属性只能在类中调用\",{\"1\":{\"135\":1}}],[\"修饰方法\",{\"1\":{\"130\":1}}],[\"唯一一个\",{\"1\":{\"128\":1}}],[\"谁上谁下都可以\",{\"1\":{\"154\":1}}],[\"谁就是this\",{\"1\":{\"128\":1}}],[\"谁调用的this\",{\"1\":{\"128\":1}}],[\"跟函数一样~\",{\"1\":{\"177\":1}}],[\"跟抽象类具体有什么区别\",{\"1\":{\"139\":1}}],[\"跟类同名\",{\"1\":{\"127\":1}}],[\"跟组件\",{\"1\":{\"49\":1}}],[\"行李箱尺寸自然也要浓缩到小巧但够装的20英寸\",{\"1\":{\"651\":1}}],[\"行和列\",{\"1\":{\"257\":1}}],[\"行\",{\"1\":{\"252\":1,\"253\":1}}],[\"行为\",{\"1\":{\"126\":1}}],[\"行内样式\",{\"1\":{\"35\":1}}],[\"冒泡排序的优化\",{\"1\":{\"126\":1}}],[\"冒泡排序\",{\"1\":{\"126\":1}}],[\"堆heap\",{\"1\":{\"125\":1}}],[\"栈static\",{\"1\":{\"125\":1}}],[\"算不上真正的电动车\",{\"1\":{\"651\":1}}],[\"算数异常1\",{\"1\":{\"152\":1}}],[\"算数运算\",{\"1\":{\"42\":1}}],[\"算数运算符+\",{\"1\":{\"38\":1}}],[\"算法是程序的灵魂\",{\"1\":{\"365\":1}}],[\"算法\",{\"0\":{\"125\":1,\"694\":1},\"2\":{\"372\":1,\"381\":1}}],[\"王五\",{\"1\":{\"124\":1,\"562\":1,\"568\":1,\"575\":1}}],[\"跳出laber那个标签所在的那个循环\",{\"1\":{\"122\":1}}],[\"跳出循环\",{\"0\":{\"122\":1},\"1\":{\"126\":1}}],[\"跳回本行行首\",{\"1\":{\"120\":1}}],[\"跳过当前这一组\",{\"1\":{\"120\":1}}],[\"转成web项目\",{\"1\":{\"625\":1}}],[\"转换为问号占位符\",{\"1\":{\"497\":1}}],[\"转大写并没有改变s内容\",{\"1\":{\"334\":1}}],[\"转大写\",{\"1\":{\"334\":1}}],[\"转字符串\",{\"1\":{\"169\":1}}],[\"转int\",{\"1\":{\"169\":1}}],[\"转义为\",{\"1\":{\"120\":1}}],[\"转义字符\",{\"0\":{\"120\":1}}],[\"转化为二进制数字进行左移或者右移\",{\"1\":{\"116\":1}}],[\"转化为123\",{\"1\":{\"38\":1}}],[\"👏instanceof\",{\"1\":{\"147\":1}}],[\"👀结果的符号取决于被模数\",{\"1\":{\"117\":1}}],[\"😎只是规范\",{\"1\":{\"110\":1}}],[\"除非老板没安排\",{\"1\":{\"651\":1}}],[\"除非在方法上又设置了\",{\"1\":{\"608\":1}}],[\"除非实现类是抽象类\",{\"1\":{\"144\":1}}],[\"除了构造函数注入\",{\"1\":{\"558\":1}}],[\"除了使用构造函数实例化对象\",{\"1\":{\"557\":1}}],[\"除此之外\",{\"1\":{\"413\":1}}],[\"除法结果为浮点数\",{\"1\":{\"292\":1}}],[\"除\",{\"1\":{\"117\":1}}],[\"看到各地以特色产业为抓手\",{\"1\":{\"651\":1}}],[\"看到所有标题都是sapan元素并且它们的class值都是title\",{\"1\":{\"334\":1}}],[\"看一下在哪里如果再写一个循环打印出的数字会有交互\",{\"1\":{\"194\":1,\"205\":1}}],[\"看一下源文件格式是否为utf\",{\"1\":{\"188\":1}}],[\"看说明改格式\",{\"1\":{\"163\":1}}],[\"看下一节\",{\"1\":{\"146\":1}}],[\"看new的是谁\",{\"1\":{\"145\":1}}],[\"看该方法属于谁\",{\"1\":{\"145\":1}}],[\"看等号左边是谁\",{\"1\":{\"145\":1}}],[\"看最高位是几\",{\"1\":{\"116\":1}}],[\"看不见输入的啥\",{\"1\":{\"29\":1}}],[\"变成\",{\"1\":{\"116\":1}}],[\"变量的作用域\",{\"1\":{\"325\":1}}],[\"变量用static\",{\"1\":{\"131\":1}}],[\"变量名\",{\"1\":{\"40\":1,\"110\":1}}],[\"变量名=new\",{\"1\":{\"40\":1}}],[\"变量名=\",{\"1\":{\"40\":3}}],[\"变量名需要遵循的规则\",{\"1\":{\"38\":1}}],[\"变量可以存放不同类型的值\",{\"1\":{\"38\":1}}],[\"变量\",{\"1\":{\"38\":1,\"42\":1,\"371\":1}}],[\"缺省情况下\",{\"1\":{\"237\":1,\"573\":1}}],[\"缺的位数用0补\",{\"1\":{\"116\":1}}],[\"缺点\",{\"1\":{\"62\":1,\"90\":1,\"91\":1,\"92\":1,\"250\":1,\"628\":1}}],[\"交集\",{\"1\":{\"316\":2}}],[\"交替执行\",{\"1\":{\"192\":1,\"203\":1}}],[\"交给\",{\"1\":{\"557\":1}}],[\"交给spring管理的对象\",{\"1\":{\"551\":1}}],[\"交给继承抽象类的子类\",{\"1\":{\"138\":1}}],[\"交给ico容器管理\",{\"1\":{\"73\":1}}],[\"交换两个数字的值\",{\"1\":{\"116\":1}}],[\"~\",{\"1\":{\"116\":1,\"297\":1,\"334\":1}}],[\"^a\",{\"1\":{\"345\":1}}],[\"^0\",{\"1\":{\"345\":1}}],[\"^对字符集合进行取非操作\",{\"1\":{\"345\":1}}],[\"^\",{\"1\":{\"116\":1,\"297\":1,\"345\":2,\"347\":1}}],[\"取出记录时\",{\"1\":{\"483\":1}}],[\"取出的数据是\",{\"1\":{\"368\":1}}],[\"取决于\",{\"1\":{\"415\":1}}],[\"取模\",{\"1\":{\"369\":1}}],[\"取100\",{\"1\":{\"334\":1}}],[\"取外部配置key对应的值\",{\"1\":{\"235\":1,\"567\":1}}],[\"取值prototype\",{\"1\":{\"560\":1}}],[\"取值singleton\",{\"1\":{\"560\":1}}],[\"取值false表示关闭默认扫描规则\",{\"1\":{\"231\":1,\"564\":1}}],[\"取值\",{\"1\":{\"228\":2,\"560\":2,\"565\":2}}],[\"取余数\",{\"1\":{\"117\":1}}],[\"取反\",{\"1\":{\"116\":1}}],[\"取消注释\",{\"1\":{\"107\":1}}],[\"取消注释一样\",{\"1\":{\"107\":1}}],[\"取消false\",{\"1\":{\"40\":1}}],[\"取消默认居中\",{\"1\":{\"28\":2}}],[\"取消默认的居中放置\",{\"1\":{\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"相比之下\",{\"1\":{\"669\":2}}],[\"相比于\",{\"1\":{\"478\":1}}],[\"相关术语\",{\"1\":{\"583\":1}}],[\"相关配置和资源\",{\"1\":{\"401\":1,\"445\":1}}],[\"相较于传统手写代码\",{\"1\":{\"545\":1}}],[\"相对安全\",{\"1\":{\"655\":1}}],[\"相对于\",{\"1\":{\"570\":1}}],[\"相对路径从一个是参考位置出发\",{\"1\":{\"334\":1}}],[\"相对整个窗口居中\",{\"1\":{\"23\":1}}],[\"相应行\",{\"1\":{\"253\":1}}],[\"相同的类型的序列可以相加\",{\"1\":{\"305\":1}}],[\"相同的查询将返回相同的结果集\",{\"1\":{\"248\":1,\"611\":1}}],[\"相同\",{\"1\":{\"231\":3,\"564\":3,\"628\":1}}],[\"相同目标方法上同时存在多个切面时\",{\"1\":{\"217\":1,\"593\":1}}],[\"相同为0\",{\"1\":{\"116\":1}}],[\"相等返回true否则返回false\",{\"1\":{\"166\":1}}],[\"相当于后端的maven\",{\"1\":{\"636\":1}}],[\"相当于全部不考虑了\",{\"1\":{\"590\":1}}],[\"相当于框架的具体操作\",{\"1\":{\"564\":1}}],[\"相当于同时设置了flex\",{\"1\":{\"256\":1}}],[\"相当于文件的复制\",{\"1\":{\"185\":1}}],[\"相当于69除以2的四次方\",{\"1\":{\"116\":1}}],[\"相当于3乘以2的四次方\",{\"1\":{\"116\":1}}],[\"位运算符\",{\"0\":{\"116\":1,\"297\":1}}],[\"位置找到\",{\"1\":{\"370\":1}}],[\"位置\",{\"1\":{\"69\":1,\"74\":1,\"97\":1,\"409\":1,\"410\":1,\"493\":1,\"514\":1,\"625\":1,\"626\":1,\"627\":1,\"628\":2,\"667\":1,\"674\":1,\"680\":1}}],[\"各公司将此技术融入各自产品\",{\"1\":{\"651\":1}}],[\"各个层次组件分离装配不同的ioc容器\",{\"1\":{\"619\":1}}],[\"各个标签体字符串之间的分隔符\",{\"1\":{\"529\":1}}],[\"各个工具选用版本\",{\"1\":{\"393\":1}}],[\"各个定义之间使用逗号分隔\",{\"1\":{\"330\":1}}],[\"各个对象各自拥有一套副本\",{\"1\":{\"130\":1}}],[\"各自先转换成容量最大的类型\",{\"1\":{\"114\":1}}],[\"各idea文件目录统一\",{\"1\":{\"55\":1}}],[\"程序员的工作都比较繁琐\",{\"1\":{\"583\":1}}],[\"程序员无需了解过多的数据库和\",{\"1\":{\"537\":1}}],[\"程序员无需进行优化\",{\"1\":{\"537\":1}}],[\"程序员无需再手动编写\",{\"1\":{\"537\":1}}],[\"程序员必须手动加上强制类型转化符\",{\"1\":{\"114\":1}}],[\"程序中的复杂容器\",{\"1\":{\"552\":1}}],[\"程序中的普通容器\",{\"1\":{\"552\":1}}],[\"程序中的长难复杂\",{\"1\":{\"492\":1}}],[\"程序中断不进行处理\",{\"1\":{\"152\":1}}],[\"程序的文件结构及每个文件的作用\",{\"1\":{\"401\":1,\"445\":1}}],[\"程序的一次执行过程\",{\"1\":{\"192\":1,\"203\":1}}],[\"程序退出\",{\"1\":{\"368\":1}}],[\"程序=数据结构+算法\",{\"1\":{\"365\":1}}],[\"程序运行结束\",{\"1\":{\"334\":1}}],[\"程序控制语句\",{\"0\":{\"300\":1}}],[\"程序可以在后台运行\",{\"1\":{\"273\":1}}],[\"程序结构严谨\",{\"1\":{\"231\":1,\"564\":1}}],[\"程序是静态的\",{\"1\":{\"192\":1,\"203\":1}}],[\"程序\",{\"1\":{\"192\":1,\"203\":1,\"273\":1}}],[\"程序流程控制\",{\"0\":{\"121\":1}}],[\"程序开发过程中不可避免的会遇到异常现象\",{\"1\":{\"96\":1}}],[\"强大的\",{\"1\":{\"460\":1}}],[\"强大的stream\",{\"1\":{\"16\":1}}],[\"强行结束一个线程的执行\",{\"1\":{\"196\":1,\"207\":1}}],[\"强调\",{\"1\":{\"151\":1}}],[\"强制类型转换\",{\"1\":{\"114\":1}}],[\"强制数据类型转换\",{\"0\":{\"114\":1}}],[\"回顾常规的三层架构处理请求流程\",{\"1\":{\"551\":1}}],[\"回退\",{\"1\":{\"345\":1}}],[\"回车符\",{\"1\":{\"317\":1,\"345\":1}}],[\"回到负数下线那里\",{\"1\":{\"112\":1}}],[\"回滚到都未运行的状态\",{\"1\":{\"5\":1}}],[\"回滚事务\",{\"1\":{\"5\":2,\"97\":3,\"98\":1,\"243\":1,\"592\":2,\"602\":1,\"604\":1}}],[\"越界了\",{\"1\":{\"112\":1}}],[\"范式\",{\"1\":{\"517\":1}}],[\"范围是int的所有范围\",{\"1\":{\"160\":1}}],[\"范围\",{\"1\":{\"112\":1,\"415\":2}}],[\"范例\",{\"1\":{\"59\":1}}],[\"浮点型无法精确存储的\",{\"1\":{\"112\":1}}],[\"浮点类型\",{\"1\":{\"112\":1}}],[\"命令格式\",{\"1\":{\"686\":1}}],[\"命令行参数\",{\"1\":{\"671\":1}}],[\"命令行vue\",{\"1\":{\"49\":1}}],[\"命令启动和参数说明\",{\"0\":{\"686\":1},\"1\":{\"660\":1}}],[\"命令和插件\",{\"1\":{\"450\":1}}],[\"命令方式构建\",{\"1\":{\"450\":1}}],[\"命令方式项目构建\",{\"0\":{\"404\":1}}],[\"命令触发练习\",{\"1\":{\"404\":1}}],[\"命令\",{\"0\":{\"406\":1},\"1\":{\"404\":3,\"406\":1,\"450\":1}}],[\"命令测试\",{\"1\":{\"394\":1,\"440\":1}}],[\"命名为\",{\"1\":{\"665\":2}}],[\"命名规范\",{\"1\":{\"665\":1}}],[\"命名规则\",{\"1\":{\"110\":1}}],[\"命名随意\",{\"1\":{\"626\":1,\"627\":1,\"628\":1}}],[\"命名随便\",{\"1\":{\"410\":1,\"447\":1}}],[\"命名注入依赖了\",{\"1\":{\"242\":1}}],[\"检索字符串\",{\"1\":{\"317\":1}}],[\"检索字符串位置\",{\"1\":{\"40\":1}}],[\"检查账号是否可以注册\",{\"1\":{\"655\":1}}],[\"检查是否同时查询了关联的customer对象\",{\"1\":{\"518\":1}}],[\"检查获取版本号是不是数据库当前最新版本号\",{\"1\":{\"483\":1}}],[\"检查网络连接和\",{\"1\":{\"412\":1,\"449\":1}}],[\"检查\",{\"1\":{\"353\":1}}],[\"检查地址视频链接\",{\"1\":{\"352\":1}}],[\"检查某个元素是否是序列的成员value\",{\"1\":{\"305\":1}}],[\"检查编辑器一致性是否为1\",{\"1\":{\"108\":1}}],[\"先根据属性名查找ioc中组件xxxservice\",{\"1\":{\"566\":1}}],[\"先设置order自身属性和字段的对应关系\",{\"1\":{\"518\":1}}],[\"先查询\",{\"1\":{\"484\":1}}],[\"先修改\",{\"1\":{\"483\":1}}],[\"先保护\",{\"1\":{\"483\":1}}],[\"先声明的\",{\"1\":{\"416\":1,\"448\":1}}],[\"先声明优先\",{\"1\":{\"416\":1,\"448\":1}}],[\"先到仓库中心去查证一下\",{\"1\":{\"398\":1,\"442\":1}}],[\"先将单链表进行反转\",{\"1\":{\"371\":1}}],[\"先定义一个节点reversehead\",{\"1\":{\"371\":1}}],[\"先把链表从头到尾遍历\",{\"1\":{\"371\":1}}],[\"先把front对应的值保留到一个临时变量\",{\"1\":{\"370\":1}}],[\"先初始化一个头节点\",{\"1\":{\"370\":1}}],[\"先创建几个节点\",{\"1\":{\"370\":1}}],[\"先创建一个head头节点\",{\"1\":{\"370\":1}}],[\"先读取稀疏数组第一行\",{\"1\":{\"365\":1}}],[\"先两边贴边\",{\"1\":{\"258\":1}}],[\"先实例化\",{\"1\":{\"226\":1,\"559\":1}}],[\"先序列化\",{\"1\":{\"188\":1}}],[\"先判断\",{\"1\":{\"147\":1}}],[\"先导入import\",{\"1\":{\"126\":1}}],[\"先执行第一步然后第三步最后第二步\",{\"1\":{\"121\":1}}],[\"先做运算\",{\"1\":{\"117\":1}}],[\"先自增1\",{\"1\":{\"117\":1}}],[\"先敲出\",{\"1\":{\"107\":1}}],[\"先编译\",{\"1\":{\"106\":1}}],[\"先加载的图片在上面\",{\"1\":{\"28\":1}}],[\"即切面\",{\"1\":{\"584\":1}}],[\"即其中需要重写的方法\",{\"1\":{\"583\":1}}],[\"即代理类中如何重写接口中的抽象方法\",{\"1\":{\"583\":1}}],[\"即java依赖注入标准\",{\"1\":{\"566\":1}}],[\"即仁者见仁\",{\"1\":{\"545\":1}}],[\"即可获取应用程序所需的全部依赖\",{\"1\":{\"665\":1}}],[\"即可\",{\"1\":{\"664\":1}}],[\"即可完成面向切面思维编程的实现\",{\"1\":{\"585\":1}}],[\"即可自动清理本地错误缓存文件\",{\"1\":{\"449\":1}}],[\"即可以实例化\",{\"1\":{\"138\":1}}],[\"即使用注解来处理java源文件\",{\"1\":{\"566\":1}}],[\"即使外部网络状况不佳甚至中断\",{\"1\":{\"421\":1}}],[\"即使新事务抛出异常\",{\"1\":{\"249\":1,\"612\":1}}],[\"即该\",{\"1\":{\"411\":1}}],[\"即no编号不变\",{\"1\":{\"370\":1}}],[\"即顺序存储结构\",{\"1\":{\"365\":1}}],[\"即每个属性都是不可再分的\",{\"1\":{\"341\":1}}],[\"即文本段落元素\",{\"1\":{\"334\":1}}],[\"即返回空值\",{\"1\":{\"325\":1}}],[\"即bytes\",{\"1\":{\"317\":1}}],[\"即通过编写代码的方式直接控制事务的提交和回滚\",{\"1\":{\"243\":1,\"602\":1}}],[\"即通过指定的key总能找到唯一的\",{\"1\":{\"177\":1}}],[\"即\",{\"1\":{\"221\":1,\"553\":1}}],[\"即控制权由应用程序转移到\",{\"1\":{\"221\":1,\"553\":1}}],[\"即多个线程都需要操作的数据\",{\"1\":{\"197\":1,\"208\":1}}],[\"即为操作共享数据的代码\",{\"1\":{\"197\":1,\"208\":1}}],[\"即为异常处理方式\",{\"1\":{\"153\":1}}],[\"即在一段事件内\",{\"1\":{\"192\":1,\"203\":1}}],[\"即指一段静态的代码\",{\"1\":{\"192\":1,\"203\":1}}],[\"即接受服务器转发的消息\",{\"1\":{\"192\":1,\"203\":1}}],[\"即把\",{\"1\":{\"188\":1}}],[\"即同一个map对象所对应的类\",{\"1\":{\"177\":1}}],[\"即是解释性语言又是编译型语言\",{\"1\":{\"106\":1}}],[\"即部署完后\",{\"1\":{\"65\":1}}],[\"也不需要\",{\"1\":{\"662\":1}}],[\"也不会影响当前事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"也少不了舌尖上的风韵\",{\"1\":{\"651\":1}}],[\"也叫all\",{\"1\":{\"544\":1}}],[\"也会进行客户关联订单查询\",{\"1\":{\"517\":1}}],[\"也会自动下载依赖需要的依赖\",{\"1\":{\"439\":1}}],[\"也需要添加\",{\"1\":{\"480\":1}}],[\"也能从本地上传到私服供其他人使用\",{\"1\":{\"421\":1}}],[\"也有很多公司会直接把私服部署到公网\",{\"1\":{\"421\":1}}],[\"也有人类形态\",{\"1\":{\"145\":1}}],[\"也称编码\",{\"1\":{\"317\":1}}],[\"也就不会产生任何事务传播行为的效果\",{\"1\":{\"249\":1,\"612\":1}}],[\"也就是pscache\",{\"1\":{\"677\":1}}],[\"也就是湿热型高温\",{\"1\":{\"651\":1}}],[\"也就是局部方法变量\",{\"1\":{\"628\":1}}],[\"也就是一次性发送多条sql语句让数据库执行\",{\"1\":{\"529\":1}}],[\"也就是或arr\",{\"1\":{\"370\":1}}],[\"也就是子表达式\",{\"1\":{\"347\":1}}],[\"也就是很多积木\",{\"1\":{\"330\":1}}],[\"也就是语法层面没有区别\",{\"1\":{\"231\":1,\"564\":1}}],[\"也就是\",{\"1\":{\"221\":1,\"553\":1}}],[\"也就是说属于jdk的一部分\",{\"1\":{\"566\":1}}],[\"也就是说\",{\"1\":{\"221\":1,\"415\":1,\"553\":1,\"557\":1,\"566\":1}}],[\"也就是0\",{\"1\":{\"160\":1}}],[\"也就是共性功能\",{\"1\":{\"101\":1}}],[\"也是实际工作的切入点\",{\"1\":{\"651\":1}}],[\"也是node\",{\"1\":{\"636\":1}}],[\"也是一种简化构建的思路\",{\"1\":{\"450\":1}}],[\"也是通过ioc容器获取对应的bean\",{\"1\":{\"238\":1,\"573\":1}}],[\"也是不可重复的\",{\"1\":{\"177\":1}}],[\"也是匿名对象\",{\"1\":{\"151\":1}}],[\"也是可以的\",{\"1\":{\"137\":1}}],[\"也正确\",{\"1\":{\"147\":1}}],[\"也可自定义拦截规则\",{\"1\":{\"460\":1}}],[\"也可全局配置\",{\"1\":{\"57\":1}}],[\"也可以管理组件之间依赖关系\",{\"1\":{\"552\":1}}],[\"也可以指定一个包名\",{\"1\":{\"508\":1}}],[\"也可以指定位置\",{\"1\":{\"171\":2}}],[\"也可以发现真的执行了\",{\"1\":{\"338\":1}}],[\"也可以根据状态码来判断\",{\"1\":{\"334\":1}}],[\"也可以用r+进行读写操作会以追加的模式进行写入\",{\"1\":{\"334\":1}}],[\"也可以用下面这种方法\",{\"1\":{\"334\":1}}],[\"也可以进行更新\",{\"1\":{\"334\":1}}],[\"也可以多加几个\",{\"1\":{\"334\":1}}],[\"也可以使用切片获取指定的元素\",{\"1\":{\"312\":1}}],[\"也可以使用javaweb接收\",{\"1\":{\"252\":1}}],[\"也可以通过\",{\"1\":{\"293\":1,\"410\":1,\"447\":1}}],[\"也可以在运行期织入\",{\"1\":{\"211\":1,\"584\":1}}],[\"也可以写域名\",{\"1\":{\"189\":1,\"200\":1}}],[\"也可以写为\",{\"1\":{\"68\":1}}],[\"也可以这样\",{\"1\":{\"177\":1}}],[\"也可以去掉用自己的方法\",{\"1\":{\"154\":1}}],[\"也可以被接口实现类进行覆盖重写\",{\"1\":{\"140\":1}}],[\"也可以设置文字\",{\"1\":{\"28\":1}}],[\"也可以正常调用\",{\"1\":{\"23\":1}}],[\"也可以省略\",{\"1\":{\"17\":1}}],[\"暗含方法执行时的相关信息\",{\"1\":{\"101\":1}}],[\"权限管理\",{\"1\":{\"421\":1}}],[\"权限名\",{\"1\":{\"277\":1}}],[\"权限修饰符规则\",{\"1\":{\"150\":1}}],[\"权限修饰符\",{\"1\":{\"135\":1}}],[\"权限控制等\",{\"1\":{\"584\":1}}],[\"权限控制\",{\"1\":{\"100\":1}}],[\"权重\",{\"1\":{\"24\":1}}],[\"切记别倒错包\",{\"1\":{\"628\":1}}],[\"切断计算机的电源的\",{\"1\":{\"338\":1}}],[\"切片操作\",{\"1\":{\"334\":1}}],[\"切片\",{\"0\":{\"306\":1}}],[\"切点统一管理\",{\"1\":{\"591\":1}}],[\"切点表达式案例\",{\"1\":{\"590\":1}}],[\"切点表达式总结\",{\"1\":{\"590\":1}}],[\"切点表达式作用\",{\"1\":{\"590\":1}}],[\"切点表达式\",{\"0\":{\"591\":1},\"1\":{\"542\":1,\"591\":1}}],[\"切点表达式语法\",{\"0\":{\"590\":1},\"1\":{\"542\":1,\"590\":1}}],[\"切点\",{\"1\":{\"212\":1}}],[\"切面的优先级控制切面的内外嵌套顺序\",{\"1\":{\"217\":1,\"593\":1}}],[\"切面优先级设置\",{\"0\":{\"593\":1},\"1\":{\"542\":1}}],[\"切面优先级\",{\"0\":{\"217\":1}}],[\"切面表达式提取和复用\",{\"0\":{\"215\":1}}],[\"切面表达式语法\",{\"0\":{\"214\":1}}],[\"切面\",{\"1\":{\"101\":1,\"211\":1,\"584\":2}}],[\"切入点和通知的结合\",{\"1\":{\"211\":1,\"584\":1}}],[\"切入点\",{\"1\":{\"101\":1,\"211\":1,\"584\":1}}],[\"切入点表达式重用\",{\"1\":{\"215\":1,\"591\":1}}],[\"切入点表达式\",{\"1\":{\"100\":1,\"589\":1}}],[\"切换druid数据库连接池\",{\"1\":{\"78\":1}}],[\"统计数值列表的元素和\",{\"1\":{\"311\":1}}],[\"统计各个业务方法的执行耗时\",{\"1\":{\"100\":1}}],[\"统一在一个文件完成程序功能参数设置和自定义参数声明\",{\"1\":{\"667\":1}}],[\"统一配置管理概述\",{\"0\":{\"667\":1},\"1\":{\"660\":1}}],[\"统一返回结果状态信息类\",{\"1\":{\"652\":1}}],[\"统一管理子项目构建\",{\"1\":{\"453\":1}}],[\"统一管理依赖项\",{\"1\":{\"419\":1}}],[\"统一按顺序触发子工程构建的过程\",{\"1\":{\"453\":1}}],[\"统一更新子工程打包插件\",{\"1\":{\"431\":1,\"456\":1}}],[\"统一项目结构\",{\"1\":{\"55\":1}}],[\"统一的目录结构\",{\"1\":{\"48\":1}}],[\"旨在提供一种易读\",{\"1\":{\"669\":1}}],[\"旨在简化spring应用程序的配置和构建过程\",{\"1\":{\"665\":1}}],[\"旨在全面改造其office产品阵容\",{\"1\":{\"651\":1}}],[\"旨在管理bean对象的过程中\",{\"1\":{\"99\":1}}],[\"旨在为开发\",{\"1\":{\"46\":1}}],[\"定位连接点的方式\",{\"1\":{\"584\":1}}],[\"定位执行耗时较长的业务方法\",{\"1\":{\"99\":1}}],[\"定制排序\",{\"1\":{\"176\":1,\"178\":1}}],[\"定制排序的main\",{\"1\":{\"176\":1}}],[\"定义并访问它们\",{\"1\":{\"555\":1}}],[\"定义的字符串\",{\"1\":{\"555\":1}}],[\"定义的形式\",{\"1\":{\"555\":1,\"557\":1}}],[\"定义mapper\",{\"1\":{\"493\":1}}],[\"定义mapper接口\",{\"1\":{\"493\":1}}],[\"定义heronode\",{\"1\":{\"370\":1}}],[\"定义helocontroller类\",{\"1\":{\"61\":1}}],[\"定义singlelinkedlist\",{\"1\":{\"370\":1}}],[\"定义sql\",{\"1\":{\"12\":1}}],[\"定义sql语句\",{\"1\":{\"2\":1}}],[\"定义方法\",{\"1\":{\"334\":1}}],[\"定义方法存储增强代码\",{\"1\":{\"212\":1}}],[\"定义目标方法的执行\",{\"1\":{\"216\":1}}],[\"定义格式\",{\"1\":{\"150\":1}}],[\"定义子类格式\",{\"1\":{\"136\":1}}],[\"定义拦截器\",{\"1\":{\"94\":1}}],[\"定义一个拦截方法\",{\"1\":{\"534\":1}}],[\"定义一个插入语句\",{\"1\":{\"514\":1}}],[\"定义一个\",{\"1\":{\"514\":1}}],[\"定义一个辅助的指针\",{\"1\":{\"371\":1}}],[\"定义一个url\",{\"1\":{\"351\":1}}],[\"定义一个新的列表\",{\"1\":{\"334\":1}}],[\"定义一个employee类\",{\"1\":{\"176\":1}}],[\"定义一个类的时候\",{\"1\":{\"150\":1}}],[\"定义一个类\",{\"1\":{\"93\":1}}],[\"定义一个result的类\",{\"1\":{\"69\":1}}],[\"定义filter\",{\"1\":{\"93\":1}}],[\"定义了真正构件时所需要执行的所有步骤\",{\"1\":{\"406\":1,\"450\":1}}],[\"定义了一个字符集合\",{\"1\":{\"345\":1}}],[\"定义了一种简洁的\",{\"1\":{\"92\":1}}],[\"定义了访问html和xml文档的标准\",{\"1\":{\"40\":1}}],[\"定义pojo类型形参即可接受参数\",{\"1\":{\"68\":1}}],[\"定义pojo接收即可\",{\"1\":{\"68\":1}}],[\"定义坐标的groupid\",{\"1\":{\"59\":1}}],[\"定义当前节点的下一个节点\",{\"1\":{\"371\":1}}],[\"定义当前项目版本号\",{\"1\":{\"58\":1}}],[\"定义当前maven项目名称\",{\"1\":{\"58\":1}}],[\"定义当前maven项目隶属组织名称\",{\"1\":{\"58\":1}}],[\"定义路由\",{\"1\":{\"52\":1}}],[\"定义数组类型形参即可接收参数\",{\"1\":{\"68\":1}}],[\"定义数据模型\",{\"1\":{\"42\":1}}],[\"定义数字输入框email\",{\"1\":{\"34\":1}}],[\"定义\",{\"1\":{\"40\":2,\"230\":1,\"237\":1,\"239\":1,\"561\":1,\"573\":1,\"574\":1}}],[\"定义提交按钮\",{\"1\":{\"34\":1}}],[\"定义隐藏域submit\",{\"1\":{\"34\":1}}],[\"定义邮件输入框hidden\",{\"1\":{\"34\":1}}],[\"定义日期\",{\"1\":{\"34\":1}}],[\"定义复选框\",{\"1\":{\"34\":1}}],[\"定义单行输入的字段\",{\"1\":{\"34\":1}}],[\"定义文件上传按钮data\",{\"1\":{\"34\":1}}],[\"定义文本域\",{\"1\":{\"34\":1}}],[\"定义文档的联系信息\",{\"1\":{\"34\":1}}],[\"定义下拉列表\",{\"1\":{\"34\":1}}],[\"定义表单项\",{\"1\":{\"34\":1}}],[\"定义权重\",{\"1\":{\"24\":1}}],[\"定义配置文件\",{\"1\":{\"11\":1}}],[\"就自动纳入\",{\"1\":{\"681\":1}}],[\"就最高气温而言\",{\"1\":{\"651\":1}}],[\"就有十个横切关注点\",{\"1\":{\"584\":1}}],[\"就拿日志功能来说\",{\"1\":{\"583\":1}}],[\"就需要通过扫描的方式\",{\"1\":{\"564\":1}}],[\"就看if标签判断的结果是否为true\",{\"1\":{\"525\":1}}],[\"就像这样\",{\"1\":{\"515\":1}}],[\"就不再需要它了\",{\"1\":{\"628\":1}}],[\"就不要关注客户中的订单集合\",{\"1\":{\"517\":1}}],[\"就不使用map类型\",{\"1\":{\"510\":1}}],[\"就不能被调用\",{\"1\":{\"154\":1}}],[\"就更新失败\",{\"1\":{\"483\":1}}],[\"就必须在需要的地方明确配置依赖才可以\",{\"1\":{\"415\":1}}],[\"就将其取出\",{\"1\":{\"371\":1}}],[\"就将tem后移\",{\"1\":{\"370\":1,\"371\":1}}],[\"就在tem后面添加\",{\"1\":{\"370\":1}}],[\"就直接加入到链表的最后\",{\"1\":{\"370\":1}}],[\"就能够明确告诉数据库\",{\"1\":{\"608\":1}}],[\"就能看到这个html中里的第一个<p>元素\",{\"1\":{\"334\":1}}],[\"就能对html进行操作\",{\"1\":{\"40\":1}}],[\"就加入\",{\"1\":{\"249\":1,\"612\":1}}],[\"就使得一个线程在操作这些代码的过程中\",{\"1\":{\"197\":1,\"208\":1}}],[\"就容易出现安全问题\",{\"1\":{\"197\":1,\"208\":1}}],[\"就绪<\",{\"1\":{\"196\":1,\"207\":1}}],[\"就释放cpu的执行权\",{\"1\":{\"196\":1,\"207\":1}}],[\"就要对对象进行存储\",{\"1\":{\"169\":1}}],[\"就要考虑到对这些异常的处理\",{\"1\":{\"152\":1}}],[\"就去除多个\",{\"1\":{\"166\":1}}],[\"就跳出其后的多余catch语句\",{\"1\":{\"154\":1}}],[\"就会把原有的文件内容清空\",{\"1\":{\"334\":1}}],[\"就会抛出一个异常类的对象\",{\"1\":{\"155\":1}}],[\"就会在异常的代码处生成一个对应的异常类型的对象\",{\"1\":{\"153\":1}}],[\"就会报错\",{\"1\":{\"146\":1}}],[\"就会执行下面的\",{\"1\":{\"127\":1}}],[\"就近原则\",{\"1\":{\"145\":1}}],[\"就优先用谁\",{\"1\":{\"145\":1}}],[\"就可以将这些构件部署到私服中\",{\"1\":{\"421\":1}}],[\"就可以得到\",{\"1\":{\"371\":1}}],[\"就可以在xml中设置init\",{\"1\":{\"227\":1}}],[\"就可以恢复成原来的java对象\",{\"1\":{\"187\":1}}],[\"就可以新添一个默认方法\",{\"1\":{\"140\":1}}],[\"就可以大家通用\",{\"1\":{\"139\":1}}],[\"就可以设置为静态的\",{\"1\":{\"130\":1}}],[\"就可以设置成static\",{\"1\":{\"130\":1}}],[\"就算不写\",{\"1\":{\"137\":1}}],[\"就记录那个元素的下角标\",{\"1\":{\"126\":1}}],[\"就是root\",{\"1\":{\"621\":1}}],[\"就是web\",{\"1\":{\"621\":1}}],[\"就是一个复杂容器\",{\"1\":{\"552\":1}}],[\"就是一种模板模式\",{\"1\":{\"138\":1}}],[\"就是完美答案\",{\"1\":{\"517\":1}}],[\"就是\",{\"1\":{\"517\":1,\"564\":1}}],[\"就是要插入的实体对象\",{\"1\":{\"463\":1}}],[\"就是靠artifactid来区分的\",{\"1\":{\"409\":1,\"447\":1}}],[\"就是maven\",{\"1\":{\"396\":1,\"440\":1}}],[\"就是队列的第一个元素\",{\"1\":{\"370\":1}}],[\"就是异步的js和xml\",{\"1\":{\"250\":1}}],[\"就是支持多线程的\",{\"1\":{\"192\":1,\"203\":1}}],[\"就是猫\",{\"1\":{\"146\":1}}],[\"就是将abstract或者的default换成static即可\",{\"1\":{\"141\":1}}],[\"就是离的最近的一个for循环\",{\"1\":{\"122\":1}}],[\"就是9\",{\"1\":{\"116\":1}}],[\"就是4\",{\"1\":{\"116\":1}}],[\"就是面向特定方法编程\",{\"1\":{\"99\":1}}],[\"面向过程可以理解为把要实现的内容拆分成一个一个的步骤\",{\"1\":{\"334\":1}}],[\"面向对象有三个被反复提及的特性\",{\"1\":{\"334\":1}}],[\"面向对象程序设计\",{\"0\":{\"327\":1}}],[\"面向对象编程并不会拘泥于具体步骤\",{\"1\":{\"334\":1}}],[\"面向对象编程oop\",{\"1\":{\"334\":1}}],[\"面向对象编程\",{\"1\":{\"211\":1,\"584\":1}}],[\"面向对象语言对事物的体现都是以对象的形式\",{\"1\":{\"169\":1}}],[\"面向对象三大特征\",{\"1\":{\"145\":1}}],[\"面向对象的特征\",{\"0\":{\"134\":1}}],[\"面向方面编程\",{\"1\":{\"99\":1}}],[\"面向切面编程思想aop\",{\"1\":{\"584\":1}}],[\"面向切面编程思维\",{\"0\":{\"584\":1},\"1\":{\"542\":1}}],[\"面向切面编程\",{\"1\":{\"99\":1,\"211\":1,\"547\":1,\"548\":1,\"584\":1}}],[\"面向连接\",{\"1\":{\"62\":1}}],[\"支持静态资源处理\",{\"1\":{\"626\":1}}],[\"支持各种应用场景\",{\"1\":{\"549\":1}}],[\"支持许多模块和库\",{\"1\":{\"549\":1}}],[\"支持多种数据库\",{\"1\":{\"534\":1,\"535\":1}}],[\"支持多达\",{\"1\":{\"460\":1}}],[\"支持的数据类型只有\",{\"1\":{\"484\":1}}],[\"支持以下几种方法引用的形式\",{\"1\":{\"478\":1}}],[\"支持数据库\",{\"1\":{\"460\":1}}],[\"支持模板引擎\",{\"1\":{\"460\":1}}],[\"支持全局通用方法注入\",{\"1\":{\"460\":1}}],[\"支持自定义全局通用操作\",{\"1\":{\"460\":1}}],[\"支持主键自动生成\",{\"1\":{\"460\":1}}],[\"支持\",{\"1\":{\"460\":4,\"549\":1}}],[\"支持同时运行多个程序\",{\"1\":{\"192\":1,\"203\":1}}],[\"支持任意精度的整数\",{\"1\":{\"158\":1}}],[\"支持事务\",{\"1\":{\"98\":1}}],[\"支持pc端\",{\"1\":{\"92\":1}}],[\"总少不了粽子这一味\",{\"1\":{\"651\":1}}],[\"总书记走进荔枝种植园\",{\"1\":{\"651\":1}}],[\"总数据条数\",{\"1\":{\"640\":1}}],[\"总体技术体系\",{\"0\":{\"544\":1},\"1\":{\"542\":1}}],[\"总页数\",{\"1\":{\"472\":1,\"656\":2}}],[\"总记录数\",{\"1\":{\"472\":1,\"634\":1,\"656\":2}}],[\"总之\",{\"1\":{\"408\":1,\"545\":1}}],[\"总是找到temp\",{\"1\":{\"371\":1}}],[\"总是创建新事务\",{\"1\":{\"98\":1}}],[\"总的来说\",{\"1\":{\"230\":1,\"538\":1,\"561\":1,\"619\":1,\"665\":1}}],[\"总结\",{\"1\":{\"17\":1,\"136\":1,\"167\":1,\"235\":1,\"438\":1,\"552\":1,\"558\":1,\"564\":1,\"571\":1,\"620\":1,\"628\":1,\"662\":1}}],[\"含有maven运行时所需要的java类库\",{\"1\":{\"393\":1}}],[\"含有maven的核心配置文件\",{\"1\":{\"393\":1}}],[\"含有maven的运行脚本\",{\"1\":{\"393\":1}}],[\"含有plexus\",{\"1\":{\"393\":1}}],[\"含义\",{\"1\":{\"98\":1,\"146\":2,\"228\":2,\"249\":1,\"560\":2,\"565\":2,\"612\":1}}],[\"含头不含尾\",{\"1\":{\"40\":1}}],[\"层次结构\",{\"1\":{\"669\":1}}],[\"层次结构鲜明\",{\"1\":{\"40\":1}}],[\"层避免混淆\",{\"1\":{\"468\":1}}],[\"层代码\",{\"1\":{\"460\":1}}],[\"层代码的目录\",{\"1\":{\"401\":3,\"445\":3}}],[\"层等\",{\"1\":{\"231\":1,\"564\":1}}],[\"层\",{\"1\":{\"231\":3,\"538\":1,\"564\":3}}],[\"层的方法上\",{\"1\":{\"97\":1}}],[\"业务类\",{\"1\":{\"628\":1}}],[\"业务和持久层相关组件\",{\"1\":{\"620\":1}}],[\"业务代码\",{\"1\":{\"602\":1}}],[\"业务处理的主要流程是核心关注点\",{\"1\":{\"584\":1}}],[\"业务层配置编写\",{\"0\":{\"627\":1},\"1\":{\"615\":1}}],[\"业务层\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"业务线\",{\"1\":{\"398\":1,\"442\":1}}],[\"业务\",{\"1\":{\"97\":1}}],[\"业务逻辑层\",{\"1\":{\"71\":1}}],[\"中添加mybatis和数据库驱动的相关依赖\",{\"1\":{\"679\":1}}],[\"中添加所需的starter依赖\",{\"1\":{\"665\":1}}],[\"中高档型\",{\"1\":{\"651\":1}}],[\"中型\",{\"1\":{\"651\":1}}],[\"中国国际象棋甲级联赛常规赛在武陵云海国际酒店进行了最后一轮的争夺\",{\"1\":{\"651\":1}}],[\"中国系列赛第三回合于今天上午率先开战\",{\"1\":{\"651\":1}}],[\"中国气象局召开高温天气新闻通气会\",{\"1\":{\"651\":1}}],[\"中说\",{\"1\":{\"651\":1}}],[\"中央气象台升级发布今年首个高温橙色预警\",{\"1\":{\"651\":1}}],[\"中央气象台发布今年首个高温橙色预警\",{\"1\":{\"651\":1}}],[\"中央仓库的代理\",{\"1\":{\"424\":1}}],[\"中央仓库下载\",{\"1\":{\"59\":1}}],[\"中央仓库\",{\"1\":{\"55\":1,\"421\":1}}],[\"中新社北京6月24日电\",{\"1\":{\"651\":1}}],[\"中获得的\",{\"1\":{\"628\":1}}],[\"中介\",{\"1\":{\"583\":1}}],[\"中打开插件市场\",{\"1\":{\"539\":1}}],[\"中比较著名的分页插件\",{\"1\":{\"534\":1}}],[\"中会由一个\",{\"1\":{\"515\":1}}],[\"中查询\",{\"1\":{\"512\":1}}],[\"中写map中的key\",{\"1\":{\"505\":1}}],[\"中传入的数据\",{\"1\":{\"503\":1}}],[\"中可以随意命名\",{\"1\":{\"502\":1}}],[\"中引入的一种语法特性\",{\"1\":{\"478\":1}}],[\"中指定的\",{\"1\":{\"426\":1}}],[\"中各自维护各自的依赖信息很容易发生出入\",{\"1\":{\"418\":1}}],[\"中间件等\",{\"1\":{\"544\":1}}],[\"中间使用逗号进行分隔\",{\"1\":{\"330\":1}}],[\"中间任何一个操作出现异常\",{\"1\":{\"97\":1}}],[\"中括号里面的为可选的\",{\"1\":{\"317\":1}}],[\"中注册\",{\"1\":{\"237\":1,\"573\":1}}],[\"中的一个\",{\"1\":{\"544\":2}}],[\"中的\",{\"1\":{\"231\":4,\"243\":1,\"398\":1,\"411\":1,\"442\":1,\"493\":1,\"508\":1,\"564\":4,\"602\":1}}],[\"中一种特殊的\",{\"1\":{\"230\":1,\"561\":1}}],[\"中\",{\"1\":{\"196\":1,\"207\":1,\"221\":1,\"243\":1,\"307\":1,\"411\":1,\"493\":1,\"515\":2,\"553\":1,\"584\":1,\"602\":1,\"667\":1}}],[\"请仔细检查\",{\"1\":{\"440\":1}}],[\"请仔细检查环境变量即可\",{\"1\":{\"394\":1,\"440\":1}}],[\"请问最终会导入哪些依赖和对应版本\",{\"1\":{\"416\":1}}],[\"请重新运行程序\",{\"1\":{\"334\":3}}],[\"请输入选择项目的序号\",{\"1\":{\"412\":1}}],[\"请输入您要查的单词\",{\"1\":{\"361\":1}}],[\"请输入您的身高\",{\"1\":{\"334\":1}}],[\"请输入您的体重\",{\"1\":{\"334\":1}}],[\"请输入要查询的词语\",{\"1\":{\"334\":1}}],[\"请输入你的年龄\",{\"1\":{\"334\":1}}],[\"请输入你的成绩\",{\"1\":{\"334\":2}}],[\"请输入数字\",{\"1\":{\"334\":2}}],[\"请输入一个字符串\",{\"1\":{\"296\":1}}],[\"请多多关照\",{\"1\":{\"191\":1,\"202\":1}}],[\"请联系管理员\",{\"1\":{\"96\":1}}],[\"请求uri\",{\"1\":{\"634\":4}}],[\"请求外部的远程仓库\",{\"1\":{\"421\":1}}],[\"请求本地仓库\",{\"1\":{\"421\":1}}],[\"请求对象的定制为了解决反爬的第一种手段\",{\"1\":{\"354\":1}}],[\"请求对象的定制\",{\"0\":{\"353\":1}}],[\"请求失败\",{\"1\":{\"334\":1}}],[\"请求成功\",{\"1\":{\"334\":1}}],[\"请求在处理中\",{\"1\":{\"254\":1}}],[\"请求已发送\",{\"1\":{\"254\":1}}],[\"请求已经建立\",{\"1\":{\"254\":1}}],[\"请求未初始化\",{\"1\":{\"254\":1}}],[\"请求<\",{\"1\":{\"253\":1}}],[\"请求报文\",{\"0\":{\"251\":1}}],[\"请求范围内有效的实例\",{\"1\":{\"228\":1,\"560\":1,\"565\":1}}],[\"请求处理\",{\"1\":{\"74\":1}}],[\"请求参数\",{\"1\":{\"655\":5,\"656\":3,\"657\":5}}],[\"请求参数名与形参集合名称相同且请求参数为多个\",{\"1\":{\"68\":1}}],[\"请求参数名与形参对象属性名相同\",{\"1\":{\"68\":1}}],[\"请求参数名与参数组名称相同\",{\"1\":{\"68\":1}}],[\"请求参数与形参对象属性名相同\",{\"1\":{\"68\":1}}],[\"请求参数在请求体中\",{\"1\":{\"63\":1}}],[\"请求参数在请求行中\",{\"1\":{\"63\":1}}],[\"请求\",{\"0\":{\"68\":1},\"1\":{\"67\":1,\"421\":1}}],[\"请求响应\",{\"0\":{\"67\":1}}],[\"请求了不存在的资源\",{\"1\":{\"64\":1}}],[\"请求主体的大小\",{\"1\":{\"63\":1}}],[\"请求主体的数据类型\",{\"1\":{\"63\":1}}],[\"请求的主机名\",{\"1\":{\"63\":1}}],[\"请求头\",{\"1\":{\"63\":1,\"251\":1,\"655\":2,\"657\":2}}],[\"请求方式\",{\"1\":{\"63\":1,\"634\":4,\"655\":6,\"656\":3,\"657\":5}}],[\"请求方式别名\",{\"1\":{\"45\":1}}],[\"请求行\",{\"1\":{\"63\":1,\"251\":1}}],[\"请求协议\",{\"0\":{\"63\":1}}],[\"请求链接组件\",{\"1\":{\"52\":1}}],[\"请求体中的json\",{\"1\":{\"634\":2}}],[\"请求体是什么类型的\",{\"1\":{\"251\":1}}],[\"请求体\",{\"1\":{\"34\":1,\"63\":1,\"251\":1}}],[\"异常对象捕捉\",{\"1\":{\"589\":1}}],[\"异常等\",{\"1\":{\"584\":1}}],[\"异常方可回滚\",{\"1\":{\"247\":3,\"248\":1,\"610\":4,\"611\":1,\"612\":1}}],[\"异常通知\",{\"1\":{\"211\":1,\"584\":1}}],[\"异常类型是\",{\"1\":{\"589\":1}}],[\"异常类\",{\"1\":{\"155\":1}}],[\"异常类的对象\",{\"1\":{\"155\":1}}],[\"异常的信息\",{\"1\":{\"213\":1}}],[\"异常的类型\",{\"1\":{\"155\":1}}],[\"异常的处理\",{\"1\":{\"155\":1}}],[\"异常的对象可以逐层向上抛\",{\"1\":{\"155\":1}}],[\"异常\",{\"1\":{\"152\":1,\"212\":2,\"583\":1,\"592\":1,\"598\":2}}],[\"异常分为两类\",{\"1\":{\"152\":1}}],[\"异常处理和透明的持续性也都是如此\",{\"1\":{\"584\":1}}],[\"异常处理\",{\"0\":{\"96\":1},\"1\":{\"584\":1}}],[\"异或\",{\"1\":{\"116\":1}}],[\"异步交互\",{\"1\":{\"45\":1}}],[\"异步的javascript和xml\",{\"1\":{\"45\":1}}],[\"接受一个\",{\"1\":{\"515\":1}}],[\"接受来自服务端的消息\",{\"1\":{\"191\":1,\"202\":1}}],[\"接下来我们讲解下如何定义使用实例工厂方法创建bean的配置\",{\"1\":{\"557\":1}}],[\"接下来我们讲解如何定义使用静态工厂方法创建bean的配置\",{\"1\":{\"557\":1}}],[\"接下来我们要学习将多表查询结果使用resultmap标签映射到实体类对象上\",{\"1\":{\"517\":1}}],[\"接下来\",{\"1\":{\"514\":1}}],[\"接收到请求\",{\"1\":{\"552\":1}}],[\"接收到第一次请求\",{\"1\":{\"552\":1}}],[\"接收head节点\",{\"1\":{\"371\":1}}],[\"接收一个字符\",{\"1\":{\"368\":1}}],[\"接收数据\",{\"1\":{\"191\":1,\"202\":1}}],[\"接收客户端的socket\",{\"1\":{\"191\":1,\"202\":1}}],[\"接收前端发送的请求\",{\"1\":{\"71\":1}}],[\"接字是两台机器间通信的端点\",{\"1\":{\"190\":1,\"201\":1}}],[\"接口描述\",{\"1\":{\"655\":4,\"656\":3,\"657\":5}}],[\"接口有一个实现类\",{\"1\":{\"598\":1}}],[\"接口有多个实现类\",{\"1\":{\"598\":1}}],[\"接口所有实现类都放入\",{\"1\":{\"598\":1}}],[\"接口所在的包内\",{\"1\":{\"532\":1}}],[\"接口通过\",{\"1\":{\"589\":1}}],[\"接口是spring\",{\"1\":{\"561\":1}}],[\"接口是一种引用数据类型\",{\"1\":{\"139\":1}}],[\"接口只规定方法\",{\"1\":{\"493\":1}}],[\"接口相当于以前的\",{\"1\":{\"493\":1}}],[\"接口和\",{\"1\":{\"491\":1,\"532\":1}}],[\"接口实现\",{\"1\":{\"472\":1,\"582\":1}}],[\"接口实现类\",{\"1\":{\"151\":1}}],[\"接口继承iservice接口\",{\"1\":{\"470\":1}}],[\"接口的全类名和映射配置文件的名称空间一致\",{\"1\":{\"493\":1}}],[\"接口的全限定符\",{\"1\":{\"467\":1,\"680\":1}}],[\"接口的驱动\",{\"1\":{\"411\":1}}],[\"接口的实现类必须覆盖重写\",{\"1\":{\"139\":1}}],[\"接口即可\",{\"1\":{\"411\":1}}],[\"接口等代码文件\",{\"1\":{\"538\":1}}],[\"接口等\",{\"1\":{\"398\":1,\"442\":1}}],[\"接口等都定义在java\",{\"1\":{\"182\":1}}],[\"接口提供了访问\",{\"1\":{\"230\":1,\"561\":1}}],[\"接口提供了一种高级配置机制\",{\"1\":{\"221\":1,\"552\":1}}],[\"接口提供三种方法\",{\"1\":{\"229\":1,\"561\":1}}],[\"接口接值\",{\"1\":{\"218\":1,\"594\":1}}],[\"接口new实现类\",{\"1\":{\"170\":1}}],[\"接口里允许定义私有方法\",{\"1\":{\"144\":1}}],[\"接口总结\",{\"0\":{\"144\":1}}],[\"接口当中常量的名称\",{\"1\":{\"143\":1}}],[\"接口当中也可以定义\",{\"1\":{\"143\":1}}],[\"接口当中允许定义私有方法\",{\"1\":{\"142\":1}}],[\"接口当中允许定义静态方法\",{\"1\":{\"141\":1}}],[\"接口当中的常量\",{\"1\":{\"143\":2}}],[\"接口当中的默认方法\",{\"1\":{\"140\":1}}],[\"接口当中的抽象方法\",{\"1\":{\"139\":1}}],[\"接口静态方法\",{\"0\":{\"141\":1}}],[\"接口内添加抽象方法\",{\"1\":{\"140\":1}}],[\"接口内容\",{\"1\":{\"139\":1}}],[\"接口允许定义默认方法\",{\"1\":{\"140\":1,\"144\":1}}],[\"接口可以继承接口\",{\"1\":{\"139\":1}}],[\"接口中相同的五个\",{\"1\":{\"514\":1}}],[\"接口中最重要的就是抽象方法\",{\"1\":{\"144\":1}}],[\"接口中的常量\",{\"0\":{\"143\":1}}],[\"接口中没有构造器\",{\"1\":{\"139\":1}}],[\"接口中所有的抽象方法\",{\"1\":{\"139\":1}}],[\"接口不能直接使用\",{\"1\":{\"139\":1}}],[\"接口使用步骤\",{\"1\":{\"139\":1}}],[\"接口就是一种公共的规范标准\",{\"1\":{\"139\":1}}],[\"接口\",{\"0\":{\"139\":1},\"1\":{\"113\":1,\"230\":1,\"462\":1,\"468\":1,\"514\":1,\"532\":1,\"534\":1,\"561\":1,\"562\":2,\"568\":2,\"575\":2,\"655\":1,\"656\":2}}],[\"接口名称就是匿名内部类需要实现哪个接口\",{\"1\":{\"151\":1}}],[\"接口名称\",{\"1\":{\"139\":1,\"141\":1,\"145\":1,\"151\":3}}],[\"接口名称p\",{\"1\":{\"139\":1}}],[\"接口名\",{\"1\":{\"110\":1}}],[\"接口上\",{\"1\":{\"97\":1}}],[\"接口规范不同\",{\"1\":{\"94\":1}}],[\"视图解析器用于解析控制器返回的视图名称\",{\"1\":{\"674\":1}}],[\"视图模板技术\",{\"1\":{\"387\":2}}],[\"视图渲染完毕后运行\",{\"1\":{\"94\":1}}],[\"视频\",{\"1\":{\"352\":1}}],[\"视频地址\",{\"1\":{\"352\":1}}],[\"视频文件\",{\"1\":{\"186\":1}}],[\"视频中地址已失效\",{\"1\":{\"45\":1}}],[\"目标类有接口\",{\"1\":{\"599\":1}}],[\"目标类并没有被放到ioc容器中\",{\"1\":{\"598\":1}}],[\"目标方法的返回值一定要返回给外界调用者\",{\"1\":{\"592\":1}}],[\"目标方法的返回值\",{\"1\":{\"216\":1}}],[\"目标方法\",{\"1\":{\"216\":1}}],[\"目标方法执行\",{\"1\":{\"212\":1}}],[\"目标方法运行后运行\",{\"1\":{\"94\":1}}],[\"目标\",{\"1\":{\"211\":1,\"557\":1,\"558\":1,\"583\":1,\"584\":1}}],[\"目标对象实现的所有接口的class对象所组成的数组\",{\"1\":{\"583\":1}}],[\"目标对象\",{\"1\":{\"101\":1}}],[\"目标资源方法运行前运行\",{\"1\":{\"94\":1}}],[\"目录下\",{\"1\":{\"675\":1}}],[\"目录\",{\"0\":{\"384\":1,\"436\":1,\"459\":1,\"489\":1,\"542\":1,\"615\":1,\"644\":1,\"660\":1}}],[\"目录拦截\",{\"1\":{\"93\":1}}],[\"目录结构\",{\"1\":{\"49\":1,\"82\":1}}],[\"校验登录是否过期\",{\"1\":{\"657\":1}}],[\"校验用户登录是否过期并做响应\",{\"1\":{\"657\":1}}],[\"校验通过响应成功提示\",{\"1\":{\"655\":1}}],[\"校验是否到期\",{\"1\":{\"655\":1}}],[\"校验\",{\"1\":{\"93\":1,\"95\":1,\"655\":1}}],[\"未过期则直接删除\",{\"1\":{\"657\":1}}],[\"未过期\",{\"1\":{\"657\":1}}],[\"未到期\",{\"1\":{\"655\":1}}],[\"未删除\",{\"1\":{\"651\":3}}],[\"未指定name时\",{\"1\":{\"566\":1}}],[\"未指定时将自动查找\",{\"1\":{\"496\":1}}],[\"未设置\",{\"1\":{\"496\":1,\"515\":1}}],[\"未逻辑删除\",{\"1\":{\"481\":3}}],[\"未能推广\",{\"1\":{\"189\":1,\"200\":1}}],[\"未直接初始化\",{\"1\":{\"131\":1}}],[\"未完待续~~~\",{\"1\":{\"102\":1}}],[\"未登录\",{\"1\":{\"93\":2,\"657\":2}}],[\"未经允许\",{\"1\":{\"0\":1}}],[\"优势\",{\"1\":{\"628\":1,\"655\":1}}],[\"优炫数据库\",{\"1\":{\"460\":1}}],[\"优化构建顺序\",{\"1\":{\"419\":1,\"453\":1}}],[\"优化思路\",{\"1\":{\"126\":1}}],[\"优秀的程序可以在海量数据计算时\",{\"1\":{\"365\":1}}],[\"优先级低的切面\",{\"1\":{\"593\":1}}],[\"优先级低\",{\"1\":{\"217\":1,\"593\":1}}],[\"优先级高的切面\",{\"1\":{\"593\":1}}],[\"优先级高\",{\"1\":{\"217\":1,\"593\":1}}],[\"优先级是按照过滤器类名的自然排序\",{\"1\":{\"93\":1}}],[\"优先用子\",{\"1\":{\"145\":1}}],[\"优先用谁\",{\"1\":{\"145\":2}}],[\"优点\",{\"1\":{\"62\":1,\"90\":1,\"91\":1,\"92\":1,\"250\":1}}],[\"拦截当前目录下的以及子路径\",{\"1\":{\"676\":1}}],[\"拦截当前目录及子目录下的所有路径\",{\"1\":{\"676\":1}}],[\"拦截\",{\"1\":{\"657\":1}}],[\"拦截器效果测试\",{\"1\":{\"676\":1}}],[\"拦截器声明\",{\"1\":{\"676\":1}}],[\"拦截器会校验\",{\"1\":{\"657\":1}}],[\"拦截器配置\",{\"1\":{\"657\":1,\"676\":1}}],[\"拦截器链\",{\"1\":{\"534\":1}}],[\"拦截器\",{\"1\":{\"534\":1,\"657\":1}}],[\"拦截器interceptor\",{\"0\":{\"94\":1}}],[\"拦截范围不同\",{\"1\":{\"94\":1}}],[\"拦截请求\",{\"1\":{\"94\":1}}],[\"拦截所有\",{\"1\":{\"93\":1}}],[\"拦截所有请求\",{\"1\":{\"93\":1}}],[\"拦截具体路径\",{\"1\":{\"93\":1}}],[\"拦截路径\",{\"1\":{\"93\":1}}],[\"继续执行初始化\",{\"1\":{\"423\":1}}],[\"继续执行\",{\"1\":{\"196\":1,\"207\":1}}],[\"继续执行放行后的逻辑\",{\"1\":{\"93\":1}}],[\"继承mybatis\",{\"1\":{\"461\":1}}],[\"继承和聚合\",{\"1\":{\"457\":1}}],[\"继承父工程依赖版本\",{\"1\":{\"456\":2}}],[\"继承父工程版本\",{\"1\":{\"432\":4,\"456\":1}}],[\"继承父类\",{\"1\":{\"334\":1}}],[\"继承语法和实践\",{\"1\":{\"457\":1}}],[\"继承语法\",{\"1\":{\"418\":1,\"452\":1}}],[\"继承作用\",{\"1\":{\"418\":1,\"452\":1}}],[\"继承可以让我们在多个项目中共享同一配置信息\",{\"1\":{\"418\":1,\"452\":1}}],[\"继承是指在\",{\"1\":{\"418\":1,\"452\":1}}],[\"继承是指面向对象编程允许创建有层次的类\",{\"1\":{\"334\":1}}],[\"继承概念\",{\"1\":{\"418\":1,\"452\":1}}],[\"继承thread类\",{\"0\":{\"194\":1,\"205\":1}}],[\"继承性\",{\"1\":{\"145\":1}}],[\"继承或者接口实现类\",{\"1\":{\"145\":1}}],[\"继承关系中\",{\"1\":{\"136\":1}}],[\"继承\",{\"0\":{\"136\":1,\"329\":1},\"1\":{\"134\":1,\"334\":2,\"584\":1}}],[\"继承打包上线\",{\"1\":{\"48\":1}}],[\"引发所有子模块构建\",{\"1\":{\"419\":1,\"453\":1}}],[\"引用了前面配置的appender\",{\"1\":{\"625\":1}}],[\"引用\",{\"1\":{\"591\":1}}],[\"引用新组件\",{\"1\":{\"573\":1}}],[\"引用其他bean\",{\"1\":{\"558\":1}}],[\"引用类bean声明\",{\"1\":{\"558\":1}}],[\"引用类型自动装配\",{\"0\":{\"233\":1,\"566\":1},\"1\":{\"542\":1}}],[\"引用已抽取的sql片段\",{\"1\":{\"530\":1}}],[\"引用构造函数\",{\"1\":{\"478\":1}}],[\"引用特定对象的实例方法\",{\"1\":{\"478\":1}}],[\"引用实例方法\",{\"1\":{\"478\":1}}],[\"引用静态方法\",{\"1\":{\"478\":1}}],[\"引用别人部署的\",{\"0\":{\"427\":1}}],[\"引用properties声明版本\",{\"1\":{\"410\":1,\"447\":1}}],[\"引用bean的id值\",{\"1\":{\"225\":1,\"558\":1}}],[\"引用切入点表达式\",{\"1\":{\"219\":1,\"596\":1}}],[\"引用数据类型默认是null\",{\"1\":{\"124\":1}}],[\"引用数据类型\",{\"0\":{\"113\":1}}],[\"引导类上加\",{\"1\":{\"93\":1}}],[\"引入的一种函数式编程特性\",{\"1\":{\"478\":1}}],[\"引入它不会对现有工程产生影响\",{\"1\":{\"460\":1}}],[\"引入具体的依赖包\",{\"1\":{\"410\":1,\"447\":1}}],[\"引入第三方依赖\",{\"1\":{\"410\":1,\"447\":1}}],[\"引入其他的配置文件\",{\"1\":{\"283\":1}}],[\"引入express\",{\"1\":{\"252\":1}}],[\"引入外部配置文件\",{\"1\":{\"567\":1,\"571\":1}}],[\"引入外部的properties文件可以通过<context\",{\"1\":{\"240\":1,\"577\":1}}],[\"引入外部属性文件\",{\"1\":{\"236\":2,\"572\":2}}],[\"引入jdbc\",{\"1\":{\"231\":1,\"236\":1,\"572\":1}}],[\"引入jwt令牌操作工具类\",{\"1\":{\"92\":1}}],[\"引入配置文件并使用其值\",{\"0\":{\"235\":1}}],[\"引入配置文件\",{\"0\":{\"231\":1},\"1\":{\"235\":1}}],[\"引入起步依赖\",{\"1\":{\"78\":1}}],[\"引入依赖\",{\"1\":{\"76\":1,\"92\":1,\"673\":1,\"677\":1}}],[\"引入最新加入的坐标\",{\"1\":{\"59\":1}}],[\"引入axios的js文件\",{\"1\":{\"45\":1}}],[\"引入方式\",{\"1\":{\"37\":1}}],[\"引入css样式\",{\"1\":{\"35\":1}}],[\"敏感字符处理等\",{\"1\":{\"93\":1}}],[\"令牌是一种代表某种访问权限或身份认证信息的令牌\",{\"1\":{\"655\":1}}],[\"令牌\",{\"1\":{\"655\":1}}],[\"令牌非法\",{\"1\":{\"92\":1}}],[\"令牌技术\",{\"0\":{\"92\":1},\"1\":{\"89\":1}}],[\"载荷\",{\"1\":{\"92\":1,\"655\":1}}],[\"z0\",{\"1\":{\"345\":3}}],[\"za\",{\"1\":{\"345\":4}}],[\"zerodivisionerror\",{\"1\":{\"334\":1}}],[\"zeng\",{\"1\":{\"334\":2}}],[\"zeng=student\",{\"1\":{\"334\":1}}],[\"zhangxiaoming\",{\"1\":{\"651\":1}}],[\"zhangsan\",{\"1\":{\"334\":3,\"651\":1,\"655\":6}}],[\"zh\",{\"1\":{\"491\":1,\"508\":1,\"534\":1,\"628\":2}}],[\"zh`安装中文版本\",{\"1\":{\"280\":1}}],[\"zone=public\",{\"1\":{\"276\":1}}],[\"zone=zone\",{\"1\":{\"276\":1}}],[\"zone\",{\"1\":{\"276\":1}}],[\"zi\",{\"1\":{\"145\":4,\"146\":4,\"197\":6}}],[\"zip\",{\"1\":{\"56\":1,\"315\":3,\"440\":1}}],[\"z=x\",{\"1\":{\"112\":1}}],[\"z\",{\"1\":{\"92\":2,\"197\":5,\"345\":3}}],[\"确实依赖的版本正确性\",{\"1\":{\"448\":1}}],[\"确保本地node\",{\"1\":{\"649\":1}}],[\"确保这些依赖都可用\",{\"1\":{\"448\":1}}],[\"确保依赖项之间的兼容性和稳定性\",{\"1\":{\"665\":1}}],[\"确保依赖项的版本号与项目对应的版本号匹配\",{\"1\":{\"412\":1,\"449\":1}}],[\"确保依赖版本正确性\",{\"1\":{\"448\":1}}],[\"确保依赖版本正确无冲突和依赖完整\",{\"1\":{\"439\":1}}],[\"确保依赖版本正确\",{\"1\":{\"415\":1}}],[\"确保安全性\",{\"1\":{\"92\":1}}],[\"确定的value\",{\"1\":{\"177\":1}}],[\"确定类型t的对象对否满足某约束\",{\"1\":{\"17\":1}}],[\"签名秘钥为了防止其他人随意解析和校验token数据\",{\"1\":{\"655\":1}}],[\"签名秘钥\",{\"1\":{\"655\":1}}],[\"签名算法\",{\"1\":{\"92\":1}}],[\"签名算法等\",{\"1\":{\"92\":1}}],[\"签名\",{\"1\":{\"92\":1,\"655\":1}}],[\"携带一些自定义信息\",{\"1\":{\"92\":1}}],[\"记者瞬间觉得这道公认的难题有了解题的思路\",{\"1\":{\"651\":1}}],[\"记者感受到了很多从业者的激动\",{\"1\":{\"651\":1}}],[\"记者黄垚\",{\"1\":{\"651\":1}}],[\"记者\",{\"1\":{\"651\":1}}],[\"记者走进乡村一线\",{\"1\":{\"651\":1}}],[\"记得调用的方法是\",{\"1\":{\"181\":1}}],[\"记得写对应的set和get和tostring方法\",{\"1\":{\"68\":1}}],[\"记录是第几个非零数据\",{\"1\":{\"366\":1}}],[\"记录数组一共有几行几列\",{\"1\":{\"365\":1}}],[\"记录操作日志\",{\"1\":{\"100\":1}}],[\"记录令牌类型\",{\"1\":{\"92\":1}}],[\"头部\",{\"1\":{\"655\":1}}],[\"头条修改实现\",{\"1\":{\"657\":1}}],[\"头条是否被删除\",{\"1\":{\"651\":3}}],[\"头条最后的修改时间\",{\"1\":{\"651\":1}}],[\"头条发布实现\",{\"1\":{\"657\":1}}],[\"头条发布时间\",{\"1\":{\"651\":1}}],[\"头条发布用户id\",{\"1\":{\"651\":1}}],[\"头条浏览量\",{\"1\":{\"651\":1}}],[\"头条类型id\",{\"1\":{\"651\":1}}],[\"头条标题\",{\"1\":{\"651\":1}}],[\"头条id\",{\"1\":{\"651\":1}}],[\"头条首页信息搜索\",{\"1\":{\"648\":1}}],[\"头条新闻内容\",{\"1\":{\"651\":1}}],[\"头条新闻\",{\"1\":{\"646\":1}}],[\"头条模块开发\",{\"0\":{\"657\":1},\"1\":{\"644\":1}}],[\"头节点不要动\",{\"1\":{\"370\":1}}],[\"头\",{\"1\":{\"92\":1,\"252\":1,\"253\":1}}],[\"全球市场的反馈是\",{\"1\":{\"651\":1}}],[\"全家桶\",{\"1\":{\"547\":1}}],[\"全自动\",{\"1\":{\"537\":4}}],[\"全自动orm类型持久层框架\",{\"1\":{\"460\":1}}],[\"全限定符\",{\"1\":{\"508\":1}}],[\"全职有\",{\"1\":{\"334\":1}}],[\"全职和兼职都有\",{\"1\":{\"334\":2}}],[\"全职员工\",{\"1\":{\"334\":1}}],[\"全部配置类\",{\"1\":{\"628\":1}}],[\"全部在声明sqlsessionfactorybean的代码中指定\",{\"1\":{\"628\":1}}],[\"全部内容\",{\"1\":{\"334\":1}}],[\"全部引用过来\",{\"1\":{\"334\":1}}],[\"全部导入后\",{\"1\":{\"330\":1}}],[\"全部\",{\"1\":{\"277\":1}}],[\"全部都必须在ioc容器中\",{\"1\":{\"233\":1,\"566\":1}}],[\"全局统一设置\",{\"1\":{\"653\":1}}],[\"全局统一返回结果类\",{\"1\":{\"652\":1}}],[\"全局逻辑删除\",{\"1\":{\"652\":1}}],[\"全局逻辑删除的实体字段名\",{\"1\":{\"481\":1}}],[\"全局配置自动识别驼峰式命名规则\",{\"1\":{\"513\":1}}],[\"全局配置文件中\",{\"1\":{\"509\":1}}],[\"全局配置修改主键策略\",{\"1\":{\"480\":1}}],[\"全局更新\",{\"1\":{\"485\":1}}],[\"全局指定\",{\"1\":{\"481\":1}}],[\"全局设置前缀\",{\"1\":{\"480\":1}}],[\"全局变量\",{\"1\":{\"131\":1}}],[\"全局异常处理器\",{\"1\":{\"96\":1}}],[\"全局相关资源定义\",{\"1\":{\"12\":1}}],[\"全称\",{\"1\":{\"92\":1}}],[\"解压前端项目代码并存放到磁盘的合适位置\",{\"1\":{\"649\":1}}],[\"解压\",{\"1\":{\"422\":1}}],[\"解压apache\",{\"1\":{\"56\":1}}],[\"解码\",{\"1\":{\"351\":1}}],[\"解码是将二进制数据转换为字符的过程\",{\"1\":{\"114\":1}}],[\"解耦合\",{\"1\":{\"619\":2}}],[\"解耦\",{\"1\":{\"211\":1,\"582\":1,\"583\":1}}],[\"解决枚举类\",{\"1\":{\"652\":1}}],[\"解决问题的困难\",{\"1\":{\"582\":1}}],[\"解决技术代理模式\",{\"0\":{\"583\":1},\"1\":{\"542\":1}}],[\"解决思路\",{\"1\":{\"483\":1,\"582\":1}}],[\"解决依赖冲突\",{\"1\":{\"416\":1,\"448\":1}}],[\"解决非核心代码冗余\",{\"1\":{\"211\":1}}],[\"解决上面小了会出现问题\",{\"1\":{\"191\":1,\"202\":1}}],[\"解决多个静态方法之间重复代码问题\",{\"1\":{\"142\":1}}],[\"解决多个默认方法之间重复代码问题\",{\"1\":{\"142\":1}}],[\"解决方案\",{\"1\":{\"142\":1,\"146\":1,\"236\":2,\"412\":1,\"449\":1,\"572\":2,\"628\":1}}],[\"解决的问题\",{\"1\":{\"138\":1}}],[\"解决集群环境下的认证问题\",{\"1\":{\"92\":1}}],[\"解析用户标识\",{\"1\":{\"655\":1}}],[\"解析等动作token的技术\",{\"1\":{\"655\":1}}],[\"解析后的问号占位符这个位置\",{\"1\":{\"503\":1}}],[\"解析html\",{\"1\":{\"334\":1}}],[\"解析\",{\"1\":{\"163\":2}}],[\"解析token对应的userid\",{\"1\":{\"655\":1}}],[\"解析token\",{\"1\":{\"93\":1}}],[\"解析jwt令牌\",{\"1\":{\"92\":1}}],[\"往包里多塞一个都算我输\",{\"1\":{\"651\":1}}],[\"往往这种湿热型高温会加重人体体感温度\",{\"1\":{\"651\":1}}],[\"往列表里添加内容\",{\"1\":{\"334\":1}}],[\"往session中存储数据\",{\"1\":{\"91\":1}}],[\"往httpsession中存储值\",{\"1\":{\"91\":1}}],[\"跨域区分三个维度\",{\"1\":{\"90\":1}}],[\"跨平台面向对象的脚本语言\",{\"1\":{\"37\":1}}],[\"移除学习计划\",{\"1\":{\"641\":1}}],[\"移除\",{\"1\":{\"471\":1}}],[\"移除列表所存在内容\",{\"1\":{\"334\":1}}],[\"移除第一个元素\",{\"1\":{\"316\":1}}],[\"移除上一次构建生成的文件\",{\"1\":{\"59\":1}}],[\"移动端\",{\"1\":{\"92\":1}}],[\"移动端app无法使用cookie\",{\"1\":{\"90\":1}}],[\"服务\",{\"1\":{\"664\":1,\"665\":1}}],[\"服务依赖\",{\"1\":{\"455\":1}}],[\"服务注册发现启动器\",{\"1\":{\"387\":1}}],[\"服务注册发现\",{\"1\":{\"387\":1}}],[\"服务已经启动\",{\"1\":{\"252\":1}}],[\"服务端校验登录是否过期\",{\"1\":{\"657\":1}}],[\"服务端根据条件搜索分页信息\",{\"1\":{\"656\":1}}],[\"服务端将新用户存入数据库\",{\"1\":{\"655\":1}}],[\"服务端发送数据给客户端\",{\"1\":{\"191\":1,\"202\":1}}],[\"服务端\",{\"1\":{\"189\":1,\"191\":1,\"192\":1,\"200\":1,\"202\":1,\"203\":1}}],[\"服务端会话跟踪技术\",{\"1\":{\"89\":1}}],[\"服务器接收到请求后\",{\"1\":{\"655\":1}}],[\"服务器将jwt发送给客户端\",{\"1\":{\"655\":1}}],[\"服务器对这些凭据进行验证\",{\"1\":{\"655\":1}}],[\"服务器上就有了\",{\"1\":{\"425\":1}}],[\"服务器上的配置\",{\"1\":{\"53\":1}}],[\"服务器套接字等待请求通过网络传入\",{\"1\":{\"190\":1,\"201\":1}}],[\"服务器\",{\"1\":{\"189\":1,\"200\":1}}],[\"服务器集群环境下无法直接使用session\",{\"1\":{\"91\":1}}],[\"服务器需要识别多次请求是否来自于同一浏览器\",{\"1\":{\"89\":1}}],[\"服务器架构模式\",{\"1\":{\"67\":2}}],[\"服务器可根据此返回不同语言的网页\",{\"1\":{\"63\":1}}],[\"直面与特斯拉的竞争\",{\"1\":{\"651\":1}}],[\"直至main中\",{\"1\":{\"155\":1}}],[\"直到线程a操作ticket结束以后\",{\"1\":{\"197\":1,\"208\":1}}],[\"直到线程b执行结束\",{\"1\":{\"196\":1,\"207\":1}}],[\"直到垃圾回收消失\",{\"1\":{\"150\":1}}],[\"直到有一方断开连接\",{\"1\":{\"89\":1}}],[\"直接引入坐标\",{\"1\":{\"664\":1}}],[\"直接降低了特斯拉的购买门槛\",{\"1\":{\"651\":1}}],[\"直接描述返回值类型\",{\"1\":{\"590\":1}}],[\"直接描述对应修饰符即可\",{\"1\":{\"590\":1}}],[\"直接根据声明factorybean的id\",{\"1\":{\"561\":1}}],[\"直接注入基本类型值\",{\"1\":{\"558\":1}}],[\"直接属性值\",{\"1\":{\"558\":1}}],[\"直接面向对象操作\",{\"1\":{\"460\":1}}],[\"直接报错\",{\"1\":{\"421\":1}}],[\"直接可以导入data\",{\"1\":{\"415\":1,\"448\":1}}],[\"直接给了一个默认值<version>1\",{\"1\":{\"443\":1}}],[\"直接给了一个默认值\",{\"1\":{\"399\":1}}],[\"直接返回未登录\",{\"1\":{\"655\":1}}],[\"直接返回\",{\"1\":{\"371\":1}}],[\"直接返回none\",{\"1\":{\"320\":1}}],[\"直接添加到链表尾部代码\",{\"1\":{\"370\":1}}],[\"直接添加到链表尾部\",{\"1\":{\"370\":1}}],[\"直接通过具体的变量\",{\"1\":{\"330\":1}}],[\"直接通过对象名称访问成员变量\",{\"1\":{\"145\":1}}],[\"直接复制创建a\",{\"1\":{\"307\":1}}],[\"直接指定类型即可\",{\"1\":{\"238\":1,\"573\":1}}],[\"直接赋值即可创建各种类型的变量\",{\"1\":{\"292\":1}}],[\"直接赋值\",{\"1\":{\"234\":1}}],[\"直接执行装配\",{\"1\":{\"233\":1,\"566\":1}}],[\"直接在id前添加\",{\"1\":{\"229\":1,\"561\":1}}],[\"直接作用文件的\",{\"1\":{\"181\":1}}],[\"直接使用aop注解即可\",{\"1\":{\"682\":1}}],[\"直接使用\",{\"1\":{\"170\":1,\"507\":1}}],[\"直接使用window\",{\"1\":{\"40\":1}}],[\"直接方式\",{\"1\":{\"149\":1}}],[\"直接调\",{\"1\":{\"145\":1}}],[\"直接调用业务层\",{\"1\":{\"656\":1}}],[\"直接调用方法即可\",{\"1\":{\"238\":1,\"573\":1}}],[\"直接调用方法返回\",{\"1\":{\"238\":1,\"573\":1}}],[\"直接调用其中的静态方法\",{\"1\":{\"141\":1}}],[\"直接调用\",{\"1\":{\"140\":1}}],[\"直接选择排序的优化\",{\"1\":{\"126\":1}}],[\"直接选择排序\",{\"1\":{\"126\":1}}],[\"直接将参数拼接在sql语句中\",{\"1\":{\"81\":1}}],[\"直接依赖\",{\"1\":{\"59\":1}}],[\"基础框架\",{\"1\":{\"547\":1}}],[\"基础知识\",{\"0\":{\"292\":1}}],[\"基础登录功能\",{\"0\":{\"88\":1}}],[\"基本不需要主动编写配置类\",{\"1\":{\"662\":1}}],[\"基本上所有需要装配组件的地方都是必须装配的\",{\"1\":{\"566\":1}}],[\"基本扫描配置\",{\"1\":{\"564\":1}}],[\"基本事务控制\",{\"0\":{\"607\":1},\"1\":{\"542\":1}}],[\"基本类型属性赋值\",{\"0\":{\"567\":1},\"1\":{\"542\":1}}],[\"基本类型值\",{\"1\":{\"225\":1,\"558\":1}}],[\"基本用法\",{\"1\":{\"529\":1}}],[\"基本配置\",{\"1\":{\"480\":1}}],[\"基本属性赋值\",{\"0\":{\"234\":1}}],[\"基本数据类型的包装类型\",{\"1\":{\"501\":1}}],[\"基本数据类型\",{\"0\":{\"112\":1},\"1\":{\"169\":1,\"501\":1}}],[\"基于方式b实践\",{\"1\":{\"671\":1}}],[\"基于springboot搭建项目基础架构\",{\"0\":{\"650\":1},\"1\":{\"644\":1}}],[\"基于setter方法依赖注入\",{\"1\":{\"558\":1}}],[\"基于setter方法的注入\",{\"0\":{\"225\":1}}],[\"基于service接口crud\",{\"0\":{\"468\":1},\"1\":{\"459\":1}}],[\"基于aop编程思维\",{\"1\":{\"585\":1}}],[\"基于jdk代理技术\",{\"1\":{\"583\":1}}],[\"基于jdbctemplate的crud使用\",{\"1\":{\"562\":1}}],[\"基于构造函数的\",{\"1\":{\"558\":2}}],[\"基于构造函数的依赖注入\",{\"1\":{\"558\":2}}],[\"基于构造函数的依赖注入和基于\",{\"1\":{\"558\":1}}],[\"基于实例工厂方法实例化\",{\"1\":{\"557\":1}}],[\"基于实例工厂实例化\",{\"0\":{\"223\":1}}],[\"基于静态工厂方法实例化\",{\"1\":{\"557\":1}}],[\"基于静态工厂实例化\",{\"0\":{\"222\":1}}],[\"基于无参数构造函数\",{\"1\":{\"557\":1}}],[\"基于注解的aop配置\",{\"1\":{\"613\":1}}],[\"基于注解的声明式事务\",{\"0\":{\"605\":1},\"1\":{\"542\":1}}],[\"基于注解+配置类方式整合三层架构组件\",{\"0\":{\"575\":1},\"1\":{\"542\":1}}],[\"基于注解+xml方式整合三层架构组件\",{\"0\":{\"568\":1},\"1\":{\"542\":1}}],[\"基于注解方式请查看尚硅谷官方文档\",{\"1\":{\"212\":1}}],[\"基于xml方式整合三层架构组件\",{\"0\":{\"562\":1},\"1\":{\"542\":1}}],[\"基于xml配置方式组件管理\",{\"0\":{\"556\":1},\"1\":{\"542\":1}}],[\"基于全映射的全自动框架\",{\"1\":{\"492\":1}}],[\"基于lambdaupdatewrapper组装条件\",{\"0\":{\"479\":1},\"1\":{\"459\":1}}],[\"基于lambdaquerywrapper组装条件\",{\"0\":{\"478\":1},\"1\":{\"459\":1}}],[\"基于querywrapper\",{\"0\":{\"476\":1},\"1\":{\"459\":1}}],[\"基于mybatis3方式\",{\"0\":{\"493\":1},\"1\":{\"489\":1}}],[\"基于mapper\",{\"1\":{\"467\":1}}],[\"基于mapper接口crud\",{\"0\":{\"462\":1},\"1\":{\"459\":1}}],[\"基于mvvm思想\",{\"1\":{\"42\":1}}],[\"基于idea的maven工程创建\",{\"0\":{\"441\":1},\"1\":{\"436\":1}}],[\"基于idea\",{\"0\":{\"407\":1}}],[\"基于idea进行maven工程构建\",{\"0\":{\"402\":1}}],[\"基于idea创建maven工程\",{\"0\":{\"397\":1}}],[\"基于node\",{\"1\":{\"252\":1}}],[\"基于\",{\"0\":{\"477\":1,\"563\":1,\"569\":1},\"1\":{\"221\":2,\"459\":1,\"460\":1,\"542\":2,\"552\":1,\"555\":1}}],[\"基于请求\",{\"1\":{\"62\":1}}],[\"基于tcp协议\",{\"1\":{\"62\":1}}],[\"基于vue脚手架创建出来的工程\",{\"1\":{\"49\":1}}],[\"以active设置优先\",{\"1\":{\"671\":1}}],[\"以价换量\",{\"1\":{\"651\":1}}],[\"以精彩的比赛献礼这个端午节假期\",{\"1\":{\"651\":1}}],[\"以满足不同层次和组件的特定需求\",{\"1\":{\"619\":1}}],[\"以满足全局唯一标识的需求\",{\"1\":{\"480\":1}}],[\"以int参数类型结尾的方法\",{\"1\":{\"590\":1}}],[\"以impl结尾的类\",{\"1\":{\"214\":1}}],[\"以找到系统的瓶颈并进行优化\",{\"1\":{\"584\":1}}],[\"以防止未经授权的访问\",{\"1\":{\"584\":1}}],[\"以\",{\"1\":{\"508\":1,\"555\":1,\"557\":1}}],[\"以后都使用这个工厂类来\",{\"1\":{\"493\":1}}],[\"以后我们在项目中的正式用法就是这样\",{\"1\":{\"233\":1,\"566\":1}}],[\"以确保其他线程或进程不能同时访问和修改该资源\",{\"1\":{\"483\":1}}],[\"以管理员身份打开cmd\",{\"1\":{\"422\":1}}],[\"以便在启动应用程序时自动引入所需的库\",{\"1\":{\"665\":1}}],[\"以便在同一次会话的多次请求间共享数据\",{\"1\":{\"89\":1}}],[\"以便保证自身获得更多的市场份额\",{\"1\":{\"651\":1}}],[\"以便一起构建和管理的机制\",{\"1\":{\"419\":1}}],[\"以下示例演示如何执行此操作\",{\"1\":{\"571\":1}}],[\"以下是五个重要的配置参数\",{\"1\":{\"674\":1}}],[\"以下是实现spring\",{\"1\":{\"671\":1}}],[\"以下是一些常见的aop应用场景\",{\"1\":{\"584\":1}}],[\"以下是\",{\"1\":{\"401\":1,\"445\":1}}],[\"以下比较常用\",{\"0\":{\"159\":1}}],[\"以前的\",{\"0\":{\"334\":1}}],[\"以人类可读方式显示文件系统磁盘使用情况统计\",{\"1\":{\"271\":1}}],[\"以非事务方式执行\",{\"1\":{\"249\":1,\"612\":1}}],[\"以及其他的自定义配置\",{\"1\":{\"665\":1}}],[\"以及与彼此竞争\",{\"1\":{\"651\":1}}],[\"以及多品牌轮胎降价促销的活动\",{\"1\":{\"651\":1}}],[\"以及数据库相关\",{\"1\":{\"617\":1}}],[\"以及如何进行适当的测试\",{\"1\":{\"545\":1}}],[\"以及订单关联的用户的信息\",{\"1\":{\"518\":1}}],[\"以及\",{\"1\":{\"464\":1,\"466\":1}}],[\"以及基本功能\",{\"1\":{\"390\":1,\"438\":1}}],[\"以及equals\",{\"1\":{\"174\":1,\"175\":1}}],[\"以及是否有return语句\",{\"1\":{\"154\":1}}],[\"以及认为是否应该要统一映射语句定义的形式\",{\"1\":{\"82\":1}}],[\"以至于让行业价格战一触即发\",{\"1\":{\"651\":1}}],[\"以至于成为事实上的标准\",{\"1\":{\"190\":1,\"201\":1}}],[\"以至于\",{\"1\":{\"138\":1}}],[\"以此类推\",{\"1\":{\"126\":1}}],[\"以毫秒计\",{\"1\":{\"40\":1}}],[\"因何爆表\",{\"1\":{\"651\":1}}],[\"因变量\",{\"1\":{\"169\":1}}],[\"因此导致无法运行\",{\"1\":{\"684\":1}}],[\"因此是不能被共享的\",{\"1\":{\"628\":1}}],[\"因此程序员必须对\",{\"1\":{\"537\":1}}],[\"因此我们需要将其放在前面\",{\"1\":{\"512\":1}}],[\"因此我们需要一个辅助变量来遍历\",{\"1\":{\"370\":1,\"371\":1}}],[\"因此我们需要一个辅助遍历temp\",{\"1\":{\"370\":1,\"371\":1}}],[\"因此不需要提前加锁\",{\"1\":{\"483\":1}}],[\"因此可以省略\",{\"1\":{\"432\":1}}],[\"因此\",{\"1\":{\"82\":1,\"230\":1,\"249\":1,\"549\":1,\"561\":1,\"612\":1,\"628\":2}}],[\"因为我们是web项目\",{\"1\":{\"664\":1}}],[\"因为我们找的temp是位于添加位置的前一个节点\",{\"1\":{\"370\":1}}],[\"因为无论是奔驰eqc\",{\"1\":{\"651\":1}}],[\"因为对查询操作来说\",{\"1\":{\"608\":1}}],[\"因为这个技术要求代理对象和目标对象实现同样的接口\",{\"1\":{\"587\":1}}],[\"因为局域网的话只能在公司用\",{\"1\":{\"421\":1}}],[\"因为只要存在lastupdated缓存文件\",{\"1\":{\"412\":1,\"449\":1}}],[\"因为只需要处理一个类\",{\"1\":{\"239\":1,\"574\":1}}],[\"因为单链表\",{\"1\":{\"370\":1}}],[\"因为头节点不能动\",{\"1\":{\"370\":1,\"371\":1}}],[\"因为head节点不能动\",{\"1\":{\"370\":1,\"371\":1}}],[\"因为希望空出一个空间作为约定\",{\"1\":{\"370\":1}}],[\"因为参数顺序的问题\",{\"1\":{\"353\":1}}],[\"因为urlopen方法不能存储字典\",{\"1\":{\"353\":1}}],[\"因为不在rollbackfor的默认范围内\",{\"1\":{\"247\":3,\"248\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"因为源码jar包内容为只读模式\",{\"1\":{\"236\":1,\"572\":1}}],[\"因为返回的是代理对象\",{\"1\":{\"212\":1}}],[\"因为查看源码可知调用list的add\",{\"1\":{\"197\":1}}],[\"因为\",{\"1\":{\"197\":4}}],[\"因为一定要关闭对应的流\",{\"1\":{\"183\":1}}],[\"因为在里面打印那个也会调用一次\",{\"1\":{\"170\":1}}],[\"因为total是static的\",{\"1\":{\"130\":1}}],[\"因为静态的变量在内存中独一份\",{\"1\":{\"130\":1}}],[\"因为编译器智能检测到结果时int类型\",{\"1\":{\"114\":1}}],[\"因为砍掉了前三个\",{\"1\":{\"114\":1}}],[\"因为默认是double\",{\"1\":{\"112\":1}}],[\"因为默认的类型是double\",{\"1\":{\"112\":1}}],[\"因为javascript是弱类型语言\",{\"1\":{\"39\":1}}],[\"因为程序中通常只会显示一个页面\",{\"1\":{\"28\":2}}],[\"因为可以由编译器推断得出\",{\"1\":{\"17\":1}}],[\"同学们来完成具体工作\",{\"1\":{\"564\":1}}],[\"同样\",{\"1\":{\"671\":1}}],[\"同样的技术解决同样的问题会产生不同流程和风格的解决方案\",{\"1\":{\"545\":1}}],[\"同样的叫法有\",{\"1\":{\"257\":1}}],[\"同样有很多配置\",{\"1\":{\"519\":1}}],[\"同上\",{\"1\":{\"311\":1,\"317\":4}}],[\"同源\",{\"1\":{\"250\":1}}],[\"同类型\",{\"1\":{\"226\":1,\"559\":1}}],[\"同步方法\",{\"1\":{\"197\":1,\"208\":1}}],[\"同步监视器要慎用this\",{\"1\":{\"197\":1,\"208\":1}}],[\"同步监视器按可以考虑使用this\",{\"1\":{\"197\":1,\"208\":1}}],[\"同步监视器可以使用任何一个类的对象充当\",{\"1\":{\"197\":1,\"208\":1}}],[\"同步监视器\",{\"1\":{\"197\":2,\"208\":2}}],[\"同步代码块\",{\"1\":{\"197\":1,\"208\":1}}],[\"同步控制\",{\"1\":{\"180\":1}}],[\"同时在各个组件中声明要调用的方法\",{\"1\":{\"566\":1}}],[\"同时注入的方式也有多种\",{\"1\":{\"558\":1}}],[\"同时需要在框架和应用程序之间进行权衡取舍\",{\"1\":{\"545\":1}}],[\"同时查询两条\",{\"1\":{\"484\":1}}],[\"同时简化它们的构建和部署过程\",{\"1\":{\"419\":1}}],[\"同时接收一个index\",{\"1\":{\"371\":1}}],[\"同时\",{\"1\":{\"230\":1,\"390\":1,\"403\":1,\"439\":1,\"549\":1,\"561\":1,\"608\":1,\"665\":1}}],[\"同时让附加功能能够集中在一起也有利于统一维护\",{\"1\":{\"211\":1,\"583\":1}}],[\"同时发生\",{\"1\":{\"192\":1,\"203\":1}}],[\"同时也是维斯塔潘f1生涯的第41座分站冠军\",{\"1\":{\"651\":1}}],[\"同时也是一个人\",{\"1\":{\"145\":1}}],[\"同时也提供了手动解决的冲突的方式\",{\"1\":{\"416\":1,\"448\":1}}],[\"同时也可以调用本类声明的方法\",{\"1\":{\"132\":1}}],[\"同时被回收也要晚于非静态的结构\",{\"1\":{\"130\":1}}],[\"同一类内部引用\",{\"1\":{\"591\":1}}],[\"同一条记录等\",{\"1\":{\"197\":1,\"208\":1}}],[\"同一个文件\",{\"1\":{\"197\":1,\"208\":1}}],[\"同一个工程\",{\"1\":{\"135\":1}}],[\"同一个包\",{\"1\":{\"135\":1}}],[\"同一个类中\",{\"1\":{\"133\":1}}],[\"同一编码处理\",{\"1\":{\"93\":1}}],[\"同一的响应结果\",{\"1\":{\"69\":1}}],[\"同包同名\",{\"1\":{\"82\":1}}],[\"拼接头条对象\",{\"1\":{\"656\":1}}],[\"拼接\",{\"1\":{\"498\":1}}],[\"拼接condition判断\",{\"1\":{\"476\":1}}],[\"拼接等于判断\",{\"1\":{\"476\":1}}],[\"拼接成helloworld\",{\"1\":{\"81\":1}}],[\"拼接sql\",{\"1\":{\"81\":1}}],[\"条件拼接\",{\"1\":{\"656\":1}}],[\"条件构造抽象类\",{\"1\":{\"475\":1}}],[\"条件构造器也可以构建删除语句的条件\",{\"1\":{\"476\":1}}],[\"条件构造器类结构\",{\"1\":{\"475\":1}}],[\"条件构造器继承结构\",{\"0\":{\"475\":1},\"1\":{\"459\":1}}],[\"条件构造器作用\",{\"0\":{\"474\":1},\"1\":{\"459\":1}}],[\"条件构造器使用\",{\"0\":{\"473\":1},\"1\":{\"459\":1}}],[\"条件值\",{\"1\":{\"465\":1}}],[\"条件\",{\"1\":{\"464\":2,\"465\":1,\"466\":8,\"471\":7,\"474\":1,\"475\":1}}],[\"条件是\",{\"1\":{\"370\":1}}],[\"条件语句\",{\"1\":{\"334\":3}}],[\"条件表达式\",{\"0\":{\"299\":1},\"1\":{\"302\":1}}],[\"条件查询\",{\"1\":{\"81\":1}}],[\"条件性的渲染某元素\",{\"1\":{\"43\":1}}],[\"插件等信息\",{\"1\":{\"628\":1}}],[\"插件实现逆向工程的步骤\",{\"1\":{\"539\":1}}],[\"插件实现\",{\"1\":{\"538\":1}}],[\"插件实现和通过\",{\"1\":{\"538\":1}}],[\"插件的名称\",{\"1\":{\"535\":1}}],[\"插件的开发非常简单\",{\"1\":{\"534\":1}}],[\"插件可以在用于语句执行过程中进行拦截\",{\"1\":{\"534\":1}}],[\"插件可快速生成\",{\"1\":{\"460\":1}}],[\"插件机制和pagehelper插件介绍\",{\"0\":{\"534\":1},\"1\":{\"489\":1}}],[\"插件和分页插件pagehelper\",{\"0\":{\"533\":1},\"1\":{\"489\":1}}],[\"插件配置\",{\"1\":{\"450\":1}}],[\"插件方式创建\",{\"1\":{\"444\":1}}],[\"插件\",{\"1\":{\"406\":1,\"496\":1,\"628\":1}}],[\"插件创建\",{\"1\":{\"400\":1}}],[\"插\",{\"1\":{\"171\":1}}],[\"插入数据即可\",{\"1\":{\"657\":1}}],[\"插入数据的时候不设置id\",{\"1\":{\"81\":1}}],[\"插入一条记录\",{\"1\":{\"463\":1,\"471\":1}}],[\"插入\",{\"1\":{\"81\":1,\"167\":1,\"471\":2}}],[\"插值表达式\",{\"1\":{\"42\":1}}],[\"存入之前做用户名是否被占用校验\",{\"1\":{\"655\":1}}],[\"存多少钱\",{\"1\":{\"334\":1}}],[\"存在跨域问题\",{\"1\":{\"250\":1}}],[\"存在sql注入问题\",{\"1\":{\"81\":1}}],[\"存储库\",{\"1\":{\"665\":1}}],[\"存储库等\",{\"1\":{\"664\":1}}],[\"存储组件的对象\",{\"1\":{\"552\":1}}],[\"存储组件\",{\"1\":{\"551\":1}}],[\"存储过程以及高级映射\",{\"1\":{\"491\":1}}],[\"存储在硬盘文件中\",{\"1\":{\"187\":1}}],[\"存储在服务端\",{\"1\":{\"91\":1}}],[\"存储到此位置\",{\"1\":{\"172\":1}}],[\"存储键值对\",{\"1\":{\"169\":1}}],[\"存储无序的\",{\"1\":{\"169\":1}}],[\"存储有序的\",{\"1\":{\"169\":1}}],[\"存储对象可以考虑\",{\"1\":{\"169\":1}}],[\"存储\",{\"1\":{\"167\":1}}],[\"存放测试相关的资源文件\",{\"1\":{\"401\":1,\"445\":1}}],[\"存放项目的测试代码\",{\"1\":{\"401\":1,\"445\":1}}],[\"存放项目的资源文件\",{\"1\":{\"401\":1,\"445\":1}}],[\"存放项目的\",{\"1\":{\"401\":1,\"445\":1}}],[\"存放编译后的\",{\"1\":{\"401\":1,\"445\":1}}],[\"存放图片资源的目录\",{\"1\":{\"401\":1,\"445\":1}}],[\"存放静态资源的目录\",{\"1\":{\"401\":1,\"445\":1}}],[\"存放配置文件\",{\"1\":{\"401\":1,\"445\":1}}],[\"存放数据模型的目录\",{\"1\":{\"401\":1,\"445\":1}}],[\"存放\",{\"1\":{\"165\":1,\"401\":8,\"424\":2,\"445\":8}}],[\"存放局部变量\",{\"1\":{\"125\":1}}],[\"存放响应数据\",{\"1\":{\"64\":1}}],[\"$n$\",{\"1\":{\"376\":2}}],[\"$1\",{\"1\":{\"375\":1,\"376\":1}}],[\"$8\",{\"1\":{\"375\":1}}],[\"$\",{\"1\":{\"81\":2,\"158\":1,\"231\":2,\"235\":3,\"236\":8,\"244\":4,\"345\":1,\"347\":1,\"395\":1,\"440\":1,\"489\":1,\"496\":1,\"498\":2,\"515\":1,\"540\":1,\"562\":8,\"567\":3,\"568\":4,\"572\":8,\"575\":4,\"606\":4,\"607\":4,\"628\":8,\"668\":4,\"669\":4}}],[\"$uri\",{\"1\":{\"53\":2}}],[\"都集中到一个固定位置和命名的配置文件\",{\"1\":{\"667\":1}}],[\"都不能对其构成威胁\",{\"1\":{\"651\":1}}],[\"都正在接近\",{\"1\":{\"651\":1}}],[\"都通过这一个代理类来实现\",{\"1\":{\"583\":1}}],[\"都有一个唯一标识\",{\"1\":{\"564\":1}}],[\"都有对应的缺省配置\",{\"1\":{\"413\":1}}],[\"都需要配置自己的依赖信息\",{\"1\":{\"418\":1,\"452\":1}}],[\"都需要日志记录能够记录成功\",{\"1\":{\"98\":1}}],[\"都具备\",{\"1\":{\"334\":1}}],[\"都是独立的\",{\"1\":{\"249\":1,\"612\":1}}],[\"都是通过类添加事务\",{\"1\":{\"245\":1}}],[\"都是通过定义factorybean实现\",{\"1\":{\"230\":1,\"561\":1}}],[\"都是thread类或其子类的实例\",{\"1\":{\"195\":1,\"206\":1}}],[\"都考虑\",{\"1\":{\"214\":1}}],[\"都会+1\",{\"1\":{\"197\":1}}],[\"都会被拦截\",{\"1\":{\"93\":1}}],[\"都存储\",{\"1\":{\"172\":1}}],[\"都共用这一个属性\",{\"1\":{\"130\":1}}],[\"都只能有一个public类\",{\"1\":{\"126\":1}}],[\"都使用\",{\"1\":{\"81\":1}}],[\"都可以看作是一个盒子\",{\"1\":{\"35\":1}}],[\"都可以省略\",{\"1\":{\"17\":1}}],[\"日志主体内容\",{\"1\":{\"625\":1}}],[\"日志级别按顺序分别是\",{\"1\":{\"625\":1}}],[\"日志级别\",{\"1\":{\"625\":1,\"671\":1}}],[\"日志记录\",{\"1\":{\"584\":1}}],[\"日志代码往往横向地散布在所有对象层次中\",{\"1\":{\"584\":1}}],[\"日志\",{\"1\":{\"583\":4,\"584\":1,\"625\":1}}],[\"日志功能还是分散的\",{\"1\":{\"583\":1}}],[\"日志配置等\",{\"1\":{\"665\":1}}],[\"日志配置\",{\"1\":{\"496\":1}}],[\"日志配置文件\",{\"1\":{\"401\":1,\"445\":1}}],[\"日志输出的格式\",{\"1\":{\"625\":1}}],[\"日志输出\",{\"1\":{\"80\":1}}],[\"日记\",{\"0\":{\"364\":1,\"693\":1}}],[\"日薪\",{\"1\":{\"334\":1}}],[\"日历\",{\"1\":{\"164\":1}}],[\"日期\",{\"1\":{\"163\":1}}],[\"日期类\",{\"0\":{\"161\":1}}],[\"日期参数\",{\"1\":{\"68\":2}}],[\"日期时间number\",{\"1\":{\"34\":1}}],[\"还推出了轮胎\",{\"1\":{\"651\":1}}],[\"还没等到春天\",{\"1\":{\"651\":1}}],[\"还没有调用\",{\"1\":{\"254\":2}}],[\"还顺便测了下充电速度\",{\"1\":{\"651\":1}}],[\"还受到湿度影响\",{\"1\":{\"651\":1}}],[\"还是国产的比亚迪唐ev等\",{\"1\":{\"651\":1}}],[\"还是新事务等\",{\"1\":{\"612\":1}}],[\"还是要写xml格式管理和注入\",{\"1\":{\"231\":1}}],[\"还要为保级而苦战\",{\"1\":{\"651\":1}}],[\"还要负责调用组件的方法让它们工作\",{\"1\":{\"552\":1}}],[\"还要注意去掉列表最后一个列名的逗号\",{\"1\":{\"524\":1}}],[\"还包含很多子类\",{\"1\":{\"230\":1,\"561\":1}}],[\"还得声明多个代理类\",{\"1\":{\"211\":1}}],[\"还可以使用dict\",{\"1\":{\"315\":1}}],[\"还可以进行选择目录\",{\"1\":{\"275\":1}}],[\"还可以额外包括\",{\"1\":{\"139\":1}}],[\"还可以额外包括有\",{\"1\":{\"139\":1}}],[\"还可用于保存具有映射关系的关联数组\",{\"1\":{\"169\":1}}],[\"还有一类是通过工厂模式实例化对象\",{\"1\":{\"557\":1}}],[\"还有一个java\",{\"1\":{\"162\":1}}],[\"还有其他插入方式可以使用\",{\"1\":{\"512\":1}}],[\"还有很多其他函数式接口\",{\"1\":{\"17\":1}}],[\"还必须在类的下面\",{\"1\":{\"150\":1}}],[\"还必须是第一个\",{\"1\":{\"136\":1}}],[\"还原回去\",{\"1\":{\"162\":1}}],[\"还原\",{\"1\":{\"146\":3}}],[\"还会让你本就复杂的sql语句更加混乱不堪\",{\"1\":{\"82\":1}}],[\"还需要手动将查询的结果集转换成实体对象\",{\"1\":{\"537\":1}}],[\"还需要维护套餐菜品关系表数据\",{\"1\":{\"81\":1}}],[\"还需要安装一个lombok的插件\",{\"1\":{\"79\":1}}],[\"还需要被组件扫描注解\",{\"1\":{\"74\":1}}],[\"入门总结\",{\"0\":{\"665\":1},\"1\":{\"660\":1}}],[\"入门\",{\"0\":{\"73\":1}}],[\"称为flex项目\",{\"1\":{\"255\":1}}],[\"称为flex容器\",{\"1\":{\"255\":1}}],[\"称之为bean\",{\"1\":{\"72\":1}}],[\"称之为依赖注入\",{\"1\":{\"72\":1}}],[\"称类型推断\",{\"1\":{\"17\":1}}],[\"控制台查看效果\",{\"1\":{\"668\":1,\"669\":1,\"670\":1}}],[\"控制读写速度\",{\"1\":{\"185\":1}}],[\"控制反转\",{\"1\":{\"72\":1,\"221\":1,\"553\":1}}],[\"控制层配置编写\",{\"0\":{\"626\":1},\"1\":{\"615\":1}}],[\"控制层\",{\"1\":{\"71\":1}}],[\"软件的一个核心功能之一\",{\"1\":{\"408\":1}}],[\"软件中最重要的功能之一\",{\"1\":{\"408\":1,\"447\":1}}],[\"软件中各个功能模块内部的功能联系\",{\"1\":{\"72\":1}}],[\"软件结构\",{\"1\":{\"393\":1,\"440\":1}}],[\"软件安装\",{\"1\":{\"393\":1,\"440\":1}}],[\"软件\",{\"1\":{\"390\":1,\"438\":1}}],[\"软件设计原则高内聚低耦合\",{\"1\":{\"72\":1}}],[\"衡量软件中各个层\",{\"1\":{\"72\":1}}],[\"耦合\",{\"1\":{\"72\":1}}],[\"查拉尼亚报道\",{\"1\":{\"651\":1}}],[\"查方法\",{\"1\":{\"514\":1}}],[\"查找本地仓库中相应jar包\",{\"1\":{\"387\":1}}],[\"查找方向只能是一个方向\",{\"1\":{\"371\":1}}],[\"查找单链表中的倒数第k个节点\",{\"1\":{\"371\":1}}],[\"查看全文\",{\"1\":{\"656\":1}}],[\"查看新闻详情\",{\"1\":{\"646\":1}}],[\"查看生成结果\",{\"1\":{\"539\":1}}],[\"查看父工程的pom\",{\"1\":{\"434\":1}}],[\"查看\",{\"1\":{\"412\":2,\"423\":1,\"636\":1}}],[\"查看队列头的数据\",{\"1\":{\"368\":1}}],[\"查看列表第一个内容\",{\"1\":{\"334\":1}}],[\"查看导入了哪些定义\",{\"1\":{\"330\":1}}],[\"查看函数的默认参数的当前值\",{\"1\":{\"325\":1}}],[\"查看详细信息\",{\"1\":{\"288\":1}}],[\"查看内存\",{\"1\":{\"288\":1}}],[\"查看剩下多少空间\",{\"1\":{\"288\":1}}],[\"查看运行状态\",{\"1\":{\"277\":1}}],[\"查看当前登录的用户\",{\"1\":{\"271\":1}}],[\"查看集合元素\",{\"1\":{\"170\":1}}],[\"查看官方配置文档博客主页\",{\"1\":{\"0\":1}}],[\"查询的user数据为\",{\"1\":{\"677\":1,\"680\":1}}],[\"查询的结果\",{\"1\":{\"656\":1}}],[\"查询version版本\",{\"1\":{\"657\":1}}],[\"查询头条详情\",{\"1\":{\"656\":1}}],[\"查询首页分类\",{\"1\":{\"656\":1}}],[\"查询数据\",{\"1\":{\"655\":1}}],[\"查询指定包下\",{\"1\":{\"590\":1}}],[\"查询com包下\",{\"1\":{\"590\":1}}],[\"查询customer对象同时将关联的order集合查询出来\",{\"1\":{\"519\":1,\"535\":1}}],[\"查询某包下类中第一个参数是string的方法\",{\"1\":{\"590\":1}}],[\"查询某包某类下\",{\"1\":{\"590\":1}}],[\"查询全部数据\",{\"1\":{\"656\":1,\"680\":1}}],[\"查询全部数据页数据\",{\"1\":{\"634\":1}}],[\"查询全部类别信息\",{\"1\":{\"656\":1}}],[\"查询全部包下\",{\"1\":{\"590\":1}}],[\"查询全部学员业务\",{\"1\":{\"562\":2,\"568\":2,\"575\":2}}],[\"查询全部学生数据\",{\"1\":{\"562\":2,\"568\":2,\"575\":2}}],[\"查询全部记录\",{\"1\":{\"466\":5,\"471\":4}}],[\"查询实体类集合\",{\"1\":{\"562\":1}}],[\"查询单条实体对象\",{\"1\":{\"562\":1}}],[\"查询单行remove\",{\"1\":{\"468\":1}}],[\"查询方式\",{\"1\":{\"537\":1}}],[\"查询方法可以通过再次添加注解\",{\"1\":{\"245\":1}}],[\"查询结果的映射时会被调用\",{\"1\":{\"534\":1}}],[\"查询结果返回多个实体类对象\",{\"1\":{\"511\":1}}],[\"查询客户和客户关联的订单信息\",{\"1\":{\"519\":1}}],[\"查询客户和客户对应的订单集合\",{\"1\":{\"517\":1}}],[\"查询order对象\",{\"1\":{\"518\":1}}],[\"查询订单和对应的客户\",{\"1\":{\"517\":1}}],[\"查询操作的查询结果\",{\"1\":{\"507\":1}}],[\"查询用户数据\",{\"1\":{\"655\":2}}],[\"查询用户信息的username和age字段\",{\"1\":{\"476\":1}}],[\"查询用户名包含a\",{\"1\":{\"476\":1}}],[\"查询列表\",{\"1\":{\"471\":2}}],[\"查询所有分类并动态展示新闻类别栏位\",{\"1\":{\"656\":1}}],[\"查询所有员工信息\",{\"1\":{\"630\":2}}],[\"查询所有列表\",{\"1\":{\"471\":1}}],[\"查询所有\",{\"1\":{\"471\":1}}],[\"查询集合page\",{\"1\":{\"468\":1}}],[\"查询总记录数\",{\"1\":{\"466\":1,\"471\":2}}],[\"查询一条记录\",{\"1\":{\"466\":1,\"471\":4}}],[\"查询使用\",{\"1\":{\"220\":1,\"493\":1}}],[\"查询配置文件\",{\"1\":{\"220\":1}}],[\"查询\",{\"1\":{\"81\":1,\"460\":1,\"466\":3,\"471\":4,\"475\":1,\"517\":1}}],[\"查\",{\"1\":{\"71\":1,\"167\":1,\"171\":1}}],[\"改成xml或者注解定义\",{\"1\":{\"493\":1}}],[\"改成你本地仓库地址即可\",{\"1\":{\"449\":1}}],[\"改进成一个环形的队列\",{\"1\":{\"369\":1}}],[\"改为空不换行\",{\"1\":{\"333\":1}}],[\"改造\",{\"1\":{\"138\":1}}],[\"改\",{\"1\":{\"71\":1,\"171\":1,\"514\":1}}],[\"改变\",{\"1\":{\"253\":1}}],[\"改变数值\",{\"1\":{\"185\":1}}],[\"改变文本框内容\",{\"1\":{\"43\":1}}],[\"改变html元素的样式\",{\"1\":{\"40\":1}}],[\"改变html元素的内容\",{\"1\":{\"40\":1}}],[\"删除新闻前先向服务端发送请求携带token请求头\",{\"1\":{\"657\":1}}],[\"删除tablename注解\",{\"1\":{\"653\":1}}],[\"删除target文件夹\",{\"1\":{\"450\":1}}],[\"删除头条功能\",{\"1\":{\"648\":1,\"657\":1}}],[\"删除代码\",{\"1\":{\"481\":1}}],[\"删除改为修改语句\",{\"1\":{\"481\":1}}],[\"删除email为空的用户\",{\"1\":{\"476\":1}}],[\"删除条件封装\",{\"1\":{\"475\":1}}],[\"删除list\",{\"1\":{\"468\":1}}],[\"删除记录\",{\"1\":{\"464\":2,\"471\":2,\"474\":1}}],[\"删除src目录\",{\"1\":{\"431\":1}}],[\"删除一个节点\",{\"1\":{\"371\":1}}],[\"删除节点代码\",{\"1\":{\"370\":1}}],[\"删除最后一个元素\",{\"1\":{\"310\":1}}],[\"删除元素\",{\"1\":{\"310\":1}}],[\"删除列表\",{\"1\":{\"307\":1}}],[\"删除端口\",{\"1\":{\"276\":1}}],[\"删除服务\",{\"1\":{\"276\":1}}],[\"删除指定索引位置的元素\",{\"1\":{\"171\":1}}],[\"删除集合中的obj元素\",{\"1\":{\"170\":1}}],[\"删除\",{\"1\":{\"80\":1,\"167\":1,\"182\":1,\"334\":2,\"464\":2,\"471\":2,\"651\":3}}],[\"删\",{\"1\":{\"71\":1,\"171\":1,\"514\":1}}],[\"负责存储其他服务需要通用工具类\",{\"1\":{\"429\":1,\"455\":1}}],[\"负责处理订单相关的逻辑\",{\"1\":{\"429\":1,\"455\":1}}],[\"负责处理用户相关的逻辑\",{\"1\":{\"429\":1,\"455\":1}}],[\"负责实例化\",{\"1\":{\"221\":1,\"552\":1,\"553\":1}}],[\"负责数据访问操作\",{\"1\":{\"71\":1}}],[\"负责分配\",{\"1\":{\"10\":1,\"78\":1}}],[\"三年无忧质保\",{\"1\":{\"651\":1}}],[\"三引号将其自动换行\",{\"1\":{\"334\":1}}],[\"三个双引号\",{\"1\":{\"334\":1}}],[\"三个单引号\",{\"1\":{\"334\":1}}],[\"三个关键字进行修饰\",{\"1\":{\"143\":1}}],[\"三\",{\"0\":{\"397\":1,\"446\":1,\"488\":1,\"516\":1,\"550\":1,\"631\":1,\"650\":1,\"672\":1,\"700\":1},\"1\":{\"315\":3,\"436\":1,\"459\":1,\"489\":1,\"542\":1,\"615\":1,\"644\":1,\"660\":1}}],[\"三者保持一致\",{\"1\":{\"174\":1,\"175\":1}}],[\"三大特征\",{\"1\":{\"134\":1}}],[\"三种配置方式\",{\"1\":{\"613\":1}}],[\"三种配置方式总结\",{\"0\":{\"576\":1},\"1\":{\"542\":1}}],[\"三种用法\",{\"1\":{\"129\":1}}],[\"三种定义数组的方法\",{\"0\":{\"124\":1}}],[\"三层架构ioc配置类\",{\"1\":{\"575\":1}}],[\"三层架构ioc配置\",{\"1\":{\"562\":1,\"568\":1}}],[\"三层架构搭建和实现\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"三层架构\",{\"0\":{\"71\":1}}],[\"三元运算符\",{\"0\":{\"119\":1},\"1\":{\"42\":1}}],[\"三元运算符条件表达式\",{\"1\":{\"38\":1}}],[\"等同于\",{\"1\":{\"474\":1}}],[\"等多种数据库\",{\"1\":{\"460\":1}}],[\"等待方法超时\",{\"1\":{\"609\":1}}],[\"等待下载完毕\",{\"1\":{\"399\":1}}],[\"等待通信请求的为服务端\",{\"1\":{\"190\":1,\"201\":1}}],[\"等\",{\"1\":{\"398\":1,\"403\":1,\"442\":1,\"537\":2,\"547\":2,\"551\":1,\"555\":1,\"665\":1}}],[\"等四个属性的缩写\",{\"1\":{\"398\":1,\"442\":1}}],[\"等价\",{\"1\":{\"345\":1}}],[\"等价于\",{\"1\":{\"345\":4}}],[\"等我发送线程结束了\",{\"1\":{\"192\":1,\"203\":1}}],[\"等号左边的调用方法都不会发生变化\",{\"1\":{\"145\":1}}],[\"等等\",{\"1\":{\"68\":1,\"182\":1,\"508\":1,\"549\":1,\"562\":1}}],[\"等比例缩小图像\",{\"1\":{\"22\":1}}],[\"​\",{\"1\":{\"68\":1,\"211\":1,\"243\":3,\"307\":1,\"312\":1,\"364\":1,\"398\":14}}],[\"来分隔\",{\"1\":{\"669\":1}}],[\"来表示\",{\"1\":{\"669\":1}}],[\"来表示二进制数据的编码格式\",{\"1\":{\"92\":1}}],[\"来自壳牌捷凯领克车队的张志强穿云破雾夺得冠军\",{\"1\":{\"651\":1}}],[\"来自南浔区各个乡镇的农民选手在河道中赛龙舟\",{\"1\":{\"651\":1}}],[\"来选择需要被切入的目标对象\",{\"1\":{\"590\":1}}],[\"来进行检测\",{\"1\":{\"564\":1}}],[\"来标注需要拦截的对象和方法\",{\"1\":{\"534\":1}}],[\"来标识\",{\"1\":{\"515\":1}}],[\"来标识该路径参数\",{\"1\":{\"68\":1}}],[\"来对应\",{\"1\":{\"514\":1}}],[\"来查询\",{\"1\":{\"512\":1}}],[\"来保证对共享资源的独占访问\",{\"1\":{\"483\":1}}],[\"来修改默认构建的行为和产物\",{\"1\":{\"413\":1}}],[\"来修改maven的一些默认配置\",{\"1\":{\"395\":1,\"440\":1}}],[\"来引入这些\",{\"1\":{\"387\":1}}],[\"来定义一个atm的类\",{\"1\":{\"334\":1}}],[\"来控制子盒子的位置和排列方式\",{\"1\":{\"255\":1}}],[\"来控制对象对属性的访问\",{\"1\":{\"135\":1}}],[\"来实现编程式事务\",{\"1\":{\"243\":1,\"602\":1}}],[\"来实现调用\",{\"1\":{\"135\":1}}],[\"来\",{\"1\":{\"139\":1}}],[\"来说必须手动赋值\",{\"1\":{\"112\":1}}],[\"来避免因为没有释放连接而引起的数据库连接遗漏\",{\"1\":{\"78\":1}}],[\"来调用函数或计算表达式\",{\"1\":{\"40\":1}}],[\"爱好有多个\",{\"1\":{\"68\":1}}],[\"且还在忙着把chatgpt的底层技术融进微软产品和服务中\",{\"1\":{\"651\":1}}],[\"且高温红色预警持续生效\",{\"1\":{\"651\":1}}],[\"且不方便统一维护\",{\"1\":{\"582\":1}}],[\"且不允许重复声明\",{\"1\":{\"38\":1}}],[\"且创新的框架\",{\"1\":{\"549\":1}}],[\"且请求参数为多个\",{\"1\":{\"68\":1}}],[\"复合类型\",{\"1\":{\"501\":1}}],[\"复合属性\",{\"1\":{\"256\":1}}],[\"复杂数据类型支持和更好的可读性\",{\"1\":{\"669\":1}}],[\"复杂对象实例化等\",{\"1\":{\"561\":1}}],[\"复杂容器\",{\"1\":{\"552\":1}}],[\"复杂类型\",{\"1\":{\"501\":1}}],[\"复杂实体对象\",{\"1\":{\"68\":1}}],[\"复制\",{\"1\":{\"188\":1}}],[\"复制组件代码\",{\"1\":{\"50\":1}}],[\"声明配置类\",{\"1\":{\"665\":1}}],[\"声明transactionmanager\",{\"1\":{\"627\":1}}],[\"声明\",{\"1\":{\"627\":4}}],[\"声明式和编程式事务\",{\"1\":{\"613\":1}}],[\"声明式事务整合配置\",{\"0\":{\"681\":1},\"1\":{\"660\":1}}],[\"声明式事务管理\",{\"1\":{\"547\":1,\"548\":1}}],[\"声明式事务概念\",{\"0\":{\"601\":1},\"1\":{\"542\":1}}],[\"声明式事务依赖\",{\"1\":{\"244\":1,\"606\":1}}],[\"声明式事务是指使用注解或\",{\"1\":{\"243\":1,\"603\":1}}],[\"声明式事务\",{\"0\":{\"243\":1,\"600\":1,\"603\":1},\"1\":{\"542\":2}}],[\"声明两个独立修改数据库的事务业务方法\",{\"1\":{\"612\":1}}],[\"声明两个业务方法\",{\"1\":{\"612\":1}}],[\"声明一个整合业务方法\",{\"1\":{\"612\":1}}],[\"声明一个类\",{\"1\":{\"598\":1}}],[\"声明一个接口\",{\"1\":{\"598\":2}}],[\"声明变量用来存储目标方法的返回值\",{\"1\":{\"592\":1}}],[\"声明当前方法是前置通知方法\",{\"1\":{\"588\":1,\"591\":1}}],[\"声明切面类\",{\"1\":{\"588\":1}}],[\"声明带日志接口实现\",{\"1\":{\"582\":1}}],[\"声明接口\",{\"1\":{\"582\":1}}],[\"声明外部配置\",{\"1\":{\"567\":1}}],[\"声明安全角色\",{\"1\":{\"566\":1}}],[\"声明组件类信息\",{\"1\":{\"557\":1}}],[\"声明事务管理\",{\"1\":{\"551\":1}}],[\"声明commons\",{\"1\":{\"456\":1}}],[\"声明版本\",{\"1\":{\"410\":1,\"447\":1}}],[\"声明bean通过<bean标签\",{\"1\":{\"240\":1,\"577\":1}}],[\"声明bean的时候\",{\"1\":{\"74\":1}}],[\"声明bean的基础注解\",{\"1\":{\"74\":1}}],[\"声明在run\",{\"1\":{\"196\":1,\"207\":1}}],[\"声明对方的端口号\",{\"1\":{\"191\":1,\"202\":1}}],[\"声明ip地址\",{\"1\":{\"191\":1,\"202\":1}}],[\"声明抛出异常时java中处理异常的第二种方式\",{\"1\":{\"155\":1}}],[\"声明控制器bean只能用\",{\"1\":{\"74\":1}}],[\"声明了这个默认required是true不传参数会报错\",{\"1\":{\"68\":1}}],[\"声明周期的八个阶段\",{\"1\":{\"44\":1}}],[\"简洁\",{\"1\":{\"584\":2}}],[\"简而言之\",{\"1\":{\"552\":1}}],[\"简介\",{\"0\":{\"460\":1,\"491\":1},\"1\":{\"221\":2,\"459\":1,\"489\":1,\"552\":1}}],[\"简称regex\",{\"1\":{\"344\":1}}],[\"简称项目\",{\"1\":{\"255\":1}}],[\"简称\",{\"1\":{\"255\":1,\"460\":1}}],[\"简称di\",{\"1\":{\"72\":1}}],[\"简称ioc\",{\"1\":{\"72\":1}}],[\"简单的配置可以使用\",{\"1\":{\"669\":1}}],[\"简单理解\",{\"1\":{\"655\":1}}],[\"简单说就是那些与业务无关\",{\"1\":{\"584\":1}}],[\"简单类型\",{\"1\":{\"501\":1}}],[\"简单实体对象\",{\"1\":{\"68\":1}}],[\"简单参数\",{\"1\":{\"68\":1}}],[\"简化依赖管理\",{\"1\":{\"665\":1}}],[\"简化依赖导入过程\",{\"1\":{\"415\":1}}],[\"简化运维\",{\"1\":{\"662\":1}}],[\"简化监控\",{\"1\":{\"662\":1}}],[\"简化部署\",{\"1\":{\"662\":1}}],[\"简化整合\",{\"1\":{\"662\":1}}],[\"简化配置\",{\"1\":{\"662\":1}}],[\"简化开发\",{\"1\":{\"662\":1}}],[\"简化动态代理技术实现的框架\",{\"1\":{\"585\":1}}],[\"简化了配置文件的编写和组件的加载和扫描过程\",{\"1\":{\"664\":1}}],[\"简化了配置的过程\",{\"1\":{\"664\":1}}],[\"简化了\",{\"1\":{\"549\":1}}],[\"简化了开发者的工作量\",{\"1\":{\"665\":1}}],[\"简化了开发者手动生成的过程\",{\"1\":{\"538\":1}}],[\"简化了开发过程中的工作\",{\"1\":{\"408\":1}}],[\"简化了依赖项的管理\",{\"1\":{\"448\":1}}],[\"简化了部署和维护工作\",{\"1\":{\"419\":1}}],[\"简化项目的管理和维护工作\",{\"1\":{\"418\":1,\"452\":1}}],[\"简化构建过程\",{\"1\":{\"406\":1,\"450\":1}}],[\"简化java开发\",{\"1\":{\"79\":1}}],[\"简化书写\",{\"1\":{\"42\":1}}],[\"简化\",{\"1\":{\"40\":1,\"549\":1}}],[\"客户端将新闻信息修改后\",{\"1\":{\"657\":1}}],[\"客户端将新用户信息发送给服务端\",{\"1\":{\"655\":1}}],[\"客户端在进入发布页前\",{\"1\":{\"657\":1}}],[\"客户端向服务端发送查询关键字\",{\"1\":{\"656\":1}}],[\"客户端发送请求\",{\"1\":{\"655\":1}}],[\"客户端有三个类\",{\"1\":{\"192\":1,\"203\":1}}],[\"客户端表明不再继续发送数据\",{\"1\":{\"191\":1,\"202\":1}}],[\"客户端给服务端发送消息\",{\"1\":{\"191\":1,\"202\":1}}],[\"客户端会话跟踪技术\",{\"1\":{\"89\":1}}],[\"客户端\",{\"1\":{\"67\":1,\"189\":1,\"191\":1,\"200\":1,\"202\":1}}],[\"客户端只需要浏览器\",{\"1\":{\"67\":1}}],[\"客户端未被授权禁止访问等\",{\"1\":{\"64\":1}}],[\"使配置更具可读性和可维护性\",{\"1\":{\"669\":1}}],[\"使它们可被自动注入和使用\",{\"1\":{\"665\":1}}],[\"使应用程序能够运行和提供所需的功能\",{\"1\":{\"664\":1}}],[\"使创建\",{\"1\":{\"549\":1}}],[\"使代码更简洁\",{\"1\":{\"478\":1}}],[\"使项目构建更加可靠和一致\",{\"1\":{\"448\":1}}],[\"使得数据之间的关系更加清晰和直观\",{\"1\":{\"669\":1}}],[\"使得配置和启动可以同时发生\",{\"1\":{\"665\":1}}],[\"使得应用程序的不同部分可以按需进行开发和扩展\",{\"1\":{\"665\":1}}],[\"使得开发者可以更专注于业务逻辑而不是繁琐的配置细节\",{\"1\":{\"665\":1}}],[\"使得开发人员能够轻松地将其他开发人员开发的模块或第三方框架集成到自己的应用程序或模块中\",{\"1\":{\"408\":1,\"447\":1}}],[\"使得开发人员能够更加专注于应用程序的开发和维护\",{\"1\":{\"403\":1}}],[\"使得代码更加清晰\",{\"1\":{\"584\":2}}],[\"使得组件的切换\",{\"1\":{\"551\":1}}],[\"使得组件代码更加模块化\",{\"1\":{\"551\":1}}],[\"使得组件更加松散地耦合\",{\"1\":{\"551\":1}}],[\"使得软件包依赖的管理和使用更加智能和方便\",{\"1\":{\"408\":1}}],[\"使得在宏观上具有多个进程同时执行的效率\",{\"1\":{\"192\":1,\"203\":1}}],[\"使得程序员不必直接对协议进行操作\",{\"1\":{\"65\":1}}],[\"使其在保存和传输时可被还原\",{\"1\":{\"187\":1}}],[\"使其有统一的fan\",{\"1\":{\"69\":1}}],[\"使employee实现comparable接口\",{\"1\":{\"176\":1}}],[\"使用常规的java\",{\"1\":{\"684\":1}}],[\"使用和测试\",{\"1\":{\"655\":1}}],[\"使用和丢弃\",{\"1\":{\"628\":1}}],[\"使用vscode打开工程\",{\"1\":{\"649\":1}}],[\"使用value属性指定\",{\"1\":{\"564\":1}}],[\"使用value属性\",{\"1\":{\"558\":1}}],[\"使用var没有初始化\",{\"1\":{\"38\":1}}],[\"使用一个配置文件\",{\"1\":{\"628\":1}}],[\"使用声明事务注解\",{\"1\":{\"607\":1}}],[\"使用声明式事务可以将事务的控制和业务逻辑分离开来\",{\"1\":{\"243\":1,\"603\":1}}],[\"使用属性名作为name\",{\"1\":{\"566\":1}}],[\"使用jdbctemplate进行dml动作\",{\"1\":{\"562\":1}}],[\"使用java代码实例化\",{\"1\":{\"236\":1,\"572\":1}}],[\"使用java\",{\"1\":{\"193\":1,\"204\":1}}],[\"使用xml+注解方式进行组件管理\",{\"1\":{\"568\":1}}],[\"使用xml方式进行组件管理\",{\"1\":{\"562\":1}}],[\"使用xml的字符引用\",{\"1\":{\"317\":1}}],[\"使用returning属性设置的名称在通知方法中声明一个对应的形参\",{\"1\":{\"589\":1}}],[\"使用ref属性\",{\"1\":{\"558\":1}}],[\"使用result标签设置普通字段和java实体类属性之间的关系\",{\"1\":{\"513\":1}}],[\"使用resultmap完成多表结果映射\",{\"1\":{\"517\":1}}],[\"使用resultmap标签定义对应关系\",{\"1\":{\"513\":1}}],[\"使用resultmap\",{\"1\":{\"513\":1}}],[\"使用并与之兼容\",{\"1\":{\"557\":1}}],[\"使用总结\",{\"0\":{\"599\":1},\"1\":{\"542\":1,\"594\":1}}],[\"使用流程\",{\"1\":{\"540\":1}}],[\"使用流式布局\",{\"1\":{\"23\":1}}],[\"使用动态\",{\"1\":{\"524\":1,\"525\":1}}],[\"使用生成的主键\",{\"1\":{\"512\":1}}],[\"使用场景\",{\"1\":{\"505\":1}}],[\"使用的过程基本固定\",{\"1\":{\"493\":1}}],[\"使用的都是thread类中定义的start\",{\"1\":{\"195\":1,\"206\":1}}],[\"使用信号量来限制对资源的并发访问\",{\"1\":{\"483\":1}}],[\"使用传统的锁机制\",{\"1\":{\"483\":1}}],[\"使用原子操作比较当前值与旧值是否一致\",{\"1\":{\"483\":1}}],[\"使用单点数据库生成id会成为系统的瓶颈\",{\"1\":{\"480\":1}}],[\"使用接口identifiergenerator的方法nextid\",{\"1\":{\"480\":1}}],[\"使用接口类型引入service组件\",{\"1\":{\"233\":1,\"566\":1}}],[\"使用位置\",{\"1\":{\"480\":2}}],[\"使用案例\",{\"1\":{\"479\":1}}],[\"使用方法引用\",{\"1\":{\"478\":1}}],[\"使用方式2实现逆序打印\",{\"1\":{\"371\":1}}],[\"使用querywrapper\",{\"1\":{\"477\":2}}],[\"使用lambdaupdatewrapper\",{\"1\":{\"479\":1}}],[\"使用lambdaquerywrapper\",{\"1\":{\"478\":1}}],[\"使用lambda\",{\"1\":{\"475\":1}}],[\"使用分页查询\",{\"1\":{\"472\":1}}],[\"使用ioc的方式管理一切所需组件\",{\"1\":{\"617\":1}}],[\"使用include标签引用声明的sql片段\",{\"1\":{\"530\":1}}],[\"使用if标签\",{\"1\":{\"525\":1}}],[\"使用id标签设置主键列和主键属性之间的对应关系\",{\"1\":{\"513\":1}}],[\"使用id属性唯一的标记一条sql语句\",{\"1\":{\"509\":1,\"513\":1}}],[\"使用iservice接口方式\",{\"0\":{\"470\":1},\"1\":{\"459\":1}}],[\"使用import语句导入模块后\",{\"1\":{\"331\":1}}],[\"使用import语句还可以一次导入多个模块\",{\"1\":{\"330\":1}}],[\"使用记事本打开\",{\"1\":{\"449\":1}}],[\"使用依赖传递\",{\"1\":{\"448\":1}}],[\"使用就是本课程的主要目标\",{\"1\":{\"438\":1}}],[\"使用最广泛\",{\"1\":{\"421\":1}}],[\"使用dependencymanagement标签配置对依赖的管理\",{\"1\":{\"418\":1,\"452\":1}}],[\"使用default属性指定实际运行时使用的环境\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"使用parent标签指定当前工程的父工程\",{\"1\":{\"418\":1,\"452\":1}}],[\"使用posix字符\",{\"1\":{\"345\":1}}],[\"使用框架时所需要的\",{\"1\":{\"418\":1,\"452\":1}}],[\"使用同一个框架内的不同\",{\"1\":{\"418\":1}}],[\"使用optional配置终止传递\",{\"1\":{\"415\":1}}],[\"使用此依赖范围的\",{\"1\":{\"411\":4}}],[\"使用此方法在指定为方法返回值的类型的\",{\"1\":{\"237\":1,\"573\":1}}],[\"使用周期命令构建\",{\"1\":{\"406\":1,\"450\":1}}],[\"使用插件快速补全web项目\",{\"1\":{\"400\":1,\"444\":1}}],[\"使用mapper接口\",{\"1\":{\"679\":1}}],[\"使用maven软件\",{\"1\":{\"439\":1}}],[\"使用maven的构建命令可以快速打包\",{\"1\":{\"390\":1}}],[\"使用mybatis整合包提供的factorybean快速整合\",{\"1\":{\"628\":1}}],[\"使用mybatisx插件\",{\"1\":{\"487\":1}}],[\"使用mybatis\",{\"0\":{\"484\":1},\"1\":{\"459\":1,\"474\":1}}],[\"使用mybaitsapi进行数据库查找即可\",{\"1\":{\"220\":1}}],[\"使用带head头的双向链表实现\",{\"1\":{\"371\":1}}],[\"使用带head头的单向链表实现\",{\"1\":{\"370\":1}}],[\"使用数组模拟队列\",{\"0\":{\"367\":1}}],[\"使用类的人只通过外部接口访问和使用\",{\"1\":{\"334\":1}}],[\"使用该函数进行排序后\",{\"1\":{\"311\":1}}],[\"使用excludes标签配置依赖的排除\",{\"1\":{\"416\":1}}],[\"使用express如下\",{\"1\":{\"252\":1}}],[\"使用enumerate实现输出索引和元素内容\",{\"1\":{\"307\":1}}],[\"使用只读模式\",{\"1\":{\"245\":1}}],[\"使用配置类\",{\"1\":{\"242\":1,\"579\":1}}],[\"使用配置文件里设置的值\",{\"1\":{\"231\":1}}],[\"使用时sqrt\",{\"1\":{\"334\":1}}],[\"使用时\",{\"1\":{\"334\":2}}],[\"使用时只需将该注解标注在相应类上即可\",{\"1\":{\"231\":1,\"564\":1}}],[\"使用时机\",{\"1\":{\"81\":2}}],[\"使用你自己的方法实例化对象\",{\"1\":{\"229\":1}}],[\"使用组件对象\",{\"1\":{\"226\":1,\"555\":1,\"559\":1}}],[\"使用注解+配置类方式进行组件管理\",{\"1\":{\"575\":1}}],[\"使用注解来替代原本在\",{\"1\":{\"570\":1}}],[\"使用注解来映射简单语句会使代码显得更加整洁\",{\"1\":{\"82\":1}}],[\"使用注解标记\",{\"1\":{\"564\":1}}],[\"使用注解读取外部配置\",{\"1\":{\"235\":1,\"571\":1}}],[\"使用注解配置\",{\"1\":{\"212\":1}}],[\"使用线程的同步机制\",{\"1\":{\"197\":1,\"208\":1}}],[\"使用updatewrapper可以随意设置列的值\",{\"1\":{\"477\":1}}],[\"使用updatewrapper\",{\"1\":{\"477\":1}}],[\"使用urllib来获取百度首页的源码\",{\"1\":{\"351\":1}}],[\"使用udp提供尽力而为的数据报服务\",{\"1\":{\"190\":1,\"201\":1}}],[\"使用unicode编码\",{\"1\":{\"165\":1}}],[\"使用序列化实现北极熊对象polarbear的存储为二进制文件d\",{\"1\":{\"188\":1}}],[\"使用filereader\",{\"1\":{\"186\":1}}],[\"使用链表维护了一个添加进集合的顺序\",{\"1\":{\"173\":1}}],[\"使用链表维护添加进map中的顺序\",{\"1\":{\"169\":1}}],[\"使用了实体类的属性引用\",{\"1\":{\"478\":1}}],[\"使用了哈希算法\",{\"1\":{\"172\":1}}],[\"使用了匿名内部类\",{\"1\":{\"151\":1}}],[\"使用增强for循环实现集合的遍历\",{\"1\":{\"170\":2}}],[\"使用这个语句导入模块后\",{\"1\":{\"330\":1}}],[\"使用这个返回主键\",{\"1\":{\"81\":1}}],[\"使用这种方式\",{\"1\":{\"170\":1,\"512\":1}}],[\"使用aop\",{\"1\":{\"584\":1}}],[\"使用association标签配置\",{\"1\":{\"518\":1}}],[\"使用array存储对象方面有一些弊端\",{\"1\":{\"169\":1}}],[\"使用axios发送请求\",{\"1\":{\"45\":1}}],[\"使用starter非常简单\",{\"1\":{\"665\":1}}],[\"使用static或transient修饰的属性\",{\"1\":{\"187\":1}}],[\"使用sql标签抽取重复出现的sql片段\",{\"1\":{\"530\":1}}],[\"使用sqlsessionfactory对象开启一个会话\",{\"1\":{\"220\":1,\"493\":1}}],[\"使用set标签动态管理set子句\",{\"1\":{\"526\":1}}],[\"使用settings对mybatis全局进行设置\",{\"1\":{\"513\":1}}],[\"使用simpledateformat\",{\"1\":{\"163\":1}}],[\"使用springboot开发一个web应用\",{\"1\":{\"61\":1}}],[\"使用获取一个随机的int数字\",{\"1\":{\"160\":1}}],[\"使用内部类\",{\"1\":{\"149\":1}}],[\"使用多态的好处\",{\"1\":{\"145\":1}}],[\"使用完全大写的字母\",{\"1\":{\"143\":1}}],[\"使用静态的变量可以实现累加的效果\",{\"1\":{\"130\":1}}],[\"使用成员方法\",{\"1\":{\"126\":1}}],[\"使用成员变量\",{\"1\":{\"126\":1}}],[\"使用在循环结构中\",{\"1\":{\"122\":1}}],[\"使用在switch\",{\"1\":{\"122\":1}}],[\"使用throwing属性指定的名称在通知方法声明形参\",{\"1\":{\"589\":1}}],[\"使用trim标签控制条件部分两端是否包含某些字符\",{\"1\":{\"527\":1}}],[\"使用try\",{\"1\":{\"211\":1,\"584\":1}}],[\"使用tcp提供可依赖的字节流服务\",{\"1\":{\"190\":1,\"201\":1}}],[\"使用test属性进行条件判断\",{\"1\":{\"84\":1}}],[\"使用typeof运算符可以获取数据类型\",{\"1\":{\"38\":1}}],[\"使用实体类将多个参数封装起来\",{\"1\":{\"81\":1}}],[\"使用以上四个注解都可以声明bean\",{\"1\":{\"74\":1}}],[\"使用合适的单元测试框架运行测试\",{\"1\":{\"59\":1}}],[\"使用坐标来定义项目或引入项目中需要的依赖\",{\"1\":{\"58\":1}}],[\"使用nginx部署\",{\"1\":{\"53\":1}}],[\"使用外部css\",{\"1\":{\"34\":1}}],[\"使用\",{\"1\":{\"8\":1,\"68\":2,\"92\":1,\"94\":1,\"126\":1,\"130\":1,\"217\":1,\"233\":1,\"235\":2,\"320\":1,\"390\":1,\"438\":1,\"476\":1,\"478\":3,\"505\":1,\"512\":1,\"515\":1,\"527\":4,\"537\":1,\"539\":1,\"566\":1,\"571\":2,\"592\":1,\"593\":1,\"628\":3,\"664\":1}}],[\"使用指南\",{\"1\":{\"0\":2,\"1\":1}}],[\"菜鸟教程\",{\"1\":{\"64\":1}}],[\"菜鸟拯救世界\",{\"1\":{\"28\":2}}],[\"责任在服务端\",{\"1\":{\"64\":1}}],[\"责任在客户端\",{\"1\":{\"64\":1}}],[\"让配置更加清晰明了\",{\"1\":{\"669\":1}}],[\"让人头疼\",{\"1\":{\"662\":1}}],[\"让其他正常程序可以执行\",{\"1\":{\"609\":1}}],[\"让其他线程继续操作资源\",{\"1\":{\"483\":1}}],[\"让spring\",{\"1\":{\"552\":1}}],[\"让查询结果的每一列都和java实体类中属性对应起来\",{\"1\":{\"509\":1}}],[\"让别名和java实体类中属性名一致\",{\"1\":{\"509\":1,\"513\":1}}],[\"让别名与实体类属性一致\",{\"1\":{\"81\":1}}],[\"让用户能更专注于\",{\"1\":{\"493\":1,\"515\":1}}],[\"让一个项目从另一个项目中继承配置信息的机制\",{\"1\":{\"418\":1,\"452\":1}}],[\"让小学生和大学生去继承学生这个父类\",{\"1\":{\"334\":1}}],[\"让代码更整洁\",{\"1\":{\"328\":1}}],[\"让我们更加专注进行业务编写\",{\"1\":{\"551\":1}}],[\"让我们可以使用面向对象思维进行数据库操作\",{\"1\":{\"537\":1}}],[\"让我们可以有选择的加入sql语句的片段\",{\"1\":{\"525\":1}}],[\"让我们能够便于分辨组件的作用\",{\"1\":{\"231\":1,\"564\":1}}],[\"让我们在调用目标方法的时候\",{\"1\":{\"211\":1,\"583\":1}}],[\"让不属于目标方法核心逻辑的代码从目标方法中剥离出来\",{\"1\":{\"211\":1,\"583\":1}}],[\"让子类去实现\",{\"1\":{\"138\":1}}],[\"让web开发更加便捷\",{\"1\":{\"65\":1}}],[\"让客户端在发起一次请求以完成整个处理\",{\"1\":{\"64\":1}}],[\"让界面显示出来\",{\"1\":{\"28\":2}}],[\"最为关键的还是model\",{\"1\":{\"651\":1}}],[\"最初是为了解决企业级开发中各种常见问题而创建的\",{\"1\":{\"547\":1}}],[\"最常见情景是根据条件包含\",{\"1\":{\"525\":1}}],[\"最强大的特性\",{\"1\":{\"515\":1}}],[\"最顶端父类\",{\"1\":{\"475\":1}}],[\"最优化持久层开发\",{\"0\":{\"458\":1,\"699\":1}}],[\"最佳使用方案\",{\"1\":{\"450\":1}}],[\"最佳导入\",{\"1\":{\"415\":1,\"448\":1}}],[\"最多支持4096个id生成\",{\"1\":{\"480\":1}}],[\"最多\",{\"1\":{\"398\":1,\"442\":1}}],[\"最小值\",{\"1\":{\"334\":1}}],[\"最大有效数据位数\",{\"1\":{\"370\":1}}],[\"最大值\",{\"1\":{\"334\":1}}],[\"最大的优势\",{\"1\":{\"250\":1}}],[\"最大化减少空指针异常\",{\"1\":{\"16\":1}}],[\"最低优先级\",{\"1\":{\"196\":1,\"207\":1}}],[\"最高气温升至40℃以上\",{\"1\":{\"651\":1}}],[\"最高的隔离级别\",{\"1\":{\"248\":1,\"611\":1}}],[\"最高优先级\",{\"1\":{\"196\":1,\"207\":1}}],[\"最高位都补0\",{\"1\":{\"116\":1}}],[\"最好查一下是否支持\",{\"1\":{\"345\":1}}],[\"最好这样写\",{\"1\":{\"188\":1}}],[\"最好用xml来映射语句\",{\"1\":{\"82\":1}}],[\"最重要的内容就是其中的抽象方法\",{\"1\":{\"139\":1}}],[\"最终会在容器内进行ioc和di动作\",{\"1\":{\"555\":1}}],[\"最终在特定情况下销毁组件\",{\"1\":{\"552\":1}}],[\"最终\",{\"1\":{\"537\":1,\"564\":1}}],[\"最终确定一个可用组合\",{\"1\":{\"418\":1,\"452\":1}}],[\"最终删除内部的文件\",{\"1\":{\"412\":1,\"449\":1}}],[\"最终进行构建的是插件\",{\"1\":{\"406\":1,\"450\":1}}],[\"最终却导入了\",{\"1\":{\"387\":1}}],[\"最终利用动态代理技术横向插入到各个方法中\",{\"1\":{\"211\":1}}],[\"最终常量final\",{\"1\":{\"114\":1}}],[\"最终体现为一个方法\",{\"1\":{\"101\":1}}],[\"最后我们就可以通过方法调用进行数据库操作\",{\"1\":{\"537\":1}}],[\"最后更新的失败\",{\"1\":{\"484\":1}}],[\"最后一个参数是字符串\",{\"1\":{\"590\":1}}],[\"最后一个元素的后一个位置\",{\"1\":{\"370\":1}}],[\"最后一部分\",{\"1\":{\"64\":1}}],[\"最后刷新容器触发bean实例化动作\",{\"1\":{\"226\":1,\"559\":1}}],[\"最后\",{\"1\":{\"212\":2,\"512\":1}}],[\"最后运行\",{\"1\":{\"94\":1}}],[\"描述通知与切入点的对应关系\",{\"1\":{\"101\":1}}],[\"描述\",{\"1\":{\"64\":1,\"404\":1,\"411\":1,\"450\":1,\"463\":1,\"464\":1,\"465\":1,\"466\":1,\"480\":6,\"515\":2}}],[\"响应json\",{\"1\":{\"656\":1}}],[\"响应的json\",{\"1\":{\"634\":4}}],[\"响应已完成\",{\"1\":{\"254\":1}}],[\"响应报文\",{\"0\":{\"252\":1}}],[\"响应数据\",{\"1\":{\"74\":1,\"655\":6,\"656\":3,\"657\":5}}],[\"响应数据第一行\",{\"1\":{\"64\":1}}],[\"响应码\",{\"1\":{\"69\":1}}],[\"响应\",{\"0\":{\"69\":1},\"1\":{\"67\":1,\"351\":1}}],[\"响应体\",{\"1\":{\"64\":1,\"253\":1}}],[\"响应头\",{\"1\":{\"64\":1}}],[\"响应行\",{\"1\":{\"64\":1}}],[\"响应协议\",{\"0\":{\"64\":1}}],[\"响应模型的\",{\"1\":{\"62\":1}}],[\"字段和值之间使用冒号分隔\",{\"1\":{\"669\":1}}],[\"字段中\",{\"1\":{\"512\":1}}],[\"字段注解\",{\"1\":{\"480\":1}}],[\"字典名\",{\"1\":{\"334\":3}}],[\"字典的键也不可变\",{\"1\":{\"334\":1}}],[\"字典的创建\",{\"0\":{\"315\":1}}],[\"字典\",{\"1\":{\"334\":2}}],[\"字典推导式\",{\"1\":{\"315\":1}}],[\"字典中的键必须不可变\",{\"1\":{\"314\":1}}],[\"字典是可变的\",{\"1\":{\"314\":1}}],[\"字典是任意对象的无序集合\",{\"1\":{\"314\":1}}],[\"字典与集合\",{\"0\":{\"314\":1}}],[\"字符类\",{\"1\":{\"345\":1}}],[\"字符类型\",{\"1\":{\"112\":1}}],[\"字符本身\",{\"1\":{\"345\":1}}],[\"字符匹配所有字符\",{\"1\":{\"320\":1}}],[\"字符流\",{\"1\":{\"181\":2}}],[\"字符对应了unicode码值\",{\"1\":{\"114\":1}}],[\"字符串开头\",{\"1\":{\"590\":1}}],[\"字符串整体的后面要添加的字符串\",{\"1\":{\"529\":1}}],[\"字符串整体的前面要添加的字符串\",{\"1\":{\"529\":1}}],[\"字符串乘以数字表示把字符串重复那么多次\",{\"1\":{\"334\":1}}],[\"字符串也是不可变的\",{\"1\":{\"334\":1}}],[\"字符串表示\",{\"1\":{\"317\":1}}],[\"字符串不允许直接与其他类型的数据拼接\",{\"1\":{\"317\":1}}],[\"字符串与字符数组间的转换\",{\"1\":{\"169\":2}}],[\"字符串与字节数组间的转换\",{\"1\":{\"169\":2}}],[\"字符串与基本数据类型\",{\"1\":{\"169\":1}}],[\"字符串的结束\",{\"1\":{\"345\":1}}],[\"字符串的开始\",{\"1\":{\"345\":1}}],[\"字符串的常用的方法\",{\"0\":{\"166\":1}}],[\"字符串的长度\",{\"1\":{\"40\":1}}],[\"字符串类型\",{\"1\":{\"92\":1,\"501\":1}}],[\"字符串类型转数字\",{\"1\":{\"38\":1}}],[\"字符串转化为数字\",{\"1\":{\"38\":1}}],[\"字符串\",{\"0\":{\"317\":1},\"1\":{\"38\":2,\"40\":1,\"112\":1,\"307\":1,\"314\":1,\"355\":1}}],[\"字母数字下划线开头\",{\"1\":{\"110\":1}}],[\"字节流\",{\"1\":{\"181\":2}}],[\"字节数组转字符串\",{\"1\":{\"169\":1}}],[\"字节数\",{\"1\":{\"64\":1}}],[\"字节\",{\"1\":{\"63\":1}}],[\"协议\",{\"1\":{\"63\":1,\"64\":1,\"90\":1}}],[\"资源创建要求\",{\"1\":{\"532\":1}}],[\"资源目录\",{\"1\":{\"401\":1,\"445\":1}}],[\"资源文件等转化为能够运行或部署的应用程序或库的过程\",{\"1\":{\"390\":1,\"439\":1}}],[\"资源耗尽等严重情况\",{\"1\":{\"152\":1}}],[\"资源访问完成后\",{\"1\":{\"93\":1}}],[\"资源路径\",{\"1\":{\"63\":1}}],[\"资源重用\",{\"1\":{\"10\":1}}],[\"速度快\",{\"1\":{\"62\":1}}],[\"速度更快\",{\"1\":{\"9\":1,\"16\":1}}],[\"安全性\",{\"1\":{\"662\":1,\"665\":1}}],[\"安全控制\",{\"1\":{\"584\":1}}],[\"安全\",{\"1\":{\"62\":1,\"91\":1}}],[\"安装依赖\",{\"1\":{\"638\":1}}],[\"安装vscode\",{\"1\":{\"636\":1}}],[\"安装完成后\",{\"1\":{\"636\":1}}],[\"安装过程中遵循默认选项即可\",{\"1\":{\"636\":1}}],[\"安装插件\",{\"1\":{\"539\":1}}],[\"安装插件jbljavatoweb\",{\"1\":{\"400\":1,\"444\":1}}],[\"安装到本地仓库\",{\"1\":{\"405\":1}}],[\"安装是将当前工程所生成的jar或war文件\",{\"1\":{\"405\":1}}],[\"安装条件\",{\"1\":{\"393\":1,\"440\":1}}],[\"安装命令\",{\"1\":{\"334\":1}}],[\"安装fish\",{\"1\":{\"288\":1}}],[\"安装软件\",{\"0\":{\"284\":1}}],[\"安装mysql8\",{\"1\":{\"277\":1}}],[\"安装数据库\",{\"0\":{\"277\":1}}],[\"安装项目到本地仓库\",{\"1\":{\"59\":1}}],[\"安装\",{\"0\":{\"56\":1},\"1\":{\"52\":1,\"59\":1,\"440\":1,\"457\":1}}],[\"安装elementui组件库\",{\"1\":{\"50\":1}}],[\"添加druid连接池的基本配置\",{\"1\":{\"677\":1}}],[\"添加属性和注解\",{\"1\":{\"670\":1}}],[\"添加web启动器\",{\"1\":{\"664\":1}}],[\"添加父工程坐标\",{\"1\":{\"664\":1}}],[\"添加依赖\",{\"1\":{\"664\":2}}],[\"添加打包插件\",{\"0\":{\"684\":1},\"1\":{\"660\":1}}],[\"添加主键\",{\"1\":{\"653\":1}}],[\"添加controller层扫描注解\",{\"1\":{\"626\":1}}],[\"添加mvc复合功能开关\",{\"1\":{\"626\":1}}],[\"添加配置类注解\",{\"1\":{\"626\":1}}],[\"添加传播行为测试\",{\"1\":{\"612\":1}}],[\"添加了更多特定于企业的功能\",{\"1\":{\"552\":1}}],[\"添加防止全表更新和删除拦截器\",{\"1\":{\"485\":1}}],[\"添加版本号更新插件\",{\"1\":{\"484\":1}}],[\"添加模糊匹配条件\",{\"1\":{\"474\":1}}],[\"添加不等于条件\",{\"1\":{\"474\":1}}],[\"添加等于条件\",{\"1\":{\"474\":1}}],[\"添加测试类\",{\"1\":{\"461\":1}}],[\"添加jackson\",{\"1\":{\"456\":1}}],[\"添加spring\",{\"1\":{\"456\":1}}],[\"添加以下代码即可\",{\"1\":{\"404\":1}}],[\"添加节点到单项链表\",{\"1\":{\"370\":1}}],[\"添加\",{\"1\":{\"370\":1,\"480\":1}}],[\"添加数据到队列\",{\"1\":{\"367\":1,\"368\":1}}],[\"添加元素\",{\"0\":{\"309\":1},\"1\":{\"316\":1,\"334\":1}}],[\"添加到配置文件中\",{\"0\":{\"282\":1}}],[\"添加到ioc容器\",{\"1\":{\"236\":1,\"572\":1}}],[\"添加端口\",{\"1\":{\"276\":1}}],[\"添加控制台输出\",{\"1\":{\"211\":1,\"582\":1}}],[\"添加append\",{\"1\":{\"167\":1}}],[\"添加方法hello\",{\"1\":{\"61\":1}}],[\"添加和删除html元素\",{\"1\":{\"40\":1}}],[\"需求描述\",{\"1\":{\"655\":4,\"656\":3,\"657\":5}}],[\"需求说明\",{\"1\":{\"518\":1,\"519\":1,\"634\":4}}],[\"需求案例\",{\"1\":{\"429\":1,\"455\":1}}],[\"需求不统计头节点\",{\"1\":{\"371\":1}}],[\"需求分析\",{\"1\":{\"236\":1,\"562\":1,\"568\":1,\"572\":1,\"575\":1}}],[\"需求\",{\"1\":{\"61\":1,\"211\":1,\"365\":1,\"532\":1,\"609\":1,\"630\":1,\"671\":1}}],[\"需要手动在resources目录下创建meta\",{\"1\":{\"677\":1}}],[\"需要什么依赖\",{\"1\":{\"664\":1}}],[\"需要更新浏览量+1\",{\"1\":{\"656\":1}}],[\"需要非空判断\",{\"1\":{\"656\":1}}],[\"需要加入\",{\"1\":{\"655\":1}}],[\"需要升级\",{\"1\":{\"636\":1}}],[\"需要将sqlsessionfactory和mapper实例加入到ioc容器\",{\"1\":{\"628\":1}}],[\"需要注入连接池对象\",{\"1\":{\"628\":3}}],[\"需要注入mapper接口\",{\"1\":{\"628\":1}}],[\"需要注意的是\",{\"1\":{\"480\":1,\"512\":1}}],[\"需要ioc容器管理\",{\"1\":{\"628\":1}}],[\"需要依赖清单分析\",{\"1\":{\"625\":1}}],[\"需要依赖于urllib\",{\"1\":{\"354\":1}}],[\"需要添加到一个无参数无返回值方法上即可\",{\"1\":{\"591\":1}}],[\"需要获取方法签名\",{\"1\":{\"589\":1}}],[\"需要获取插入数据库数据的主键\",{\"1\":{\"81\":1}}],[\"需要自己编写代理工厂等\",{\"1\":{\"583\":1}}],[\"需要自己实现\",{\"1\":{\"92\":1}}],[\"需要额外引入以下依赖\",{\"1\":{\"566\":1}}],[\"需要配合\",{\"1\":{\"566\":1}}],[\"需要特别注意\",{\"1\":{\"558\":1}}],[\"需要\",{\"1\":{\"549\":1,\"566\":2}}],[\"需要考虑框架是否向下兼容\",{\"1\":{\"545\":1}}],[\"需要花费时间学习其背后的架构\",{\"1\":{\"545\":1}}],[\"需要花时间了解大量的元素\",{\"1\":{\"524\":1}}],[\"需要访问接口的参数时还是正常写\",{\"1\":{\"525\":1}}],[\"需要根据具体应用场景和需求选择合适的插入方式\",{\"1\":{\"512\":1}}],[\"需要根据实际业务需求进行选择和调整\",{\"1\":{\"248\":1,\"611\":1}}],[\"需要绕过框架\",{\"1\":{\"492\":1}}],[\"需要进行冲突处理\",{\"1\":{\"483\":1}}],[\"需要进行相应的冲突处理\",{\"1\":{\"483\":1}}],[\"需要确保系统时钟的准确性和单调性\",{\"1\":{\"480\":1}}],[\"需要设置sqlset\",{\"1\":{\"471\":1}}],[\"需要导入jackson相关的依赖\",{\"1\":{\"448\":1}}],[\"需要导入依赖\",{\"1\":{\"233\":1}}],[\"需要经过长期摸索和反复调试\",{\"1\":{\"418\":1,\"452\":1}}],[\"需要专门工具\",{\"1\":{\"389\":2}}],[\"需要靠辅助节点\",{\"1\":{\"371\":1}}],[\"需要把数据结构学到位\",{\"1\":{\"365\":1}}],[\"需要与编码时采用的字符编码一致\",{\"1\":{\"317\":1}}],[\"需要与这个类里的属性名对应\",{\"1\":{\"68\":1}}],[\"需要装配\",{\"1\":{\"233\":1,\"566\":1}}],[\"需要类型转化\",{\"1\":{\"226\":1,\"559\":1}}],[\"需要调用refresh方法\",{\"1\":{\"226\":1,\"559\":1}}],[\"需要你在通知中\",{\"1\":{\"216\":1}}],[\"需要被代理的目标类必须实现接口\",{\"1\":{\"211\":1,\"583\":1,\"587\":1}}],[\"需要被同步的代码\",{\"1\":{\"197\":3,\"208\":3}}],[\"需要在变量名\",{\"1\":{\"330\":1}}],[\"需要在每个方法中\",{\"1\":{\"211\":1,\"582\":1}}],[\"需要在对应的类上加上如下注解之一\",{\"1\":{\"74\":1}}],[\"需要用iterator内部的remove\",{\"1\":{\"197\":1}}],[\"需要内部类对象\",{\"1\":{\"149\":1}}],[\"需要新事务\",{\"1\":{\"98\":1}}],[\"需要事务\",{\"1\":{\"98\":1}}],[\"需要使用item属性声明的名称\",{\"1\":{\"529\":1}}],[\"需要使用ioc中的datasource\",{\"1\":{\"244\":1,\"607\":1}}],[\"需要使用$\",{\"1\":{\"498\":1}}],[\"需要使用long\",{\"1\":{\"480\":1}}],[\"需要使用方法引用\",{\"1\":{\"478\":1}}],[\"需要使用大括号\",{\"1\":{\"478\":1}}],[\"需要使用\",{\"1\":{\"68\":2,\"480\":1}}],[\"需要使用axios时\",{\"1\":{\"51\":1}}],[\"需要通过<context\",{\"1\":{\"241\":1,\"578\":1}}],[\"需要通过httpservletrquest对象手动获取\",{\"1\":{\"68\":1}}],[\"需要通过link标签在网页中引入\",{\"1\":{\"35\":1}}],[\"需要安装\",{\"1\":{\"48\":1,\"271\":1}}],[\"官网通常是英文界面\",{\"1\":{\"387\":1}}],[\"官网\",{\"1\":{\"60\":1}}],[\"官方提供的场景\",{\"1\":{\"665\":1}}],[\"官方例子\",{\"1\":{\"517\":1}}],[\"官方\",{\"1\":{\"10\":1,\"78\":1}}],[\"右键\",{\"1\":{\"400\":1,\"444\":1}}],[\"右键解压即可\",{\"1\":{\"393\":1,\"440\":1}}],[\"右移位\",{\"1\":{\"297\":1}}],[\"右移包括无符号右移\",{\"1\":{\"116\":1}}],[\"右侧创建了一个子类对象\",{\"1\":{\"146\":1}}],[\"右侧的maven工具栏\",{\"1\":{\"59\":1}}],[\"右端不再进行运算\",{\"1\":{\"118\":1}}],[\"右端都会进行运算\",{\"1\":{\"118\":1}}],[\"右下左\",{\"1\":{\"36\":2}}],[\"阶段是有顺序的吗\",{\"1\":{\"59\":1}}],[\"每页显示的数据量\",{\"1\":{\"640\":1}}],[\"每页显示的条数\",{\"1\":{\"472\":1}}],[\"每页数据条数\",{\"1\":{\"634\":1}}],[\"每篇博文有零或多条的评论和标签\",{\"1\":{\"517\":1}}],[\"每条数据添加一个版本号字段version\",{\"1\":{\"483\":1}}],[\"每两个整数之间用空格分隔\",{\"1\":{\"376\":1,\"377\":1}}],[\"每遍历一个节点\",{\"1\":{\"371\":1}}],[\"每月工作天数\",{\"1\":{\"334\":1}}],[\"每步跨2\",{\"1\":{\"334\":1}}],[\"每当创建一个类的实例时\",{\"1\":{\"327\":1}}],[\"每一个模块内部可以看成是一个单一架构的应用\",{\"1\":{\"544\":1}}],[\"每一个工程都是运行在自己的\",{\"1\":{\"544\":1}}],[\"每一个在包\",{\"1\":{\"508\":1}}],[\"每一个\",{\"1\":{\"418\":1,\"452\":1}}],[\"每一个横切关注点上要做的事情都需要写一个方法来实现\",{\"1\":{\"211\":1,\"584\":1}}],[\"每一个进程都有一个独立的内存空间\",{\"1\":{\"192\":1,\"203\":1}}],[\"每次更新数据时\",{\"1\":{\"483\":1}}],[\"每次实现功能都需要自己编写代码\",{\"1\":{\"243\":1,\"602\":1}}],[\"每次会话\",{\"1\":{\"228\":1,\"560\":1,\"565\":1}}],[\"每次请求\",{\"1\":{\"228\":1,\"560\":1,\"565\":1}}],[\"每次请求都是独立的\",{\"1\":{\"62\":1}}],[\"每次写入从0到len的长度\",{\"1\":{\"185\":1}}],[\"每次读入到byte中的字节的长度\",{\"1\":{\"183\":1}}],[\"每创建一个类的对象\",{\"1\":{\"132\":1}}],[\"每个环境对应一个文件\",{\"1\":{\"671\":1}}],[\"每个环境对应一个属性文件\",{\"1\":{\"671\":1}}],[\"每个模块可以有自己的starter和依赖项\",{\"1\":{\"665\":1}}],[\"每个模块是一个\",{\"1\":{\"544\":1}}],[\"每个boot项目都有一个父项目spring\",{\"1\":{\"665\":1}}],[\"每个用户生成的唯一字符串标识\",{\"1\":{\"655\":1}}],[\"每个线程都应该有它自己的\",{\"1\":{\"628\":1}}],[\"每个线程都是通过特定thread对象的start\",{\"1\":{\"193\":1,\"204\":1}}],[\"每个配置文件也更加清晰和灵活\",{\"1\":{\"619\":1}}],[\"每个ioc容器对应哪些类型组件\",{\"0\":{\"620\":1},\"1\":{\"615\":1}}],[\"每个组件仍然应该有一个唯一标识\",{\"1\":{\"564\":1}}],[\"每个\",{\"1\":{\"564\":1}}],[\"每个参数表示一个依赖项\",{\"1\":{\"558\":2}}],[\"每个人对待任何事物都有自己的看法\",{\"1\":{\"545\":1}}],[\"每个条件拼接方法都condition参数\",{\"1\":{\"476\":1,\"478\":1}}],[\"每个heronode对象就是一个节点\",{\"1\":{\"370\":1}}],[\"每个节点包含data域\",{\"1\":{\"370\":1}}],[\"每个编译单元都有单一的公共接口\",{\"1\":{\"126\":1}}],[\"每个编译单元\",{\"1\":{\"126\":1}}],[\"每个项目用于完成特定的功能\",{\"1\":{\"60\":1}}],[\"每八列是一组\",{\"1\":{\"120\":1}}],[\"每套生命周期包含一些阶段\",{\"1\":{\"59\":1}}],[\"每触发一个生命周期事件\",{\"1\":{\"44\":1}}],[\"发现\",{\"1\":{\"591\":1}}],[\"发现不会回滚\",{\"1\":{\"247\":3,\"248\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"发布数据\",{\"1\":{\"657\":1}}],[\"发布前先请求后端的登录校验接口验证登录\",{\"1\":{\"657\":1}}],[\"发布新闻前\",{\"1\":{\"657\":1}}],[\"发布用户id\",{\"1\":{\"656\":5}}],[\"发布头条功能\",{\"1\":{\"648\":1}}],[\"发布时间已过小时数\",{\"1\":{\"656\":6}}],[\"发布时间\",{\"1\":{\"440\":1}}],[\"发布站点等\",{\"1\":{\"59\":1}}],[\"发生了未知错误\",{\"1\":{\"334\":1}}],[\"发生异常都会回滚\",{\"1\":{\"98\":1}}],[\"发送邮件等\",{\"1\":{\"584\":1}}],[\"发送\",{\"1\":{\"253\":1}}],[\"发送数据\",{\"1\":{\"191\":1,\"202\":1}}],[\"发送请求\",{\"1\":{\"45\":1}}],[\"发送请求到服务端\",{\"1\":{\"44\":1}}],[\"发送异步请求\",{\"1\":{\"45\":1}}],[\"生效原则\",{\"1\":{\"608\":1}}],[\"生效范围\",{\"1\":{\"447\":1}}],[\"生老病死都和政府有关\",{\"1\":{\"552\":1}}],[\"生活中的代理\",{\"1\":{\"583\":1}}],[\"生活中的复杂容器\",{\"1\":{\"552\":1}}],[\"生活中的普通容器\",{\"1\":{\"552\":1}}],[\"生态系统非常丰富\",{\"1\":{\"549\":1}}],[\"生产三个环境的配置文件\",{\"1\":{\"671\":1}}],[\"生产级别的\",{\"1\":{\"662\":1}}],[\"生产\",{\"1\":{\"493\":2,\"671\":2}}],[\"生产出一些定制化的\",{\"1\":{\"230\":1,\"561\":1}}],[\"生日一样的就进不去了\",{\"1\":{\"176\":1}}],[\"生成get\",{\"1\":{\"668\":1,\"669\":1}}],[\"生成token字符串\",{\"1\":{\"655\":1}}],[\"生成target文件\",{\"1\":{\"404\":1,\"450\":1}}],[\"生成式ai\",{\"1\":{\"651\":1}}],[\"生成代理对象\",{\"1\":{\"583\":1}}],[\"生成代理对象的过程\",{\"1\":{\"211\":1,\"584\":1}}],[\"生成的文件路径等等\",{\"1\":{\"538\":1}}],[\"生成\",{\"1\":{\"475\":1,\"655\":1}}],[\"生成器\",{\"1\":{\"460\":1}}],[\"生成war\",{\"1\":{\"450\":1}}],[\"生成一个项目依赖信息的展示页面\",{\"1\":{\"450\":1}}],[\"生成站点\",{\"1\":{\"404\":1}}],[\"生成jar或war文件\",{\"1\":{\"404\":1}}],[\"生成jwg令牌\",{\"1\":{\"92\":1}}],[\"生成了对象文件\",{\"1\":{\"338\":1}}],[\"生成汇编文件\",{\"1\":{\"338\":1}}],[\"生成令牌并返回\",{\"1\":{\"92\":1}}],[\"生成预编译sql\",{\"1\":{\"81\":1}}],[\"生成报告\",{\"1\":{\"59\":1}}],[\"生命周期命令之间关系\",{\"0\":{\"406\":1}}],[\"生命周期管理\",{\"1\":{\"230\":1,\"561\":1}}],[\"生命周期\",{\"1\":{\"44\":1,\"59\":2,\"192\":1,\"203\":1}}],[\"清除本地\",{\"1\":{\"412\":1,\"449\":1}}],[\"清理maven错误缓存\",{\"1\":{\"449\":1}}],[\"清理周期\",{\"1\":{\"406\":1,\"450\":1}}],[\"清理\",{\"1\":{\"404\":2,\"412\":1}}],[\"清理编译或打包后的项目结构\",{\"1\":{\"404\":1,\"450\":1}}],[\"清理工作\",{\"1\":{\"59\":1}}],[\"清空集合\",{\"1\":{\"316\":1}}],[\"清空集合元素\",{\"1\":{\"170\":1}}],[\"清空\",{\"1\":{\"177\":1}}],[\"清空原本已经出现的所有图片this\",{\"1\":{\"28\":1}}],[\"主键策略自增长\",{\"1\":{\"652\":1}}],[\"主键生成策略不是默认策略\",{\"1\":{\"480\":1}}],[\"主键类型为\",{\"1\":{\"480\":1}}],[\"主键字段名\",{\"1\":{\"480\":1}}],[\"主键列名\",{\"1\":{\"480\":1}}],[\"主键注解\",{\"1\":{\"480\":1}}],[\"主键属性必须值\",{\"1\":{\"465\":1}}],[\"主键\",{\"1\":{\"464\":2,\"466\":2,\"514\":1}}],[\"主键id\",{\"1\":{\"461\":1}}],[\"主键返回\",{\"1\":{\"81\":1}}],[\"主版本号\",{\"1\":{\"398\":2,\"442\":2}}],[\"主动创建代理类\",{\"1\":{\"583\":1}}],[\"主动触发场景\",{\"1\":{\"450\":1}}],[\"主动触发构建\",{\"1\":{\"390\":1,\"439\":1}}],[\"主动抛出一个检查异常\",{\"1\":{\"247\":3,\"248\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"主机\",{\"1\":{\"353\":1}}],[\"主码为单属性\",{\"1\":{\"341\":1}}],[\"主要作用如下\",{\"1\":{\"665\":1}}],[\"主要配置mapper代理对象\",{\"1\":{\"628\":1}}],[\"主要配置service\",{\"1\":{\"627\":1}}],[\"主要配置controller\",{\"1\":{\"626\":1}}],[\"主要包括以下几种标准注解\",{\"1\":{\"566\":1}}],[\"主要有以下几个系列\",{\"1\":{\"566\":1}}],[\"主要涉及注入场景\",{\"1\":{\"558\":1}}],[\"主要优势\",{\"0\":{\"549\":1},\"1\":{\"542\":1}}],[\"主要原因有以下几种\",{\"1\":{\"412\":1,\"449\":1}}],[\"主要是为了与传统4s店\",{\"1\":{\"651\":1}}],[\"主要是对项目编译生成文件进行清理\",{\"1\":{\"406\":1,\"450\":1}}],[\"主要是针对对象的创建和调用控制而言的\",{\"1\":{\"221\":1,\"553\":1}}],[\"主要两个构建生命周期\",{\"1\":{\"406\":1}}],[\"主要实现类\",{\"1\":{\"169\":1}}],[\"主要的实现类\",{\"1\":{\"169\":1}}],[\"主要通过底层的动态代理机制\",{\"1\":{\"99\":1}}],[\"主要功能是\",{\"1\":{\"65\":1}}],[\"主流的注入方式为setter方法注入和构造函数注入\",{\"1\":{\"558\":1}}],[\"主流\",{\"0\":{\"92\":1}}],[\"主程序\",{\"1\":{\"59\":1}}],[\"主程序范围有效\",{\"1\":{\"59\":1}}],[\"主题使用了vuepress\",{\"1\":{\"0\":1}}],[\"被视为最大赢家\",{\"1\":{\"651\":1}}],[\"被生成式ai弥漫的亚马逊\",{\"1\":{\"651\":1}}],[\"被代理\",{\"1\":{\"583\":1}}],[\"被代理的目标对象\",{\"1\":{\"211\":1,\"584\":1}}],[\"被采纳分支后面的分支都将不被考虑\",{\"1\":{\"528\":1}}],[\"被删除状态\",{\"1\":{\"481\":1}}],[\"被删除的节点将不会有其他引用指向\",{\"1\":{\"370\":1}}],[\"被管理的依赖并没有真正被引入到工程\",{\"1\":{\"418\":1,\"452\":1}}],[\"被其他工程聚合或者继承\",{\"1\":{\"409\":1,\"447\":1}}],[\"被装配\",{\"1\":{\"233\":1,\"566\":1}}],[\"被引用类bean声明\",{\"1\":{\"224\":3,\"558\":4}}],[\"被修改的次数\",{\"1\":{\"197\":1}}],[\"被排除的资源无需指定版本\",{\"1\":{\"59\":1}}],[\"被依赖的资源如果依赖其他资源\",{\"1\":{\"59\":1}}],[\"qq\",{\"1\":{\"547\":2}}],[\"q\",{\"1\":{\"334\":1}}],[\"queries\",{\"1\":{\"608\":1}}],[\"querypage\",{\"1\":{\"641\":3}}],[\"query可以返回集合\",{\"1\":{\"562\":2,\"568\":1,\"575\":1}}],[\"queryforobject\",{\"1\":{\"562\":1,\"677\":1}}],[\"queryall\",{\"1\":{\"467\":2,\"562\":3,\"568\":3,\"575\":3,\"630\":3,\"680\":3}}],[\"querywrapper<>\",{\"1\":{\"474\":1,\"476\":6,\"477\":1,\"478\":2}}],[\"querywrapper<user>\",{\"1\":{\"474\":1,\"476\":6,\"477\":1,\"478\":2}}],[\"querywrapper\",{\"1\":{\"466\":8,\"471\":11,\"474\":4,\"475\":1,\"476\":19,\"477\":3,\"478\":7,\"655\":9,\"656\":2}}],[\"query=input\",{\"1\":{\"334\":1}}],[\"query\",{\"1\":{\"9\":3,\"334\":2,\"562\":2,\"568\":1,\"575\":1,\"677\":1}}],[\"qual🫙2\",{\"1\":{\"387\":1}}],[\"qualifier注解一起用\",{\"1\":{\"566\":1}}],[\"qualifier注解\",{\"1\":{\"233\":1}}],[\"qualifier\",{\"1\":{\"75\":1,\"233\":2,\"241\":1,\"242\":1,\"566\":5,\"578\":1,\"579\":1}}],[\"quote\",{\"1\":{\"354\":2}}],[\"qos\",{\"1\":{\"59\":2,\"387\":2,\"625\":2}}],[\"通用\",{\"1\":{\"460\":1,\"462\":1,\"468\":1}}],[\"通用模块\",{\"1\":{\"429\":1,\"455\":2,\"456\":1}}],[\"通用工具模块等\",{\"1\":{\"429\":1,\"455\":1}}],[\"通常雨季前的6月至7月初更容易出现高温天气\",{\"1\":{\"651\":1}}],[\"通常为\",{\"1\":{\"623\":1,\"629\":1}}],[\"通常我们将它称为\",{\"1\":{\"547\":1}}],[\"通常使用\",{\"1\":{\"537\":1}}],[\"通常使用事务管理器\",{\"1\":{\"243\":1,\"602\":1}}],[\"通常需要程序员手动编写\",{\"1\":{\"537\":1}}],[\"通常设置为这个resultmap所服务的那条sql语句的id加上\",{\"1\":{\"518\":1}}],[\"通常还是使用和接口方法参数同名\",{\"1\":{\"502\":1}}],[\"通常不会采用$\",{\"1\":{\"498\":1}}],[\"通常配合select\",{\"1\":{\"476\":1}}],[\"通常响应中已有部分数据可用了\",{\"1\":{\"254\":1}}],[\"通常现在可以从响应中获取内容头\",{\"1\":{\"254\":1}}],[\"通常用于注入外部化属性\",{\"1\":{\"234\":1,\"567\":1}}],[\"通常是用户名和密码\",{\"1\":{\"655\":1}}],[\"通常是模块名称\",{\"1\":{\"58\":1}}],[\"通常是域名反写\",{\"1\":{\"58\":1}}],[\"通信的两端都要有socket\",{\"1\":{\"190\":1,\"201\":1}}],[\"通知类型\",{\"1\":{\"102\":1}}],[\"通知所应用的对象\",{\"1\":{\"101\":1}}],[\"通知+切入点\",{\"1\":{\"101\":1}}],[\"通知仅会在切入点方法执行时被应用\",{\"1\":{\"101\":1}}],[\"通知\",{\"1\":{\"101\":1,\"211\":1,\"584\":1}}],[\"通过源码分析\",{\"1\":{\"677\":1}}],[\"通过上述方法\",{\"1\":{\"671\":1}}],[\"通过spring\",{\"1\":{\"671\":1}}],[\"通过减号\",{\"1\":{\"669\":1}}],[\"通过缩进来表示层级\",{\"1\":{\"669\":1}}],[\"通过提供一组默认设置和约定\",{\"1\":{\"665\":1}}],[\"通过提供标准化的解决方案\",{\"1\":{\"545\":1}}],[\"通过根据类路径和其他设置的自动检测\",{\"1\":{\"665\":1}}],[\"通过标题关键字搜索新闻\",{\"1\":{\"646\":1}}],[\"通过初始化两个容器\",{\"1\":{\"619\":1}}],[\"通过编写配置文件\",{\"1\":{\"617\":1}}],[\"通过编写依赖jar包的gav必要属性\",{\"1\":{\"410\":1,\"447\":1}}],[\"通过签名对象获取目标方法的方法名\",{\"1\":{\"592\":1}}],[\"通过proceedingjoinpoint对象获取目标方法的签名对象\",{\"1\":{\"592\":1}}],[\"通过proceedingjoinpoint对象获取外界调用目标方法时传入的实参数组\",{\"1\":{\"592\":1}}],[\"通过joinpoint对象获取外界调用目标方法时传入的实参列表\",{\"1\":{\"589\":1}}],[\"通过joinpoint对象获取目标方法签名对象\",{\"1\":{\"589\":1}}],[\"通过java类来定义bean\",{\"1\":{\"552\":1}}],[\"通过java程序动态生成数据库表\",{\"1\":{\"498\":1}}],[\"通过java命令对class文件进行运行\",{\"1\":{\"106\":1}}],[\"通过javac命令对java文件进行编译\",{\"1\":{\"106\":1}}],[\"通过目标方法签名对象获取方法名\",{\"1\":{\"589\":1}}],[\"通过目标对象来实现核心业务逻辑\",{\"1\":{\"583\":1}}],[\"通过继承被代理的目标类\",{\"1\":{\"587\":1}}],[\"通过继承被代理的目标类实现代理\",{\"1\":{\"211\":1,\"583\":1}}],[\"通过name找不到的话会自动启动通过类型装配\",{\"1\":{\"566\":1}}],[\"通过配置文件\",{\"1\":{\"558\":1}}],[\"通过配置bean标签告诉ioc容器需要创建对象的组件信息\",{\"1\":{\"557\":1}}],[\"通过配置依赖\",{\"1\":{\"387\":1}}],[\"通过使用starter\",{\"1\":{\"665\":1}}],[\"通过使用两个容器\",{\"1\":{\"619\":1}}],[\"通过使用方法\",{\"1\":{\"555\":1}}],[\"通过使用原子操作实现并发安全\",{\"1\":{\"483\":1}}],[\"通过在通知方法形参位置声明proceedingjoinpoint类型的形参\",{\"1\":{\"592\":1}}],[\"通过在bean类上加上相应的注解\",{\"1\":{\"552\":1}}],[\"通过在xml文件中定义bean及其依赖关系\",{\"1\":{\"552\":1}}],[\"通过在父工程中为整个项目维护依赖信息的组合既保证了整个项目使用规范\",{\"1\":{\"418\":1,\"452\":1}}],[\"通过resulttype指定查询返回值类型\",{\"1\":{\"508\":1}}],[\"通过反射在实体类对象中调用这个方法\",{\"1\":{\"503\":1}}],[\"通过将这三个部分组合在一起\",{\"1\":{\"480\":1}}],[\"通过以上几个简单的步骤\",{\"1\":{\"461\":1}}],[\"通过触发父工程的构建\",{\"1\":{\"453\":1}}],[\"通过触发父工程构建命令\",{\"1\":{\"419\":1,\"453\":1}}],[\"通过查看源码我们得知\",{\"1\":{\"564\":1}}],[\"通过查看日志\",{\"1\":{\"496\":1}}],[\"通过查看日志来看内部如何实现的\",{\"1\":{\"9\":1}}],[\"通过查看网站介绍的依赖传递特性\",{\"1\":{\"448\":1}}],[\"通过之前导入经验\",{\"1\":{\"448\":1}}],[\"通过依赖注入或直接实例化mapper接口\",{\"1\":{\"679\":1}}],[\"通过依赖传递的依赖\",{\"1\":{\"448\":1}}],[\"通过依赖元素\",{\"1\":{\"411\":1}}],[\"通过聚合\",{\"1\":{\"419\":4,\"453\":2}}],[\"通过设置坐标的依赖范围\",{\"1\":{\"411\":1}}],[\"通过实现标准的构建生命周期\",{\"1\":{\"390\":1,\"439\":1}}],[\"通过遍历\",{\"1\":{\"370\":1}}],[\"通过一个辅助遍历\",{\"1\":{\"370\":1}}],[\"通过一下几种方案来解决\",{\"1\":{\"75\":1}}],[\"通过索引取值\",{\"1\":{\"334\":1}}],[\"通过该方式指定实际参数时\",{\"1\":{\"325\":1}}],[\"通过该坐标可以唯一定位资源位置\",{\"1\":{\"58\":1}}],[\"通过键找到值\",{\"1\":{\"315\":1}}],[\"通过键而不是索引来读取\",{\"1\":{\"314\":1}}],[\"通过给数据库表字段加别名\",{\"1\":{\"509\":1}}],[\"通过给定的键值对创建\",{\"1\":{\"315\":1}}],[\"通过给父盒子添加flex属性\",{\"1\":{\"255\":1}}],[\"通过映射函数创建d\",{\"1\":{\"315\":1}}],[\"通过dict\",{\"1\":{\"315\":1}}],[\"通过dom元素属性绑定\",{\"1\":{\"41\":1}}],[\"通过ajax可以在浏览器中向服务器发送异步请求\",{\"1\":{\"250\":1}}],[\"通过ajax可以给服务器发送请求\",{\"1\":{\"45\":1}}],[\"通过此处指定引入的bean\",{\"1\":{\"238\":1,\"573\":1}}],[\"通过方法的签名对象获取目标方法的详细信息\",{\"1\":{\"589\":1}}],[\"通过方法参数传递\",{\"1\":{\"238\":1,\"573\":1}}],[\"通过方法对对象的相应属性进行修改\",{\"1\":{\"132\":1}}],[\"通过读取java配置类创建ioc容器对象\",{\"1\":{\"221\":1}}],[\"通过读取java配置类创建\",{\"1\":{\"221\":1,\"552\":1}}],[\"通过读取类路径下的\",{\"1\":{\"221\":2,\"552\":1}}],[\"通过文件系统路径读取\",{\"1\":{\"221\":2,\"552\":1}}],[\"通过代理类调用核心业务类\",{\"1\":{\"211\":1}}],[\"通过对象调用start\",{\"1\":{\"194\":1,\"205\":1}}],[\"通过接口名称\",{\"1\":{\"141\":1}}],[\"通过指定签名算法计算而来\",{\"1\":{\"92\":1}}],[\"通过\",{\"0\":{\"425\":1},\"1\":{\"81\":1,\"328\":1,\"390\":1,\"424\":1,\"439\":1,\"460\":1,\"512\":1,\"538\":1,\"552\":1,\"589\":3,\"649\":1,\"665\":1}}],[\"通过请求url直接传递参数\",{\"1\":{\"68\":1}}],[\"通过命令执行eg\",{\"1\":{\"59\":1}}],[\"通过vue完成表格数据的渲染展示\",{\"1\":{\"43\":1}}],[\"通过v\",{\"1\":{\"43\":1}}],[\"通过html标签中的事件属性进行绑定\",{\"1\":{\"41\":1}}],[\"通过盒子的视角更方便的进行页面布局\",{\"1\":{\"35\":1}}],[\"通过type属性控制输入形式\",{\"1\":{\"34\":1}}],[\"通过connection对象获取\",{\"1\":{\"8\":1}}],[\"选项\",{\"1\":{\"686\":1}}],[\"选用版本\",{\"1\":{\"440\":1}}],[\"选中本地maven软件\",{\"1\":{\"440\":1}}],[\"选中override复选框\",{\"1\":{\"396\":1}}],[\"选中插入的方法\",{\"1\":{\"212\":1}}],[\"选中对应的生命周期\",{\"1\":{\"59\":1}}],[\"选中对应项目的pom\",{\"1\":{\"57\":1}}],[\"选择使用yaml还是\",{\"1\":{\"669\":1}}],[\"选择使用jdk动态代理\",{\"1\":{\"218\":1,\"594\":1}}],[\"选择slf4j输出\",{\"1\":{\"496\":1}}],[\"选择修改\",{\"1\":{\"471\":1}}],[\"选择字段\",{\"1\":{\"471\":1}}],[\"选择本地maven软件\",{\"1\":{\"396\":1}}],[\"选择升序还是降序\",{\"1\":{\"311\":1}}],[\"选择cglib动态代理\",{\"1\":{\"218\":1,\"594\":1}}],[\"选择想要的\",{\"1\":{\"108\":1}}],[\"选择何种方式来配置映射\",{\"1\":{\"82\":1}}],[\"选择引入对应的起步依赖\",{\"1\":{\"80\":1}}],[\"选择右侧maven面板\",{\"1\":{\"57\":1}}],[\"选择maven\",{\"1\":{\"57\":1}}],[\"选择idea中file\",{\"1\":{\"57\":1}}],[\"坐标信息\",{\"1\":{\"57\":1}}],[\"填写信息\",{\"1\":{\"539\":1}}],[\"填写模块名称\",{\"1\":{\"57\":1}}],[\"填充到\",{\"1\":{\"503\":1}}],[\"填充剩余部分\",{\"1\":{\"24\":1}}],[\"地址\",{\"1\":{\"55\":1,\"655\":2}}],[\"地址栏对象\",{\"1\":{\"40\":1}}],[\"仓库名称\",{\"1\":{\"424\":1}}],[\"仓库类型\",{\"1\":{\"424\":1}}],[\"仓库缓存\",{\"1\":{\"412\":1,\"449\":1}}],[\"仓库服务器状态\",{\"1\":{\"412\":1,\"449\":1}}],[\"仓库或缓存被污染或损坏\",{\"1\":{\"412\":1,\"449\":1}}],[\"仓库的本地依赖\",{\"1\":{\"411\":1}}],[\"仓库自动下载和管理依赖\",{\"1\":{\"408\":1,\"447\":1}}],[\"仓库\",{\"1\":{\"55\":1,\"412\":1,\"449\":1}}],[\"避免俗手\",{\"1\":{\"651\":1}}],[\"避免了手动添加大量的依赖项和编写冗长的配置文件的繁琐过程\",{\"1\":{\"665\":1}}],[\"避免了xml文件解析效率低问题\",{\"1\":{\"628\":1}}],[\"避免了重复开发的问题\",{\"1\":{\"545\":1}}],[\"避免了单点故障和性能瓶颈的问题\",{\"1\":{\"480\":1}}],[\"避免了很多对中央仓库的重复下载\",{\"1\":{\"421\":1}}],[\"避免user对象中没有被查询到的列值为null\",{\"1\":{\"476\":1}}],[\"避免重复定义\",{\"1\":{\"419\":1}}],[\"避免出现构建依赖混乱导致构建失败的情况\",{\"1\":{\"419\":1,\"453\":1}}],[\"避免出现版本冲突和依赖缺失等问题\",{\"1\":{\"408\":1,\"447\":1}}],[\"避免版本冲突和转换错误等\",{\"1\":{\"390\":1}}],[\"避免版本冲突问题\",{\"1\":{\"55\":1}}],[\"避免程序报错\",{\"1\":{\"334\":1}}],[\"避免我们直接进行事务操作\",{\"1\":{\"243\":1,\"603\":1}}],[\"避免类的单继承的局限性\",{\"1\":{\"195\":1,\"206\":1}}],[\"避免数据库连接遗漏\",{\"1\":{\"10\":1}}],[\"打印日志的类\",{\"1\":{\"625\":1}}],[\"打印数据\",{\"1\":{\"351\":1}}],[\"打印姓名工号方法\",{\"1\":{\"334\":1}}],[\"打印信息\",{\"1\":{\"334\":1}}],[\"打印出来的东西少了\",{\"1\":{\"353\":1}}],[\"打印出来this和person地址相同\",{\"1\":{\"128\":1}}],[\"打印出第二行\",{\"1\":{\"334\":1}}],[\"打印出第一行\",{\"1\":{\"334\":1}}],[\"打印出\",{\"1\":{\"334\":1}}],[\"打印出的是元组\",{\"1\":{\"315\":1}}],[\"打印出的结果是103nihao\",{\"1\":{\"114\":1}}],[\"打印出地址\",{\"1\":{\"189\":1,\"200\":1}}],[\"打印的是行数\",{\"1\":{\"124\":1}}],[\"打印空格\",{\"1\":{\"121\":1}}],[\"打印一行的空格\",{\"1\":{\"121\":1}}],[\"打印查询结果\",{\"1\":{\"11\":1}}],[\"打开浏览器输入\",{\"1\":{\"675\":1}}],[\"打开官网\",{\"1\":{\"636\":1}}],[\"打开pycharm编辑器在终端输入pip\",{\"1\":{\"334\":1}}],[\"打开键盘\",{\"1\":{\"147\":1}}],[\"打开鼠标\",{\"1\":{\"147\":1}}],[\"打开设备\",{\"1\":{\"147\":2}}],[\"打开mybatis的日志\",{\"1\":{\"80\":1}}],[\"打开idea配置文件\",{\"1\":{\"440\":1}}],[\"打开idea\",{\"1\":{\"57\":1}}],[\"打包运行\",{\"1\":{\"447\":1}}],[\"打包打包\",{\"1\":{\"447\":1}}],[\"打包插件版本过低\",{\"1\":{\"413\":1}}],[\"打包方式默认就是jar\",{\"1\":{\"432\":1,\"456\":1}}],[\"打包方式\",{\"1\":{\"409\":1,\"413\":1,\"447\":1}}],[\"打包是将工程打成jar或war文件\",{\"1\":{\"405\":1}}],[\"打包后上传到maven本地仓库\",{\"1\":{\"404\":1,\"450\":1}}],[\"打包项目\",{\"1\":{\"404\":1,\"450\":1}}],[\"打包和部署等多个步骤\",{\"1\":{\"403\":1,\"413\":1,\"450\":1}}],[\"打包和发布项目\",{\"1\":{\"390\":1,\"438\":1}}],[\"打包以后\",{\"1\":{\"398\":1,\"442\":1}}],[\"打包以后是\",{\"1\":{\"398\":1,\"442\":1}}],[\"打包\",{\"1\":{\"59\":2,\"390\":1,\"405\":1,\"439\":1,\"450\":3}}],[\"打包部署\",{\"0\":{\"53\":1},\"1\":{\"450\":1}}],[\"动词\",{\"1\":{\"583\":1}}],[\"动作\",{\"1\":{\"146\":1}}],[\"动作监听鼠标左键点击\",{\"1\":{\"26\":2}}],[\"动作监听\",{\"0\":{\"26\":1},\"1\":{\"25\":1,\"27\":1}}],[\"动态事务管理器\",{\"1\":{\"613\":1}}],[\"动态插入\",{\"1\":{\"582\":1}}],[\"动态的不是值\",{\"1\":{\"498\":1}}],[\"动态语句需求和简介\",{\"0\":{\"524\":1},\"1\":{\"489\":1}}],[\"动态代理|静态代理\",{\"1\":{\"585\":1}}],[\"动态代理技术\",{\"1\":{\"220\":1,\"493\":1,\"583\":1}}],[\"动态代理技术分类\",{\"1\":{\"211\":1,\"583\":1}}],[\"动态代理\",{\"1\":{\"211\":1,\"583\":5,\"584\":1,\"587\":1}}],[\"动态代理是面向切面编程最主流的实现\",{\"1\":{\"99\":1}}],[\"动态\",{\"1\":{\"169\":1,\"524\":1,\"671\":1}}],[\"动态初始化\",{\"1\":{\"124\":1}}],[\"动态更新员工信息\",{\"1\":{\"84\":1}}],[\"动态视图组件\",{\"1\":{\"52\":1}}],[\"路径相同\",{\"1\":{\"416\":1,\"448\":1}}],[\"路径\",{\"1\":{\"353\":1}}],[\"路径参数\",{\"1\":{\"68\":2}}],[\"路径导航\",{\"1\":{\"1\":1}}],[\"路由器类\",{\"1\":{\"52\":1}}],[\"与属性文件类似\",{\"1\":{\"671\":1}}],[\"与此同时\",{\"1\":{\"651\":1}}],[\"与之关系不大的部分是横切关注点\",{\"1\":{\"584\":1}}],[\"与业务逻辑分离\",{\"1\":{\"584\":1}}],[\"与xml进行bean\",{\"1\":{\"566\":1}}],[\"与单链表相同\",{\"1\":{\"371\":1}}],[\"与单链表非常类似\",{\"1\":{\"371\":1}}],[\"与单链表类似\",{\"1\":{\"371\":1}}],[\"与find\",{\"1\":{\"317\":1}}],[\"与hashcode\",{\"1\":{\"174\":1,\"175\":1}}],[\"与\",{\"1\":{\"118\":2,\"484\":1,\"669\":1}}],[\"与或非\",{\"1\":{\"116\":1}}],[\"与组件之间的对应关系\",{\"1\":{\"52\":1}}],[\"与服务器交换并更新部分网页的技术\",{\"1\":{\"45\":1}}],[\"号\",{\"1\":{\"52\":1}}],[\"分成两个配置类独立配置\",{\"1\":{\"628\":1}}],[\"分离关注点\",{\"1\":{\"619\":1}}],[\"分散在各个业务功能方法中\",{\"1\":{\"582\":1}}],[\"分隔有可能的多个值\",{\"1\":{\"527\":4}}],[\"分隔符\",{\"1\":{\"85\":1}}],[\"分布式架构\",{\"1\":{\"544\":2}}],[\"分布式锁等场景\",{\"1\":{\"480\":1}}],[\"分布式数据库\",{\"1\":{\"480\":1}}],[\"分配\",{\"1\":{\"480\":1}}],[\"分配一个带有指定目标新的线程对象并指定名字\",{\"1\":{\"196\":1,\"207\":1}}],[\"分配一个指定名字的新的线程对象\",{\"1\":{\"196\":1,\"207\":1}}],[\"分配一个新的线程对象\",{\"1\":{\"196\":1,\"207\":1}}],[\"分析\",{\"1\":{\"370\":1,\"415\":1}}],[\"分析出front是指向队列头的前一个位置\",{\"1\":{\"367\":1}}],[\"分析想提取信息特点\",{\"1\":{\"334\":1}}],[\"分别指定两个容器加载即可\",{\"1\":{\"622\":1}}],[\"分别使用\",{\"1\":{\"515\":2}}],[\"分别为\",{\"1\":{\"448\":1}}],[\"分别匹配n和s\",{\"1\":{\"345\":1}}],[\"分别按以下两种方式对集合中的元素进行排序\",{\"1\":{\"176\":1}}],[\"分\",{\"1\":{\"334\":1}}],[\"分割参数列表和\",{\"1\":{\"478\":1}}],[\"分割字符串\",{\"1\":{\"317\":1}}],[\"分割\",{\"1\":{\"231\":1,\"564\":1,\"571\":1}}],[\"分时调度\",{\"1\":{\"192\":1,\"203\":1}}],[\"分类\",{\"1\":{\"132\":1,\"148\":1}}],[\"分页数据封装\",{\"1\":{\"656\":1}}],[\"分页数据查询\",{\"1\":{\"641\":1}}],[\"分页参数\",{\"1\":{\"634\":1,\"656\":1}}],[\"分页插件配置\",{\"1\":{\"628\":1}}],[\"分页插件会自动检测当前的数据库链接\",{\"1\":{\"628\":2}}],[\"分页插件\",{\"1\":{\"540\":1}}],[\"分页插件支持多种数据库\",{\"1\":{\"460\":1}}],[\"分页方式\",{\"1\":{\"534\":1}}],[\"分页\",{\"1\":{\"468\":1,\"652\":1}}],[\"分页查询头条详情\",{\"1\":{\"656\":1}}],[\"分页查询首页头条信息\",{\"1\":{\"656\":1}}],[\"分页查询结果\",{\"1\":{\"641\":1}}],[\"分页查询\",{\"1\":{\"641\":1,\"656\":1}}],[\"分页查询条件\",{\"1\":{\"466\":1}}],[\"分页查询实现\",{\"0\":{\"472\":1},\"1\":{\"459\":1}}],[\"分页查询依赖pagehelper\",{\"1\":{\"86\":1}}],[\"分页组件\",{\"1\":{\"51\":1}}],[\"分层解耦\",{\"0\":{\"70\":1,\"72\":1}}],[\"分为三个不同的部分\",{\"1\":{\"40\":1}}],[\"分为六种情况\",{\"1\":{\"17\":1}}],[\"例如内存大小\",{\"1\":{\"686\":1}}],[\"例如utf\",{\"1\":{\"674\":1}}],[\"例如控制器\",{\"1\":{\"665\":1}}],[\"例如maven的pom\",{\"1\":{\"665\":1}}],[\"例如spring\",{\"1\":{\"665\":1}}],[\"例如service方法\",{\"1\":{\"501\":1}}],[\"例如数据源\",{\"1\":{\"628\":1}}],[\"例如数据库连接信息\",{\"1\":{\"671\":1}}],[\"例如数据库连接\",{\"1\":{\"538\":1}}],[\"例如日志功能\",{\"1\":{\"584\":1}}],[\"例如web\",{\"1\":{\"552\":1}}],[\"例如拼接时要确保不能忘记添加必要的空格\",{\"1\":{\"524\":1}}],[\"例如一些复杂的sql\",{\"1\":{\"486\":1}}],[\"例如我们项目需要第三方库\",{\"1\":{\"439\":1}}],[\"例如我们项目需要第三方依赖如\",{\"1\":{\"390\":1}}],[\"例如订单的创建\",{\"1\":{\"429\":1,\"455\":1}}],[\"例如用户信息的管理\",{\"1\":{\"429\":1,\"455\":1}}],[\"例如管理\",{\"1\":{\"230\":1,\"561\":1}}],[\"例如gzip\",{\"1\":{\"63\":1}}],[\"例如\",{\"1\":{\"50\":1,\"58\":2,\"148\":1,\"152\":1,\"230\":3,\"231\":2,\"238\":3,\"375\":1,\"398\":2,\"406\":1,\"411\":4,\"412\":1,\"413\":1,\"442\":2,\"449\":1,\"478\":1,\"480\":1,\"508\":1,\"512\":1,\"517\":2,\"534\":1,\"547\":2,\"555\":1,\"557\":1,\"561\":3,\"562\":1,\"564\":3,\"571\":1,\"573\":3,\"593\":1,\"628\":1,\"669\":1,\"671\":3,\"675\":1,\"679\":1,\"686\":4}}],[\"和application无重叠属性\",{\"1\":{\"671\":1}}],[\"和model\",{\"1\":{\"651\":1}}],[\"和基于注解的\",{\"1\":{\"596\":1}}],[\"和库来实现和提供对应的功能\",{\"1\":{\"566\":1}}],[\"和注解只是告诉框架中的\",{\"1\":{\"564\":1}}],[\"和测试\",{\"1\":{\"411\":1}}],[\"和安装\",{\"1\":{\"405\":1}}],[\"和链式存储结构\",{\"1\":{\"365\":1}}],[\"和的意思\",{\"1\":{\"345\":1}}],[\"和多态\",{\"1\":{\"334\":1}}],[\"和decode\",{\"1\":{\"317\":1}}],[\"和不可变集合\",{\"1\":{\"316\":1}}],[\"和z\",{\"1\":{\"265\":1}}],[\"和属性信息\",{\"1\":{\"240\":1,\"577\":1}}],[\"和以前一样\",{\"1\":{\"237\":1}}],[\"和所需类型匹配的\",{\"1\":{\"233\":1,\"566\":1}}],[\"和\",{\"0\":{\"547\":1},\"1\":{\"230\":1,\"237\":1,\"239\":1,\"244\":1,\"256\":1,\"404\":1,\"431\":1,\"440\":1,\"450\":1,\"456\":1,\"485\":1,\"492\":2,\"496\":1,\"515\":8,\"519\":1,\"534\":2,\"542\":1,\"547\":1,\"549\":1,\"561\":1,\"564\":1,\"573\":1,\"574\":1,\"606\":1,\"636\":2,\"668\":1,\"669\":1}}],[\"和目标目录\",{\"1\":{\"185\":1}}],[\"和equals\",{\"1\":{\"177\":1}}],[\"和hashcode\",{\"1\":{\"172\":1}}],[\"和字符串string都是采用unicode编码\",{\"1\":{\"114\":1}}],[\"和产品经理准备的基于vue2\",{\"1\":{\"50\":1}}],[\"和return\",{\"1\":{\"17\":1}}],[\"设定场景\",{\"1\":{\"566\":1}}],[\"设计以及产品力上\",{\"1\":{\"651\":1}}],[\"设计模式\",{\"1\":{\"545\":1}}],[\"设计师\",{\"1\":{\"50\":1}}],[\"设置jvm的初始堆内存大小\",{\"1\":{\"686\":1}}],[\"设置jvm的最大堆内存大小\",{\"1\":{\"686\":1}}],[\"设置jvm参数\",{\"1\":{\"686\":1}}],[\"设置系统属性\",{\"1\":{\"686\":1}}],[\"设置应用程序的上下文路径\",{\"1\":{\"674\":1}}],[\"设置合理的默认值\",{\"1\":{\"662\":1}}],[\"设置版本\",{\"1\":{\"656\":1}}],[\"设置表的前缀\",{\"1\":{\"652\":1}}],[\"设置mapper接口和xml文件所在的共同包\",{\"1\":{\"628\":3}}],[\"设置配置文件\",{\"1\":{\"628\":2}}],[\"设置配置配置文件\",{\"1\":{\"226\":1,\"559\":1}}],[\"设置连接池\",{\"1\":{\"628\":3}}],[\"设置全局日志级别\",{\"1\":{\"625\":1}}],[\"设置不回滚的异常\",{\"1\":{\"610\":1}}],[\"设置回滚异常\",{\"1\":{\"610\":1}}],[\"设置超时时间\",{\"1\":{\"609\":1}}],[\"设置方式\",{\"1\":{\"608\":1}}],[\"设置代理对象实现目标对象方法的过程\",{\"1\":{\"583\":1}}],[\"设置一个对象的复杂过程\",{\"1\":{\"561\":1}}],[\"设置一个哨兵\",{\"1\":{\"126\":1}}],[\"设置生成键值在表中的列名\",{\"1\":{\"515\":1}}],[\"设置\",{\"1\":{\"496\":1}}],[\"设置分页参数\",{\"1\":{\"472\":1,\"641\":1}}],[\"设置的条件\",{\"1\":{\"471\":1}}],[\"设置新的本地仓库地址\",{\"1\":{\"425\":1}}],[\"设置包含的资源类型\",{\"1\":{\"413\":1}}],[\"设置资源所在目录\",{\"1\":{\"413\":1}}],[\"设置要打包的资源位置\",{\"1\":{\"413\":1}}],[\"设置web资源路径和web\",{\"1\":{\"400\":1}}],[\"设置子项元素高度平分父元素高度\",{\"1\":{\"261\":1}}],[\"设置子项在侧轴上的排列方式并且智能用于子项出现换行的情况\",{\"1\":{\"261\":1}}],[\"设置子元素是否换行\",{\"1\":{\"256\":1,\"259\":1}}],[\"设置侧轴上子元素的排列方式\",{\"0\":{\"261\":1}}],[\"设置侧轴上的子元素排列方式\",{\"0\":{\"260\":1},\"1\":{\"256\":1}}],[\"设置侧轴上的子元素的排列方式\",{\"1\":{\"256\":1}}],[\"设置主轴上的子元素排列方式\",{\"1\":{\"256\":1}}],[\"设置主轴方向\",{\"1\":{\"256\":1}}],[\"设置result的文本\",{\"1\":{\"253\":1}}],[\"设置请求方法和url\",{\"1\":{\"253\":1}}],[\"设置允许跨域\",{\"1\":{\"252\":1}}],[\"设置响应体\",{\"1\":{\"252\":1}}],[\"设置响应头\",{\"1\":{\"252\":1}}],[\"设置响应数据\",{\"1\":{\"67\":1}}],[\"设置事务的隔离级别\",{\"1\":{\"248\":1,\"611\":1,\"612\":1}}],[\"设置timeout\",{\"1\":{\"246\":1}}],[\"设置为只读模式\",{\"1\":{\"245\":1}}],[\"设置线程的优先级\",{\"1\":{\"196\":1,\"207\":1}}],[\"设置线程名\",{\"1\":{\"196\":1,\"207\":1}}],[\"设置指定索引位置的元素为ele\",{\"1\":{\"171\":1}}],[\"设置有效期为1h\",{\"1\":{\"92\":1}}],[\"设置cookie\",{\"1\":{\"90\":1}}],[\"设置优先级\",{\"1\":{\"75\":1}}],[\"设置其作用范围\",{\"1\":{\"59\":1}}],[\"设置idea使用本地安装的maven\",{\"1\":{\"57\":1}}],[\"设置后会跳转到指设置的url\",{\"1\":{\"40\":1}}],[\"设置或返回完整的url\",{\"1\":{\"40\":1}}],[\"设置或返回数组中元素的数量\",{\"1\":{\"40\":1}}],[\"设置文本框大小为6个字符\",{\"1\":{\"29\":1}}],[\"设置页面居中\",{\"1\":{\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"设置页面置顶\",{\"1\":{\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"设置页面剧中\",{\"1\":{\"21\":1}}],[\"设置对话框不可调大小\",{\"1\":{\"23\":1}}],[\"设置x点击退出\",{\"1\":{\"23\":3}}],[\"设置窗口初始位置左上角距离\",{\"1\":{\"23\":2}}],[\"设置窗口最小可以调为多少\",{\"1\":{\"23\":3}}],[\"设置窗口不可拖拽\",{\"1\":{\"21\":1}}],[\"设置窗口不可调整\",{\"1\":{\"21\":1,\"23\":2}}],[\"设置背景颜色\",{\"1\":{\"21\":1}}],[\"设置宽高\",{\"1\":{\"21\":1}}],[\"设置参数值\",{\"1\":{\"8\":1}}],[\"设置写作时间\",{\"1\":{\"0\":1}}],[\"设置作者\",{\"1\":{\"0\":1}}],[\"运动杯\",{\"1\":{\"651\":1}}],[\"运算的标准接口\",{\"1\":{\"582\":1}}],[\"运算符\",{\"0\":{\"115\":1},\"1\":{\"38\":2}}],[\"运行检查等\",{\"1\":{\"662\":1}}],[\"运行和测试\",{\"1\":{\"493\":1}}],[\"运行效率\",{\"1\":{\"492\":1}}],[\"运行阶段才需要实现了\",{\"1\":{\"411\":1}}],[\"运行过程都是必须的\",{\"1\":{\"411\":1}}],[\"运行到消亡的过程\",{\"1\":{\"192\":1,\"203\":1}}],[\"运行中的网易云音乐播放器\",{\"1\":{\"192\":1,\"203\":1}}],[\"运行时依赖范围\",{\"1\":{\"411\":1}}],[\"运行时异常\",{\"1\":{\"152\":1}}],[\"运行时所需要的核心类库java虚拟机\",{\"1\":{\"106\":1}}],[\"运行的时候运行的是右边的方法\",{\"1\":{\"145\":1}}],[\"运行还看左边\",{\"1\":{\"145\":1}}],[\"运行看右边\",{\"1\":{\"145\":2}}],[\"运行环境\",{\"1\":{\"106\":1,\"411\":1}}],[\"运行原始方法\",{\"1\":{\"100\":1}}],[\"运行自带的主类在浏览器访问\",{\"1\":{\"61\":1}}],[\"运行测试\",{\"1\":{\"61\":1,\"562\":1,\"568\":1,\"575\":1,\"638\":1}}],[\"运行\",{\"1\":{\"49\":1,\"59\":1,\"196\":1,\"207\":1,\"411\":1}}],[\"代表配置类\",{\"1\":{\"627\":1}}],[\"代表如何处理调用的事务\",{\"1\":{\"612\":1}}],[\"代表浏览器和web服务器之间的会话\",{\"1\":{\"493\":1}}],[\"代表java程序和数据库之间的会话\",{\"1\":{\"493\":2}}],[\"代表java的web工程\",{\"1\":{\"398\":1,\"442\":1}}],[\"代表成功\",{\"1\":{\"444\":1}}],[\"代表不会打包\",{\"1\":{\"398\":1,\"442\":1}}],[\"代表普通的java工程\",{\"1\":{\"398\":1,\"442\":1}}],[\"代表动态传入的参数\",{\"1\":{\"220\":1,\"493\":1,\"630\":1}}],[\"代号\",{\"1\":{\"269\":1}}],[\"代码实现\",{\"1\":{\"655\":3,\"656\":3,\"657\":5}}],[\"代码更加简洁\",{\"1\":{\"617\":1}}],[\"代码更少\",{\"1\":{\"16\":1}}],[\"代码缺陷\",{\"1\":{\"582\":1}}],[\"代码问题分析\",{\"1\":{\"582\":1}}],[\"代码来配置\",{\"1\":{\"570\":1}}],[\"代码来完成的\",{\"1\":{\"564\":1}}],[\"代码如何执行\",{\"1\":{\"564\":1}}],[\"代码结构乱\",{\"1\":{\"562\":1}}],[\"代码形式表现\",{\"1\":{\"552\":1}}],[\"代码片段和设计模式都得到了验证\",{\"1\":{\"545\":1}}],[\"代码进行对比\",{\"1\":{\"493\":1,\"515\":1}}],[\"代码冗长\",{\"1\":{\"492\":1}}],[\"代码以及设置参数和获取结果集的工作\",{\"1\":{\"491\":1}}],[\"代码于2013年11月迁移到github\",{\"1\":{\"491\":1}}],[\"代码\",{\"0\":{\"366\":1,\"367\":1},\"1\":{\"347\":2,\"493\":1,\"515\":3}}],[\"代码就没有得到复用\",{\"1\":{\"243\":1,\"602\":1}}],[\"代码复用性不高\",{\"1\":{\"243\":1,\"602\":1}}],[\"代码当中体现多态性\",{\"1\":{\"145\":1}}],[\"代码块如果有修饰的话\",{\"1\":{\"132\":1}}],[\"代码块\",{\"0\":{\"132\":1},\"1\":{\"130\":2,\"131\":1,\"478\":1}}],[\"代理技术\",{\"1\":{\"585\":1}}],[\"代理方式可以解决附加功能代码干扰核心代码和不方便统一维护的问题\",{\"1\":{\"583\":1}}],[\"代理总结\",{\"1\":{\"583\":1}}],[\"代理对象需要实现的方法\",{\"1\":{\"583\":1}}],[\"代理对象\",{\"1\":{\"583\":1}}],[\"代理对象和目标对象有相同的接口\",{\"1\":{\"211\":1,\"583\":1}}],[\"代理工程\",{\"1\":{\"583\":1}}],[\"代理在开发中实现的方式具体有两种\",{\"1\":{\"583\":1}}],[\"代理类的创建\",{\"1\":{\"561\":1}}],[\"代理模式\",{\"1\":{\"195\":1,\"206\":1,\"211\":1,\"583\":1}}],[\"代理\",{\"1\":{\"49\":1,\"211\":1,\"583\":1,\"584\":1}}],[\"规则要求java实体类属性名命名方式\",{\"1\":{\"509\":1}}],[\"规则要求数据库表字段命名方式\",{\"1\":{\"509\":1}}],[\"规范\",{\"1\":{\"82\":1,\"545\":1}}],[\"规范化\",{\"1\":{\"47\":1}}],[\"规定了浏览器和服务器之间数据传输的规则\",{\"1\":{\"62\":1}}],[\"规定用于发送表单数据的方式\",{\"1\":{\"34\":1}}],[\"规定当提交表单时向何处发送表单数据\",{\"1\":{\"34\":1}}],[\"规定单元之间的空间\",{\"1\":{\"34\":1}}],[\"规定表格的宽度\",{\"1\":{\"34\":1}}],[\"规定表格边框的宽度\",{\"1\":{\"34\":1}}],[\"测试超时效果\",{\"1\":{\"609\":1}}],[\"测试事务效果\",{\"1\":{\"607\":1}}],[\"测试效果\",{\"1\":{\"588\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1}}],[\"测试创建ioc容器\",{\"1\":{\"571\":2}}],[\"测试读取factorybean和factorybean\",{\"1\":{\"561\":1}}],[\"测试全部更新或者删除\",{\"1\":{\"485\":1}}],[\"测试查询数据\",{\"1\":{\"481\":1}}],[\"测试和使用\",{\"1\":{\"461\":1}}],[\"测试和发布等任务\",{\"1\":{\"401\":1,\"445\":1}}],[\"测试是否配置成功\",{\"1\":{\"440\":1}}],[\"测试阶段而言是需要的\",{\"1\":{\"411\":1}}],[\"测试依赖范围\",{\"1\":{\"411\":1}}],[\"测试环境搭建\",{\"1\":{\"606\":1}}],[\"测试环境\",{\"1\":{\"411\":1,\"461\":1}}],[\"测试资源目录\",{\"1\":{\"401\":1,\"445\":1}}],[\"测试main方法\",{\"0\":{\"368\":1}}],[\"测试的时候总是报出空指针异常\",{\"1\":{\"242\":1}}],[\"测试类型\",{\"1\":{\"312\":1}}],[\"测试类\",{\"1\":{\"220\":2,\"493\":1}}],[\"测试200\",{\"1\":{\"188\":1}}],[\"测试175\",{\"1\":{\"188\":1}}],[\"测试179\",{\"1\":{\"188\":1}}],[\"测试180\",{\"1\":{\"188\":1}}],[\"测试\",{\"1\":{\"59\":1,\"247\":3,\"248\":1,\"390\":2,\"411\":1,\"438\":1,\"439\":1,\"450\":1,\"472\":1,\"594\":1,\"596\":1,\"598\":9,\"610\":3,\"611\":1,\"612\":2,\"671\":3}}],[\"测试程序\",{\"1\":{\"59\":1}}],[\"测试程序有效\",{\"1\":{\"59\":1}}],[\"测试人员提供更优雅的接口管理服务\",{\"1\":{\"46\":1}}],[\"测试代码\",{\"0\":{\"12\":1},\"1\":{\"583\":1}}],[\"步\",{\"1\":{\"421\":2}}],[\"步长可省略\",{\"1\":{\"333\":1}}],[\"步长\",{\"1\":{\"306\":1,\"333\":1}}],[\"步骤1\",{\"1\":{\"484\":1}}],[\"步骤\",{\"1\":{\"45\":1,\"93\":1,\"195\":1,\"206\":1}}],[\"步数\",{\"1\":{\"28\":1}}],[\"该工具广受欢迎\",{\"1\":{\"651\":1}}],[\"该jsr包含了一些支持注解\",{\"1\":{\"566\":1}}],[\"该jsr主要为java应用程序定义了一个依赖注入的标准\",{\"1\":{\"566\":1}}],[\"该jsr主要定义了一些用于进行对象管理的注解\",{\"1\":{\"566\":1}}],[\"该jsr定义了一些可以用注解标记的注解处理器\",{\"1\":{\"566\":1}}],[\"该方式从spring框架的第一版开始提供支持\",{\"1\":{\"552\":1}}],[\"该方法在执行\",{\"1\":{\"534\":1}}],[\"该方法中必须包含一个self参数\",{\"1\":{\"327\":1}}],[\"该方法用于检索是否包含指定的子字符串\",{\"1\":{\"317\":1}}],[\"该方法必须是static方法\",{\"1\":{\"222\":1,\"557\":1}}],[\"该方法可使将指定集合包装成线程同步的集合\",{\"1\":{\"180\":1}}],[\"该表包含字段\",{\"1\":{\"514\":1}}],[\"该用法的思路如下图所示\",{\"1\":{\"493\":1}}],[\"该平台包括用户服务\",{\"1\":{\"429\":1,\"455\":1}}],[\"该依赖范围只能与\",{\"1\":{\"411\":1}}],[\"该迭代对象中的所有元素\",{\"1\":{\"317\":1}}],[\"该属性是控制子项在侧轴\",{\"1\":{\"260\":1}}],[\"该注解通常作用在控制层\",{\"1\":{\"231\":1,\"564\":1}}],[\"该注解通常作用在业务层\",{\"1\":{\"231\":1,\"564\":1}}],[\"该注解用于将数据访问层\",{\"1\":{\"231\":1,\"564\":1}}],[\"该注解用于描述\",{\"1\":{\"231\":1,\"564\":1}}],[\"该返回值会被存储到ioc容器\",{\"1\":{\"229\":1,\"561\":1}}],[\"该类必须实现如下两个接口之一\",{\"1\":{\"187\":1}}],[\"该类包含\",{\"1\":{\"176\":1}}],[\"该接口\",{\"1\":{\"139\":1}}],[\"该接口可以按要求包含众多的支持包访问权限的类\",{\"1\":{\"126\":1}}],[\"该地址返回一个json数据\",{\"1\":{\"45\":1}}],[\"该变量的默认值是undefined\",{\"1\":{\"38\":1}}],[\"销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时\",{\"1\":{\"677\":1}}],[\"销毁操作\",{\"1\":{\"552\":1}}],[\"销毁时进行调用\",{\"1\":{\"227\":1}}],[\"销毁后\",{\"1\":{\"44\":1}}],[\"销毁前\",{\"1\":{\"44\":1}}],[\"钩子\",{\"1\":{\"44\":1}}],[\"指标\",{\"1\":{\"662\":1}}],[\"指那些被拦截到的点\",{\"1\":{\"584\":1}}],[\"指做代理这个动作\",{\"1\":{\"583\":1}}],[\"指示将项目打包为什么类型的文件\",{\"1\":{\"398\":1,\"442\":1}}],[\"指示客户端应如何缓存\",{\"1\":{\"64\":1}}],[\"指针\",{\"1\":{\"370\":1}}],[\"指向前一个节点\",{\"1\":{\"371\":1}}],[\"指向下一个节点\",{\"1\":{\"370\":2,\"371\":1}}],[\"指向队列尾的数据\",{\"1\":{\"367\":1}}],[\"指向队列尾\",{\"1\":{\"367\":1}}],[\"指向队列头部\",{\"1\":{\"367\":1}}],[\"指令集里没有一条关闭计算机的指令\",{\"1\":{\"338\":1}}],[\"指把通知应用到目标上\",{\"1\":{\"211\":1,\"584\":1}}],[\"指两个或多个事件在同一时间段内发生\",{\"1\":{\"192\":1,\"203\":1}}],[\"指两个或多个事件咋同一时刻发生\",{\"1\":{\"192\":1,\"203\":1}}],[\"指在同一时刻\",{\"1\":{\"192\":1,\"203\":1}}],[\"指明是按照customer的哪个属性排序的\",{\"1\":{\"175\":1}}],[\"指明按照自定义类的哪个属性进行排序\",{\"1\":{\"174\":1}}],[\"指的是元素在底层存储的位置是无序的\",{\"1\":{\"172\":1}}],[\"指的就是当一个事务方法被另一个事务方法调用时\",{\"1\":{\"98\":1}}],[\"指哪些重复的逻辑\",{\"1\":{\"101\":1}}],[\"指当前项目运行所需要的jar包\",{\"1\":{\"59\":1}}],[\"指一个对象从创建到销毁的整个过程\",{\"1\":{\"44\":1}}],[\"指定spring\",{\"1\":{\"686\":1}}],[\"指定应用程序的http服务器端口号\",{\"1\":{\"674\":1}}],[\"指定连接池对象和外部配置文件即可\",{\"1\":{\"628\":3}}],[\"指定具体的事务管理器\",{\"1\":{\"627\":1}}],[\"指定打印日志的appender\",{\"1\":{\"625\":1}}],[\"指定打包文件\",{\"1\":{\"413\":1}}],[\"指定打包命名\",{\"1\":{\"413\":1}}],[\"指定任何一个日志级别都只打印当前级别和后面级别的日志\",{\"1\":{\"625\":1}}],[\"指定日志输出的位置\",{\"1\":{\"625\":1}}],[\"指定dispatcherservlet处理路径\",{\"1\":{\"623\":1,\"629\":1}}],[\"指定web容器对应的配置类\",{\"1\":{\"623\":1,\"629\":1}}],[\"指定width\",{\"1\":{\"36\":1}}],[\"指定root容器对应的配置类\",{\"1\":{\"623\":1,\"629\":1}}],[\"指定方法名称\",{\"1\":{\"590\":1}}],[\"指定类名称\",{\"1\":{\"590\":1}}],[\"指定包的地址\",{\"1\":{\"590\":1}}],[\"指定包含文件格式和排除文件\",{\"1\":{\"413\":1}}],[\"指定包含的sql片段\",{\"1\":{\"86\":1}}],[\"指定切入点表达式\",{\"1\":{\"588\":1,\"591\":1}}],[\"指定生效范围即可\",{\"1\":{\"585\":1}}],[\"指定名称\",{\"1\":{\"573\":1}}],[\"指定beanname\",{\"1\":{\"566\":1}}],[\"指定bean的id\",{\"1\":{\"233\":1}}],[\"指定bean的名字\",{\"1\":{\"75\":1}}],[\"指定整个循环把字符串拼好后\",{\"1\":{\"529\":2}}],[\"指定当foreach标签的标签体重复拼接字符串时\",{\"1\":{\"529\":1}}],[\"指定当前容器中工厂bean\",{\"1\":{\"223\":1,\"557\":1}}],[\"指定能够唯一识别对象的属性\",{\"1\":{\"515\":1}}],[\"指定封装查询结果的java实体类的全类名\",{\"1\":{\"509\":1,\"513\":1}}],[\"指定查询的输出数据类型即可\",{\"1\":{\"507\":1}}],[\"指定逻辑删除字段和属性值\",{\"1\":{\"481\":1}}],[\"指定主键类型\",{\"1\":{\"480\":1}}],[\"指定列和结果\",{\"1\":{\"477\":1,\"479\":1}}],[\"指定列映射查询\",{\"1\":{\"476\":1}}],[\"指定要动态去掉的后缀\",{\"1\":{\"527\":1}}],[\"指定要动态去掉的前缀\",{\"1\":{\"527\":1}}],[\"指定要动态添加的后缀\",{\"1\":{\"527\":1}}],[\"指定要动态添加的前缀\",{\"1\":{\"527\":1}}],[\"指定要排除的依赖的坐标\",{\"1\":{\"416\":1}}],[\"指定要打包资源的文件夹要把哪些静态资源打包到\",{\"1\":{\"413\":1}}],[\"指定要添加的服务名称\",{\"1\":{\"276\":1}}],[\"指定要添加服务的区域名称\",{\"1\":{\"276\":1}}],[\"指定构建打包文件的名称\",{\"1\":{\"413\":1}}],[\"指定构造参数和对应的值\",{\"1\":{\"224\":1,\"558\":1}}],[\"指定编码格式为utf\",{\"1\":{\"356\":1}}],[\"指定默认的形式参数必须在所有参数的最后\",{\"1\":{\"325\":1}}],[\"指定该规则永久生效\",{\"1\":{\"276\":1}}],[\"指定异常回滚\",{\"1\":{\"247\":1}}],[\"指定哪些异常类才会回滚\",{\"1\":{\"610\":1}}],[\"指定哪些异常不会回滚\",{\"1\":{\"247\":3,\"248\":1,\"610\":4,\"611\":1,\"612\":1}}],[\"指定哪些异常才会回滚\",{\"1\":{\"247\":3,\"248\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"指定配置文件\",{\"1\":{\"555\":1}}],[\"指定配置文件xml\",{\"1\":{\"242\":1,\"580\":1}}],[\"指定配置类\",{\"1\":{\"242\":1,\"580\":1}}],[\"指定\",{\"1\":{\"237\":1,\"496\":1,\"521\":1,\"573\":1}}],[\"指定销毁方法\",{\"1\":{\"237\":1,\"573\":1}}],[\"指定初始化方法\",{\"1\":{\"237\":1,\"573\":1}}],[\"指定在原有扫描规则的基础上追加的规则\",{\"1\":{\"231\":1,\"564\":1}}],[\"指定扫描组件\",{\"1\":{\"231\":1,\"564\":1}}],[\"指定根据什么来进行排除\",{\"1\":{\"231\":1,\"564\":1}}],[\"指定排除规则的表达式\",{\"1\":{\"231\":1,\"564\":1}}],[\"指定排除规则\",{\"1\":{\"231\":1,\"564\":1}}],[\"指定排除组件\",{\"1\":{\"231\":1,\"564\":1}}],[\"指定不扫描的组件\",{\"1\":{\"231\":1,\"564\":1}}],[\"指定的类型\",{\"1\":{\"226\":1,\"559\":1}}],[\"指定实例工厂方法名\",{\"1\":{\"223\":1,\"557\":1}}],[\"指定静态工厂方法\",{\"1\":{\"222\":1,\"557\":1}}],[\"指定工厂类的全限定符\",{\"1\":{\"222\":1,\"557\":1}}],[\"指定mapper映射文件的实际存储位置\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"指定mybatis映射文件的具体位置\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"指定通知方法中用来接收目标方法抛出异常的异常对象的参数名\",{\"1\":{\"219\":1,\"596\":1}}],[\"指定通知方法中用来接收目标方法返回值的参数名\",{\"1\":{\"219\":1,\"596\":1}}],[\"指定前置通知的方法名\",{\"1\":{\"219\":1,\"596\":1}}],[\"指定目标方法的位置\",{\"1\":{\"212\":1}}],[\"指定创建线程的目标对象\",{\"1\":{\"196\":1,\"207\":1}}],[\"指定格式的格式化\",{\"1\":{\"163\":1}}],[\"指定输出到控制台\",{\"1\":{\"80\":1}}],[\"指定请求方式为get\",{\"1\":{\"68\":1}}],[\"指定图片位置\",{\"1\":{\"28\":2}}],[\"为统一配置文件\",{\"1\":{\"668\":1}}],[\"为应用程序提供适当的默认配置\",{\"1\":{\"665\":1}}],[\"为所有\",{\"1\":{\"662\":1}}],[\"为所有属性提供get\",{\"1\":{\"79\":1}}],[\"为2021年11月19日以来的最高收盘价\",{\"1\":{\"651\":1}}],[\"为公司负重前行\",{\"1\":{\"651\":1}}],[\"为企业级\",{\"1\":{\"549\":1}}],[\"为开发人员提供更加先进和优秀的工具和框架\",{\"1\":{\"549\":1}}],[\"为基础的\",{\"1\":{\"547\":1}}],[\"为基准的相对路径\",{\"1\":{\"518\":1,\"519\":1}}],[\"为数据库中的记录\",{\"1\":{\"491\":1}}],[\"为数据添加一个版本号或时间戳字段\",{\"1\":{\"483\":1}}],[\"为true追加当前条件\",{\"1\":{\"476\":1,\"478\":1}}],[\"为简化开发\",{\"1\":{\"460\":1}}],[\"为什么依赖不需要写版本\",{\"1\":{\"665\":1}}],[\"为什么学习maven\",{\"0\":{\"386\":1}}],[\"为什么要引入接口这个概念呢\",{\"1\":{\"139\":1}}],[\"为形式参数设置默认值默认参数必须指向不可变对象\",{\"1\":{\"325\":1}}],[\"为参数设置默认值\",{\"1\":{\"325\":1}}],[\"为了让spring\",{\"1\":{\"664\":1}}],[\"为了让类是可序列化的\",{\"1\":{\"187\":1}}],[\"为了提高整合效率\",{\"1\":{\"628\":1}}],[\"为了方便编写\",{\"1\":{\"622\":1}}],[\"为了方便对多个对象的操作\",{\"1\":{\"169\":1}}],[\"为了便于核对数据库操作结果\",{\"1\":{\"608\":1}}],[\"为了证明这一点\",{\"1\":{\"594\":1}}],[\"为了知道程序员在哪些地方标记了什么注解\",{\"1\":{\"564\":1}}],[\"为了在特定领域帮助我们简化代码\",{\"1\":{\"562\":1}}],[\"为了迎合当下开发环境\",{\"1\":{\"552\":1}}],[\"为了避免隐晦的表达造成一定的误会\",{\"1\":{\"529\":1}}],[\"为了应对原始类型的命名重复\",{\"1\":{\"508\":1}}],[\"为了完成特定任务\",{\"1\":{\"192\":1,\"203\":1}}],[\"为啥不是b\",{\"1\":{\"183\":1}}],[\"为效率而生\",{\"1\":{\"83\":1,\"486\":1}}],[\"为实体类生成除了static修饰的字段之外带有各参数的构造器方法\",{\"1\":{\"79\":1}}],[\"为实体类生成无参的构造器方法\",{\"1\":{\"79\":1}}],[\"为controller及service注入运行时\",{\"1\":{\"73\":1}}],[\"为其添加如下子标签\",{\"1\":{\"56\":1}}],[\"为\",{\"1\":{\"43\":1}}],[\"为html标签绑定事件\",{\"1\":{\"43\":1}}],[\"为html标签绑定属性值\",{\"1\":{\"43\":1}}],[\"遍历map集合\",{\"1\":{\"529\":1}}],[\"遍历list集合\",{\"1\":{\"529\":1}}],[\"遍历集合的过程中能得到每一个具体对象\",{\"1\":{\"529\":1}}],[\"遍历双向链表的方法\",{\"1\":{\"371\":1}}],[\"遍历原来的链表\",{\"1\":{\"371\":1}}],[\"遍历\",{\"1\":{\"365\":1,\"370\":2}}],[\"遍历输出\",{\"1\":{\"334\":2}}],[\"遍历字典\",{\"1\":{\"315\":1}}],[\"遍历value集\",{\"1\":{\"177\":1}}],[\"遍历key堆\",{\"1\":{\"177\":1}}],[\"遍历结束后拼接的sql片段\",{\"1\":{\"85\":1}}],[\"遍历开始前拼接的sql片段\",{\"1\":{\"85\":1}}],[\"遍历出来的元素\",{\"1\":{\"85\":1}}],[\"遍历的集合\",{\"1\":{\"85\":1}}],[\"遍历容器的元素或者对象的属性\",{\"1\":{\"43\":1}}],[\"遍历数组中每个有值的元素\",{\"1\":{\"40\":1}}],[\"区分\",{\"1\":{\"180\":1}}],[\"区分大小写\",{\"1\":{\"38\":1}}],[\"区别\",{\"1\":{\"118\":1,\"243\":1,\"603\":1}}],[\"区别在于切换的是display属性的值\",{\"1\":{\"43\":1}}],[\"判定是否有效期\",{\"1\":{\"655\":1}}],[\"判定为true时渲染\",{\"1\":{\"43\":1}}],[\"判断结果\",{\"1\":{\"655\":1}}],[\"判断密码\",{\"1\":{\"655\":1}}],[\"判断账号还是密码错误\",{\"1\":{\"655\":1}}],[\"判断token是否有效\",{\"1\":{\"655\":1}}],[\"判断条件拼接\",{\"1\":{\"476\":1}}],[\"判断是否为空\",{\"1\":{\"370\":1,\"371\":1}}],[\"判断是否到链表最后\",{\"1\":{\"370\":1,\"371\":1}}],[\"判断队列是否为空\",{\"1\":{\"367\":1}}],[\"判断队列是否满\",{\"1\":{\"367\":2}}],[\"判断响应状态码\",{\"1\":{\"253\":1}}],[\"判断\",{\"1\":{\"253\":1}}],[\"判断两个key是否相同\",{\"1\":{\"177\":1}}],[\"判断的依据\",{\"1\":{\"170\":1}}],[\"判断集合中的所有元素是否完全相同\",{\"1\":{\"170\":1}}],[\"判断集合中是否包含指定的obj元素\",{\"1\":{\"170\":1}}],[\"判断集合是否为空\",{\"1\":{\"170\":1}}],[\"判断当前线程是否存活\",{\"1\":{\"196\":1,\"207\":1}}],[\"判断当前集合中是否包含coll中所有元素\",{\"1\":{\"170\":1}}],[\"判断当前字符串从firststarts开始的字串与另一个字符串other从otherstart开始\",{\"1\":{\"166\":1}}],[\"判断当前字符串是否以prefix结束\",{\"1\":{\"166\":1}}],[\"判断当前字符串是否以prefix开始\",{\"1\":{\"166\":1}}],[\"判断当前行是否为有效行\",{\"1\":{\"7\":1}}],[\"判断左边对象是否是有右边类的实例\",{\"1\":{\"147\":1}}],[\"判断令牌是否存在\",{\"1\":{\"93\":1}}],[\"判断请求url中是否包含login\",{\"1\":{\"93\":1}}],[\"某个远程仓库的代理\",{\"1\":{\"424\":1}}],[\"某个键盘的键被按下\",{\"1\":{\"41\":1}}],[\"某个页面或图像被完成加载\",{\"1\":{\"41\":1}}],[\"某些操作\",{\"1\":{\"25\":1}}],[\"我国各地高温集中时段有明显的地域差异\",{\"1\":{\"651\":1}}],[\"我全面讲解了单表的mybatis操作\",{\"1\":{\"517\":1}}],[\"我欲乘风归去\",{\"1\":{\"334\":1}}],[\"我要吃鱼\",{\"1\":{\"334\":1}}],[\"我\",{\"1\":{\"327\":1,\"346\":2}}],[\"我叫小白\",{\"1\":{\"334\":1}}],[\"我叫\",{\"1\":{\"327\":1}}],[\"我决定把自己常用的命令总结到这里\",{\"1\":{\"270\":1}}],[\"我都新建事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"我是用这种方式会出现警告\",{\"1\":{\"224\":1}}],[\"我是客户端\",{\"1\":{\"191\":1,\"202\":1}}],[\"我是一只\",{\"1\":{\"188\":1}}],[\"我是一只猴子monkey\",{\"1\":{\"188\":1}}],[\"我是一个圆\",{\"1\":{\"130\":1}}],[\"我是一个漂亮的圆\",{\"1\":{\"130\":1}}],[\"我的应用程序\",{\"1\":{\"669\":1}}],[\"我的主人是\",{\"1\":{\"188\":1}}],[\"我的名字是\",{\"1\":{\"188\":1}}],[\"我的第一个窗口\",{\"1\":{\"23\":3}}],[\"我们习惯会把静态资源放在classpath\",{\"1\":{\"675\":1}}],[\"我们都可以在程序中\",{\"1\":{\"668\":1}}],[\"我们称为启动器\",{\"1\":{\"664\":1}}],[\"我们称为动态sql\",{\"1\":{\"84\":1}}],[\"我们必须引入spring\",{\"1\":{\"664\":1}}],[\"我们查询返回一个map\",{\"1\":{\"656\":1}}],[\"我们做下面的测试\",{\"1\":{\"594\":1}}],[\"我们在实际开发中\",{\"1\":{\"583\":1}}],[\"我们还需要xml方式或者后面讲解java配置类方式指定注解生效的包\",{\"1\":{\"564\":1}}],[\"我们学习\",{\"1\":{\"557\":1}}],[\"我们应该选择一个合适的容器实现类\",{\"1\":{\"555\":1}}],[\"我们总结下\",{\"1\":{\"555\":1}}],[\"我们即将要学习的\",{\"1\":{\"552\":1}}],[\"我们只要静态资源放在这些目录中任何一个\",{\"1\":{\"675\":1}}],[\"我们只需要声明和指定少量的配置即可\",{\"1\":{\"628\":1}}],[\"我们只需要编写元数据\",{\"1\":{\"551\":1}}],[\"我们只需写少量的配置\",{\"1\":{\"585\":1}}],[\"我们只用到\",{\"1\":{\"387\":1}}],[\"我们的静态资源该放哪里呢\",{\"1\":{\"675\":1}}],[\"我们的项目是一个jar工程\",{\"1\":{\"675\":1}}],[\"我们的项目需要以这个项目为父工程\",{\"1\":{\"664\":1}}],[\"我们的节日\",{\"1\":{\"651\":1}}],[\"我们的期待\",{\"1\":{\"551\":1}}],[\"我们的配置比较多\",{\"1\":{\"518\":1}}],[\"我们的学习目标\",{\"1\":{\"517\":1}}],[\"我们如何映射下面这个语句\",{\"1\":{\"517\":1}}],[\"我们希望每个数据库都具备良好的第三范式或\",{\"1\":{\"517\":1}}],[\"我们直接使用对象中的\",{\"1\":{\"512\":1}}],[\"我们将以配置类+注解方式为主进行讲解\",{\"1\":{\"552\":1}}],[\"我们将\",{\"1\":{\"512\":1}}],[\"我们使用\",{\"1\":{\"512\":1}}],[\"我们使用lombok时\",{\"1\":{\"79\":1}}],[\"我们定义了一个\",{\"1\":{\"512\":1}}],[\"我们不会\",{\"1\":{\"582\":1}}],[\"我们不需要提供实现类\",{\"1\":{\"493\":1}}],[\"我们不必每个小版本都追\",{\"1\":{\"491\":1}}],[\"我们该如何快速的解决这个问题呢\",{\"1\":{\"486\":1}}],[\"我们现在的其他记录就是失效数据\",{\"1\":{\"483\":1}}],[\"我们现在要使用的事务管理器是org\",{\"1\":{\"243\":1,\"604\":1}}],[\"我们就需要自己去编写代码和sql语句\",{\"1\":{\"486\":1}}],[\"我们就实现了\",{\"1\":{\"461\":1}}],[\"我们就可以根据这个条件提取\",{\"1\":{\"334\":1}}],[\"我们就可以先创建一个学生的父类\",{\"1\":{\"334\":1}}],[\"我们就可以提取atm的性质\",{\"1\":{\"334\":1}}],[\"我们就可以写存钱和取钱两个函数来实现\",{\"1\":{\"334\":1}}],[\"我们就可以把它定义为static\",{\"1\":{\"114\":1,\"131\":1}}],[\"我们也可以在pom\",{\"1\":{\"413\":1}}],[\"我们通过定义\",{\"1\":{\"408\":1,\"447\":1}}],[\"我们发现一个情况\",{\"1\":{\"406\":1}}],[\"我们先来看看下面这个完整的例子\",{\"1\":{\"517\":1}}],[\"我们先行了解下这组属性的含义\",{\"1\":{\"398\":1,\"442\":1}}],[\"我们先找到需要删除的这个节点的前一个节点temp\",{\"1\":{\"370\":1}}],[\"我们主要休要修改的有三个配置\",{\"1\":{\"395\":1,\"440\":1}}],[\"我们需要理解的是\",{\"1\":{\"655\":1}}],[\"我们需要引用新技术\",{\"1\":{\"582\":1}}],[\"我们需要把附加功能从业务功能代码中抽取出来\",{\"1\":{\"582\":1}}],[\"我们需要声明ioc容器对象\",{\"1\":{\"559\":1}}],[\"我们需要一个默认\",{\"1\":{\"557\":1}}],[\"我们需要定义一个实体类\",{\"1\":{\"514\":1}}],[\"我们需要准备一张名为\",{\"1\":{\"514\":1}}],[\"我们需要做的是\",{\"1\":{\"507\":1}}],[\"我们需要的对象\",{\"1\":{\"493\":1}}],[\"我们需要将配置好的maven软件\",{\"1\":{\"396\":1,\"440\":1}}],[\"我们需要需改maven\",{\"1\":{\"395\":1,\"440\":1}}],[\"我们需要抽取一个公共方法\",{\"1\":{\"142\":1}}],[\"我们想要打成war部署到服务器中\",{\"1\":{\"390\":1}}],[\"我们可以选择web\",{\"1\":{\"623\":1}}],[\"我们可以三层架构每层对应一个配置类\",{\"1\":{\"622\":1}}],[\"我们可以将切点提取\",{\"1\":{\"591\":1}}],[\"我们可以将automappingbehavior设置为full\",{\"1\":{\"521\":1}}],[\"我们可以方便地插入\",{\"1\":{\"512\":1}}],[\"我们可以方便地维护项目所依赖的外部库\",{\"1\":{\"390\":1,\"439\":1}}],[\"我们可以判定\",{\"1\":{\"496\":1}}],[\"我们可以在周期方法完成初始化和释放资源等工作\",{\"1\":{\"560\":1,\"565\":1}}],[\"我们可以在组件类中定义方法\",{\"1\":{\"560\":1,\"565\":1}}],[\"我们可以在mybatis的配置文件使用settings标签设置\",{\"1\":{\"496\":1}}],[\"我们可以在build\",{\"1\":{\"413\":1}}],[\"我们可以看到集成mybatis\",{\"1\":{\"461\":1}}],[\"我们可以通过一行构建命令\",{\"1\":{\"439\":1}}],[\"我们可以使用多个横切关注点对相关方法进行多个不同方面的增强\",{\"1\":{\"584\":1}}],[\"我们可以使用\",{\"1\":{\"583\":1}}],[\"我们可以使用resources标签\",{\"1\":{\"413\":1}}],[\"我们可以使用springaop框架\",{\"1\":{\"211\":1}}],[\"我们链表的第一个开始遍历\",{\"1\":{\"371\":1}}],[\"我们肯定不能随便胡乱标记\",{\"1\":{\"231\":1,\"564\":1}}],[\"我们考虑不让对象直接作用属性\",{\"1\":{\"135\":1}}],[\"我被点击了\",{\"1\":{\"41\":2}}],[\"根据您的需求\",{\"1\":{\"674\":1}}],[\"根据账号进行数据库查询\",{\"1\":{\"655\":1}}],[\"根据账号查询\",{\"1\":{\"655\":1}}],[\"根据token获取用户数据\",{\"1\":{\"655\":1}}],[\"根据用户唯一标识生成token\",{\"1\":{\"655\":1}}],[\"根据userid\",{\"1\":{\"655\":1}}],[\"根据userid生成token\",{\"1\":{\"655\":1}}],[\"根据updatewrapper尝试更新\",{\"1\":{\"471\":1}}],[\"根据国家气候中心预计\",{\"1\":{\"651\":1}}],[\"根据特殊需求指定局部日志级别\",{\"1\":{\"625\":1}}],[\"根据接口类型获取bean\",{\"1\":{\"598\":1}}],[\"根据接口类型获取\",{\"1\":{\"598\":2}}],[\"根据joinpoint对象就可以获取目标方法名称\",{\"1\":{\"589\":1}}],[\"根据配置类创建\",{\"1\":{\"571\":1}}],[\"根据自己的需求进行开发\",{\"1\":{\"549\":1}}],[\"根据员工id查询员工数据方法\",{\"1\":{\"493\":1}}],[\"根据指定的<实体类>的名称对应数据库表名\",{\"1\":{\"480\":1}}],[\"根据指定comparator产生的顺序对list集合元素进行排序\",{\"1\":{\"180\":1}}],[\"根据\",{\"1\":{\"464\":3,\"465\":2,\"466\":9,\"471\":15,\"474\":1,\"566\":2,\"598\":1}}],[\"根据依赖的gav属性依次向下查找文件夹\",{\"1\":{\"412\":1,\"449\":1}}],[\"根据编号修改\",{\"1\":{\"370\":1}}],[\"根据排名将英雄插入到指定位置\",{\"1\":{\"370\":1}}],[\"根据实际的需求来确定\",{\"1\":{\"370\":1}}],[\"根据第一行的数据创建原始的二维数组\",{\"1\":{\"365\":1}}],[\"根据sum就可以创建稀疏数组sparaarr\",{\"1\":{\"365\":1}}],[\"根据key删除对应的键值\",{\"1\":{\"315\":1}}],[\"根据索引删除\",{\"1\":{\"310\":1}}],[\"根据面向接口编程思想\",{\"1\":{\"233\":1,\"566\":1}}],[\"根据类获取bean\",{\"1\":{\"598\":2}}],[\"根据类获取\",{\"1\":{\"598\":2}}],[\"根据类型装配\",{\"0\":{\"598\":1},\"1\":{\"542\":1}}],[\"根据类型来获取bean时\",{\"1\":{\"226\":1,\"559\":1}}],[\"根据类型获取\",{\"1\":{\"226\":2,\"559\":2}}],[\"根据类所拥有的非静态字段自动重写equals方法和hashcode方法\",{\"1\":{\"79\":1}}],[\"根据id修改数据\",{\"1\":{\"634\":1}}],[\"根据id删除日程\",{\"1\":{\"634\":1}}],[\"根据id查询详情\",{\"1\":{\"657\":1}}],[\"根据id查询\",{\"1\":{\"562\":1}}],[\"根据id查询订单\",{\"1\":{\"518\":1}}],[\"根据id\",{\"1\":{\"464\":1,\"466\":1,\"471\":4}}],[\"根据id和类型获取\",{\"1\":{\"226\":1,\"559\":1}}],[\"根据id获取\",{\"1\":{\"226\":1,\"559\":1}}],[\"根据id属性值获取\",{\"1\":{\"40\":1}}],[\"根据工厂对象的实例工厂方法进行实例化组件对象\",{\"1\":{\"223\":1,\"557\":1}}],[\"根据employeemapper接口的class对象获取mapper接口类型的对象\",{\"1\":{\"220\":1,\"493\":1}}],[\"根据插入的位置决定\",{\"1\":{\"212\":1}}],[\"根据comparetor指定的顺序\",{\"1\":{\"180\":1}}],[\"根据class属性值获取\",{\"1\":{\"40\":1}}],[\"根据元素数值删除\",{\"1\":{\"310\":1}}],[\"根据元素的自然排序\",{\"1\":{\"180\":1}}],[\"根据元素的自然排序对指定list集合元素按升序排序\",{\"1\":{\"180\":1}}],[\"根据元素所在类的equals\",{\"1\":{\"170\":1}}],[\"根据业务需要执行预先设定的代码\",{\"1\":{\"94\":1}}],[\"根据路由请求在路由视图中动态渲染选中的组件\",{\"1\":{\"52\":1}}],[\"根据条件展示某元素\",{\"1\":{\"43\":1}}],[\"根据name属性值获取\",{\"1\":{\"40\":1}}],[\"根据标签名称获取\",{\"1\":{\"40\":1}}],[\"根据给定的规则过滤集合中的字符串\",{\"1\":{\"17\":1}}],[\"而复杂的配置可以选择yaml以获得更多的灵活性和可读性\",{\"1\":{\"669\":1}}],[\"而比亚迪的智能化能力\",{\"1\":{\"651\":1}}],[\"而aws则创造了云计算行业\",{\"1\":{\"651\":1}}],[\"而如果脱离了基础\",{\"1\":{\"651\":1}}],[\"而如果使用\",{\"1\":{\"387\":1}}],[\"而第九至十二名为保级区\",{\"1\":{\"651\":1}}],[\"而北方地区往往是在初夏时间段\",{\"1\":{\"651\":1}}],[\"而长时间占用资源\",{\"1\":{\"609\":1}}],[\"而各处基本相似\",{\"1\":{\"584\":1}}],[\"而与它对应的对象的核心功能毫无关系对于其他类型的代码\",{\"1\":{\"584\":1}}],[\"而采用一种框架其实就是限制用户必须使用其规定的方案来实现\",{\"1\":{\"545\":1}}],[\"而全自动\",{\"1\":{\"537\":1}}],[\"而实现批量更新则需要多条sql语句拼起来\",{\"1\":{\"529\":1}}],[\"而实际上\",{\"1\":{\"387\":1}}],[\"而对于不支持自增型主键的数据库\",{\"1\":{\"512\":1}}],[\"而对象就是根据这个图纸来建造的建筑\",{\"1\":{\"334\":1}}],[\"而jsr注解是其中一部分重要的内容\",{\"1\":{\"566\":1}}],[\"而jdbc对于表名部分是不能使用问号占位符的\",{\"1\":{\"498\":1}}],[\"而java集合就像一种容器\",{\"1\":{\"169\":1}}],[\"而雪花算法通过在分布式系统中生成唯一id\",{\"1\":{\"480\":1}}],[\"而\",{\"1\":{\"398\":1,\"442\":1,\"448\":1,\"512\":2,\"517\":1,\"552\":1}}],[\"而我们仅仅需要编写配置即可\",{\"1\":{\"390\":1,\"439\":1}}],[\"而这些工作又对实现业务功能毫无帮助\",{\"1\":{\"387\":1}}],[\"而使用\",{\"1\":{\"387\":2}}],[\"而单链表中需要找到待删除链表的前一个\",{\"1\":{\"371\":1}}],[\"而双向链表\",{\"1\":{\"371\":1}}],[\"而双向链表可以向前向后查找\",{\"1\":{\"371\":1}}],[\"而列表是可变的对列表可以执行添加\",{\"1\":{\"334\":1}}],[\"而一个模块中可以包括很多函数\",{\"1\":{\"330\":1}}],[\"而元组可以\",{\"1\":{\"313\":1}}],[\"而元组只可以整体替换\",{\"1\":{\"313\":1}}],[\"而声明式事务可以通过配置文件或注解来控制事务\",{\"1\":{\"243\":1,\"603\":1}}],[\"而后者是用于管理\",{\"1\":{\"230\":1,\"561\":1}}],[\"而在实际使用时则是通过调用\",{\"1\":{\"230\":1,\"561\":1}}],[\"而原本的expectedmodcount是暂时不变的\",{\"1\":{\"197\":1}}],[\"而非直接调用run\",{\"1\":{\"193\":1,\"204\":1}}],[\"而改为使用\",{\"1\":{\"151\":1}}],[\"而其他实现类不用重写\",{\"1\":{\"140\":1}}],[\"而是根据附加功能的逻辑上的需要\",{\"1\":{\"584\":1}}],[\"而是提供标准和指导方针\",{\"1\":{\"566\":1}}],[\"而是逐渐发展成为一个由多个不同子项目\",{\"1\":{\"547\":1}}],[\"而是记录特定的版本信息\",{\"1\":{\"483\":1}}],[\"而是在数据更新阶段进行冲突检测和处理\",{\"1\":{\"483\":1}}],[\"而是需要放在请求对象定制的参数中\",{\"1\":{\"355\":1}}],[\"而是会比较现实的模拟\",{\"1\":{\"334\":1}}],[\"而是由\",{\"1\":{\"221\":1,\"553\":1}}],[\"而是由其子类提供具体实现方法的对象的类\",{\"1\":{\"138\":1}}],[\"而是通过对象的方法调用\",{\"1\":{\"249\":1,\"612\":1}}],[\"而是通过代理类间接调用\",{\"1\":{\"211\":1,\"583\":1}}],[\"而是通过\",{\"1\":{\"135\":1}}],[\"而具体的执行\",{\"1\":{\"138\":1}}],[\"而父类则更一般\",{\"1\":{\"138\":1}}],[\"而不利于各个模块的重用\",{\"1\":{\"584\":1}}],[\"而不需要进行额外的解析或转换\",{\"1\":{\"669\":1}}],[\"而不需要手动编写复杂的\",{\"1\":{\"474\":1}}],[\"而不需要再添加一对小括号\",{\"1\":{\"328\":1}}],[\"而不必关心应用程序的构建细节\",{\"1\":{\"403\":1}}],[\"而不用知道洗衣机内部如何运转\",{\"1\":{\"334\":1}}],[\"而不是集合本身的类型\",{\"1\":{\"515\":1}}],[\"而不是以mapper接口方法返回值的形式返回\",{\"1\":{\"512\":1}}],[\"而不是字符串来表示字段名\",{\"1\":{\"478\":1}}],[\"而不是要求您在构造期间记住可能大量的\",{\"1\":{\"239\":1,\"574\":1}}],[\"而不是再重新建立一个\",{\"1\":{\"10\":1,\"78\":1}}],[\"而不能调用非静态的属性或方法\",{\"1\":{\"130\":1}}],[\"而且是同一个对象\",{\"1\":{\"598\":1}}],[\"而且彼此之间存在错综复杂的依赖关系\",{\"1\":{\"387\":1}}],[\"而且可能会报错\",{\"1\":{\"170\":1}}],[\"而且省略了对象名称\",{\"1\":{\"151\":1}}],[\"而且类的内容一样的话\",{\"1\":{\"151\":1}}],[\"而且一旦赋值不能改变\",{\"1\":{\"144\":1}}],[\"而且只被加载一次\",{\"1\":{\"132\":1}}],[\"而且独一份\",{\"1\":{\"130\":1}}],[\"而且会自动去除字句开头的and或or\",{\"1\":{\"84\":1}}],[\"而this关键字用来访问本类内容\",{\"1\":{\"129\":1}}],[\"而成员变量\",{\"1\":{\"112\":1}}],[\"而system\",{\"1\":{\"108\":1}}],[\"而springaop是spring框架的高级技术\",{\"1\":{\"99\":1}}],[\"而interceptor只会拦截spring环境中的资源\",{\"1\":{\"94\":1}}],[\"而拦截器需要实现handlerinterceptor接口\",{\"1\":{\"94\":1}}],[\"而document对象是通过windows对象获得的\",{\"1\":{\"40\":1}}],[\"整合方式2\",{\"1\":{\"628\":1}}],[\"整合方式1\",{\"1\":{\"628\":1}}],[\"整合第三方特殊依赖\",{\"1\":{\"625\":1}}],[\"整合第三方框架\",{\"1\":{\"230\":1,\"561\":1}}],[\"整合mybatis\",{\"1\":{\"625\":1}}],[\"整合需要\",{\"1\":{\"625\":1}}],[\"整合就是将三层架构和框架核心api组件交给springioc容器管理\",{\"1\":{\"619\":1}}],[\"整合案例介绍和接口分析\",{\"0\":{\"632\":1},\"1\":{\"615\":1}}],[\"整合spring5\",{\"0\":{\"580\":1},\"1\":{\"542\":1}}],[\"整合测试\",{\"0\":{\"630\":1},\"1\":{\"615\":1}}],[\"整合测试注解使用\",{\"1\":{\"242\":1,\"580\":1}}],[\"整合测试环境作用\",{\"1\":{\"242\":1,\"580\":1}}],[\"整合注解\",{\"1\":{\"233\":1}}],[\"整体返回string\",{\"1\":{\"166\":1}}],[\"整个项目就是由各种组件搭建而成的\",{\"1\":{\"551\":1}}],[\"整个项目的依赖包\",{\"1\":{\"49\":1}}],[\"整个文档对象\",{\"1\":{\"40\":2}}],[\"整数除整数还是整数\",{\"1\":{\"117\":1}}],[\"整数类型或枚举类型\",{\"1\":{\"481\":1}}],[\"整数类型\",{\"1\":{\"112\":1}}],[\"整数或浮点数\",{\"1\":{\"40\":1}}],[\"整数\",{\"1\":{\"38\":1,\"307\":1}}],[\"延迟指定时间执行一次\",{\"1\":{\"40\":1}}],[\"历史记录对象\",{\"1\":{\"40\":1}}],[\"屏幕对象\",{\"1\":{\"40\":1}}],[\"逻辑未删除值\",{\"1\":{\"481\":1}}],[\"逻辑已删除值\",{\"1\":{\"481\":1}}],[\"逻辑删除注解\",{\"1\":{\"653\":1}}],[\"逻辑删除以后\",{\"1\":{\"481\":1}}],[\"逻辑删除值为1\",{\"1\":{\"481\":2}}],[\"逻辑删除字段\",{\"1\":{\"481\":2}}],[\"逻辑删除是指通过更改记录的状态或添加标记字段来模拟删除操作\",{\"1\":{\"481\":1}}],[\"逻辑删除\",{\"1\":{\"481\":5}}],[\"逻辑删除实现\",{\"0\":{\"481\":1},\"1\":{\"459\":1,\"481\":1}}],[\"逻辑处理\",{\"1\":{\"74\":1}}],[\"逻辑值\",{\"1\":{\"40\":1}}],[\"逻辑运算符\",{\"0\":{\"118\":1},\"1\":{\"38\":1}}],[\"什么原因导致的\",{\"1\":{\"197\":1,\"208\":1}}],[\"什么都不能写\",{\"1\":{\"150\":1}}],[\"什么是ssm整合\",{\"0\":{\"617\":1},\"1\":{\"615\":1}}],[\"什么是组件\",{\"1\":{\"551\":1}}],[\"什么是程序\",{\"1\":{\"338\":1}}],[\"什么是坐标\",{\"1\":{\"58\":1}}],[\"什么是json\",{\"1\":{\"40\":1}}],[\"什么也不写\",{\"1\":{\"23\":1}}],[\"形式的模板类\",{\"1\":{\"562\":1}}],[\"形式传参\",{\"1\":{\"498\":1}}],[\"形式\",{\"1\":{\"489\":2}}],[\"形式调用\",{\"1\":{\"460\":2}}],[\"形式参数\",{\"1\":{\"325\":1}}],[\"形式参数不需要类型\",{\"1\":{\"39\":1}}],[\"形参名称等于要指定的bean名称\",{\"1\":{\"238\":1,\"573\":1}}],[\"形参数列表\",{\"1\":{\"214\":1}}],[\"形参\",{\"1\":{\"197\":1}}],[\"形参不能改变实参的值\",{\"1\":{\"197\":1}}],[\"形参列表\",{\"1\":{\"40\":1}}],[\"索引\",{\"1\":{\"40\":1,\"43\":1}}],[\"访问测试\",{\"1\":{\"673\":1}}],[\"访问地址\",{\"1\":{\"351\":1,\"675\":1}}],[\"访问限制\",{\"1\":{\"327\":1}}],[\"访问修饰符是公有\",{\"1\":{\"590\":1}}],[\"访问修饰符和返回值\",{\"1\":{\"590\":1}}],[\"访问修饰符\",{\"1\":{\"213\":1,\"214\":1}}],[\"访问成员变量的两种方式\",{\"1\":{\"145\":1}}],[\"访问控制符\",{\"1\":{\"135\":1}}],[\"访问父类的构造方法\",{\"1\":{\"129\":1}}],[\"访问父类的成员方法\",{\"1\":{\"129\":1}}],[\"访问父类的成员变量\",{\"1\":{\"129\":1}}],[\"访问本类的另一个构造方法\",{\"1\":{\"128\":1}}],[\"访问本类的另一个成员方法\",{\"1\":{\"128\":1}}],[\"访问本类的成员变量\",{\"1\":{\"128\":1}}],[\"访问所有资源都会被拦截\",{\"1\":{\"93\":1}}],[\"访问web服务器的资源\",{\"1\":{\"89\":1}}],[\"访问官网\",{\"1\":{\"50\":1}}],[\"访问\",{\"1\":{\"40\":1,\"93\":1,\"422\":1}}],[\"函数或者类等\",{\"1\":{\"330\":1}}],[\"函数或者其他类时\",{\"1\":{\"330\":1}}],[\"函数和类名等访问即可\",{\"1\":{\"330\":1}}],[\"函数没有参数时必须保留一对空的小括号\",{\"1\":{\"325\":1}}],[\"函数将列表\",{\"1\":{\"316\":1}}],[\"函数转换为列表\",{\"1\":{\"315\":1}}],[\"函数转换为元组\",{\"1\":{\"315\":1}}],[\"函数调用\",{\"1\":{\"42\":1}}],[\"函数\",{\"0\":{\"325\":1},\"1\":{\"40\":2,\"169\":1,\"295\":1,\"311\":1,\"334\":2}}],[\"函数名或者类名前添加模块名\",{\"1\":{\"330\":1}}],[\"函数名后面括号中的参数为实际参数\",{\"1\":{\"325\":1}}],[\"函数名后面括号中的参数为形式参数\",{\"1\":{\"325\":1}}],[\"函数名\",{\"1\":{\"40\":1}}],[\"函数名称\",{\"1\":{\"39\":1,\"40\":2}}],[\"函数式接口\",{\"1\":{\"17\":1}}],[\"方可享受spring框架的其他功能\",{\"1\":{\"551\":1}}],[\"方便后期获取bean\",{\"1\":{\"557\":1}}],[\"方便后期项目之间相互引用依赖等\",{\"1\":{\"398\":1}}],[\"方便了配置和管理\",{\"1\":{\"551\":1}}],[\"方便的编写各类查询条件\",{\"1\":{\"460\":1}}],[\"方便maven软件对项目进行管理和互相引用\",{\"1\":{\"442\":1}}],[\"方便管理和维护\",{\"1\":{\"419\":1,\"453\":1}}],[\"方便\",{\"1\":{\"387\":1}}],[\"方案2\",{\"1\":{\"233\":1,\"238\":1,\"476\":1,\"573\":1}}],[\"方案1\",{\"1\":{\"233\":1,\"238\":1,\"476\":1,\"573\":1}}],[\"方案三\",{\"1\":{\"81\":1}}],[\"方案二\",{\"1\":{\"81\":1,\"96\":1}}],[\"方案一\",{\"1\":{\"81\":1,\"96\":1}}],[\"方式管理\",{\"0\":{\"563\":1,\"569\":1},\"1\":{\"542\":2,\"564\":1}}],[\"方式\",{\"1\":{\"416\":1,\"448\":1,\"655\":2}}],[\"方式3\",{\"1\":{\"226\":1,\"559\":1}}],[\"方式1\",{\"1\":{\"177\":1,\"226\":2,\"371\":1,\"559\":2}}],[\"方式二\",{\"0\":{\"195\":1,\"206\":1},\"1\":{\"40\":1,\"41\":1,\"197\":1,\"208\":1}}],[\"方式一\",{\"0\":{\"194\":1,\"205\":1},\"1\":{\"40\":1,\"41\":1,\"197\":1,\"208\":1}}],[\"方式2\",{\"1\":{\"39\":1,\"177\":1,\"226\":2,\"371\":2,\"559\":2}}],[\"方法在应用程序中获取该属性值\",{\"1\":{\"686\":1}}],[\"方法是启动\",{\"1\":{\"664\":1}}],[\"方法参数\",{\"1\":{\"590\":1}}],[\"方法参数为可变参数\",{\"1\":{\"226\":1,\"559\":1}}],[\"方法访问修饰符\",{\"1\":{\"590\":1}}],[\"方法成功结束了\",{\"1\":{\"589\":1}}],[\"方法成功返回了\",{\"1\":{\"588\":2,\"591\":1}}],[\"方法获取目标方法的签名\",{\"1\":{\"589\":1}}],[\"方法获取指定的\",{\"1\":{\"230\":1,\"561\":1}}],[\"方法最终结束了\",{\"1\":{\"588\":2,\"591\":1}}],[\"方法抛异常了\",{\"1\":{\"588\":1,\"589\":1,\"591\":1}}],[\"方法内部\",{\"1\":{\"582\":4,\"583\":1,\"594\":1}}],[\"方法内部模拟创建\",{\"1\":{\"561\":1}}],[\"方法对其进行配置\",{\"1\":{\"571\":1}}],[\"方法或字段\",{\"1\":{\"566\":1}}],[\"方法给属性赋值\",{\"1\":{\"561\":1}}],[\"方法把方法名中的get或set去掉\",{\"1\":{\"513\":1}}],[\"方法返回值\",{\"1\":{\"589\":1,\"590\":1,\"592\":1}}],[\"方法返回值和resulttype一致\",{\"1\":{\"493\":1}}],[\"方法返回的对象类型\",{\"1\":{\"229\":1,\"561\":1}}],[\"方法就是放在类里面的函数\",{\"1\":{\"334\":1}}],[\"方法时\",{\"1\":{\"329\":1}}],[\"方法用于实现根据正则表达式分割字符串\",{\"1\":{\"324\":1}}],[\"方法用于实现字符串的替换\",{\"1\":{\"323\":1}}],[\"方法用于在整个字符串中搜索所有符合正则表达式的字符串\",{\"1\":{\"322\":1}}],[\"方法类似\",{\"1\":{\"317\":1}}],[\"方法可以计算字符串的长度\",{\"1\":{\"317\":1}}],[\"方法进行转换\",{\"1\":{\"317\":1}}],[\"方法进行判断\",{\"1\":{\"170\":1}}],[\"方法2的税务是否会加入方法1的事务中\",{\"1\":{\"249\":1}}],[\"方法1调用方法2\",{\"1\":{\"249\":1}}],[\"方法上的注解覆盖了类注解覆盖了类上的\",{\"1\":{\"246\":1}}],[\"方法也设置了事务注解\",{\"1\":{\"246\":1}}],[\"方法声明时的完整信息\",{\"1\":{\"589\":1}}],[\"方法声明\",{\"1\":{\"237\":1,\"573\":1}}],[\"方法命名随意\",{\"1\":{\"232\":1,\"560\":1,\"565\":2}}],[\"方法来取出由数据库内部生成的主键\",{\"1\":{\"515\":1}}],[\"方法来获取\",{\"1\":{\"238\":1,\"573\":1}}],[\"方法来得到其所生产的\",{\"1\":{\"230\":1,\"561\":1}}],[\"方法来启动这个线程\",{\"1\":{\"193\":1,\"204\":1}}],[\"方法注入和接口注入\",{\"1\":{\"221\":1,\"553\":1}}],[\"方法注解\",{\"1\":{\"69\":1}}],[\"方法报错\",{\"1\":{\"212\":1,\"213\":1}}],[\"方法结束\",{\"1\":{\"212\":1}}],[\"方法开始了\",{\"1\":{\"588\":2,\"589\":1,\"591\":1}}],[\"方法开始\",{\"1\":{\"212\":1}}],[\"方法修改了\",{\"1\":{\"197\":2}}],[\"方法修改了父类的\",{\"1\":{\"197\":1}}],[\"方法再次修改了父类的\",{\"1\":{\"197\":1}}],[\"方法中直接调用其他\",{\"1\":{\"238\":1,\"573\":1}}],[\"方法中\",{\"1\":{\"175\":1}}],[\"方法一致\",{\"1\":{\"172\":1}}],[\"方法要与equals\",{\"1\":{\"172\":1}}],[\"方法添加\",{\"1\":{\"167\":1}}],[\"方法运行结束之后\",{\"1\":{\"150\":1}}],[\"方法体\",{\"1\":{\"142\":2,\"144\":4}}],[\"方法覆盖重写特点\",{\"1\":{\"137\":1}}],[\"方法的签名\",{\"1\":{\"589\":1}}],[\"方法的参数描述\",{\"1\":{\"590\":1}}],[\"方法的参数和sql的参数一致\",{\"1\":{\"493\":1}}],[\"方法的参数列表不同\",{\"1\":{\"133\":1}}],[\"方法的返回参数类型\",{\"1\":{\"214\":1}}],[\"方法的三要素\",{\"1\":{\"139\":1}}],[\"方法的名称一样\",{\"1\":{\"137\":1}}],[\"方法的覆盖重写\",{\"0\":{\"137\":1}}],[\"方法的重载\",{\"1\":{\"133\":1}}],[\"方法区\",{\"1\":{\"125\":1}}],[\"方法名和sql的id一致\",{\"1\":{\"493\":1}}],[\"方法名称\",{\"1\":{\"140\":1,\"141\":1,\"142\":2,\"144\":5}}],[\"方法名称一样\",{\"1\":{\"137\":1}}],[\"方法名必须相同\",{\"1\":{\"133\":1}}],[\"方法名\",{\"1\":{\"110\":1,\"139\":1,\"214\":1,\"220\":1,\"478\":2,\"493\":1,\"592\":4}}],[\"方法执行完毕\",{\"1\":{\"583\":1}}],[\"方法执行耗时\",{\"1\":{\"100\":1}}],[\"方法执行前\",{\"1\":{\"97\":1}}],[\"方法\",{\"0\":{\"321\":1,\"322\":1,\"323\":1},\"1\":{\"40\":3,\"130\":2,\"135\":2,\"138\":1,\"163\":1,\"169\":1,\"170\":2,\"172\":2,\"174\":1,\"176\":1,\"177\":2,\"180\":1,\"186\":1,\"197\":1,\"233\":1,\"317\":6,\"318\":1,\"327\":1,\"329\":1,\"334\":1,\"371\":1,\"471\":1,\"472\":1,\"484\":1,\"503\":1,\"513\":1,\"566\":2,\"583\":3,\"627\":1}}],[\"方法引用可以替代\",{\"1\":{\"478\":1}}],[\"方法引用是\",{\"1\":{\"478\":1}}],[\"方法引用回顾\",{\"1\":{\"478\":1}}],[\"方法引用\",{\"1\":{\"16\":1}}],[\"要启用pscache\",{\"1\":{\"677\":1}}],[\"要先学会下\",{\"1\":{\"651\":1}}],[\"要先确定主轴是哪一个\",{\"1\":{\"258\":1}}],[\"要区分不同的地区来考虑高温的影响\",{\"1\":{\"651\":1}}],[\"要慎重考虑\",{\"1\":{\"593\":1}}],[\"要点3\",{\"1\":{\"589\":1}}],[\"要点2\",{\"1\":{\"589\":1}}],[\"要点1\",{\"1\":{\"589\":1}}],[\"要生成的表名\",{\"1\":{\"538\":1}}],[\"要设置为这个resultmap所服务的那条sql语句最终要返回的类型\",{\"1\":{\"518\":1}}],[\"要统一管理哪些子工程的artifactid\",{\"1\":{\"453\":1}}],[\"要使用转移\",{\"1\":{\"345\":1}}],[\"要使用global关键字定义\",{\"1\":{\"325\":1}}],[\"要注释的内容\",{\"1\":{\"293\":2}}],[\"要授权的用户名\",{\"1\":{\"277\":1}}],[\"要没有形参\",{\"1\":{\"232\":1}}],[\"要改名\",{\"1\":{\"231\":1}}],[\"要想匹配同一个字符\",{\"1\":{\"346\":1}}],[\"要想在函数内改变函数外的变量\",{\"1\":{\"325\":1}}],[\"要想实现多线程\",{\"1\":{\"193\":1,\"204\":1}}],[\"要想生效\",{\"1\":{\"74\":1}}],[\"要实现序列化的类\",{\"1\":{\"187\":1}}],[\"要遍历的集合\",{\"1\":{\"529\":1}}],[\"要遍历\",{\"1\":{\"182\":1}}],[\"要这样写\",{\"1\":{\"180\":1}}],[\"要求属性名和列名相同即可\",{\"1\":{\"562\":2,\"568\":1,\"575\":1}}],[\"要求当前组件类必须包含无参数构造函数\",{\"1\":{\"557\":1}}],[\"要求程序员具备较高的数据库和\",{\"1\":{\"537\":1}}],[\"要求改为\",{\"1\":{\"375\":1}}],[\"要求方式1\",{\"1\":{\"371\":1}}],[\"要求使用bufferedreade\",{\"1\":{\"188\":1}}],[\"要求将此文件的内容使用字符流复制到d\",{\"1\":{\"188\":1}}],[\"要求将此文件的内容使用字节流复制到d\",{\"1\":{\"188\":1}}],[\"要求类的属性同样要实现serializable接口\",{\"1\":{\"187\":1}}],[\"要求此类是可序列化的\",{\"1\":{\"187\":1}}],[\"要求file1文件一定存在\",{\"1\":{\"182\":1}}],[\"要求添加进set中的元素所在的类\",{\"1\":{\"172\":1}}],[\"要求\",{\"1\":{\"170\":1,\"172\":1,\"424\":2}}],[\"要求在编写程序时\",{\"1\":{\"152\":1}}],[\"要申请对象再\",{\"1\":{\"130\":1}}],[\"要把某个对象交给ioc容器管理\",{\"1\":{\"74\":1}}],[\"要保持请求参数命名一致\",{\"1\":{\"68\":1}}],[\"要执行的代码\",{\"1\":{\"39\":2}}],[\"要添加按钮\",{\"1\":{\"21\":1}}],[\"均会被引入\",{\"1\":{\"411\":1}}],[\"均有效\",{\"1\":{\"411\":1}}],[\"均转为false\",{\"1\":{\"38\":1}}],[\"均需要绑定\",{\"1\":{\"21\":1}}],[\"比较方便\",{\"1\":{\"532\":1}}],[\"比较当前版本号或时间戳与期望值是否一致\",{\"1\":{\"483\":1}}],[\"比较繁琐\",{\"1\":{\"243\":1,\"602\":1}}],[\"比较这两个对象是否相同\",{\"1\":{\"172\":1}}],[\"比较两个字符串是否相等\",{\"1\":{\"166\":1}}],[\"比较运算符>\",{\"1\":{\"38\":1}}],[\"比如说100\",{\"1\":{\"677\":1}}],[\"比如说oracle\",{\"1\":{\"677\":1}}],[\"比如推出了空调清洗\",{\"1\":{\"651\":1}}],[\"比如途虎养车宣布推出\",{\"1\":{\"651\":1}}],[\"比如南方地区是在盛夏时间段进入高温季\",{\"1\":{\"651\":1}}],[\"比如execution\",{\"1\":{\"584\":1}}],[\"比如权限认证\",{\"1\":{\"584\":1}}],[\"比如智联招聘的职位搜索等\",{\"1\":{\"524\":1}}],[\"比如下面的例子\",{\"1\":{\"387\":1}}],[\"比如上面的chessarr2\",{\"1\":{\"365\":1}}],[\"比如可以根据html中的某一个值获得对应的属性\",{\"1\":{\"334\":1}}],[\"比如小学生和大学生都需要写作业\",{\"1\":{\"334\":1}}],[\"比如要创建小学生和大学生两个类\",{\"1\":{\"334\":1}}],[\"比如有人写了洗衣机这个类\",{\"1\":{\"334\":1}}],[\"比如你要去atm存钱和取钱\",{\"1\":{\"334\":1}}],[\"比如我们要往atm里面存50\",{\"1\":{\"334\":1}}],[\"比如ticket\",{\"1\":{\"197\":1,\"208\":1}}],[\"比如多个人同时做不同的事\",{\"1\":{\"192\":1,\"203\":1}}],[\"比如腿的个数不能为负数\",{\"1\":{\"135\":1}}],[\"比如银行的最小存款数\",{\"1\":{\"130\":1}}],[\"比如往表中插入日志操作\",{\"1\":{\"98\":1}}],[\"比如\",{\"1\":{\"34\":1,\"93\":1,\"98\":1,\"508\":2,\"515\":1,\"525\":1,\"665\":1}}],[\"布尔类型\",{\"1\":{\"112\":1,\"334\":1}}],[\"布尔\",{\"1\":{\"38\":1}}],[\"布局原理\",{\"1\":{\"255\":1}}],[\"布局标签\",{\"0\":{\"36\":1},\"1\":{\"36\":1}}],[\"布局\",{\"0\":{\"21\":1}}],[\"布局与功能禁用\",{\"1\":{\"1\":1}}],[\"常作为io流的具体类的构造器的形参\",{\"1\":{\"182\":1}}],[\"常量必须进行赋值\",{\"1\":{\"144\":1}}],[\"常量用大写字符表示\",{\"1\":{\"131\":1}}],[\"常量池\",{\"1\":{\"125\":1}}],[\"常量\",{\"1\":{\"114\":1,\"139\":1,\"143\":1}}],[\"常量名称完全大写\",{\"1\":{\"144\":1}}],[\"常量名称\",{\"1\":{\"143\":1,\"144\":1}}],[\"常量名\",{\"1\":{\"110\":1}}],[\"常量的值就不能改变\",{\"1\":{\"38\":1}}],[\"常用小物件转移到背包\",{\"1\":{\"651\":1}}],[\"常用的选项包括\",{\"1\":{\"686\":1}}],[\"常用的注解有\",{\"1\":{\"566\":1}}],[\"常用的单一架构javaee项目框架演进\",{\"1\":{\"545\":1}}],[\"常用的插件\",{\"1\":{\"413\":1}}],[\"常用的元字符\",{\"1\":{\"347\":1}}],[\"常用的总结\",{\"0\":{\"347\":1}}],[\"常用来处理属性文件\",{\"1\":{\"179\":1}}],[\"常用string类作为map的\",{\"1\":{\"177\":1}}],[\"常用于进行接口测试\",{\"1\":{\"68\":1}}],[\"常用组件\",{\"0\":{\"51\":1}}],[\"常见操作\",{\"1\":{\"317\":1}}],[\"常见产品\",{\"1\":{\"78\":1}}],[\"常见的全自动\",{\"1\":{\"537\":1}}],[\"常见的半自动\",{\"1\":{\"537\":1}}],[\"常见的构建工具包括\",{\"1\":{\"403\":1}}],[\"常见的隔离级别包括\",{\"1\":{\"248\":1,\"611\":1}}],[\"常见的响应头\",{\"1\":{\"64\":1}}],[\"常见的数据库连接池\",{\"1\":{\"10\":1}}],[\"常见事件\",{\"1\":{\"41\":1}}],[\"数量\",{\"1\":{\"471\":1}}],[\"数学\",{\"1\":{\"334\":3}}],[\"数值越小\",{\"1\":{\"265\":1}}],[\"数组类型\",{\"1\":{\"501\":1}}],[\"数组使用一次就不能用\",{\"1\":{\"369\":1}}],[\"数组最大容量\",{\"1\":{\"367\":1,\"370\":1}}],[\"数组怎么转集合\",{\"1\":{\"170\":1}}],[\"数组存储对象的特点\",{\"1\":{\"169\":1}}],[\"数组下标越界异常\",{\"1\":{\"152\":1}}],[\"数组的排序\",{\"0\":{\"126\":1}}],[\"数组的默认类型\",{\"1\":{\"124\":1}}],[\"数组的长度\",{\"1\":{\"124\":1}}],[\"数组参数\",{\"1\":{\"68\":1}}],[\"数组集合参数\",{\"1\":{\"68\":1}}],[\"数组\",{\"0\":{\"123\":1},\"1\":{\"40\":1,\"113\":1,\"169\":1,\"365\":2,\"552\":1}}],[\"数字字母空白元字符\",{\"1\":{\"345\":1}}],[\"数字和汉字\",{\"1\":{\"317\":1}}],[\"数字\",{\"1\":{\"38\":1,\"40\":1}}],[\"数字不能开头\",{\"1\":{\"38\":1}}],[\"数据结构用树形结构呈现\",{\"1\":{\"669\":1}}],[\"数据结构是算法的基础\",{\"1\":{\"365\":1}}],[\"数据结构是一门研究组织数据方式的学科\",{\"1\":{\"365\":1}}],[\"数据操作等代码片段\",{\"1\":{\"545\":1}}],[\"数据变更语句\",{\"1\":{\"515\":1}}],[\"数据输出总体上有两种形式\",{\"1\":{\"507\":1}}],[\"数据输入\",{\"0\":{\"499\":1},\"1\":{\"489\":1}}],[\"数据传入的形式\",{\"1\":{\"501\":1}}],[\"数据源\",{\"1\":{\"496\":1,\"665\":1}}],[\"数据更新\",{\"1\":{\"483\":1}}],[\"数据包套接字\",{\"1\":{\"190\":1,\"201\":1}}],[\"数据在两个socket间通过io传输\",{\"1\":{\"190\":1,\"201\":1}}],[\"数据库脚本执行\",{\"0\":{\"651\":1},\"1\":{\"644\":1}}],[\"数据库查询\",{\"1\":{\"641\":1}}],[\"数据库信息依然使用druiddatasource实例替代\",{\"1\":{\"628\":1}}],[\"数据库信息以及mapper扫描包设置使用java配置类处理\",{\"1\":{\"628\":1}}],[\"数据库提取一个配置类\",{\"1\":{\"628\":1}}],[\"数据库配置类\",{\"1\":{\"628\":1}}],[\"数据库配置\",{\"1\":{\"628\":1}}],[\"数据库时\",{\"1\":{\"628\":2}}],[\"数据库方法调用\",{\"1\":{\"628\":1}}],[\"数据库和连接池配置类\",{\"1\":{\"607\":1}}],[\"数据库和实体类添加逻辑删除字段\",{\"1\":{\"481\":1}}],[\"数据库相关的配置\",{\"1\":{\"607\":1}}],[\"数据库相关配置启动器\",{\"1\":{\"461\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"数据库准备\",{\"1\":{\"562\":1,\"568\":1,\"575\":1,\"625\":1}}],[\"数据库不可能永远是你所想或所需的那个样子\",{\"1\":{\"517\":1}}],[\"数据库厂商标识\",{\"1\":{\"496\":1}}],[\"数据库连接异常等\",{\"1\":{\"584\":1}}],[\"数据库连接信息必须在druid属性下\",{\"1\":{\"677\":1}}],[\"数据库连接信息等等\",{\"1\":{\"667\":1}}],[\"数据库连接信息\",{\"1\":{\"493\":1,\"628\":1}}],[\"数据库连接池配置\",{\"1\":{\"628\":2}}],[\"数据库连接池的实现\",{\"1\":{\"10\":1}}],[\"数据库连接池是个容器\",{\"1\":{\"10\":1,\"78\":1}}],[\"数据库连接池\",{\"0\":{\"10\":1,\"78\":1},\"1\":{\"625\":1}}],[\"数据库也需要添加version字段\",{\"1\":{\"484\":1}}],[\"数据库锁\",{\"1\":{\"483\":1}}],[\"数据库字段名\",{\"1\":{\"480\":1}}],[\"数据库系统为了保证数据一致性所遵循的规定\",{\"1\":{\"248\":1,\"611\":1}}],[\"数据库事务的隔离级别是指在多个事务并发执行时\",{\"1\":{\"248\":1,\"611\":1}}],[\"数据库驱动和连接池\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"数据库驱动\",{\"1\":{\"244\":1,\"606\":1}}],[\"数据库\",{\"0\":{\"341\":1},\"1\":{\"230\":1,\"460\":1,\"480\":1,\"517\":1,\"561\":1},\"2\":{\"343\":1}}],[\"数据库日期的转换\",{\"1\":{\"163\":1}}],[\"数据值\",{\"1\":{\"143\":1,\"144\":1}}],[\"数据封装\",{\"1\":{\"81\":1}}],[\"数据访问\",{\"1\":{\"74\":1,\"665\":1}}],[\"数据访问层\",{\"1\":{\"71\":1}}],[\"数据交换\",{\"1\":{\"45\":1}}],[\"数据类型分为\",{\"1\":{\"38\":1}}],[\"数据类型可以省略\",{\"1\":{\"17\":1}}],[\"数据类型名\",{\"1\":{\"11\":1}}],[\"数据类型\",{\"1\":{\"7\":1,\"8\":1,\"11\":1,\"38\":1,\"143\":1,\"144\":1}}],[\"组装删除条件\",{\"1\":{\"476\":1}}],[\"组装排序条件\",{\"1\":{\"476\":1}}],[\"组装查询条件\",{\"1\":{\"476\":1}}],[\"组装条件\",{\"0\":{\"476\":1},\"1\":{\"459\":1}}],[\"组成的成熟技术\",{\"1\":{\"547\":1}}],[\"组成网页的部件\",{\"1\":{\"50\":1}}],[\"组成\",{\"1\":{\"40\":1,\"52\":1,\"92\":1}}],[\"组成字符可以是任何字母\",{\"1\":{\"38\":1}}],[\"组件扫描\",{\"1\":{\"665\":1}}],[\"组件分类管理\",{\"1\":{\"619\":1}}],[\"组件管理\",{\"1\":{\"613\":1}}],[\"组件beanname问题\",{\"1\":{\"564\":1}}],[\"组件标记注解和区别\",{\"1\":{\"564\":1}}],[\"组件添加标记注解\",{\"1\":{\"564\":1}}],[\"组件周期方法配置\",{\"1\":{\"560\":1,\"565\":1}}],[\"组件信息声明\",{\"1\":{\"555\":1}}],[\"组件是使用你提供给容器的配置元数据\",{\"1\":{\"555\":1}}],[\"组件是映射到应用程序中所有可重用组件的java对象\",{\"1\":{\"551\":1}}],[\"组件交给spring\",{\"1\":{\"555\":1}}],[\"组件交给spring管理优势\",{\"1\":{\"551\":1}}],[\"组件一定是对象\",{\"1\":{\"551\":1}}],[\"组件属性属性赋值\",{\"1\":{\"551\":1}}],[\"组件可以完全交给spring\",{\"1\":{\"551\":1}}],[\"组件和组件管理概念\",{\"0\":{\"551\":1},\"1\":{\"542\":1}}],[\"组件名字默认为类的首字母小写\",{\"1\":{\"231\":1}}],[\"组件作用域配置\",{\"1\":{\"560\":1,\"565\":1}}],[\"组件作用域可参考xml组件管理的组件作用域\",{\"1\":{\"232\":1}}],[\"组件作用域\",{\"0\":{\"228\":1}}],[\"组件类的全限定符\",{\"1\":{\"557\":1}}],[\"组件类\",{\"1\":{\"222\":1}}],[\"组件\",{\"0\":{\"557\":1,\"558\":1,\"560\":1,\"565\":1},\"1\":{\"50\":1,\"221\":1,\"542\":4,\"551\":1,\"552\":1,\"553\":1,\"555\":1}}],[\"组件化\",{\"1\":{\"47\":1}}],[\"组件点击之后\",{\"1\":{\"28\":1}}],[\"组件对象存活周期管理\",{\"1\":{\"551\":1}}],[\"组件对象之间引用\",{\"1\":{\"551\":1}}],[\"组件对象实例化\",{\"1\":{\"551\":1}}],[\"组件对象\",{\"1\":{\"26\":2,\"557\":1}}],[\"写范型类型即可\",{\"1\":{\"508\":1}}],[\"写分页等同于普通\",{\"1\":{\"460\":1}}],[\"写文件\",{\"1\":{\"334\":1}}],[\"写一个静态代理类\",{\"1\":{\"211\":1}}],[\"写进去\",{\"1\":{\"188\":1}}],[\"写进文件的小程序\",{\"1\":{\"186\":1}}],[\"写\",{\"1\":{\"188\":1}}],[\"写不进去的时候在写入后面加上flush\",{\"1\":{\"186\":1}}],[\"写出的文件\",{\"1\":{\"185\":1}}],[\"写了则用指定的super调用\",{\"1\":{\"136\":1}}],[\"写入到buffer里面\",{\"1\":{\"185\":1}}],[\"写入操作\",{\"1\":{\"184\":1}}],[\"写入可以没有这个文件\",{\"1\":{\"184\":1}}],[\"写入浏览器控制台\",{\"1\":{\"38\":1}}],[\"写入html在浏览器展示\",{\"1\":{\"38\":1}}],[\"写在标签的style属性中\",{\"1\":{\"35\":1}}],[\"输出进行测试\",{\"1\":{\"668\":1,\"669\":1}}],[\"输出结果\",{\"1\":{\"588\":1}}],[\"输出传入的参数和计算后的返回结果\",{\"1\":{\"582\":1}}],[\"输出运过程sql日志\",{\"1\":{\"496\":1}}],[\"输出概述\",{\"0\":{\"507\":1},\"1\":{\"489\":1}}],[\"输出版本信息即可\",{\"1\":{\"394\":1,\"440\":1}}],[\"输出逆序后数组的整数\",{\"1\":{\"377\":1}}],[\"输出为一行\",{\"1\":{\"377\":1}}],[\"输出格式\",{\"0\":{\"377\":1}}],[\"输出节点信息\",{\"1\":{\"370\":1,\"371\":1}}],[\"输出\",{\"1\":{\"334\":1}}],[\"输出参数和输出计算后的返回值\",{\"1\":{\"211\":1,\"582\":1}}],[\"输出的物理文件可以不存在\",{\"1\":{\"184\":1}}],[\"输出流对应的文件可以不存在\",{\"1\":{\"186\":1}}],[\"输出流\",{\"1\":{\"181\":2}}],[\"输出语句\",{\"1\":{\"38\":1}}],[\"输入信息即可\",{\"1\":{\"447\":1}}],[\"输入为两行\",{\"1\":{\"376\":1}}],[\"输入格式\",{\"0\":{\"376\":1}}],[\"输入一个数字\",{\"1\":{\"368\":1}}],[\"输入一个值并赋值给bl\",{\"1\":{\"296\":1}}],[\"输入的不是合理数字\",{\"1\":{\"334\":1}}],[\"输入的内容在字典里面会返回true\",{\"1\":{\"334\":1}}],[\"输入的值都将会被作为字符串读取\",{\"1\":{\"296\":1}}],[\"输入q结束程序\",{\"1\":{\"334\":2}}],[\"输入\",{\"1\":{\"334\":2}}],[\"输入和输出\",{\"1\":{\"334\":1}}],[\"输入内容\",{\"1\":{\"186\":1}}],[\"输入流对应的文件src一定要存在\",{\"1\":{\"186\":1}}],[\"输入流\",{\"1\":{\"181\":2}}],[\"输入密码\",{\"1\":{\"29\":1}}],[\"输入账户\",{\"1\":{\"29\":1}}],[\"输入框\",{\"1\":{\"29\":2}}],[\"大多数\",{\"1\":{\"662\":1}}],[\"大概流程\",{\"1\":{\"655\":2}}],[\"大概率是因为程序运行出现了问题\",{\"1\":{\"609\":1}}],[\"大量字段的\",{\"1\":{\"492\":1}}],[\"大大精简了元素种类\",{\"1\":{\"524\":1}}],[\"大大降低了项目的出错风险和提高开发效率\",{\"1\":{\"403\":1}}],[\"大大提高了开发效率和质量\",{\"1\":{\"390\":1,\"438\":1}}],[\"大小写均可\",{\"1\":{\"345\":1}}],[\"大明\",{\"1\":{\"334\":1}}],[\"大\",{\"1\":{\"334\":1}}],[\"大都支持多进程的\",{\"1\":{\"192\":1,\"203\":1}}],[\"大部分被废弃了\",{\"1\":{\"163\":1}}],[\"大驼峰\",{\"1\":{\"110\":1}}],[\"大括号代表代码块\",{\"1\":{\"38\":1}}],[\"大处着眼\",{\"1\":{\"15\":1}}],[\"结构\",{\"1\":{\"592\":1}}],[\"结构和命名固定\",{\"1\":{\"444\":1}}],[\"结论\",{\"0\":{\"389\":1},\"1\":{\"498\":1,\"503\":1,\"598\":1,\"621\":1}}],[\"结合for循环使用\",{\"1\":{\"334\":1}}],[\"结束值\",{\"1\":{\"333\":1}}],[\"结束事务\",{\"1\":{\"216\":1}}],[\"结束laber标签所在的那个循环\",{\"1\":{\"122\":1}}],[\"结束\",{\"1\":{\"122\":2,\"306\":1}}],[\"结尾分号可有可无\",{\"1\":{\"38\":1}}],[\"结果封装\",{\"1\":{\"655\":1,\"656\":1}}],[\"结果封装类\",{\"1\":{\"652\":1}}],[\"结果获取\",{\"1\":{\"641\":1}}],[\"结果\",{\"1\":{\"583\":1}}],[\"结果映射是\",{\"1\":{\"515\":1}}],[\"结果集\",{\"1\":{\"471\":1}}],[\"结果集对象\",{\"1\":{\"7\":1}}],[\"结果会打印出来\",{\"1\":{\"147\":1}}],[\"结果为123\",{\"1\":{\"122\":1}}],[\"结果啥也没有\",{\"1\":{\"121\":1}}],[\"结果是80\",{\"1\":{\"299\":1}}],[\"结果是3\",{\"1\":{\"124\":1}}],[\"结果是a后面8\",{\"1\":{\"120\":1}}],[\"结果是r类型的对象\",{\"1\":{\"17\":1}}],[\"结果分别为\",{\"1\":{\"112\":1}}],[\"放在了插入语句的前面\",{\"1\":{\"512\":1}}],[\"放在最后\",{\"1\":{\"28\":2}}],[\"放行后访问对应资源\",{\"1\":{\"93\":1}}],[\"放行\",{\"1\":{\"93\":3,\"657\":1}}],[\"放置任意数量的<script>\",{\"1\":{\"37\":1}}],[\"它减少了配置文件中需要的特殊字符和语法\",{\"1\":{\"669\":1}}],[\"它更容易被人类读懂和解释\",{\"1\":{\"669\":1}}],[\"它自动配置应用程序\",{\"1\":{\"665\":1}}],[\"它包含了\",{\"1\":{\"665\":1}}],[\"它默认会扫描\",{\"1\":{\"665\":1}}],[\"它默认扫描\",{\"1\":{\"664\":1}}],[\"它通过智能地分析类路径\",{\"1\":{\"665\":1}}],[\"它通过将通用的横切关注点\",{\"1\":{\"584\":1}}],[\"它定义了标准的配置文件命名约定\",{\"1\":{\"665\":1}}],[\"它创建应用程序上下文\",{\"1\":{\"664\":1}}],[\"它根据项目的依赖项自动配置spring应用程序的行为\",{\"1\":{\"664\":1}}],[\"它利用一种称为\",{\"1\":{\"584\":1}}],[\"它导致了大量代码的重复\",{\"1\":{\"584\":1}}],[\"它扩展了以下功能\",{\"1\":{\"552\":1}}],[\"它允许使用java代码定义和配置bean\",{\"1\":{\"664\":1}}],[\"它允许表达组成应用程序的组件以及这些组件之间丰富的相互依赖关系\",{\"1\":{\"552\":1}}],[\"它允许应用程序重复使用一个现有的数据库连接\",{\"1\":{\"78\":1}}],[\"它允许应用程序重复使用一个现有的数据库连\",{\"1\":{\"10\":1}}],[\"它将对象和关系数据库的概念进行映射\",{\"1\":{\"537\":1}}],[\"它由某位作者所写\",{\"1\":{\"517\":1}}],[\"它由twitter公司提出\",{\"1\":{\"480\":1}}],[\"它们的初始化顺序可能会导致属性注入的问题\",{\"1\":{\"628\":1}}],[\"它们各自负责不同的层次和功能\",{\"1\":{\"619\":1}}],[\"它们不仅要负责创建组件的对象\",{\"1\":{\"552\":1}}],[\"它们都是不区分大小写的\",{\"1\":{\"508\":1}}],[\"它们应该是同一个版本\",{\"1\":{\"418\":1,\"452\":1}}],[\"它仅用于\",{\"1\":{\"508\":1}}],[\"它支持自定义\",{\"1\":{\"491\":1}}],[\"它要去管理子工程\",{\"1\":{\"418\":1,\"452\":1}}],[\"它背后的需求是\",{\"1\":{\"418\":1,\"452\":1}}],[\"它能够大大提高软件开发效率\",{\"1\":{\"403\":1}}],[\"它能使网页可交互\",{\"1\":{\"37\":1}}],[\"它提供一种标准化的项目结构\",{\"1\":{\"401\":1,\"445\":1}}],[\"它提供了主要领域\",{\"1\":{\"665\":1}}],[\"它提供了在企业环境中采用\",{\"1\":{\"549\":1}}],[\"它提供了很多功能\",{\"1\":{\"547\":1}}],[\"它提供了多种分页方式\",{\"1\":{\"534\":1}}],[\"它提供了一种简洁的方式来直接引用已有的方法或构造函数\",{\"1\":{\"478\":1}}],[\"它提供了一种更简洁\",{\"1\":{\"478\":1}}],[\"它提供了许多方法来支持各种条件操作符\",{\"1\":{\"474\":1}}],[\"它提供了更加灵活的初始化定制功能\",{\"1\":{\"230\":1,\"561\":1}}],[\"它提供了三种形式的依赖注入\",{\"1\":{\"221\":1,\"553\":1}}],[\"它会将多个字符串采用固定底分隔符连接在一起\",{\"1\":{\"317\":1}}],[\"它的主要作用是简化和加速spring\",{\"1\":{\"665\":1}}],[\"它的主要作用是将三个常用注解组合在一起\",{\"1\":{\"664\":1}}],[\"它的默认值是\",{\"1\":{\"612\":1}}],[\"它的作用是将通用的横切关注点与业务逻辑分离\",{\"1\":{\"584\":1}}],[\"它的作用就是通过提供一个代理类\",{\"1\":{\"211\":1,\"583\":1}}],[\"它的背景是\",{\"1\":{\"418\":1,\"452\":1}}],[\"它的请求数量和频率不能过高\",{\"1\":{\"334\":1}}],[\"它的所有子元素自动成为容器成员\",{\"1\":{\"255\":1}}],[\"它是一组预定义的依赖项集合\",{\"1\":{\"665\":1}}],[\"它是一个非常复杂的结果映射\",{\"1\":{\"517\":1}}],[\"它是一个泛化的概念\",{\"1\":{\"231\":1,\"564\":1}}],[\"它是spring\",{\"1\":{\"664\":1}}],[\"它是springioc容器标准化超接口\",{\"1\":{\"221\":1,\"552\":1}}],[\"它是架设在局域网内的仓库服务\",{\"1\":{\"421\":1}}],[\"它是生命周期中最核心的部分\",{\"1\":{\"406\":1,\"450\":1}}],[\"它可以是一串随机生成的字符或数字\",{\"1\":{\"655\":1}}],[\"它可以通过定义匹配规则\",{\"1\":{\"590\":1}}],[\"它可以用来构建更高级别的应用程序\",{\"1\":{\"545\":1}}],[\"它可以根据数据库表结构和设置的参数生成对应的实体类\",{\"1\":{\"538\":1}}],[\"它可以从不同的来源\",{\"1\":{\"230\":1,\"561\":1}}],[\"它可以实现无痛的网络连接\",{\"1\":{\"189\":1,\"200\":1}}],[\"它实现了runnable接口中的run方法\",{\"1\":{\"196\":1,\"207\":1}}],[\"它没有具体的实例\",{\"1\":{\"138\":1}}],[\"颜色\",{\"1\":{\"36\":1}}],[\"背景色\",{\"1\":{\"36\":1}}],[\"宽度80列\",{\"1\":{\"120\":1}}],[\"宽度\",{\"1\":{\"36\":1}}],[\"宽度和高度默认由内容撑开\",{\"1\":{\"36\":1}}],[\"宽度默认是父元素的宽度\",{\"1\":{\"36\":1}}],[\"实则执行任务\",{\"1\":{\"651\":1}}],[\"实施\",{\"1\":{\"617\":1}}],[\"实验五\",{\"0\":{\"561\":1,\"568\":1,\"575\":1},\"1\":{\"542\":3}}],[\"实验四\",{\"0\":{\"560\":1,\"567\":1,\"574\":1},\"1\":{\"542\":3}}],[\"实验三\",{\"0\":{\"559\":1,\"566\":1,\"573\":1},\"1\":{\"542\":3}}],[\"实验二\",{\"0\":{\"558\":1,\"565\":1,\"572\":1},\"1\":{\"542\":3}}],[\"实验一\",{\"0\":{\"557\":1,\"564\":1,\"571\":1},\"1\":{\"542\":3,\"557\":1}}],[\"实验六\",{\"0\":{\"562\":1},\"1\":{\"236\":1,\"542\":1,\"572\":1}}],[\"实战\",{\"1\":{\"334\":1}}],[\"实数\",{\"1\":{\"307\":1}}],[\"实参\",{\"1\":{\"197\":1}}],[\"实例的最佳作用域是方法作用域\",{\"1\":{\"628\":1}}],[\"实例的引用来解决\",{\"1\":{\"238\":1,\"573\":1}}],[\"实例代码\",{\"1\":{\"474\":1}}],[\"实例方法名\",{\"1\":{\"478\":2}}],[\"实例方法引用\",{\"1\":{\"478\":1}}],[\"实例方法\",{\"1\":{\"327\":1}}],[\"实例方法必须是非static的\",{\"1\":{\"223\":1,\"557\":1}}],[\"实例之间的依赖关系\",{\"1\":{\"238\":1,\"573\":1}}],[\"实例\",{\"1\":{\"195\":1,\"206\":1,\"230\":2,\"238\":2,\"334\":1,\"561\":2,\"573\":2,\"628\":1}}],[\"实例化sqlsessionfactory工厂\",{\"1\":{\"628\":3}}],[\"实例化对象逻辑\",{\"1\":{\"628\":1}}],[\"实例化组件和关系维护的过程都是在ioc容器中实现的\",{\"1\":{\"559\":1}}],[\"实例化ioc容器\",{\"1\":{\"555\":2}}],[\"实例化jdbctemplate对象\",{\"1\":{\"244\":1,\"607\":1}}],[\"实例化datasource加入到ioc容器\",{\"1\":{\"244\":1,\"607\":1}}],[\"实例化并且指定配置文件\",{\"1\":{\"226\":1,\"559\":1}}],[\"实例化\",{\"1\":{\"189\":1,\"200\":1}}],[\"实例化的方式\",{\"1\":{\"189\":1,\"200\":1}}],[\"实例对象\",{\"1\":{\"130\":1,\"478\":1}}],[\"实例变量\",{\"1\":{\"130\":2}}],[\"实体中\",{\"1\":{\"514\":1}}],[\"实体对象写null即可\",{\"1\":{\"477\":1,\"479\":1}}],[\"实体对象封装操作类\",{\"1\":{\"464\":1,\"465\":1,\"466\":1}}],[\"实体对象\",{\"1\":{\"463\":1,\"465\":1}}],[\"实体类添加\",{\"1\":{\"625\":1}}],[\"实体类添加逻辑删除属性\",{\"1\":{\"481\":1}}],[\"实体类设计都是两两考虑\",{\"1\":{\"517\":1}}],[\"实体类设计\",{\"1\":{\"517\":3,\"540\":1}}],[\"实体类设计关系\",{\"1\":{\"517\":1}}],[\"实体类设计方案\",{\"1\":{\"517\":1}}],[\"实体类中包含集合\",{\"1\":{\"501\":1}}],[\"实体类类型\",{\"1\":{\"501\":1}}],[\"实体类类型参数\",{\"1\":{\"489\":1}}],[\"实体类准备\",{\"1\":{\"493\":1,\"514\":1,\"562\":1,\"568\":1,\"575\":1,\"680\":1}}],[\"实体类的字段与数据库表的主键字段不同名\",{\"1\":{\"480\":1}}],[\"实体类主键字段\",{\"1\":{\"480\":1}}],[\"实体类形式可以实现修改\",{\"1\":{\"477\":1}}],[\"实体类只需继承\",{\"1\":{\"460\":1}}],[\"实体类\",{\"1\":{\"138\":1,\"480\":2}}],[\"实体类属性和数据库字段对应关系\",{\"0\":{\"513\":1},\"1\":{\"489\":1}}],[\"实体类属性名和数据库表查询返回结果一致\",{\"1\":{\"81\":1}}],[\"实体类属性采用驼峰命名\",{\"1\":{\"80\":1}}],[\"实体参数\",{\"1\":{\"68\":1}}],[\"实现过程\",{\"0\":{\"673\":1},\"1\":{\"660\":1}}],[\"实现根据id的查询\",{\"1\":{\"656\":1}}],[\"实现代码\",{\"1\":{\"655\":1}}],[\"实现代理\",{\"1\":{\"587\":1}}],[\"实现springmvc组件声明标准化接口webmvcconfigurer\",{\"1\":{\"626\":1}}],[\"实现springioc容器接管一切组件\",{\"1\":{\"617\":1}}],[\"实现serializable\",{\"1\":{\"187\":1}}],[\"实现计算接口\",{\"1\":{\"582\":1,\"588\":1}}],[\"实现factorybean接口时需要指定泛型\",{\"1\":{\"561\":1}}],[\"实现file文件的读取\",{\"1\":{\"183\":1}}],[\"实现filter接口\",{\"1\":{\"93\":1}}],[\"实现ioc容器中bean之间的引用\",{\"1\":{\"558\":1}}],[\"实现步骤\",{\"0\":{\"555\":1},\"1\":{\"542\":1,\"655\":2,\"657\":1}}],[\"实现主键数据回显示\",{\"1\":{\"507\":1}}],[\"实现的\",{\"1\":{\"498\":1}}],[\"实现的方式\",{\"1\":{\"195\":1,\"206\":1}}],[\"实现简单但不太安全\",{\"1\":{\"248\":1,\"611\":1}}],[\"实现了对象之间的解耦合\",{\"1\":{\"221\":1,\"553\":1}}],[\"实现了代码和数据的分离\",{\"1\":{\"195\":1,\"206\":1}}],[\"实现了那个接口\",{\"1\":{\"26\":2}}],[\"实现接口中的run\",{\"1\":{\"195\":1,\"206\":1}}],[\"实现runnable接口\",{\"0\":{\"195\":1,\"206\":1}}],[\"实现分线程的创建和调用\",{\"1\":{\"194\":1,\"205\":1}}],[\"实现文件的复制\",{\"1\":{\"185\":1}}],[\"实现comparable\",{\"1\":{\"178\":1}}],[\"实现类2\",{\"1\":{\"176\":1}}],[\"实现类1\",{\"1\":{\"176\":1}}],[\"实现类必须覆盖重写接口所有的抽象方法\",{\"1\":{\"144\":1}}],[\"实现类名称\",{\"1\":{\"139\":1,\"145\":1}}],[\"实现类\",{\"1\":{\"139\":1,\"151\":1,\"562\":2,\"568\":2,\"575\":2,\"655\":1}}],[\"实现\",{\"1\":{\"99\":1,\"139\":3,\"188\":1,\"316\":1,\"582\":1,\"588\":1}}],[\"实现handlerlntereptor接口\",{\"1\":{\"94\":1}}],[\"实现数据的双向绑定\",{\"1\":{\"42\":1}}],[\"实际意义\",{\"1\":{\"593\":1}}],[\"实际上是对被拦截的方法的封装\",{\"1\":{\"534\":1}}],[\"实际上代表的含义\",{\"1\":{\"160\":1}}],[\"实际开发时\",{\"1\":{\"517\":1,\"593\":1}}],[\"实际开发中\",{\"1\":{\"498\":1}}],[\"实际开发网页中\",{\"1\":{\"36\":1}}],[\"实际参数\",{\"1\":{\"325\":1}}],[\"实际参数列表\",{\"1\":{\"39\":1,\"589\":1}}],[\"实际情况中\",{\"1\":{\"135\":1}}],[\"外面\",{\"1\":{\"593\":1}}],[\"外用内\",{\"1\":{\"149\":1}}],[\"外循环行\",{\"1\":{\"121\":1}}],[\"外部配置文件\",{\"1\":{\"606\":1}}],[\"外部设置配置类\",{\"1\":{\"571\":1}}],[\"外部方法名称\",{\"1\":{\"150\":1}}],[\"外部类\",{\"1\":{\"150\":1}}],[\"外部类成员变量名\",{\"1\":{\"149\":1}}],[\"外部类$内部类\",{\"1\":{\"149\":1}}],[\"外部类名称\",{\"1\":{\"149\":4,\"150\":1}}],[\"外部js文件中\",{\"1\":{\"37\":1}}],[\"外部脚本\",{\"1\":{\"37\":1}}],[\"外边距\",{\"1\":{\"36\":1}}],[\"外边距区域\",{\"1\":{\"35\":1}}],[\"外联样式\",{\"1\":{\"35\":1}}],[\"边框\",{\"1\":{\"36\":1}}],[\"边框区域\",{\"1\":{\"35\":1}}],[\"边界布局\",{\"1\":{\"23\":2}}],[\"内含分布式唯一\",{\"1\":{\"460\":1}}],[\"内置全局拦截插件\",{\"1\":{\"460\":1}}],[\"内置性能分析插件\",{\"1\":{\"460\":1}}],[\"内置分页插件\",{\"1\":{\"460\":1}}],[\"内置代码生成器\",{\"1\":{\"460\":1}}],[\"内置通用\",{\"1\":{\"460\":1}}],[\"内置函数id\",{\"1\":{\"292\":1}}],[\"内置函数type\",{\"1\":{\"292\":1}}],[\"内存情况\",{\"1\":{\"165\":1}}],[\"内存的基本结构\",{\"1\":{\"125\":1}}],[\"内用外\",{\"1\":{\"149\":1}}],[\"内部包含\",{\"1\":{\"668\":1}}],[\"内部包含常见的单表操作\",{\"1\":{\"462\":1}}],[\"内部给常用的数据类型设定了很多别名\",{\"1\":{\"508\":1}}],[\"内部自动生成的\",{\"1\":{\"492\":1}}],[\"内部对象注入容器\",{\"1\":{\"462\":1}}],[\"内部制定版本号即可\",{\"1\":{\"410\":1,\"447\":1}}],[\"内部\",{\"1\":{\"191\":1,\"202\":1}}],[\"内部可以调用静态的属性或静态的方法\",{\"1\":{\"130\":1}}],[\"内部类名称\",{\"1\":{\"149\":3}}],[\"内部类\",{\"0\":{\"148\":1},\"1\":{\"130\":2}}],[\"内部脚本\",{\"1\":{\"37\":1}}],[\"内循环行里面的内容\",{\"1\":{\"121\":1}}],[\"内聚\",{\"1\":{\"72\":1}}],[\"内容\",{\"1\":{\"351\":1,\"461\":1,\"652\":1}}],[\"内容重复n次\",{\"1\":{\"305\":1}}],[\"内容连接起来\",{\"1\":{\"293\":1}}],[\"内容为\",{\"1\":{\"188\":2}}],[\"内容可以是\",{\"1\":{\"42\":1}}],[\"内容区域\",{\"1\":{\"35\":1}}],[\"内边距\",{\"1\":{\"36\":1}}],[\"内边距区域\",{\"1\":{\"35\":1}}],[\"内嵌样式\",{\"1\":{\"35\":1}}],[\"由切入点表达式控制当前通知方法要作用在哪一个目标方法上\",{\"1\":{\"588\":1,\"591\":1}}],[\"由第三方框架\",{\"1\":{\"566\":1}}],[\"由第三方组织实现此接口\",{\"1\":{\"10\":1,\"78\":1}}],[\"由bean的作用域scope属性指定\",{\"1\":{\"560\":1,\"565\":1}}],[\"由springsource公司开发\",{\"1\":{\"547\":1}}],[\"由以下几个部分组成\",{\"1\":{\"480\":1}}],[\"由要匹配的正则表达式转换而来\",{\"1\":{\"320\":1}}],[\"由子类重写此抽象方法\",{\"1\":{\"138\":1}}],[\"由类创建的所有对象\",{\"1\":{\"130\":1}}],[\"由于yaml格式的特点\",{\"1\":{\"669\":1}}],[\"由于数组直接打印看不到具体数据\",{\"1\":{\"589\":1}}],[\"由于数字签名的存在\",{\"1\":{\"92\":1}}],[\"由于半自动\",{\"1\":{\"537\":1}}],[\"由于它的异常强大\",{\"1\":{\"515\":1}}],[\"由于启用匿名登录后\",{\"1\":{\"423\":1}}],[\"由于私服会缓存中央仓库得构件\",{\"1\":{\"421\":1}}],[\"由于外部容器已经提供\",{\"1\":{\"411\":1}}],[\"由于与mybatis整合\",{\"1\":{\"74\":1}}],[\"由于语法结构简单\",{\"1\":{\"40\":1}}],[\"由mave团队维护的全球唯一的\",{\"1\":{\"55\":1}}],[\"由盒子将页面中的元素包含在一个矩形区域内\",{\"1\":{\"35\":1}}],[\"标识了应用程序的主类\",{\"1\":{\"664\":1}}],[\"标识不提供针对该方法的访问控制\",{\"1\":{\"566\":1}}],[\"标识授权角色\",{\"1\":{\"566\":1}}],[\"标识注解处理器支持的java源码版本\",{\"1\":{\"566\":1}}],[\"标识注解处理器所处理的注解类型\",{\"1\":{\"566\":1}}],[\"标识注入的资源的默认名称\",{\"1\":{\"566\":1}}],[\"标识注入的资源的身份验证类型\",{\"1\":{\"566\":1}}],[\"标识一个活动无需进行身份验证\",{\"1\":{\"566\":1}}],[\"标识一个组件的生命周期只有一个唯一的实例\",{\"1\":{\"566\":1}}],[\"标识一个需要被注入的依赖组件\",{\"1\":{\"566\":1}}],[\"标识一个需要注入的资源\",{\"1\":{\"566\":1}}],[\"标识一个被依赖注入的组件的名称\",{\"1\":{\"566\":1}}],[\"标识一个方法作为销毁方法\",{\"1\":{\"566\":1}}],[\"标识一个方法作为初始化方法\",{\"1\":{\"566\":1}}],[\"标识一个方法重写了父类中的方法\",{\"1\":{\"566\":1}}],[\"标识一个接口只有一个抽象方法\",{\"1\":{\"566\":1}}],[\"标识一个有安全性警告的可变参数方法\",{\"1\":{\"566\":1}}],[\"标识一个程序元素\",{\"1\":{\"566\":1}}],[\"标识实体类对应的表\",{\"1\":{\"480\":1}}],[\"标志是否找到待删除节点\",{\"1\":{\"370\":1,\"371\":1}}],[\"标志添加的编号是否存在\",{\"1\":{\"370\":1}}],[\"标志\",{\"1\":{\"320\":1}}],[\"标记位置成员变量的变量名作为\",{\"1\":{\"566\":1}}],[\"标记位置\",{\"1\":{\"566\":1}}],[\"标记\",{\"1\":{\"564\":1}}],[\"标记di注解\",{\"1\":{\"241\":1,\"242\":1,\"578\":1,\"579\":1}}],[\"标记ioc注解\",{\"1\":{\"241\":1,\"242\":1,\"578\":1,\"579\":1}}],[\"标注当前类是配置类\",{\"1\":{\"235\":1,\"236\":1,\"571\":1,\"572\":1}}],[\"标注在数据访问类上\",{\"1\":{\"74\":1}}],[\"标注在业务类上\",{\"1\":{\"74\":1}}],[\"标注在控制器类上\",{\"1\":{\"74\":1}}],[\"标准跨平台自动化项目构建方式\",{\"1\":{\"55\":1}}],[\"标准接口\",{\"1\":{\"10\":1,\"78\":1}}],[\"标签声明bean\",{\"1\":{\"560\":1,\"565\":1}}],[\"标签体内前面多余的and\",{\"1\":{\"525\":1}}],[\"标签的\",{\"1\":{\"426\":1}}],[\"标签必须和\",{\"1\":{\"426\":1}}],[\"标签中的\",{\"1\":{\"425\":1}}],[\"标签值必须和\",{\"1\":{\"425\":1}}],[\"标签内的\",{\"1\":{\"425\":1}}],[\"标签内编写sql语句\",{\"1\":{\"220\":1,\"493\":1}}],[\"标签是这么来的\",{\"1\":{\"425\":1}}],[\"标签改成下面这样\",{\"1\":{\"425\":1}}],[\"标签使用\",{\"1\":{\"242\":1,\"579\":1}}],[\"标签laber\",{\"1\":{\"122\":1}}],[\"标签\",{\"1\":{\"35\":1,\"225\":1,\"395\":2,\"440\":2,\"555\":1,\"558\":1}}],[\"盒子模型的组成\",{\"1\":{\"35\":1}}],[\"盒子\",{\"1\":{\"35\":1}}],[\"卸载一个单独的\",{\"1\":{\"35\":1}}],[\"卸载style标签中\",{\"1\":{\"35\":1}}],[\"但缺少自动装配的配置文件\",{\"1\":{\"677\":1}}],[\"但同时\",{\"1\":{\"651\":1}}],[\"但这次热潮中拿到先发优势的是同为科技大厂的微软\",{\"1\":{\"651\":1}}],[\"但确实应该先下好\",{\"1\":{\"651\":1}}],[\"但也有人则为那些没学过棋的孩子感到担心\",{\"1\":{\"651\":1}}],[\"但也需要说明的是\",{\"1\":{\"651\":1}}],[\"但方法作用域才是映射器实例的最合适的作用域\",{\"1\":{\"628\":1}}],[\"但并不适合定义横向的关系\",{\"1\":{\"584\":1}}],[\"但您可以使用\",{\"1\":{\"573\":1}}],[\"但借助可用于任何\",{\"1\":{\"524\":1}}],[\"但其实非常简单\",{\"1\":{\"517\":1}}],[\"但如果我们禁用了匿名访问\",{\"1\":{\"425\":1}}],[\"但具体计算过程不一样\",{\"1\":{\"334\":1}}],[\"但写作业的内容肯定不同\",{\"1\":{\"334\":1}}],[\"但传的参数多了不利于理解\",{\"1\":{\"334\":1}}],[\"但引入库过多时\",{\"1\":{\"334\":1}}],[\"但不置可否的是model\",{\"1\":{\"651\":1}}],[\"但不同的地区\",{\"1\":{\"651\":1}}],[\"但不能是列表\",{\"1\":{\"314\":1}}],[\"但不常用\",{\"1\":{\"228\":1,\"560\":1,\"565\":1}}],[\"但可以重新赋值\",{\"1\":{\"312\":1}}],[\"但可能引发不可重复读和幻读\",{\"1\":{\"248\":1,\"611\":1}}],[\"但列表和元组\",{\"1\":{\"305\":1}}],[\"但效率较低\",{\"1\":{\"248\":1,\"611\":1}}],[\"但仍有幻读的问题\",{\"1\":{\"248\":1,\"611\":1}}],[\"但多个线程操作共享的系统资源可能就会带来安全隐患\",{\"1\":{\"192\":1,\"203\":1}}],[\"但在蔚来推出et5t后\",{\"1\":{\"651\":1}}],[\"但在迭代访问set里的全部元素有很好的性能\",{\"1\":{\"173\":1}}],[\"但在springboot集成web开发中\",{\"1\":{\"74\":1}}],[\"但必须使用public\",{\"1\":{\"143\":1}}],[\"但使用接口就可以实现多重继承\",{\"1\":{\"139\":1}}],[\"但子类总体上会保留抽象类的行为方式\",{\"1\":{\"138\":1}}],[\"但反过来不行\",{\"1\":{\"137\":1}}],[\"但是也可以根据需求进行适当的调整\",{\"1\":{\"662\":1}}],[\"但是无论使用xml\",{\"1\":{\"662\":1}}],[\"但是无法将列值修改为null值\",{\"1\":{\"477\":1}}],[\"但是数据库连接信息交给druid连接池配置\",{\"1\":{\"628\":1}}],[\"但是从使用的角度来说\",{\"1\":{\"628\":1}}],[\"但是至少要两个\",{\"1\":{\"622\":1}}],[\"但是我们常见的操作是创建两个ioc容器\",{\"1\":{\"619\":1}}],[\"但是我们也发现\",{\"1\":{\"583\":1}}],[\"但是自己使用动态代理实现代码比较繁琐\",{\"1\":{\"585\":1}}],[\"但是由于代码都写死了\",{\"1\":{\"583\":1}}],[\"但是如何将代码插入到各个方法中\",{\"1\":{\"582\":1}}],[\"但是如果多个线程中对资源有读和写的操作\",{\"1\":{\"197\":1,\"208\":1}}],[\"但是第三方依赖的类依然使用xml方式\",{\"1\":{\"568\":1}}],[\"但是你要理解jsr是java提供的技术规范\",{\"1\":{\"566\":1}}],[\"但是你怎么知道父类的引用\",{\"1\":{\"146\":1}}],[\"但是实际开发时\",{\"1\":{\"566\":1}}],[\"但是实际上已经包含在了启动类声明注解\",{\"1\":{\"74\":1}}],[\"但是将来从这里获取的bean是happymachine对象\",{\"1\":{\"561\":1}}],[\"但是trim标签更灵活\",{\"1\":{\"527\":1}}],[\"但是提炼出来最关键的就是\",{\"1\":{\"519\":1}}],[\"但是关键词就只有\",{\"1\":{\"518\":1}}],[\"但是开发中更多的是多表查询需求\",{\"1\":{\"517\":1}}],[\"但是没有对应的实体类类型可以使用\",{\"1\":{\"505\":1}}],[\"但是没有必要\",{\"1\":{\"502\":1}}],[\"但是区别在于\",{\"1\":{\"493\":1}}],[\"但是完全能够接收\",{\"1\":{\"492\":1}}],[\"但是version唯一\",{\"1\":{\"484\":1}}],[\"但是在某些情况下\",{\"1\":{\"545\":1}}],[\"但是在真正开发过程中\",{\"1\":{\"486\":1}}],[\"但是在并发冲突较为频繁的情况下\",{\"1\":{\"483\":1}}],[\"但是在高并发环境下\",{\"1\":{\"483\":1}}],[\"但是在java文件夹中添加xml文件\",{\"1\":{\"413\":1}}],[\"但是不是所有数据库的信息和实体类都完全映射\",{\"1\":{\"480\":1}}],[\"但是后缀必须是bat\",{\"1\":{\"412\":1}}],[\"但是因为没有修改配置\",{\"1\":{\"396\":1,\"440\":1}}],[\"但是构建必须要做\",{\"1\":{\"388\":1}}],[\"但是还没有发送\",{\"1\":{\"254\":1}}],[\"但是为了代码的可读性\",{\"1\":{\"231\":1,\"564\":1}}],[\"但是要求方法必须是\",{\"1\":{\"232\":1,\"560\":1,\"565\":2}}],[\"但是要求\",{\"1\":{\"226\":1,\"559\":1}}],[\"但是可以根据接口类型获取值\",{\"1\":{\"226\":1,\"559\":1}}],[\"但是代码都写死了\",{\"1\":{\"211\":1}}],[\"但是程序会认为这两个对象是相同的\",{\"1\":{\"174\":1}}],[\"但是运行阶段\",{\"1\":{\"411\":1}}],[\"但是运行的时候看的是右边\",{\"1\":{\"155\":1}}],[\"但是运行会出现异常\",{\"1\":{\"146\":1}}],[\"但是若catch中多个异常类型是\",{\"1\":{\"154\":1}}],[\"但是匿名对象省略了\",{\"1\":{\"151\":1}}],[\"但是new出来的对象会在堆当中持续存在\",{\"1\":{\"150\":1}}],[\"但是这个共有方法不应该让实现类使用\",{\"1\":{\"142\":1}}],[\"但是\",{\"1\":{\"130\":1,\"197\":1,\"208\":1,\"243\":1,\"557\":1,\"583\":1,\"602\":1}}],[\"但对于稍微复杂一点的语句\",{\"1\":{\"82\":1}}],[\"但通常约定写在head标签中\",{\"1\":{\"35\":1}}],[\"但没有返回值\",{\"1\":{\"17\":1}}],[\"传过去\",{\"1\":{\"334\":1}}],[\"传输下载文件\",{\"0\":{\"274\":1}}],[\"传输层\",{\"1\":{\"189\":1,\"200\":1}}],[\"传输多个爱好\",{\"1\":{\"68\":1}}],[\"传递的依赖已经存在\",{\"1\":{\"415\":1}}],[\"传递的原则\",{\"1\":{\"415\":1}}],[\"传递两个参数\",{\"1\":{\"40\":1}}],[\"传递\",{\"1\":{\"34\":1}}],[\"传入用户标识\",{\"1\":{\"655\":1}}],[\"传入的实参等信息时\",{\"1\":{\"589\":1}}],[\"传入的类型有误\",{\"1\":{\"155\":1}}],[\"传入的类型错误\",{\"1\":{\"155\":1}}],[\"传入参数携带ipage接口\",{\"1\":{\"472\":1}}],[\"传入bs函数搜寻\",{\"1\":{\"334\":1}}],[\"传入一个或者多个配置文件\",{\"1\":{\"226\":1,\"559\":1}}],[\"传入要复制文件的目录\",{\"1\":{\"185\":1}}],[\"传入arr数组进行排序\",{\"1\":{\"126\":1}}],[\"传入null\",{\"1\":{\"23\":1}}],[\"传入null相对整个窗口居中\",{\"1\":{\"23\":2}}],[\"传入url中\",{\"1\":{\"9\":1}}],[\"换言之\",{\"1\":{\"365\":1}}],[\"换页符\",{\"1\":{\"345\":1}}],[\"换句话说\",{\"1\":{\"82\":1}}],[\"换成post\",{\"1\":{\"34\":1}}],[\"换行符\",{\"1\":{\"345\":1}}],[\"换行符等\",{\"1\":{\"317\":1}}],[\"换行\",{\"1\":{\"34\":1,\"259\":1,\"625\":1}}],[\"登录\",{\"1\":{\"669\":1}}],[\"登录通过则提交新闻信息\",{\"1\":{\"657\":1}}],[\"登录检查\",{\"1\":{\"657\":1}}],[\"登录业务实现\",{\"1\":{\"655\":1}}],[\"登录需求\",{\"1\":{\"655\":1}}],[\"登录功能实现\",{\"1\":{\"655\":1}}],[\"登录功能\",{\"1\":{\"646\":1,\"648\":1}}],[\"登录等\",{\"1\":{\"429\":1,\"455\":1}}],[\"登录等数据采集\",{\"1\":{\"34\":1}}],[\"登录的用户\",{\"1\":{\"277\":1}}],[\"登录请求不需要校验令牌\",{\"1\":{\"93\":1}}],[\"登录校验通过则提交修改后的新闻信息\",{\"1\":{\"657\":1}}],[\"登录校验通过后\",{\"1\":{\"657\":1}}],[\"登录校验功能\",{\"1\":{\"93\":1}}],[\"登录校验\",{\"0\":{\"95\":1},\"1\":{\"93\":1}}],[\"登录失败\",{\"1\":{\"92\":1}}],[\"登录成功\",{\"1\":{\"92\":1}}],[\"登录完成后\",{\"1\":{\"92\":1}}],[\"登陆验证和保护\",{\"1\":{\"657\":1}}],[\"登陆\",{\"1\":{\"29\":1}}],[\"登陆图标\",{\"1\":{\"22\":1}}],[\"登陆页面\",{\"1\":{\"22\":1}}],[\"表现为气温高湿度小\",{\"1\":{\"651\":1}}],[\"表述层\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"表中时\",{\"1\":{\"512\":1}}],[\"表中\",{\"1\":{\"512\":1}}],[\"表添加逻辑删除字段\",{\"1\":{\"481\":1}}],[\"表名部分需要java程序通过参数传入\",{\"1\":{\"498\":1}}],[\"表名前缀字符串\",{\"1\":{\"480\":1}}],[\"表名注解\",{\"1\":{\"480\":1}}],[\"表名\",{\"1\":{\"480\":1}}],[\"表字段\",{\"1\":{\"464\":1,\"466\":1}}],[\"表的增\",{\"1\":{\"514\":1}}],[\"表的一行数据\",{\"1\":{\"514\":1}}],[\"表的\",{\"1\":{\"461\":1}}],[\"表\",{\"1\":{\"461\":1}}],[\"表达式实现接口的方法\",{\"1\":{\"478\":1}}],[\"表达式实现一个接口的方法\",{\"1\":{\"478\":1}}],[\"表达式的语法可以更具体地描述如下\",{\"1\":{\"478\":1}}],[\"表达式的语法可以分为以下几个部分\",{\"1\":{\"478\":1}}],[\"表达式的主体\",{\"1\":{\"478\":1}}],[\"表达式的主体部分可以是一个表达式或一个代码块\",{\"1\":{\"478\":1}}],[\"表达式的主体部分\",{\"1\":{\"478\":1}}],[\"表达式可以用于简化代码\",{\"1\":{\"478\":1}}],[\"表达式是\",{\"1\":{\"478\":1}}],[\"表达式2\",{\"1\":{\"301\":1}}],[\"表达式\",{\"1\":{\"301\":2,\"460\":1,\"478\":2}}],[\"表明要写入的文件位置\",{\"1\":{\"184\":1}}],[\"表单组件\",{\"1\":{\"51\":1}}],[\"表单等\",{\"1\":{\"50\":1}}],[\"表单项\",{\"1\":{\"34\":1}}],[\"表单标签<form>\",{\"1\":{\"34\":1}}],[\"表格组件\",{\"1\":{\"51\":1}}],[\"表格\",{\"1\":{\"50\":1}}],[\"表格单元格\",{\"1\":{\"34\":1}}],[\"表格的行\",{\"1\":{\"34\":1}}],[\"表格<table>定义表格整体\",{\"1\":{\"34\":1}}],[\"表示设置初始堆内存为256mb\",{\"1\":{\"686\":1}}],[\"表示设置最大堆内存为512mb\",{\"1\":{\"686\":1}}],[\"表示关闭自动映射\",{\"1\":{\"521\":1}}],[\"表示开启自动映射驼峰式命名规则\",{\"1\":{\"509\":1}}],[\"表示在同一毫秒内生成的不同id的序号\",{\"1\":{\"480\":1}}],[\"表示maven正在下载相关插件\",{\"1\":{\"399\":1}}],[\"表示是否找到该节点\",{\"1\":{\"370\":1,\"371\":1}}],[\"表示保留三位小数\",{\"1\":{\"334\":1}}],[\"表示类的实例\",{\"1\":{\"327\":1}}],[\"表示最大的拆分次数\",{\"1\":{\"324\":1}}],[\"表示最终\",{\"1\":{\"131\":1}}],[\"表示替换所有的匹配\",{\"1\":{\"323\":1}}],[\"表示模式匹配后替换的最大次数\",{\"1\":{\"323\":1}}],[\"表示模式字符串\",{\"1\":{\"320\":1}}],[\"表示标志位\",{\"1\":{\"320\":1}}],[\"表示检索范围开始位置\",{\"1\":{\"317\":1}}],[\"表示要匹配的字符串\",{\"1\":{\"320\":1}}],[\"表示要检索的子字符串\",{\"1\":{\"317\":1}}],[\"表示要给本界面添加键盘监听\",{\"1\":{\"28\":1}}],[\"表示创建一个空字典\",{\"1\":{\"316\":1}}],[\"表示生成字典的值\",{\"1\":{\"315\":1}}],[\"表示生成字典的键\",{\"1\":{\"315\":1}}],[\"表示所有ip\",{\"1\":{\"277\":1}}],[\"表示继承父元素的align\",{\"1\":{\"265\":1}}],[\"表示状态\",{\"1\":{\"253\":1}}],[\"表示将spring的基础依赖引入了\",{\"1\":{\"244\":1,\"557\":1,\"562\":1,\"564\":1,\"568\":1,\"575\":1,\"582\":1,\"606\":1}}],[\"表示该\",{\"1\":{\"237\":1,\"573\":1}}],[\"表示该响应压缩算法\",{\"1\":{\"64\":1}}],[\"表示该响应内容的长度\",{\"1\":{\"64\":1}}],[\"表示该响应内容的类型\",{\"1\":{\"64\":1}}],[\"表示特定的瞬间精确到毫秒\",{\"1\":{\"162\":1}}],[\"表示\",{\"1\":{\"122\":2,\"598\":2}}],[\"表示请求已经被成功接受\",{\"1\":{\"64\":1}}],[\"表示请求已经接收\",{\"1\":{\"64\":1}}],[\"表示浏览器可以支持的压缩类型\",{\"1\":{\"63\":1}}],[\"表示我要给整个界面添加监听\",{\"1\":{\"28\":1}}],[\"表示我要给组件添加哪个事件监听\",{\"1\":{\"26\":2}}],[\"表示事件被触发之后要执行的代码\",{\"1\":{\"26\":2}}],[\"表示你要给那个组件添加事件\",{\"1\":{\"26\":2}}],[\"于宿舍<br\",{\"1\":{\"34\":1}}],[\"斜体\",{\"1\":{\"34\":1}}],[\"屡获殊荣的烟花和季节性活动\",{\"1\":{\"34\":1}}],[\"拥有令人兴奋的景点\",{\"1\":{\"34\":1}}],[\"年大吉\",{\"1\":{\"334\":4}}],[\"年龄在20到30之间\",{\"1\":{\"476\":1}}],[\"年龄<input\",{\"1\":{\"43\":1}}],[\"年龄\",{\"1\":{\"34\":1,\"325\":3,\"461\":1}}],[\"年\",{\"1\":{\"34\":1}}],[\"9篮板3\",{\"1\":{\"651\":1}}],[\"9℃\",{\"1\":{\"651\":1}}],[\"96\",{\"1\":{\"628\":2}}],[\"93\",{\"1\":{\"628\":2}}],[\"932\",{\"1\":{\"426\":1}}],[\"98\",{\"1\":{\"334\":1}}],[\"95\",{\"1\":{\"334\":2,\"493\":1,\"515\":1,\"628\":4}}],[\"9结束\",{\"1\":{\"334\":1}}],[\"90<=score<=100\",{\"1\":{\"334\":1}}],[\"90b\",{\"1\":{\"253\":1}}],[\"900px\",{\"1\":{\"34\":1}}],[\"97\",{\"1\":{\"178\":1}}],[\"999\",{\"1\":{\"505\":1}}],[\"99\",{\"1\":{\"160\":1,\"178\":1,\"505\":1,\"612\":1}}],[\"9\",{\"0\":{\"595\":1},\"1\":{\"34\":1,\"92\":2,\"112\":1,\"116\":1,\"170\":2,\"176\":2,\"192\":1,\"203\":1,\"334\":3,\"345\":7,\"387\":6,\"425\":1,\"429\":1,\"431\":1,\"496\":1,\"542\":1,\"562\":1,\"588\":4,\"625\":2,\"636\":1,\"651\":2,\"652\":1,\"655\":1,\"663\":1}}],[\"自我描述性\",{\"1\":{\"669\":2}}],[\"自今年初起\",{\"1\":{\"651\":1}}],[\"自增长类型主键\",{\"1\":{\"512\":1}}],[\"自增\",{\"1\":{\"480\":1}}],[\"自增自减运算符\",{\"0\":{\"117\":1}}],[\"自带crud方法\",{\"1\":{\"461\":1}}],[\"自己实现sqlsessionfactory加入ioc容器\",{\"1\":{\"628\":1}}],[\"自己处理结果映射\",{\"1\":{\"562\":1}}],[\"自己后期可以在项目中随意修改\",{\"1\":{\"399\":1,\"443\":1}}],[\"自己完成\",{\"1\":{\"371\":2}}],[\"自己的话\",{\"1\":{\"192\":1,\"203\":1}}],[\"自己创建模板\",{\"1\":{\"188\":1}}],[\"自己创建文件\",{\"1\":{\"188\":2}}],[\"自己计算机上的一个目录\",{\"1\":{\"55\":1}}],[\"自然排序\",{\"1\":{\"176\":1,\"178\":1}}],[\"自然排序要求自定义类实现java\",{\"1\":{\"174\":1}}],[\"自变量\",{\"1\":{\"169\":1}}],[\"自包含的格式\",{\"1\":{\"92\":1}}],[\"自行百度\",{\"1\":{\"57\":1,\"334\":1}}],[\"自行百度一下官网地址\",{\"1\":{\"46\":1}}],[\"自动配置各种常见的spring配置和功能\",{\"1\":{\"665\":1}}],[\"自动配置会根据应用程序的依赖项和类路径\",{\"1\":{\"665\":1}}],[\"自动配置\",{\"1\":{\"665\":2}}],[\"自动配置应用程序\",{\"1\":{\"664\":1}}],[\"自动配置根据类路径\",{\"1\":{\"664\":1}}],[\"自动扫描并加载应用程序中的组件\",{\"1\":{\"664\":1}}],[\"自动选择合适的分页方式\",{\"1\":{\"628\":2}}],[\"自动选择原则\",{\"1\":{\"416\":1,\"448\":1}}],[\"自动装配实现\",{\"1\":{\"566\":1}}],[\"自动管理依赖\",{\"1\":{\"448\":1}}],[\"自动传递\",{\"1\":{\"432\":2,\"456\":2}}],[\"自动依赖传递需要的依赖\",{\"1\":{\"415\":1,\"448\":1}}],[\"自动下载依赖需要的依赖并且保证版本没有冲突\",{\"1\":{\"390\":1,\"439\":1}}],[\"自动缩进\",{\"1\":{\"286\":1}}],[\"自动缩放\",{\"1\":{\"34\":1}}],[\"自动的抛出\",{\"1\":{\"155\":1}}],[\"自动抛出\",{\"1\":{\"153\":1}}],[\"自动生成单表的crud方法\",{\"1\":{\"539\":1}}],[\"自动生成单表的crud功能\",{\"1\":{\"460\":1}}],[\"自动生成sql语句实现\",{\"1\":{\"487\":1}}],[\"自动生成的\",{\"1\":{\"186\":4,\"187\":4}}],[\"自动生成的方法存根\",{\"1\":{\"108\":1,\"109\":1}}],[\"自动生成对应的java代码\",{\"1\":{\"79\":1}}],[\"自动化\",{\"1\":{\"47\":1}}],[\"自动计算页边距\",{\"1\":{\"36\":1}}],[\"自定义拦截器\",{\"0\":{\"676\":1},\"1\":{\"660\":1}}],[\"自定义分页查询方法\",{\"1\":{\"656\":1}}],[\"自定义方法\",{\"1\":{\"656\":1}}],[\"自定义\",{\"1\":{\"655\":1,\"668\":1}}],[\"自定义类使用ioc和di注解标记\",{\"1\":{\"575\":1}}],[\"自定义类可以使用注解方式\",{\"1\":{\"568\":1}}],[\"自定义类重写equals\",{\"1\":{\"170\":1}}],[\"自定义结构\",{\"1\":{\"515\":1}}],[\"自定义映射关系就可以使用mybatis\",{\"1\":{\"480\":1}}],[\"自定义的key\",{\"1\":{\"668\":1}}],[\"自定义的mapper方法使用分页\",{\"1\":{\"472\":1}}],[\"自定义的异常类继承现有的异常类\",{\"1\":{\"155\":1}}],[\"自定义mapper方法\",{\"1\":{\"467\":1}}],[\"自定义和多表映射\",{\"0\":{\"467\":1},\"1\":{\"459\":1}}],[\"自定义内容\",{\"1\":{\"92\":1}}],[\"自定义详细介绍\",{\"1\":{\"1\":1}}],[\"自定义项目\",{\"1\":{\"1\":1}}],[\"空间表现\",{\"1\":{\"651\":1}}],[\"空\",{\"1\":{\"557\":1}}],[\"空格或制表符\",{\"1\":{\"345\":1}}],[\"空格也会被识别\",{\"1\":{\"26\":2}}],[\"空类型\",{\"1\":{\"334\":1}}],[\"空行\",{\"1\":{\"251\":1,\"252\":1,\"253\":1}}],[\"空指针访问\",{\"1\":{\"152\":1}}],[\"空指针异常\",{\"1\":{\"152\":2,\"242\":1}}],[\"空字符串为false其他均为true\",{\"1\":{\"38\":1}}],[\"空白页面\",{\"1\":{\"34\":1}}],[\"8d\",{\"1\":{\"628\":4}}],[\"85\",{\"1\":{\"628\":2}}],[\"82\",{\"1\":{\"628\":2}}],[\"883\",{\"1\":{\"426\":1}}],[\"8$\",{\"1\":{\"375\":1}}],[\"8<\",{\"1\":{\"244\":1,\"410\":2,\"412\":1,\"413\":4,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"447\":2,\"449\":1,\"456\":4,\"461\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":3,\"652\":1,\"673\":1,\"677\":1}}],[\"8+开始\",{\"1\":{\"150\":1}}],[\"8个数比较7次\",{\"1\":{\"126\":1}}],[\"8989\",{\"1\":{\"191\":2,\"192\":2,\"202\":2,\"203\":2}}],[\"89\",{\"1\":{\"124\":1,\"178\":1,\"315\":1}}],[\"875\",{\"1\":{\"426\":1}}],[\"87\",{\"1\":{\"124\":1,\"178\":1}}],[\"8字节\",{\"1\":{\"112\":2}}],[\"8位有符号整数\",{\"1\":{\"112\":1}}],[\"8\",{\"0\":{\"594\":1},\"1\":{\"34\":1,\"82\":1,\"170\":1,\"181\":1,\"188\":1,\"220\":2,\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"253\":1,\"317\":3,\"334\":9,\"351\":1,\"353\":2,\"354\":2,\"355\":2,\"356\":3,\"361\":2,\"379\":1,\"380\":1,\"387\":4,\"393\":2,\"425\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"467\":1,\"478\":3,\"493\":2,\"514\":2,\"542\":1,\"555\":1,\"562\":3,\"564\":1,\"568\":2,\"571\":1,\"572\":1,\"575\":1,\"584\":1,\"588\":6,\"625\":6,\"628\":1,\"630\":1,\"641\":1,\"651\":2,\"652\":1,\"673\":1,\"674\":1,\"677\":1,\"680\":1}}],[\"8081为默认端口号\",{\"1\":{\"422\":1}}],[\"8081\",{\"1\":{\"422\":1,\"425\":9,\"426\":5,\"427\":1}}],[\"8080\",{\"1\":{\"68\":1,\"652\":1,\"675\":1}}],[\"800\",{\"1\":{\"334\":1}}],[\"8000端口监听中\",{\"1\":{\"252\":1}}],[\"8000\",{\"1\":{\"252\":1,\"253\":1}}],[\"80<=score<90\",{\"1\":{\"334\":1}}],[\"80\",{\"1\":{\"29\":1,\"53\":1,\"189\":1,\"200\":1,\"283\":1,\"299\":1,\"628\":2,\"669\":1,\"674\":1,\"675\":1,\"680\":1}}],[\"单层的任意命名\",{\"1\":{\"590\":1}}],[\"单层模糊\",{\"1\":{\"214\":2}}],[\"单纯添加\",{\"1\":{\"582\":1,\"588\":1}}],[\"单一架构\",{\"1\":{\"544\":2}}],[\"单一指定\",{\"1\":{\"481\":1}}],[\"单向查看\",{\"1\":{\"517\":1}}],[\"单词\",{\"1\":{\"509\":2}}],[\"单个构造参数\",{\"1\":{\"558\":1}}],[\"单个简单类型\",{\"0\":{\"508\":1},\"1\":{\"489\":1}}],[\"单个简单类型参数\",{\"1\":{\"489\":1,\"502\":1}}],[\"单个表达式\",{\"1\":{\"478\":1}}],[\"单项链表不能自我删除\",{\"1\":{\"371\":1}}],[\"单项链表\",{\"1\":{\"371\":1}}],[\"单链表的反转思路\",{\"1\":{\"371\":1}}],[\"单链表的反转\",{\"1\":{\"371\":1}}],[\"单链表常见面试题\",{\"0\":{\"371\":1}}],[\"单行\",{\"0\":{\"260\":1},\"1\":{\"256\":1}}],[\"单行注释\",{\"1\":{\"38\":1,\"293\":1}}],[\"单例对比\",{\"1\":{\"560\":1}}],[\"单例\",{\"1\":{\"232\":1,\"565\":1}}],[\"单独维护切点表达式\",{\"1\":{\"215\":1}}],[\"单独使用mybatis中在接口中的每个属性上加\",{\"1\":{\"81\":1}}],[\"单位毫秒\",{\"1\":{\"655\":1,\"677\":1}}],[\"单位分钟\",{\"1\":{\"655\":2}}],[\"单位u\",{\"1\":{\"334\":2}}],[\"单位秒\",{\"1\":{\"247\":3,\"248\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"单位\",{\"1\":{\"63\":1}}],[\"单元测试目录\",{\"1\":{\"401\":1,\"445\":1}}],[\"单元测试\",{\"1\":{\"48\":1}}],[\"单双引皆可\",{\"1\":{\"38\":1}}],[\"单双引号都可以使用\",{\"1\":{\"34\":1}}],[\"单选按钮\",{\"1\":{\"34\":1}}],[\"单击\",{\"1\":{\"27\":1}}],[\"前缀和属性名称和配置文件中的key必须要保持一致才可以注入成功\",{\"1\":{\"670\":1}}],[\"前缀命名方式区分\",{\"1\":{\"468\":1}}],[\"前者不仅喊出了\",{\"1\":{\"651\":1}}],[\"前八名为上半区争冠组\",{\"1\":{\"651\":1}}],[\"前一时段气温最高值通常高于后一时段\",{\"1\":{\"651\":1}}],[\"前后端联调\",{\"0\":{\"658\":1},\"1\":{\"644\":1}}],[\"前后联调\",{\"0\":{\"642\":1},\"1\":{\"615\":1}}],[\"前后顺序\",{\"1\":{\"263\":1}}],[\"前提\",{\"1\":{\"416\":1,\"448\":1,\"566\":1}}],[\"前十页\",{\"1\":{\"356\":1}}],[\"前两个注解可以指定bean的标识\",{\"1\":{\"237\":1,\"573\":1}}],[\"前置\",{\"1\":{\"212\":2}}],[\"前置通知\",{\"1\":{\"211\":1,\"584\":1}}],[\"前面的字符要么不出现要么出现一次\",{\"1\":{\"346\":1}}],[\"前面的字符是可选的\",{\"1\":{\"346\":1}}],[\"前面的配置完全等同于下面的spring\",{\"1\":{\"237\":1,\"573\":1}}],[\"前面的那个数字\",{\"1\":{\"117\":1}}],[\"前面声明bean的四大注解\",{\"1\":{\"74\":1}}],[\"前++\",{\"1\":{\"117\":1}}],[\"前端先调用登录校验接口\",{\"1\":{\"657\":1}}],[\"前端根据响应信息提示用户进入登录页还是进入正常业务页面\",{\"1\":{\"657\":1}}],[\"前端技术栈\",{\"1\":{\"647\":1}}],[\"前端环境搭建\",{\"0\":{\"636\":1},\"1\":{\"615\":1}}],[\"前端工程导入\",{\"0\":{\"635\":1},\"1\":{\"615\":1}}],[\"前端工程化\",{\"1\":{\"32\":1}}],[\"前端程序搭建和运行\",{\"0\":{\"631\":1},\"1\":{\"615\":1}}],[\"前端\",{\"0\":{\"691\":1},\"2\":{\"266\":1}}],[\"前端路由\",{\"1\":{\"52\":1}}],[\"前端开发工程化\",{\"0\":{\"47\":1}}],[\"前端相关\",{\"0\":{\"33\":1}}],[\"前言\",{\"0\":{\"106\":1},\"1\":{\"32\":1}}],[\"密文显示的输入框\",{\"1\":{\"29\":1}}],[\"密码错误\",{\"1\":{\"655\":1}}],[\"密码有误\",{\"1\":{\"655\":1}}],[\"密码功能变得非常鸡肋了\",{\"1\":{\"364\":1}}],[\"密码字段\",{\"1\":{\"34\":1}}],[\"密码\",{\"1\":{\"12\":1,\"277\":1,\"423\":1,\"538\":1,\"679\":1}}],[\"绑定的变量\",{\"1\":{\"43\":1}}],[\"绑定事件\",{\"1\":{\"28\":1,\"253\":1}}],[\"绑定监听\",{\"1\":{\"25\":1}}],[\"所谓的妙手很可能就是花拳绣腿\",{\"1\":{\"651\":1}}],[\"所谓\",{\"1\":{\"584\":1}}],[\"所在配置文件和具体位置\",{\"1\":{\"522\":1}}],[\"所用日志的具体实现\",{\"1\":{\"496\":1}}],[\"所需依赖会传递到当前工程\",{\"1\":{\"433\":1,\"434\":1}}],[\"所求平均数为\",{\"1\":{\"334\":1}}],[\"所及编译器报错\",{\"1\":{\"145\":1}}],[\"所占字节\",{\"1\":{\"112\":1}}],[\"所以我们只需在方法\",{\"1\":{\"681\":1}}],[\"所以我们要把写作业这个方法定义在子类里面\",{\"1\":{\"334\":1}}],[\"所以从今年夏季来说\",{\"1\":{\"651\":1}}],[\"所以mapper应该交给ioc容器管理\",{\"1\":{\"628\":1}}],[\"所以它的最佳的作用域是请求或方法作用域\",{\"1\":{\"628\":1}}],[\"所以它是一个复杂容器\",{\"1\":{\"552\":1}}],[\"所以web容器可以引用root容器\",{\"1\":{\"621\":1}}],[\"所以使用公共设置即可\",{\"1\":{\"608\":1}}],[\"所以根据目标类的类型从ioc容器中是找不到的\",{\"1\":{\"598\":1}}],[\"所以转换为list集合\",{\"1\":{\"589\":1}}],[\"所以该注解是标准注解\",{\"1\":{\"566\":1}}],[\"所以在这先练习设计\",{\"1\":{\"517\":1}}],[\"所以只写范型即可\",{\"1\":{\"514\":1}}],[\"所以都封装到map中\",{\"1\":{\"505\":1}}],[\"所以大家操作时可以直接复制\",{\"1\":{\"493\":1}}],[\"所以选择pom值\",{\"1\":{\"456\":1}}],[\"所以打包方式必须是\",{\"1\":{\"418\":1,\"452\":1}}],[\"所以整个项目中使用的框架版本需要统一管理\",{\"1\":{\"452\":1}}],[\"所以整个项目中使用的框架版本需要统一\",{\"1\":{\"418\":1}}],[\"所以需要这样的\",{\"1\":{\"415\":1}}],[\"所以需要关键字传参\",{\"1\":{\"353\":1}}],[\"所以用\",{\"1\":{\"371\":1}}],[\"所以前面我们单链表删除节点时\",{\"1\":{\"371\":1}}],[\"所以headers不能传递进去\",{\"1\":{\"353\":1}}],[\"所以也可以说模块相当于一盒积木\",{\"1\":{\"330\":1}}],[\"所以每次输出时元素的排列顺序可能与上面的不同\",{\"1\":{\"316\":1}}],[\"所以\",{\"1\":{\"231\":1,\"564\":1}}],[\"所以这里我们可以以resources目录为基准\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"所以这个变量值不能修改\",{\"1\":{\"150\":1}}],[\"所以不在jdk当中\",{\"1\":{\"566\":1}}],[\"所以不需要目标类实现接口\",{\"1\":{\"211\":1,\"583\":1,\"587\":1}}],[\"所以不必记住全名\",{\"1\":{\"108\":1}}],[\"所以向遍历容器\",{\"1\":{\"197\":1}}],[\"所以a中抛出的类型一一定要大于b类抛出的类型\",{\"1\":{\"155\":1}}],[\"所以一定是先调用父类构造\",{\"1\":{\"136\":1}}],[\"所以可以用来记录创建的对象的个数\",{\"1\":{\"130\":1}}],[\"所以可以强制类型转换\",{\"1\":{\"114\":1}}],[\"所以当有对象以后\",{\"1\":{\"130\":1}}],[\"所以下面这个比较常用\",{\"1\":{\"28\":2}}],[\"所依赖的资源\",{\"1\":{\"72\":1}}],[\"所有springboot项目都必须继承自\",{\"1\":{\"664\":1}}],[\"所有\",{\"1\":{\"657\":1}}],[\"所有配置信息\",{\"1\":{\"628\":1}}],[\"所有增强方法的切点表达式相同\",{\"1\":{\"591\":1}}],[\"所有一切的操作都是\",{\"1\":{\"564\":1}}],[\"所有普通类都可以由\",{\"1\":{\"557\":1}}],[\"所有条件都不满足\",{\"1\":{\"525\":1,\"526\":1}}],[\"所有条件都满足\",{\"1\":{\"525\":1,\"526\":1}}],[\"所有字符都认为是一个\",{\"1\":{\"317\":1}}],[\"所有响应头\",{\"1\":{\"253\":1}}],[\"所有细节都需要程序员自己来完成\",{\"1\":{\"243\":1,\"602\":1}}],[\"所有内容写到xml格式配置文件中\",{\"1\":{\"240\":1,\"577\":1}}],[\"所有的权限用all\",{\"1\":{\"277\":1}}],[\"所有的线程对象都必须是thread类或其子类的实例\",{\"1\":{\"193\":1,\"204\":1}}],[\"所有的entry使用set存放的\",{\"1\":{\"177\":1}}],[\"所有的字母都大写\",{\"1\":{\"110\":1}}],[\"所有文档类型的标准模型\",{\"1\":{\"40\":1}}],[\"所有界面都要这样设置\",{\"1\":{\"28\":2}}],[\"所有界面都要这样设置才会有效\",{\"1\":{\"28\":2}}],[\"所有gui均采用无布局格式\",{\"1\":{\"21\":1}}],[\"多环境配置\",{\"1\":{\"671\":1}}],[\"多环境配置和使用\",{\"0\":{\"671\":1},\"1\":{\"660\":1}}],[\"多构造参数解析\",{\"1\":{\"558\":1}}],[\"多次\",{\"1\":{\"552\":1}}],[\"多次请求间不能共享数据\",{\"1\":{\"62\":1}}],[\"多\",{\"1\":{\"519\":1}}],[\"多对多\",{\"1\":{\"517\":1}}],[\"多对一\",{\"1\":{\"517\":1}}],[\"多表\",{\"1\":{\"656\":1}}],[\"多表结果实体类设计小技巧\",{\"1\":{\"517\":1}}],[\"多表结果承接实体类设计\",{\"1\":{\"517\":1}}],[\"多表关系回顾\",{\"1\":{\"517\":1}}],[\"多表查询依然需要我们自己编写\",{\"1\":{\"538\":1}}],[\"多表查询语句使用\",{\"1\":{\"517\":1}}],[\"多表查询结果映射思路\",{\"1\":{\"517\":1}}],[\"多表映射案例准备\",{\"1\":{\"517\":1}}],[\"多表映射优化\",{\"0\":{\"521\":1},\"1\":{\"489\":1}}],[\"多表映射总结\",{\"0\":{\"520\":1,\"522\":1},\"1\":{\"489\":2}}],[\"多表映射概念\",{\"0\":{\"517\":1},\"1\":{\"489\":1}}],[\"多表联查\",{\"1\":{\"486\":1}}],[\"多出一组gavp属性\",{\"1\":{\"398\":1,\"442\":1}}],[\"多出的字节\",{\"1\":{\"114\":1}}],[\"多维数组\",{\"1\":{\"365\":1}}],[\"多少对\",{\"1\":{\"334\":1}}],[\"多用于for循环中\",{\"1\":{\"333\":1}}],[\"多选一的情况\",{\"1\":{\"301\":1}}],[\"多行文本表示\",{\"1\":{\"669\":1}}],[\"多行文本\",{\"1\":{\"669\":1}}],[\"多行\",{\"0\":{\"261\":1},\"1\":{\"256\":1,\"261\":1}}],[\"多行注释\",{\"1\":{\"38\":1,\"293\":1}}],[\"多例对比\",{\"1\":{\"560\":1}}],[\"多例模式不管destory方法\",{\"1\":{\"232\":1}}],[\"多例\",{\"1\":{\"232\":1,\"565\":1}}],[\"多参数\",{\"1\":{\"224\":3,\"558\":3}}],[\"多了一个执行方法\",{\"1\":{\"216\":1}}],[\"多了一个$\",{\"1\":{\"110\":1}}],[\"多线程卖票\",{\"1\":{\"197\":1,\"208\":1}}],[\"多线程的声明周期\",{\"1\":{\"196\":1,\"207\":1}}],[\"多态等概念来建立一种对象层次结构\",{\"1\":{\"584\":1}}],[\"多态是指同样的接口因为对象具体类的不同而有不同的表现\",{\"1\":{\"334\":1}}],[\"多态性\",{\"1\":{\"145\":1}}],[\"多态\",{\"0\":{\"145\":1},\"1\":{\"134\":1,\"145\":1,\"147\":1}}],[\"多个模块要使用同一个框架\",{\"1\":{\"452\":1}}],[\"多个参数的时候\",{\"1\":{\"354\":1}}],[\"多个\",{\"1\":{\"233\":1}}],[\"多个包可以使用\",{\"1\":{\"231\":1,\"564\":1,\"571\":1}}],[\"多个线程必须共用同一个同步监视器\",{\"1\":{\"197\":1,\"208\":1}}],[\"多个代码块之间按照顺序结构执行\",{\"1\":{\"132\":1}}],[\"多个静态代码块之间按照顺序结构执行\",{\"1\":{\"132\":1}}],[\"多个界面全部关闭才会停止运行\",{\"1\":{\"28\":2}}],[\"多种数据混合运算时\",{\"1\":{\"114\":1}}],[\"多单词时每个单词用下划线连接\",{\"1\":{\"110\":1}}],[\"多单词组成时\",{\"1\":{\"110\":1}}],[\"多单词组成时所有单词首字母大写\",{\"1\":{\"110\":1}}],[\"多单词组成所有单词用小写\",{\"1\":{\"110\":1}}],[\"多条语句\",{\"1\":{\"17\":1}}],[\"多条执行语句\",{\"1\":{\"17\":1}}],[\"带薪游山玩水\",{\"1\":{\"651\":1}}],[\"带上方法体\",{\"1\":{\"141\":1}}],[\"带上表示间距5\",{\"1\":{\"23\":1}}],[\"带x什么都不做\",{\"1\":{\"28\":2}}],[\"公司或组织内部的私有构件\",{\"1\":{\"421\":1}}],[\"公司或者组织的唯一标志\",{\"1\":{\"409\":1,\"447\":1}}],[\"公司\",{\"1\":{\"398\":2,\"442\":2}}],[\"公认端口http\",{\"1\":{\"189\":1,\"200\":1}}],[\"公式\",{\"1\":{\"149\":1}}],[\"公众号\",{\"1\":{\"28\":3}}],[\"公共聊天室\",{\"1\":{\"21\":1}}],[\"重用切点表达式优点\",{\"1\":{\"591\":1}}],[\"重用\",{\"0\":{\"591\":1},\"1\":{\"542\":1}}],[\"重点\",{\"0\":{\"412\":1},\"1\":{\"447\":1}}],[\"重复利用这些组件有助于减少bug的出现\",{\"1\":{\"545\":1}}],[\"重复引入该依赖\",{\"1\":{\"411\":1}}],[\"重复的是修改操作\",{\"1\":{\"287\":1}}],[\"重复上一次的操作\",{\"1\":{\"287\":1}}],[\"重要\",{\"1\":{\"236\":1,\"258\":1,\"557\":1,\"572\":1}}],[\"重命名\",{\"1\":{\"182\":2}}],[\"重写thread类的run\",{\"1\":{\"194\":1,\"205\":1}}],[\"重写\",{\"1\":{\"137\":1}}],[\"重载\",{\"0\":{\"133\":1},\"1\":{\"137\":1}}],[\"重定向到其他地方\",{\"1\":{\"64\":1}}],[\"重置按钮\",{\"1\":{\"34\":1}}],[\"重新编译\",{\"1\":{\"450\":2}}],[\"重新加载防火墙规则\",{\"1\":{\"276\":1}}],[\"重新登录\",{\"1\":{\"28\":3}}],[\"重新游戏\",{\"1\":{\"28\":3}}],[\"重启mysql服务后生效\",{\"1\":{\"9\":1}}],[\"关键词\",{\"1\":{\"518\":1,\"519\":1}}],[\"关键字\",{\"1\":{\"478\":2}}],[\"关键字参数是指使用形式参数的名字来确定输入的参数值\",{\"1\":{\"325\":1}}],[\"关键字传参\",{\"1\":{\"325\":1}}],[\"关键字来调用父类重载构造\",{\"1\":{\"136\":1}}],[\"关注重大更新的大版本升级即可\",{\"1\":{\"491\":1}}],[\"关联\",{\"1\":{\"519\":1}}],[\"关联关系中\",{\"1\":{\"518\":1,\"519\":1}}],[\"关联关系\",{\"1\":{\"518\":1,\"519\":1,\"522\":1}}],[\"关联关系映射\",{\"1\":{\"518\":1}}],[\"关联切面类的bean\",{\"1\":{\"219\":1,\"596\":1}}],[\"关联的程度\",{\"1\":{\"72\":1}}],[\"关系映射\",{\"1\":{\"537\":1}}],[\"关系\",{\"1\":{\"154\":2}}],[\"关于foreach标签的collection属性\",{\"1\":{\"529\":1}}],[\"关于实体类属性的约定\",{\"1\":{\"513\":1}}],[\"关于centos防火墙\",{\"0\":{\"276\":1}}],[\"关于属性赋值的操作\",{\"1\":{\"132\":1}}],[\"关于我们\",{\"1\":{\"28\":4}}],[\"关闭当前连接\",{\"1\":{\"677\":1}}],[\"关闭事务的自动提交\",{\"1\":{\"602\":1}}],[\"关闭文件\",{\"1\":{\"334\":1}}],[\"关闭文件那个代码\",{\"1\":{\"154\":1}}],[\"关闭默认规则\",{\"1\":{\"231\":1,\"564\":1}}],[\"关闭会话\",{\"1\":{\"220\":1,\"493\":1}}],[\"关闭sqlsession\",{\"1\":{\"220\":1,\"493\":1}}],[\"关闭socket\",{\"1\":{\"191\":2,\"202\":2}}],[\"关闭scanner对象\",{\"1\":{\"109\":1}}],[\"关闭输出流\",{\"1\":{\"184\":1}}],[\"关闭相应的流\",{\"1\":{\"183\":1}}],[\"关闭键盘\",{\"1\":{\"147\":1}}],[\"关闭鼠标\",{\"1\":{\"147\":1}}],[\"关闭设备\",{\"1\":{\"147\":2}}],[\"关闭游戏\",{\"1\":{\"28\":3}}],[\"关闭一个窗口就停止运行\",{\"1\":{\"21\":1}}],[\"管理\",{\"1\":{\"551\":1}}],[\"管理哪些类组件和他们的关系即可\",{\"1\":{\"551\":1}}],[\"管理多个子项目\",{\"1\":{\"419\":1}}],[\"管理jar\",{\"1\":{\"390\":1}}],[\"管理规模庞大的\",{\"1\":{\"389\":1}}],[\"管理员\",{\"1\":{\"252\":2}}],[\"管理的对象\",{\"1\":{\"72\":1}}],[\"管理容器\",{\"1\":{\"28\":2}}],[\"管理数据库连接\",{\"1\":{\"10\":1,\"78\":1}}],[\"只是将bean的信息配置给springioc容器\",{\"1\":{\"560\":1,\"565\":1}}],[\"只指定其所在的包\",{\"1\":{\"532\":1}}],[\"只会自动映射没有定义嵌套结果映射的字段\",{\"1\":{\"521\":1}}],[\"只会转化为字符串\",{\"1\":{\"114\":1}}],[\"只返回第一个字段的值\",{\"1\":{\"466\":1}}],[\"只做增强不做改变\",{\"1\":{\"460\":1}}],[\"只对编译\",{\"1\":{\"411\":1}}],[\"只对测试\",{\"1\":{\"411\":2}}],[\"只打包\",{\"1\":{\"404\":1,\"450\":1}}],[\"只允许定义该方法的类本身进行访问\",{\"1\":{\"327\":1}}],[\"只允许类本身和子类进行访问\",{\"1\":{\"327\":1}}],[\"只允许一个事务执行完毕之后才能执行另一个事务\",{\"1\":{\"248\":1,\"611\":1}}],[\"只针对运行时异常回滚\",{\"1\":{\"247\":1}}],[\"只读介绍\",{\"1\":{\"608\":1}}],[\"只读不可写\",{\"1\":{\"245\":1}}],[\"只读模式\",{\"1\":{\"245\":1}}],[\"只读\",{\"0\":{\"245\":1,\"608\":1},\"1\":{\"542\":1}}],[\"只需引入一个相关的starter依赖\",{\"1\":{\"665\":1}}],[\"只需指定\",{\"1\":{\"557\":1}}],[\"只需显式提供\",{\"1\":{\"239\":1,\"574\":1}}],[\"只需要在项目的构建文件\",{\"1\":{\"665\":1}}],[\"只需要在main函数里面new对象就可以调用\",{\"1\":{\"28\":2}}],[\"只需要添加类的全限定符+方法名即可\",{\"1\":{\"591\":1}}],[\"只需要实现\",{\"1\":{\"534\":1}}],[\"只需要关注本次查询相关的属性\",{\"1\":{\"517\":1}}],[\"只需要引入\",{\"1\":{\"461\":1}}],[\"只需要简单的命令操作即可\",{\"1\":{\"390\":1,\"439\":1}}],[\"只需要加上+后缀即可\",{\"1\":{\"346\":1}}],[\"只需要使用唯一的一次\",{\"1\":{\"151\":1}}],[\"只能借助操作系统\",{\"1\":{\"338\":1}}],[\"只能有一个对象交给ioc容器管理\",{\"1\":{\"226\":1,\"559\":1}}],[\"只能使用字节流\",{\"1\":{\"186\":1}}],[\"只能使用唯一一次\",{\"1\":{\"151\":1}}],[\"只能调用唯一一次\",{\"1\":{\"151\":1}}],[\"只要保证\",{\"1\":{\"676\":1}}],[\"只要私服中已经缓存了所需的构件\",{\"1\":{\"421\":1}}],[\"只要将参数名写正确即可\",{\"1\":{\"325\":1}}],[\"只要返回的是true就可以认定为和类型匹配\",{\"1\":{\"226\":1,\"559\":1}}],[\"只要涉及文件内容的\",{\"1\":{\"182\":1}}],[\"只要局部变量值不变\",{\"1\":{\"150\":1}}],[\"只要符合规范标准\",{\"1\":{\"139\":1}}],[\"只要满足要求\",{\"1\":{\"137\":1}}],[\"只要关闭一个窗口虚拟机就会停止运行\",{\"1\":{\"28\":2}}],[\"只有持之以恒地打好基础\",{\"1\":{\"651\":1}}],[\"只有一个\",{\"1\":{\"598\":1}}],[\"只有一个原因\",{\"1\":{\"396\":1,\"440\":1}}],[\"只有真实发生多表查询时\",{\"1\":{\"517\":1}}],[\"只有当前线程完成操作后\",{\"1\":{\"483\":1}}],[\"只有当前所属的方法才能使用它\",{\"1\":{\"150\":1}}],[\"只有测试\",{\"1\":{\"411\":1}}],[\"只有在上层文件目录存在的情况下\",{\"1\":{\"182\":1}}],[\"只有c语言这样\",{\"1\":{\"120\":1}}],[\"只有两个可能的值\",{\"1\":{\"112\":1}}],[\"只有出现runtimeexception才回滚异常\",{\"1\":{\"98\":1}}],[\"只有取消了才会按照xy轴的形式添加组件\",{\"1\":{\"28\":2}}],[\"只遍历有值的\",{\"1\":{\"40\":1}}],[\"只在let关键字所在的代码块内有效\",{\"1\":{\"38\":1}}],[\"只包含一个值的数据类型\",{\"1\":{\"501\":1}}],[\"只包含一个抽象方法的接口\",{\"1\":{\"17\":1}}],[\"只包含js代码\",{\"1\":{\"37\":1}}],[\"会覆盖默认值\",{\"1\":{\"675\":1}}],[\"会出现闷热天气\",{\"1\":{\"651\":1}}],[\"会影响到类中的每一个方法\",{\"1\":{\"608\":1}}],[\"会抛出下面异常\",{\"1\":{\"608\":1}}],[\"会抛出\",{\"1\":{\"598\":2}}],[\"会抛出一个异常类的对象\",{\"1\":{\"155\":1}}],[\"会根据属性类型查找\",{\"1\":{\"566\":1}}],[\"会被设置\",{\"1\":{\"512\":1}}],[\"会被垃圾回收机制回收\",{\"1\":{\"370\":1}}],[\"会使用\",{\"1\":{\"508\":1,\"515\":1}}],[\"会在包名下面搜索需要的\",{\"1\":{\"508\":1}}],[\"会在while循环结束后执行else\",{\"1\":{\"334\":1}}],[\"会先检查该资源的版本信息是否与之前读取的版本信息一致\",{\"1\":{\"483\":1}}],[\"会间接依赖于\",{\"1\":{\"448\":1}}],[\"会发现其中已经自动聚合了子工程\",{\"1\":{\"434\":1}}],[\"会发现代码变得非常长\",{\"1\":{\"338\":1}}],[\"会消耗很大量的带宽\",{\"1\":{\"421\":1}}],[\"会优先选择\",{\"1\":{\"416\":1,\"448\":1}}],[\"会简化构建过程\",{\"1\":{\"406\":1}}],[\"会把\",{\"1\":{\"338\":1}}],[\"会把标签包围的文字返回给我们\",{\"1\":{\"334\":1}}],[\"会返回一个response实例\",{\"1\":{\"334\":1}}],[\"会返回一个列表\",{\"1\":{\"334\":1}}],[\"会返回到filter中\",{\"1\":{\"93\":1}}],[\"会讲文件所有内容以字符串返回\",{\"1\":{\"334\":1}}],[\"会输出66\",{\"1\":{\"334\":1}}],[\"会按照如下顺序进行请求和下载\",{\"1\":{\"421\":1}}],[\"会按照自己的原则\",{\"1\":{\"416\":1,\"448\":1}}],[\"会按照坐标保存到指定位置\",{\"1\":{\"405\":1}}],[\"会按照一下顺序进行查找\",{\"1\":{\"331\":1}}],[\"会按照顺序new出来对象并交给ioc容器管理\",{\"1\":{\"224\":1}}],[\"会生成一个新序列\",{\"1\":{\"305\":1}}],[\"会改变宽度强行塞下\",{\"1\":{\"259\":1}}],[\"会扫描指定的包和子包内容\",{\"1\":{\"231\":1,\"564\":1,\"571\":1}}],[\"会导致当前程序启动失败\",{\"1\":{\"189\":1,\"200\":1}}],[\"会导致其他对象对此属性的一个调用\",{\"1\":{\"130\":1}}],[\"会调用key所在类的equals\",{\"1\":{\"177\":1}}],[\"会打印出这是匿名内部类\",{\"1\":{\"151\":1}}],[\"会精度损失\",{\"1\":{\"146\":1}}],[\"会报错\",{\"1\":{\"114\":2,\"212\":1}}],[\"会话范围内有效的实例\",{\"1\":{\"228\":1,\"560\":1,\"565\":1}}],[\"会话跟踪方案\",{\"1\":{\"89\":1}}],[\"会话跟踪\",{\"1\":{\"89\":1}}],[\"会话跟踪技术\",{\"1\":{\"32\":1}}],[\"会话结束\",{\"1\":{\"89\":1}}],[\"会话建立\",{\"1\":{\"89\":1}}],[\"会话\",{\"1\":{\"89\":1}}],[\"会话技术\",{\"0\":{\"89\":1}}],[\"会自动传递slf4j门面\",{\"1\":{\"625\":1}}],[\"会自动传递给所有子工程\",{\"1\":{\"456\":1}}],[\"会自动映射任何复杂的结果集\",{\"1\":{\"521\":1}}],[\"会自动解析和加载其所有的直接和间接依赖\",{\"1\":{\"448\":1}}],[\"会自动把b\",{\"1\":{\"415\":1}}],[\"会自动打包编译到classes文件夹下\",{\"1\":{\"413\":1}}],[\"会自动触发周期前的命令\",{\"1\":{\"406\":1,\"450\":1}}],[\"会自动创建\",{\"1\":{\"184\":1}}],[\"会自动转化为int类型\",{\"1\":{\"114\":1}}],[\"会自动赋默认值\",{\"1\":{\"112\":1}}],[\"会自动设置参数值\",{\"1\":{\"81\":1}}],[\"会自动执行一个生命周期方法\",{\"1\":{\"44\":1}}],[\"会将原有的覆盖\",{\"1\":{\"184\":1}}],[\"会将\",{\"1\":{\"81\":1}}],[\"会给类自动生成易于阅读的tostring方法\",{\"1\":{\"79\":1}}],[\"会延迟指定时间后执行一次函数\",{\"1\":{\"40\":1}}],[\"会进行类型转化\",{\"1\":{\"38\":1}}],[\"会频繁的使用div和span这两个没有语义的布局标签\",{\"1\":{\"36\":1}}],[\"会执行本类中的对应代码\",{\"1\":{\"28\":1}}],[\"会转义\",{\"1\":{\"8\":1}}],[\"本次先写到当前业务\",{\"1\":{\"655\":1}}],[\"本次不需要导入连接池\",{\"1\":{\"220\":1,\"493\":1,\"625\":1}}],[\"本犹豫要不要多花四五万的消费者一个充足的理由\",{\"1\":{\"651\":1}}],[\"本手是基础\",{\"1\":{\"651\":1}}],[\"本手\",{\"1\":{\"651\":3}}],[\"本轮最大的悬念是第八名的争夺\",{\"1\":{\"651\":1}}],[\"本页数据\",{\"1\":{\"634\":1}}],[\"本身的类型获取\",{\"1\":{\"598\":1}}],[\"本身的值也会变\",{\"1\":{\"167\":1}}],[\"本质上说\",{\"1\":{\"619\":1}}],[\"本质上\",{\"1\":{\"564\":1}}],[\"本课程使用\",{\"1\":{\"491\":1}}],[\"本团队其他开发人员部署到\",{\"1\":{\"424\":1}}],[\"本笔记大部分参考自\",{\"1\":{\"291\":1}}],[\"本笔记根据哔哩哔哩黑马教学视频来的\",{\"1\":{\"32\":1}}],[\"本来new的时候是一只猫\",{\"1\":{\"146\":1}}],[\"本来是什么子类\",{\"1\":{\"146\":1}}],[\"本地部署\",{\"1\":{\"450\":2}}],[\"本地\",{\"1\":{\"412\":1,\"449\":1}}],[\"本地回路地址\",{\"1\":{\"189\":1,\"200\":1}}],[\"本地仓库路径\",{\"1\":{\"412\":1}}],[\"本地仓库中\",{\"1\":{\"412\":1,\"449\":1}}],[\"本地仓库位置\",{\"1\":{\"395\":1,\"440\":1}}],[\"本地仓库\",{\"1\":{\"55\":1,\"425\":1,\"450\":1}}],[\"本地调试\",{\"1\":{\"48\":1}}],[\"本类对象\",{\"1\":{\"28\":1}}],[\"本博客所有笔记内容仅供参考\",{\"1\":{\"0\":1}}],[\"本博客网站使用vuepress搭建\",{\"1\":{\"0\":1}}],[\"键值结构里面的key\",{\"1\":{\"669\":1}}],[\"键值对就对应你想找的属性和值\",{\"1\":{\"334\":1}}],[\"键值对\",{\"1\":{\"315\":1,\"334\":1}}],[\"键帽\",{\"1\":{\"334\":2}}],[\"键可以使用数字\",{\"1\":{\"314\":1}}],[\"键和值都是string类型的\",{\"1\":{\"179\":1}}],[\"键\",{\"1\":{\"177\":1}}],[\"键盘\",{\"1\":{\"334\":1}}],[\"键盘输入\",{\"1\":{\"147\":1}}],[\"键盘里面那么多按键如进行区分\",{\"1\":{\"28\":1}}],[\"键盘监听机制\",{\"0\":{\"28\":1}}],[\"键盘监听\",{\"1\":{\"25\":1}}],[\"键入键时调用\",{\"1\":{\"28\":1}}],[\"松开按键\",{\"1\":{\"28\":1}}],[\"松开\",{\"1\":{\"27\":1}}],[\"松开动作\",{\"1\":{\"27\":1}}],[\"划菱桶\",{\"1\":{\"651\":1}}],[\"划出\",{\"1\":{\"27\":1}}],[\"划出动作\",{\"1\":{\"27\":1}}],[\"划入\",{\"1\":{\"27\":1}}],[\"划入动作\",{\"1\":{\"27\":1}}],[\"把所有常见的jar的依赖版本都声明好了\",{\"1\":{\"665\":1}}],[\"把资源让出来\",{\"1\":{\"609\":1}}],[\"把测试基于注解功能时的java类复制到新module中\",{\"1\":{\"596\":1}}],[\"把上图中看到的地址复制出来即可\",{\"1\":{\"425\":1}}],[\"把我们原来配置阿里云仓库地址的\",{\"1\":{\"425\":1}}],[\"把版本号去掉就表示子工程中这个依赖的版本由父工程决定\",{\"1\":{\"418\":1,\"452\":1}}],[\"把具有不同值的元素的行列及值记录在一个小规模的数组中\",{\"1\":{\"365\":1}}],[\"把json转换为python对象\",{\"1\":{\"361\":1}}],[\"把printf删了再走一次gcc\",{\"1\":{\"338\":1}}],[\"把当前的对象传送过去\",{\"1\":{\"192\":1,\"203\":1}}],[\"把它当作父类来看待使用\",{\"1\":{\"146\":1}}],[\"把管理容器添加到页面中\",{\"1\":{\"28\":2}}],[\"把按钮添加到界面当中\",{\"1\":{\"26\":2,\"27\":1}}],[\"把后面的格子填充满了\",{\"1\":{\"24\":1}}],[\"点我一下\",{\"1\":{\"43\":1}}],[\"点我啊\",{\"1\":{\"26\":1}}],[\"点击加载前端程序\",{\"1\":{\"637\":1}}],[\"点击运行脚本\",{\"1\":{\"449\":1}}],[\"点击file\",{\"1\":{\"400\":1}}],[\"点击finish\",{\"1\":{\"57\":1}}],[\"点击刷新按钮\",{\"1\":{\"59\":1}}],[\"点击+号\",{\"1\":{\"57\":1}}],[\"点击next\",{\"1\":{\"57\":1}}],[\"点击确定返回true\",{\"1\":{\"40\":1}}],[\"点击标签内的文字就可以聚焦\",{\"1\":{\"34\":1}}],[\"点击后执行这个抽象方法\",{\"1\":{\"28\":1}}],[\"点击x不会停止运行\",{\"1\":{\"28\":2}}],[\"点击x停止运行\",{\"1\":{\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"kindle阅读器带来革命性体验\",{\"1\":{\"651\":1}}],[\"kb\",{\"1\":{\"425\":8,\"426\":2}}],[\"kw\",{\"1\":{\"355\":1,\"361\":1}}],[\"kwlist\",{\"1\":{\"294\":1}}],[\"kotlin\",{\"1\":{\"549\":1}}],[\"ko\",{\"1\":{\"346\":1}}],[\"khtml\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"kg\",{\"1\":{\"334\":1}}],[\"k<i+1\",{\"1\":{\"121\":1}}],[\"k<3\",{\"1\":{\"121\":1}}],[\"k++\",{\"1\":{\"121\":2,\"652\":2}}],[\"k=0\",{\"1\":{\"121\":2}}],[\"k\",{\"1\":{\"121\":2,\"315\":2,\"361\":2,\"652\":1}}],[\"keycolumn\",{\"1\":{\"515\":1}}],[\"keycolumn=\",{\"1\":{\"515\":1}}],[\"keys\",{\"1\":{\"315\":1,\"334\":1}}],[\"keyset\",{\"1\":{\"177\":4,\"178\":1}}],[\"key1=value1\",{\"1\":{\"315\":1}}],[\"key=token\",{\"1\":{\"655\":1}}],[\"key=str\",{\"1\":{\"311\":1}}],[\"key=none\",{\"1\":{\"311\":1}}],[\"key表示指定从每个列表元素中提取一个比较键\",{\"1\":{\"311\":1}}],[\"keywords\",{\"1\":{\"656\":5}}],[\"keyword\",{\"1\":{\"294\":2}}],[\"key是用set来存放的\",{\"1\":{\"177\":1}}],[\"key和value之间存在单向一对一关系\",{\"1\":{\"177\":1}}],[\"keyboard\",{\"1\":{\"147\":11}}],[\"keyproperty=\",{\"1\":{\"512\":2,\"514\":1,\"515\":1}}],[\"keyproperty属性可以指定主键在实体类对象中对应的属性名\",{\"1\":{\"512\":1}}],[\"keyproperty\",{\"1\":{\"81\":1,\"512\":1,\"515\":1}}],[\"keypressed\",{\"1\":{\"28\":2}}],[\"key2=value2\",{\"1\":{\"315\":1}}],[\"key2\",{\"1\":{\"40\":1}}],[\"key\",{\"1\":{\"40\":1,\"63\":1,\"169\":1,\"177\":5,\"235\":2,\"277\":1,\"311\":1,\"315\":2,\"325\":2,\"368\":3,\"461\":1,\"493\":1,\"510\":2,\"514\":1,\"517\":2,\"562\":1,\"567\":2,\"568\":1,\"575\":1,\"625\":1,\"640\":1,\"651\":5}}],[\"keytyped\",{\"1\":{\"28\":2}}],[\"keyreleased\",{\"1\":{\"28\":2}}],[\"keyevent\",{\"1\":{\"28\":6}}],[\"keylistener\",{\"1\":{\"25\":1,\"28\":1}}],[\"kdyq1108\",{\"1\":{\"11\":2,\"12\":1,\"277\":4}}],[\"则根据新闻id查询新闻的完整信息并响应给前端\",{\"1\":{\"657\":1}}],[\"则是李斌的又一次诚意之作\",{\"1\":{\"651\":1}}],[\"则是将实体类和数据表进行自动映射\",{\"1\":{\"537\":1}}],[\"则覆盖了更大的零部件范围\",{\"1\":{\"651\":1}}],[\"则进行异常处理\",{\"1\":{\"584\":1}}],[\"则抛出异常或转向到错误页面\",{\"1\":{\"584\":1}}],[\"则可以使用\",{\"1\":{\"512\":1}}],[\"则可以自我删除\",{\"1\":{\"371\":1}}],[\"则别名为其注解值\",{\"1\":{\"508\":1}}],[\"则项目的构建过程也会变得不稳定\",{\"1\":{\"421\":1}}],[\"则跳转到第\",{\"1\":{\"421\":2}}],[\"则\",{\"1\":{\"416\":1,\"421\":1,\"448\":1}}],[\"则a依赖于x\",{\"1\":{\"416\":1,\"448\":1}}],[\"则不能传递\",{\"1\":{\"415\":1}}],[\"则几乎不需要管理这些关系\",{\"1\":{\"387\":1}}],[\"则统一从镜像网站或中央仓库中下载\",{\"1\":{\"387\":1}}],[\"则添加失败\",{\"1\":{\"370\":1}}],[\"则r$\",{\"1\":{\"341\":1}}],[\"则将原字符返回\",{\"1\":{\"317\":1}}],[\"则将来访问tomcat时\",{\"1\":{\"65\":1}}],[\"则等同于stretch\",{\"1\":{\"265\":1}}],[\"则从左到右\",{\"1\":{\"258\":1}}],[\"则加入该事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"则加入当前事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"则与propagation\",{\"1\":{\"249\":1,\"612\":1}}],[\"则在该事务中嵌套一个新事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"则说明该\",{\"1\":{\"237\":1,\"573\":1}}],[\"则说明jwt令牌被篡改或失效了\",{\"1\":{\"92\":1}}],[\"则返回match对象\",{\"1\":{\"321\":1}}],[\"则返回\",{\"1\":{\"229\":2,\"317\":1,\"561\":2}}],[\"则返回字符串池中的引用\",{\"1\":{\"165\":1}}],[\"则只能添加进后添加的哪个元素\",{\"1\":{\"177\":1}}],[\"则只需要进行一次检查\",{\"1\":{\"9\":1}}],[\"则这个对象直接\",{\"1\":{\"172\":1}}],[\"则此类必须声明为抽象的\",{\"1\":{\"138\":1}}],[\"则此类是一个\",{\"1\":{\"138\":1}}],[\"则优先用子类方法\",{\"1\":{\"137\":1}}],[\"则挂起当前事务\",{\"1\":{\"98\":1,\"249\":1,\"612\":1}}],[\"则拼接sql\",{\"1\":{\"84\":1}}],[\"则转为nan\",{\"1\":{\"38\":1}}],[\"则执行某段代码\",{\"1\":{\"25\":1}}],[\"窗体\",{\"1\":{\"25\":1}}],[\"窗口\",{\"1\":{\"23\":1}}],[\"窗口标题\",{\"1\":{\"21\":1,\"23\":3}}],[\"事务相关\",{\"1\":{\"677\":1}}],[\"事务注解\",{\"1\":{\"613\":1}}],[\"事务结束\",{\"1\":{\"609\":1}}],[\"事务在执行过程中\",{\"1\":{\"609\":1}}],[\"事务切面的操作都浪费了\",{\"1\":{\"593\":1}}],[\"事务处理\",{\"1\":{\"584\":1}}],[\"事务\",{\"1\":{\"584\":2}}],[\"事务之间调用如何影响子事务\",{\"1\":{\"249\":1}}],[\"事务的传播行为\",{\"0\":{\"249\":1}}],[\"事务只能读取已经提交的数据\",{\"1\":{\"248\":1,\"611\":1}}],[\"事务可以读取未被提交的数据\",{\"1\":{\"248\":1,\"611\":1}}],[\"事务隔离级别设置\",{\"1\":{\"611\":1}}],[\"事务隔离级别\",{\"0\":{\"248\":1,\"611\":1},\"1\":{\"542\":1,\"611\":1}}],[\"事务不回滚\",{\"1\":{\"247\":1}}],[\"事务异常\",{\"0\":{\"247\":1,\"610\":1},\"1\":{\"542\":1}}],[\"事务属性\",{\"0\":{\"245\":1,\"246\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"612\":1},\"1\":{\"542\":5}}],[\"事务回滚\",{\"1\":{\"216\":1}}],[\"事务传播行为要研究的问题\",{\"1\":{\"612\":1}}],[\"事务传播行为不会生效\",{\"1\":{\"249\":1,\"612\":1}}],[\"事务传播行为的属性设置到子事务上\",{\"1\":{\"249\":1}}],[\"事务传播行为\",{\"0\":{\"612\":1},\"1\":{\"98\":1,\"542\":1}}],[\"事务进阶\",{\"0\":{\"98\":1}}],[\"事务管理器\",{\"1\":{\"496\":1,\"628\":1}}],[\"事务管理器规范接口和事务增强等等\",{\"1\":{\"243\":1,\"604\":1}}],[\"事务管理\",{\"0\":{\"97\":1},\"1\":{\"100\":1}}],[\"事件绑定\",{\"1\":{\"41\":1,\"253\":1}}],[\"事件演示\",{\"1\":{\"26\":2,\"27\":1,\"28\":1,\"29\":1}}],[\"事件\",{\"1\":{\"25\":1}}],[\"事件源\",{\"1\":{\"25\":1}}],[\"事物管理\",{\"1\":{\"5\":1}}],[\"按年龄降序查询用户\",{\"1\":{\"476\":1}}],[\"按位取反\",{\"1\":{\"297\":1}}],[\"按位异或\",{\"1\":{\"297\":1}}],[\"按位或\",{\"1\":{\"297\":1}}],[\"按位与\",{\"1\":{\"297\":1}}],[\"按位置布局\",{\"1\":{\"25\":1}}],[\"按生日日期的先后排序\",{\"1\":{\"176\":2}}],[\"按照价位\",{\"1\":{\"651\":1}}],[\"按照车型大小\",{\"1\":{\"651\":1}}],[\"按照顺序分别是\",{\"1\":{\"625\":1}}],[\"按照jsr的分类以及注解语义的不同\",{\"1\":{\"566\":1}}],[\"按照应被定义的顺序列出\",{\"1\":{\"515\":1}}],[\"按照maven工程结构放置的文件会默认被编译和打包\",{\"1\":{\"413\":1}}],[\"按照单链表的顺序添加\",{\"1\":{\"371\":1}}],[\"按照编号顺序\",{\"1\":{\"371\":1}}],[\"按照编号顺序添加\",{\"1\":{\"370\":1}}],[\"按照d\",{\"1\":{\"188\":1}}],[\"按照角色的不同\",{\"1\":{\"181\":1}}],[\"按照处理数据的单位不同\",{\"1\":{\"181\":1}}],[\"按照数据的流行不同\",{\"1\":{\"181\":1}}],[\"按照指定的key删除key\",{\"1\":{\"177\":1}}],[\"按照指定的周期\",{\"1\":{\"40\":1}}],[\"按照添加进map中的元素的key的指定属性进行排序要求key必须是同一个类的对象\",{\"1\":{\"169\":1}}],[\"按照regex将当前字符串拆分成多个字符串\",{\"1\":{\"166\":1}}],[\"按照对象层次结构关系即可接受嵌套pojo属性参数\",{\"1\":{\"68\":1}}],[\"按下不松\",{\"1\":{\"28\":1}}],[\"按下键时调用\",{\"1\":{\"28\":1}}],[\"按下\",{\"1\":{\"27\":1}}],[\"按下动作\",{\"1\":{\"27\":1}}],[\"按钮2\",{\"1\":{\"26\":1,\"41\":1}}],[\"按钮1\",{\"1\":{\"26\":1,\"27\":1,\"41\":1}}],[\"按钮被点击了\",{\"1\":{\"26\":1}}],[\"按钮\",{\"1\":{\"25\":1,\"50\":1}}],[\"按钮左对齐\",{\"1\":{\"23\":1}}],[\"鼠标点击\",{\"1\":{\"147\":1}}],[\"鼠标从某元素移开\",{\"1\":{\"41\":1}}],[\"鼠标被移到某元素之上\",{\"1\":{\"41\":1}}],[\"鼠标单击事件\",{\"1\":{\"41\":1}}],[\"鼠标悬停显示信息\",{\"1\":{\"34\":1}}],[\"鼠标监听中的松开事件\",{\"1\":{\"27\":1}}],[\"鼠标监听中的单击事件\",{\"1\":{\"27\":1}}],[\"鼠标监听\",{\"0\":{\"27\":1},\"1\":{\"25\":1}}],[\"鼠标划入\",{\"1\":{\"25\":1}}],[\"鼠标放上有提示\",{\"1\":{\"25\":1}}],[\"鼠标停留\",{\"1\":{\"25\":1}}],[\"图像等\",{\"1\":{\"674\":1}}],[\"图像名称\",{\"1\":{\"279\":1}}],[\"图解配置类和容器配置\",{\"1\":{\"623\":1}}],[\"图解\",{\"1\":{\"620\":1}}],[\"图解ioc配置流程\",{\"1\":{\"557\":1}}],[\"图结构\",{\"1\":{\"365\":1}}],[\"图形化页面vue\",{\"1\":{\"49\":1}}],[\"图片等\",{\"1\":{\"675\":1}}],[\"图片不存在\",{\"1\":{\"594\":2}}],[\"图片链接\",{\"1\":{\"352\":1}}],[\"图片\",{\"1\":{\"25\":1,\"50\":1,\"186\":1,\"352\":1}}],[\"图片按钮一般没有文字\",{\"1\":{\"25\":1}}],[\"图书信息管理\",{\"1\":{\"25\":1}}],[\"图标按钮\",{\"1\":{\"25\":1}}],[\"图标也可以在阿里图标库下载svg文件导入使用\",{\"1\":{\"0\":1}}],[\"界面无布局\",{\"1\":{\"25\":1}}],[\"占位符的值\",{\"1\":{\"562\":1}}],[\"占位符\",{\"0\":{\"81\":1},\"1\":{\"80\":2,\"509\":1,\"513\":1}}],[\"占位符替代\",{\"1\":{\"8\":1}}],[\"占两个格子\",{\"1\":{\"24\":1}}],[\"两副扑克脸\",{\"1\":{\"651\":1}}],[\"两者之间可以通过encode\",{\"1\":{\"317\":1}}],[\"两者的区别\",{\"1\":{\"94\":1}}],[\"两种方式思维转化\",{\"1\":{\"570\":1}}],[\"两种方式代理都比较繁琐\",{\"1\":{\"211\":1}}],[\"两种注入语法都需要掌握\",{\"1\":{\"558\":1}}],[\"两种不同的存储结构\",{\"1\":{\"365\":1}}],[\"两种\",{\"1\":{\"316\":1}}],[\"两字节\",{\"1\":{\"112\":2}}],[\"两个无关联ioc容器之间的组件无法注入\",{\"1\":{\"621\":1}}],[\"两个容器\",{\"1\":{\"619\":1}}],[\"两个when都不满足\",{\"1\":{\"528\":1}}],[\"两个元组可以用+组合\",{\"1\":{\"312\":1}}],[\"两个相邻元素间用逗号隔开\",{\"1\":{\"307\":1}}],[\"两个常用的方法\",{\"1\":{\"189\":1,\"200\":1}}],[\"两个方法共用一个事务\",{\"1\":{\"98\":1}}],[\"两个值加起来占的比值\",{\"1\":{\"24\":1}}],[\"两句话\",{\"1\":{\"15\":1}}],[\"后缀\",{\"1\":{\"667\":1}}],[\"后缀为properties的文件\",{\"1\":{\"179\":1}}],[\"后期提取到拦截器和全局异常处理器\",{\"1\":{\"655\":1}}],[\"后期通过配置文件修改\",{\"1\":{\"442\":1}}],[\"后来苏轼曾借用过这个典故\",{\"1\":{\"651\":1}}],[\"后台功能开发\",{\"0\":{\"654\":1},\"1\":{\"644\":1}}],[\"后台项目根路径设计\",{\"1\":{\"642\":1}}],[\"后台运行\",{\"0\":{\"273\":1}}],[\"后校验\",{\"1\":{\"483\":1}}],[\"后续操作比较简单\",{\"1\":{\"423\":1}}],[\"后\",{\"1\":{\"387\":1}}],[\"后移\",{\"1\":{\"370\":1}}],[\"后配置的文件\",{\"1\":{\"226\":1,\"559\":1}}],[\"后置\",{\"1\":{\"212\":2}}],[\"后置通知\",{\"1\":{\"211\":1,\"584\":1}}],[\"后一个对象就不能添加进来\",{\"1\":{\"172\":1}}],[\"后执行子类构造\",{\"1\":{\"136\":1}}],[\"后自增\",{\"1\":{\"117\":1}}],[\"后++\",{\"1\":{\"117\":1}}],[\"后做运算谁在前先干嘛\",{\"1\":{\"117\":1}}],[\"后解释\",{\"1\":{\"106\":1}}],[\"后都被执行\",{\"1\":{\"102\":1}}],[\"后面同学们做的工作\",{\"1\":{\"564\":1}}],[\"后面讲解\",{\"1\":{\"463\":1}}],[\"后面会讲解两个概念\",{\"1\":{\"409\":1,\"447\":1}}],[\"后面需要使用\",{\"1\":{\"371\":1}}],[\"后面我们每添加一个节点\",{\"1\":{\"370\":1}}],[\"后面这个是指定解析器\",{\"1\":{\"334\":1}}],[\"后面为给模块起的别名\",{\"1\":{\"330\":1}}],[\"后面详细讲解\",{\"1\":{\"220\":1,\"493\":1,\"630\":1}}],[\"后面的这个不能添加进去\",{\"1\":{\"172\":1}}],[\"后面的阶段依赖于前面的阶段\",{\"1\":{\"59\":1}}],[\"后面那两个类型必须一致\",{\"1\":{\"119\":1}}],[\"后面两个5可去\",{\"1\":{\"23\":1}}],[\"后者v\",{\"1\":{\"43\":1}}],[\"后加载的图片反而在下面\",{\"1\":{\"28\":1}}],[\"后端接收并更新进入数据库\",{\"1\":{\"657\":1}}],[\"后端接收token请求头后\",{\"1\":{\"657\":1}}],[\"后端将新闻信息存入数据库\",{\"1\":{\"657\":1}}],[\"后端要同时让新闻的浏览量+1\",{\"1\":{\"656\":1}}],[\"后端根据新闻id查询完整新闻文章信息并返回\",{\"1\":{\"656\":1}}],[\"后端根据用户名查询用户名是否可用并做出响应\",{\"1\":{\"655\":1}}],[\"后端根据用户名和密码判断登录是否成功\",{\"1\":{\"655\":1}}],[\"后端根据token请求头获取登录用户的详细信息并响应给客户端进行存储\",{\"1\":{\"655\":1}}],[\"后端技术栈\",{\"1\":{\"647\":1}}],[\"后端程序实现和测试\",{\"0\":{\"639\":1},\"1\":{\"615\":1}}],[\"后端\",{\"0\":{\"692\":1},\"2\":{\"18\":1,\"209\":1,\"289\":1,\"335\":1,\"339\":1,\"342\":1,\"348\":1,\"358\":1,\"362\":1}}],[\"网络通信其实就是socket间的通信\",{\"1\":{\"190\":1,\"201\":1}}],[\"网络上具有唯一标识的ip地址和端口号组合在一起构成唯一能识别的标识符套接字\",{\"1\":{\"190\":1,\"201\":1}}],[\"网络层\",{\"1\":{\"189\":1,\"200\":1}}],[\"网络编程相关\",{\"0\":{\"189\":1}}],[\"网络连接中断\",{\"1\":{\"152\":1}}],[\"网站的结构又不尽相同\",{\"1\":{\"387\":1}}],[\"网站\",{\"1\":{\"34\":1}}],[\"网站内可搭建幻灯片演示\",{\"1\":{\"0\":1}}],[\"网格袋布局\",{\"1\":{\"24\":1}}],[\"网格布局\",{\"1\":{\"23\":1}}],[\"东\",{\"1\":{\"23\":1}}],[\"西\",{\"1\":{\"23\":1}}],[\"西京\",{\"1\":{\"17\":1}}],[\"南大通用数据库\",{\"1\":{\"460\":1}}],[\"南大通用\",{\"1\":{\"460\":1}}],[\"南\",{\"1\":{\"23\":1}}],[\"南京\",{\"1\":{\"17\":1}}],[\"第五问\",{\"0\":{\"623\":1},\"1\":{\"615\":1}}],[\"第五位\",{\"1\":{\"590\":1}}],[\"第四问\",{\"0\":{\"622\":1},\"1\":{\"615\":1}}],[\"第四位\",{\"1\":{\"590\":1}}],[\"第七位\",{\"1\":{\"590\":2}}],[\"第六位\",{\"1\":{\"590\":1}}],[\"第三问\",{\"0\":{\"621\":1},\"1\":{\"615\":1}}],[\"第三位\",{\"1\":{\"590\":1}}],[\"第三种情况\",{\"1\":{\"525\":1,\"526\":1,\"528\":1}}],[\"第三范式\",{\"1\":{\"341\":1}}],[\"第三方提供场景\",{\"1\":{\"665\":1}}],[\"第三方框架整合\",{\"1\":{\"561\":1}}],[\"第三方软件等简要介绍\",{\"1\":{\"393\":1}}],[\"第三方网站提供下载\",{\"1\":{\"387\":1}}],[\"第三方jar包的类\",{\"1\":{\"236\":1,\"572\":1}}],[\"第三方类使用配置类声明方法+\",{\"1\":{\"575\":1}}],[\"第三方类\",{\"1\":{\"231\":1}}],[\"第三步\",{\"1\":{\"121\":1}}],[\"第一问\",{\"0\":{\"619\":1},\"1\":{\"615\":1}}],[\"第一位\",{\"1\":{\"590\":1}}],[\"第一原则\",{\"1\":{\"416\":1,\"448\":1}}],[\"第一行数组中元素的个数\",{\"1\":{\"376\":1}}],[\"第一种情况\",{\"1\":{\"525\":1,\"526\":1,\"528\":1}}],[\"第一种\",{\"1\":{\"370\":1}}],[\"第一种方法在添加英雄时\",{\"1\":{\"370\":1}}],[\"第一范式\",{\"1\":{\"341\":1}}],[\"第一次设置远程登录\",{\"1\":{\"277\":1}}],[\"第一轮挑出来一个最小的\",{\"1\":{\"126\":1}}],[\"第一步\",{\"1\":{\"121\":1,\"589\":2}}],[\"第一个when满足条件\",{\"1\":{\"528\":1}}],[\"第一个有效值位置及其值\",{\"1\":{\"365\":1}}],[\"第一个参数是字符串的方法\",{\"1\":{\"590\":1}}],[\"第一个参数p表示找p标签\",{\"1\":{\"334\":1}}],[\"第一个参数被占用表示对象自身\",{\"1\":{\"334\":1}}],[\"第一个img元素\",{\"1\":{\"334\":1}}],[\"第一个单词首字母小写\",{\"1\":{\"110\":1}}],[\"第一个事务出错\",{\"1\":{\"98\":1}}],[\"第一个按钮\",{\"1\":{\"23\":2}}],[\"第二问\",{\"0\":{\"620\":1},\"1\":{\"615\":1}}],[\"第二位\",{\"1\":{\"590\":1}}],[\"第二原则\",{\"1\":{\"416\":1,\"448\":1}}],[\"第二行是\",{\"1\":{\"376\":1}}],[\"第二行开始\",{\"1\":{\"64\":1}}],[\"第二种情况\",{\"1\":{\"525\":1,\"526\":1,\"528\":1}}],[\"第二种\",{\"1\":{\"370\":1}}],[\"第二种方式在添加英雄时\",{\"1\":{\"370\":1}}],[\"第二范式\",{\"1\":{\"341\":1}}],[\"第二轮再挑出来一个最小的\",{\"1\":{\"126\":1}}],[\"第二步\",{\"1\":{\"121\":1,\"589\":2}}],[\"第二个when满足条件\",{\"1\":{\"528\":1}}],[\"第二个有效值位置及其值\",{\"1\":{\"365\":1}}],[\"第二个返回none因为matchh方法从字符串的开始位置开始匹配\",{\"1\":{\"320\":1}}],[\"第二个单词开始首字母大写\",{\"1\":{\"110\":1}}],[\"第二个事务不会回滚\",{\"1\":{\"98\":1}}],[\"第二个按钮\",{\"1\":{\"23\":2}}],[\"第6个按钮\",{\"1\":{\"23\":1}}],[\"第5个按钮\",{\"1\":{\"23\":2}}],[\"第4个按钮\",{\"1\":{\"23\":2}}],[\"第3个按钮\",{\"1\":{\"23\":2}}],[\"默认路径\",{\"1\":{\"675\":1}}],[\"默认属性值\",{\"1\":{\"665\":1}}],[\"默认只针对运行时异常回滚\",{\"1\":{\"610\":1}}],[\"默认作用域为\",{\"1\":{\"573\":1}}],[\"默认包含无参数构造函数\",{\"1\":{\"557\":1}}],[\"默认情况\",{\"1\":{\"552\":1,\"564\":1,\"610\":1}}],[\"默认情况下main线程具有普通优先级\",{\"1\":{\"196\":1,\"207\":1}}],[\"默认情况下\",{\"1\":{\"59\":1,\"98\":1,\"247\":1,\"259\":1,\"320\":1,\"331\":1,\"413\":2,\"480\":1,\"557\":1,\"674\":3}}],[\"默认查询非逻辑删除数据\",{\"1\":{\"481\":1}}],[\"默认实现类为defaultidentifiergenerator雪花算法\",{\"1\":{\"480\":1}}],[\"默认位置\",{\"1\":{\"467\":1}}],[\"默认主键生成策略为雪花算法\",{\"1\":{\"463\":1}}],[\"默认主轴方向就是x轴方向\",{\"1\":{\"257\":1}}],[\"默认创建\",{\"1\":{\"424\":3}}],[\"默认不会被打包\",{\"1\":{\"413\":1}}],[\"默认周期\",{\"1\":{\"406\":1,\"450\":1}}],[\"默认去除空格\",{\"1\":{\"317\":1}}],[\"默认采用的编码格式为utf\",{\"1\":{\"317\":1}}],[\"默认文件类型\",{\"1\":{\"283\":1}}],[\"默认0\",{\"1\":{\"264\":1}}],[\"默认侧轴方向就是y轴方向\",{\"1\":{\"257\":1}}],[\"默认没有指定\",{\"1\":{\"247\":3,\"248\":1,\"610\":4,\"611\":1,\"612\":1}}],[\"默认永远不超时\",{\"1\":{\"246\":1}}],[\"默认单例\",{\"1\":{\"237\":1}}],[\"默认会根据成员属性名查找\",{\"1\":{\"233\":1}}],[\"默认方法也可以被覆盖重写\",{\"1\":{\"144\":1}}],[\"默认方法私有化\",{\"0\":{\"142\":1}}],[\"默认方法\",{\"0\":{\"140\":1},\"1\":{\"139\":1}}],[\"默认i是最小的\",{\"1\":{\"126\":1}}],[\"默认为true\",{\"1\":{\"677\":2}}],[\"默认为\",{\"1\":{\"481\":2}}],[\"默认为null\",{\"1\":{\"371\":2}}],[\"默认为false\",{\"1\":{\"370\":1}}],[\"默认为0\",{\"1\":{\"265\":1}}],[\"默认为空格\",{\"1\":{\"124\":1}}],[\"默认为类名首字母小写\",{\"1\":{\"74\":1}}],[\"默认信息等\",{\"1\":{\"92\":1}}],[\"默认是y轴\",{\"1\":{\"260\":1}}],[\"默认是\",{\"1\":{\"247\":3,\"248\":1,\"610\":4,\"611\":1,\"612\":1}}],[\"默认是非只读\",{\"1\":{\"245\":1}}],[\"默认是false\",{\"1\":{\"124\":1,\"608\":1}}],[\"默认是0\",{\"1\":{\"124\":2}}],[\"默认是类名首字母小写\",{\"1\":{\"75\":1}}],[\"默认是按照类型进行的\",{\"1\":{\"75\":1}}],[\"默认扫描的范围时启动类所在包及其子包\",{\"1\":{\"74\":1}}],[\"默认\",{\"1\":{\"59\":1,\"247\":3,\"248\":1,\"409\":1,\"447\":2,\"480\":1,\"481\":2,\"609\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"默认提交到当前页面\",{\"1\":{\"34\":1}}],[\"默认值为未设置\",{\"1\":{\"515\":2}}],[\"默认值为0\",{\"1\":{\"323\":1}}],[\"默认值为strict\",{\"1\":{\"317\":1}}],[\"默认值为auto\",{\"1\":{\"265\":1}}],[\"默认值在侧轴的头部开始排列\",{\"1\":{\"261\":1}}],[\"默认值从头部开始\",{\"1\":{\"258\":1}}],[\"默认值从左到右\",{\"1\":{\"257\":1}}],[\"默认值\",{\"1\":{\"34\":1,\"98\":1,\"228\":2,\"232\":1,\"249\":1,\"259\":1,\"260\":1,\"398\":1,\"442\":1,\"480\":2,\"515\":4,\"521\":1,\"560\":3,\"565\":3,\"612\":1}}],[\"默认的静态资源路径为\",{\"1\":{\"675\":1}}],[\"默认的打包名称\",{\"1\":{\"413\":1}}],[\"默认的初始化\",{\"1\":{\"132\":1}}],[\"默认的\",{\"1\":{\"28\":2,\"163\":1}}],[\"默认放在正中央\",{\"1\":{\"28\":2}}],[\"默认居中对齐\",{\"1\":{\"23\":1}}],[\"默认在中间\",{\"1\":{\"23\":1}}],[\"默认使用borderlayout\",{\"1\":{\"23\":2}}],[\"居中\",{\"1\":{\"23\":1}}],[\"顶级容器jdialog\",{\"1\":{\"23\":1}}],[\"顶级容器jframe\",{\"0\":{\"23\":1}}],[\"不添加业务接口\",{\"1\":{\"680\":1}}],[\"不甘人后\",{\"1\":{\"651\":1}}],[\"不独盘中见卢橘\",{\"1\":{\"651\":1}}],[\"不在保留mybatis的外部配置文件\",{\"1\":{\"628\":1}}],[\"不考虑访问修饰符\",{\"1\":{\"590\":1}}],[\"不考虑\",{\"1\":{\"590\":1}}],[\"不干扰目标核心代码\",{\"1\":{\"583\":1}}],[\"不区分ioc的方式\",{\"1\":{\"566\":1}}],[\"不区分英文\",{\"1\":{\"317\":1}}],[\"不断创新和发展\",{\"1\":{\"549\":1}}],[\"不给数据库表设置外键约束\",{\"1\":{\"517\":1}}],[\"不给宽度\",{\"1\":{\"264\":1}}],[\"不依赖web服务器\",{\"1\":{\"493\":1}}],[\"不依赖于具体的对象\",{\"1\":{\"130\":1}}],[\"不容易做特殊优化\",{\"1\":{\"492\":1}}],[\"不对\",{\"1\":{\"483\":1}}],[\"不易统一管理\",{\"1\":{\"418\":1}}],[\"不一致\",{\"1\":{\"396\":1}}],[\"不一致要强制类型转换\",{\"1\":{\"334\":1}}],[\"不仅夺冠无望\",{\"1\":{\"651\":1}}],[\"不仅存储组件\",{\"1\":{\"552\":1}}],[\"不仅数量庞大\",{\"1\":{\"387\":1}}],[\"不仅仅是在字符串的起始位置搜索\",{\"1\":{\"321\":1}}],[\"不匹配零个字符的情况\",{\"1\":{\"346\":1}}],[\"不过es6的均价比model\",{\"1\":{\"651\":1}}],[\"不过\",{\"1\":{\"651\":1}}],[\"不过当记者看到关于围棋术语\",{\"1\":{\"651\":1}}],[\"不过oop允许开发者定义纵向的关系\",{\"1\":{\"584\":1}}],[\"不过不推荐\",{\"1\":{\"416\":1,\"448\":1}}],[\"不过这个更简洁\",{\"1\":{\"334\":1}}],[\"不过如果指定的字符串不存在时会抛出异常\",{\"1\":{\"317\":1}}],[\"不要修改同一条记录\",{\"1\":{\"608\":1}}],[\"不要管\",{\"1\":{\"517\":1}}],[\"不要去强行突破\",{\"1\":{\"334\":1}}],[\"不要爬取国家事务\",{\"1\":{\"334\":1}}],[\"不要爬取受著作权保护的内容\",{\"1\":{\"334\":1}}],[\"不要爬取公民数据\",{\"1\":{\"334\":1}}],[\"不要把里面存在的1也给移走了\",{\"1\":{\"116\":1}}],[\"不想写了\",{\"1\":{\"334\":1}}],[\"不想清空可以用a附加模式\",{\"1\":{\"334\":1}}],[\"不加这个就会报错\",{\"1\":{\"329\":1}}],[\"不指定从头开始\",{\"1\":{\"317\":1}}],[\"不指定或者为\",{\"1\":{\"317\":1}}],[\"不做任何事情\",{\"1\":{\"304\":1}}],[\"不挂起的意思\",{\"1\":{\"273\":1}}],[\"不换行\",{\"1\":{\"259\":1}}],[\"不友好\",{\"1\":{\"250\":1}}],[\"不适用于高并发场景\",{\"1\":{\"248\":1,\"611\":1}}],[\"不限制事务时间\",{\"1\":{\"247\":3,\"248\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"不止一个\",{\"1\":{\"233\":1,\"566\":1}}],[\"不需要添加版本\",{\"1\":{\"664\":1}}],[\"不需要编写代理代码\",{\"1\":{\"583\":1}}],[\"不需要写version\",{\"1\":{\"416\":1}}],[\"不需要重复定义\",{\"1\":{\"334\":1}}],[\"不需要再添加前缀\",{\"1\":{\"330\":1}}],[\"不需要再传递sql\",{\"1\":{\"8\":1}}],[\"不需要先声明变量名及其类型\",{\"1\":{\"292\":1}}],[\"不需要自己创建ioc容器对象了\",{\"1\":{\"242\":1,\"580\":1}}],[\"不需要提供setxxx\",{\"1\":{\"233\":1,\"566\":1}}],[\"不知道为啥\",{\"1\":{\"224\":1}}],[\"不知道坐标信息可以在这里查询\",{\"1\":{\"59\":1}}],[\"不具备任何灵活性\",{\"1\":{\"211\":1}}],[\"不再需要与形式参数的位置完全一致\",{\"1\":{\"325\":1}}],[\"不再是应用程序直接创建该对象\",{\"1\":{\"221\":1,\"553\":1}}],[\"不再是直接对目标方法进行调用\",{\"1\":{\"211\":1,\"583\":1}}],[\"不再运行程序\",{\"1\":{\"23\":3}}],[\"不然可能出现一些错误\",{\"1\":{\"188\":1}}],[\"不然可能出现读出后后面还有内容\",{\"1\":{\"181\":1}}],[\"不然可能写不进文件里面\",{\"1\":{\"181\":1}}],[\"不然会越界\",{\"1\":{\"180\":1}}],[\"不建议\",{\"1\":{\"371\":1}}],[\"不建议使用\",{\"1\":{\"179\":1,\"196\":2,\"207\":2}}],[\"不建议如此\",{\"1\":{\"172\":1}}],[\"不允许使用null作为key和value\",{\"1\":{\"179\":1}}],[\"不允许重复\",{\"1\":{\"177\":1}}],[\"不含末尾\",{\"1\":{\"171\":1}}],[\"不用关注其他的jdbc代码\",{\"1\":{\"493\":1}}],[\"不用for遍历和下面这种方式遍历\",{\"1\":{\"170\":1}}],[\"不用管这个\",{\"1\":{\"28\":1}}],[\"不存在\",{\"1\":{\"170\":1}}],[\"不可以访问数据库表的字段\",{\"1\":{\"525\":1}}],[\"不可以设置宽高\",{\"1\":{\"36\":1}}],[\"不可变列表\",{\"1\":{\"312\":1}}],[\"不可实现序列化\",{\"1\":{\"187\":1}}],[\"不可重复读和幻读等问题\",{\"1\":{\"248\":1,\"611\":1}}],[\"不可重复\",{\"1\":{\"177\":1}}],[\"不可重复性\",{\"1\":{\"172\":1}}],[\"不可重复的\",{\"1\":{\"172\":1}}],[\"不可重复的元素\",{\"1\":{\"169\":1}}],[\"不可重复的集合\",{\"1\":{\"169\":1}}],[\"不管反发生错误与否都会执行\",{\"1\":{\"334\":1}}],[\"不管父方法是否有事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"不管其他事务对数据做了什么修改\",{\"1\":{\"248\":1,\"611\":1}}],[\"不管try中是否仍有异常未被处理\",{\"1\":{\"154\":1}}],[\"不管左边是true还是false\",{\"1\":{\"118\":1}}],[\"不是语法定义的\",{\"1\":{\"584\":1}}],[\"不是具体技术\",{\"1\":{\"483\":1}}],[\"不是默认的装配目标\",{\"1\":{\"237\":1,\"573\":1}}],[\"不是default\",{\"1\":{\"150\":1}}],[\"不是静态\",{\"1\":{\"130\":1}}],[\"不恰当的比喻\",{\"1\":{\"146\":1}}],[\"不写这个服务器会一直等待\",{\"1\":{\"191\":1,\"202\":1}}],[\"不写也照样是这样\",{\"1\":{\"143\":1}}],[\"不写则赠送super\",{\"1\":{\"136\":1}}],[\"不同的隔离级别适用于不同的场景\",{\"1\":{\"248\":1,\"611\":1}}],[\"不同类在引用切点\",{\"1\":{\"591\":1}}],[\"不同类中引用\",{\"1\":{\"215\":1,\"591\":1}}],[\"不同类型的input元素\",{\"1\":{\"34\":1}}],[\"不同点\",{\"1\":{\"195\":1,\"206\":1}}],[\"不同进程之间是不共享内存的\",{\"1\":{\"192\":1,\"203\":1}}],[\"不同包的子类\",{\"1\":{\"135\":1}}],[\"不传参数会报错\",{\"1\":{\"127\":1}}],[\"不相同为1\",{\"1\":{\"116\":1}}],[\"不\",{\"1\":{\"114\":1}}],[\"不会存在oracle下pscache占用内存过多的问题\",{\"1\":{\"677\":1}}],[\"不会自动调用基类的\",{\"1\":{\"329\":1}}],[\"不会被候选用于自动装配\",{\"1\":{\"237\":1,\"573\":1}}],[\"不会发生改变\",{\"1\":{\"130\":1}}],[\"不会报错因为直接得出了结果\",{\"1\":{\"114\":1}}],[\"不会报错\",{\"1\":{\"114\":1}}],[\"不会进行类型转换\",{\"1\":{\"38\":1}}],[\"不能用作包开头\",{\"1\":{\"590\":1}}],[\"不能为\",{\"1\":{\"464\":1,\"466\":1}}],[\"不能传递\",{\"1\":{\"415\":1}}],[\"不能修改\",{\"1\":{\"370\":1,\"371\":1}}],[\"不能加入\",{\"1\":{\"370\":1}}],[\"不能加入数据\",{\"1\":{\"367\":1,\"370\":1}}],[\"不能取数据\",{\"1\":{\"367\":1,\"370\":1}}],[\"不能添加删除元素\",{\"1\":{\"334\":1}}],[\"不能使用列表元组等可迭代对象\",{\"1\":{\"316\":1}}],[\"不能使用junit4且这两个包版本要相容\",{\"1\":{\"242\":1}}],[\"不能对某个元素值修改\",{\"1\":{\"312\":1}}],[\"不能回退\",{\"1\":{\"250\":1}}],[\"不能单独使用必须配合\",{\"1\":{\"233\":1}}],[\"不能开头\",{\"1\":{\"214\":1}}],[\"不能让已经start的线程再次执行start\",{\"1\":{\"194\":1,\"205\":1}}],[\"不能\",{\"1\":{\"194\":1,\"205\":1}}],[\"不能实现类或被别人使用\",{\"1\":{\"144\":1}}],[\"不能通过实现类对象调用接口静态方法\",{\"1\":{\"144\":1}}],[\"不能通过接口实现类的对象来调用接口当中的静态方法\",{\"1\":{\"141\":1}}],[\"不能不赋值\",{\"1\":{\"143\":1}}],[\"不能直接写url和headers\",{\"1\":{\"353\":1}}],[\"不能直接new接口对象使用\",{\"1\":{\"139\":1}}],[\"不能直接复制给byte类型变量\",{\"1\":{\"114\":1}}],[\"不能一个子类构造调用多个super构造\",{\"1\":{\"136\":1}}],[\"不能同时使用\",{\"1\":{\"128\":1}}],[\"不能被重写\",{\"1\":{\"127\":1,\"131\":1}}],[\"不能占用java的关键字和保留字\",{\"1\":{\"110\":1}}],[\"不能以数字开头\",{\"1\":{\"110\":1}}],[\"不能自动封装\",{\"1\":{\"81\":1}}],[\"不论订单保存成功与否\",{\"1\":{\"98\":1}}],[\"不执行\",{\"1\":{\"98\":1,\"334\":1}}],[\"不支持事务\",{\"1\":{\"98\":1}}],[\"不拦截的\",{\"1\":{\"94\":1}}],[\"不安全\",{\"1\":{\"90\":1}}],[\"不识别表的信息\",{\"1\":{\"77\":1}}],[\"不属于以下三类时\",{\"1\":{\"74\":1}}],[\"不包含<script>标签\",{\"1\":{\"37\":1}}],[\"不编译\",{\"1\":{\"37\":1}}],[\"不推荐使用\",{\"1\":{\"293\":1}}],[\"不推荐\",{\"1\":{\"35\":1,\"96\":1,\"233\":1,\"456\":1}}],[\"尺寸\",{\"1\":{\"23\":3}}],[\"更好的可读性\",{\"1\":{\"669\":1}}],[\"更经不起对手的冲击\",{\"1\":{\"651\":1}}],[\"更多的使用的setter方法进行注入\",{\"1\":{\"558\":1}}],[\"更容易与\",{\"1\":{\"552\":1}}],[\"更易于维护\",{\"1\":{\"551\":1}}],[\"更易读\",{\"1\":{\"478\":1}}],[\"更稳定地实现软件开发目标\",{\"1\":{\"545\":1}}],[\"更直观的方式来表示匿名函数或函数式接口的实现\",{\"1\":{\"478\":1}}],[\"更有超多自定义配置等您来使用\",{\"1\":{\"460\":1}}],[\"更有强大的条件构造器\",{\"1\":{\"460\":1}}],[\"更加具有通用性\",{\"1\":{\"566\":1}}],[\"更加有效率的代码\",{\"1\":{\"365\":1}}],[\"更加简单\",{\"1\":{\"68\":1}}],[\"更啰嗦一点\",{\"1\":{\"338\":1}}],[\"更简洁的\",{\"1\":{\"334\":1}}],[\"更改密码\",{\"0\":{\"272\":1}}],[\"更改窗口标题名字\",{\"1\":{\"23\":2}}],[\"更适合处理有共享数据的问题\",{\"1\":{\"195\":1,\"206\":1}}],[\"更通用\",{\"1\":{\"138\":1}}],[\"更安全\",{\"1\":{\"80\":1}}],[\"更新学习计划\",{\"1\":{\"641\":1}}],[\"更新npm版本\",{\"1\":{\"636\":1}}],[\"更新时\",{\"1\":{\"483\":1}}],[\"更新时间\",{\"1\":{\"1\":1}}],[\"更新封装wrapper\",{\"1\":{\"475\":1}}],[\"更新记录\",{\"1\":{\"465\":1,\"471\":2}}],[\"更新密钥\",{\"1\":{\"277\":1}}],[\"更新操作也要设置为动态的sql\",{\"1\":{\"84\":1}}],[\"更新\",{\"1\":{\"81\":1,\"288\":1,\"471\":1}}],[\"更新后\",{\"1\":{\"44\":1}}],[\"更新前\",{\"1\":{\"44\":1}}],[\"gt\",{\"1\":{\"476\":1,\"477\":1,\"525\":1,\"527\":1}}],[\"gmail\",{\"1\":{\"474\":2}}],[\"gauss\",{\"1\":{\"460\":1}}],[\"gateway\",{\"1\":{\"426\":1}}],[\"gav需要我们在创建项目的时指定\",{\"1\":{\"442\":1}}],[\"gav需要我们在创建项目的时候指定\",{\"1\":{\"398\":1}}],[\"gav遵循一下规则\",{\"1\":{\"398\":1,\"442\":1}}],[\"gavp属性理解\",{\"1\":{\"457\":1}}],[\"gavp\",{\"0\":{\"409\":1},\"1\":{\"398\":1,\"442\":1}}],[\"gameover\",{\"1\":{\"334\":1}}],[\"guava🫙29\",{\"1\":{\"387\":1}}],[\"guava\",{\"1\":{\"387\":4}}],[\"gui\",{\"1\":{\"22\":1,\"28\":2}}],[\"glassfish\",{\"1\":{\"387\":1}}],[\"global\",{\"1\":{\"294\":1,\"325\":1,\"334\":1,\"480\":2,\"481\":1,\"652\":1,\"677\":1}}],[\"globalexceptionhandler\",{\"1\":{\"96\":1}}],[\"github\",{\"1\":{\"387\":5,\"534\":1,\"535\":3,\"625\":1,\"628\":4}}],[\"g\",{\"1\":{\"368\":2,\"636\":1}}],[\"gcc命令生成可执行文件后objdump\",{\"1\":{\"338\":1}}],[\"gcc\",{\"1\":{\"338\":5}}],[\"goldilocks\",{\"1\":{\"460\":1}}],[\"goto\",{\"1\":{\"412\":5}}],[\"google\",{\"1\":{\"387\":6,\"588\":1}}],[\"goods\",{\"1\":{\"58\":1}}],[\"go\",{\"1\":{\"334\":1,\"555\":4}}],[\"gpg\",{\"1\":{\"277\":1}}],[\"gg\",{\"1\":{\"178\":2}}],[\"gzip\",{\"1\":{\"64\":1,\"655\":1}}],[\"groovy\",{\"1\":{\"549\":1}}],[\"group<\",{\"1\":{\"409\":1,\"447\":1}}],[\"group\",{\"1\":{\"409\":2,\"424\":1,\"447\":2}}],[\"groupid\",{\"1\":{\"398\":2,\"442\":2}}],[\"groupid>\",{\"1\":{\"58\":1,\"59\":4,\"78\":1,\"79\":1,\"92\":2,\"100\":1,\"211\":2,\"220\":3,\"233\":1,\"242\":4,\"244\":10,\"387\":3,\"400\":1,\"404\":1,\"409\":1,\"410\":2,\"412\":1,\"413\":2,\"415\":2,\"416\":2,\"418\":13,\"419\":1,\"431\":6,\"432\":5,\"433\":2,\"434\":2,\"444\":1,\"447\":3,\"448\":1,\"449\":1,\"450\":1,\"452\":13,\"453\":1,\"456\":14,\"461\":10,\"493\":3,\"535\":1,\"557\":2,\"562\":4,\"564\":2,\"566\":1,\"568\":5,\"575\":5,\"580\":2,\"582\":4,\"588\":2,\"606\":10,\"625\":21,\"652\":11,\"655\":2,\"664\":2,\"673\":3,\"677\":8,\"680\":7,\"681\":1,\"682\":1,\"684\":1}}],[\"groupld\",{\"1\":{\"58\":1}}],[\"groups\",{\"1\":{\"56\":1,\"395\":1,\"425\":1,\"440\":1}}],[\"gradle\",{\"1\":{\"403\":1,\"448\":1}}],[\"grades\",{\"1\":{\"334\":7}}],[\"grades=\",{\"1\":{\"334\":1}}],[\"grade\",{\"1\":{\"334\":6}}],[\"grant语法\",{\"1\":{\"277\":1}}],[\"grant\",{\"1\":{\"277\":3}}],[\"graphcis\",{\"1\":{\"22\":1}}],[\"greeting\",{\"1\":{\"478\":6}}],[\"green\",{\"1\":{\"34\":1}}],[\"grep\",{\"1\":{\"277\":1}}],[\"gridheight\",{\"1\":{\"24\":2}}],[\"gridwidth\",{\"1\":{\"24\":6}}],[\"gridbagconstraints\",{\"1\":{\"24\":6}}],[\"gridbaglayout\",{\"1\":{\"24\":2}}],[\"gridbaglayout布局\",{\"0\":{\"24\":1}}],[\"gridlayout\",{\"1\":{\"23\":1}}],[\"ge\",{\"1\":{\"478\":2}}],[\"gecko\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"generator\",{\"1\":{\"538\":1}}],[\"general\",{\"1\":{\"9\":1}}],[\"gender=\",{\"1\":{\"81\":1,\"527\":1,\"562\":1,\"568\":1,\"575\":1}}],[\"gender\",{\"1\":{\"34\":2,\"81\":10,\"82\":3,\"84\":4,\"527\":1,\"530\":1,\"562\":14,\"568\":9,\"575\":9}}],[\"gengral\",{\"1\":{\"9\":1}}],[\"getversion\",{\"1\":{\"657\":1}}],[\"getvalue\",{\"1\":{\"90\":1,\"177\":1,\"510\":1}}],[\"getdriverclassname\",{\"1\":{\"668\":1,\"669\":1,\"670\":1}}],[\"getdeclaringtypename\",{\"1\":{\"589\":1}}],[\"getday\",{\"1\":{\"176\":3}}],[\"getdata\",{\"1\":{\"45\":1,\"640\":1,\"652\":1}}],[\"getgender\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"getgeneratedkeys\",{\"1\":{\"515\":2}}],[\"getuid\",{\"1\":{\"655\":1}}],[\"getuser\",{\"1\":{\"673\":2,\"677\":2,\"680\":1}}],[\"getuserinfo\",{\"1\":{\"655\":5}}],[\"getuserid\",{\"1\":{\"655\":3,\"657\":1}}],[\"getuserpwd\",{\"1\":{\"655\":4}}],[\"getusername\",{\"1\":{\"655\":5,\"668\":1,\"669\":1,\"670\":1,\"673\":1}}],[\"getusernamelist\",{\"1\":{\"555\":1}}],[\"geturl\",{\"1\":{\"351\":1,\"668\":1,\"669\":1,\"670\":1}}],[\"getexpiration\",{\"1\":{\"655\":1}}],[\"getenvironment\",{\"1\":{\"621\":1}}],[\"getempname\",{\"1\":{\"608\":1}}],[\"getemplist\",{\"1\":{\"594\":3}}],[\"getempid\",{\"1\":{\"512\":2}}],[\"getemail\",{\"1\":{\"479\":1}}],[\"getelementsbyclassname\",{\"1\":{\"40\":1}}],[\"getelementsbytagname\",{\"1\":{\"40\":1,\"253\":1}}],[\"getelementbyname\",{\"1\":{\"40\":1}}],[\"getelementbyid\",{\"1\":{\"40\":1,\"41\":1,\"45\":1,\"253\":1}}],[\"getlist\",{\"1\":{\"535\":1,\"641\":1}}],[\"getlength\",{\"1\":{\"371\":2}}],[\"getlocalhost\",{\"1\":{\"189\":3,\"200\":3}}],[\"getqueue\",{\"1\":{\"367\":1,\"368\":1,\"370\":1}}],[\"getorderlist\",{\"1\":{\"519\":1}}],[\"getobj\",{\"1\":{\"471\":1}}],[\"getobject对象\",{\"1\":{\"561\":1}}],[\"getobjecttype\",{\"1\":{\"229\":2,\"561\":2}}],[\"getobject\",{\"1\":{\"229\":3,\"230\":2,\"561\":5,\"628\":1}}],[\"getone\",{\"1\":{\"471\":2}}],[\"getoutputstream\",{\"1\":{\"191\":2,\"192\":2,\"202\":2,\"203\":2}}],[\"getproperty\",{\"1\":{\"686\":1}}],[\"getproxy\",{\"1\":{\"583\":2}}],[\"getpriority\",{\"1\":{\"196\":1,\"207\":1}}],[\"getpassword\",{\"1\":{\"668\":1,\"669\":1,\"670\":1,\"673\":1,\"680\":1}}],[\"getpagenum\",{\"1\":{\"535\":1,\"641\":1,\"656\":1}}],[\"getpagesize\",{\"1\":{\"535\":1,\"641\":1,\"656\":1}}],[\"getpages\",{\"1\":{\"472\":2,\"535\":1,\"656\":1}}],[\"getparent\",{\"1\":{\"182\":1}}],[\"getparameter\",{\"1\":{\"68\":2}}],[\"getpath\",{\"1\":{\"182\":1}}],[\"gethid\",{\"1\":{\"657\":1}}],[\"gethappymachine\",{\"1\":{\"573\":1}}],[\"gethostname\",{\"1\":{\"189\":1,\"200\":1}}],[\"gethostaddress\",{\"1\":{\"189\":1,\"191\":1,\"192\":1,\"200\":1,\"202\":1,\"203\":1}}],[\"gethead\",{\"1\":{\"371\":1}}],[\"getheaders\",{\"1\":{\"351\":1}}],[\"getheader\",{\"1\":{\"93\":1,\"95\":1,\"657\":1}}],[\"getheight\",{\"1\":{\"22\":1}}],[\"getkeywords\",{\"1\":{\"656\":2}}],[\"getkey\",{\"1\":{\"177\":1,\"510\":1}}],[\"getkeycode\",{\"1\":{\"28\":1}}],[\"getyear\",{\"1\":{\"176\":5}}],[\"getcustomername\",{\"1\":{\"519\":2}}],[\"getcustomerid\",{\"1\":{\"519\":2}}],[\"getcurrent\",{\"1\":{\"472\":2,\"656\":1}}],[\"getcreatetime\",{\"1\":{\"478\":1}}],[\"getclassloader\",{\"1\":{\"583\":1}}],[\"getclasses\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"getclass\",{\"1\":{\"176\":4,\"213\":1,\"583\":2,\"589\":1,\"592\":1}}],[\"getcode\",{\"1\":{\"351\":1,\"640\":1,\"652\":3}}],[\"getcookies\",{\"1\":{\"90\":1}}],[\"getcontextconfiglocation\",{\"1\":{\"621\":1}}],[\"getcontextclass\",{\"1\":{\"621\":1}}],[\"getcontentpane\",{\"1\":{\"21\":2,\"26\":3,\"27\":1,\"28\":5,\"29\":3}}],[\"getconnection\",{\"1\":{\"10\":1,\"11\":2,\"12\":2,\"78\":1}}],[\"getcolumntypename\",{\"1\":{\"11\":1}}],[\"getcolumntype\",{\"1\":{\"11\":1}}],[\"getcolumnname\",{\"1\":{\"11\":1}}],[\"getcolumncount\",{\"1\":{\"11\":2}}],[\"getrootconfigclasses\",{\"1\":{\"623\":1,\"629\":1}}],[\"getrecords\",{\"1\":{\"472\":2,\"656\":1}}],[\"getresourceasstream\",{\"1\":{\"220\":1,\"493\":1,\"505\":1,\"514\":1,\"518\":1,\"628\":2}}],[\"getrequesturl\",{\"1\":{\"93\":1,\"95\":1}}],[\"getradius\",{\"1\":{\"130\":1}}],[\"gettype\",{\"1\":{\"656\":3}}],[\"getting\",{\"1\":{\"662\":2}}],[\"gettitle\",{\"1\":{\"656\":1}}],[\"gettimetoliveinseconds\",{\"1\":{\"609\":1}}],[\"gettimetoliveinmillis\",{\"1\":{\"609\":1}}],[\"gettime\",{\"1\":{\"162\":1,\"164\":1}}],[\"gettarget\",{\"1\":{\"213\":1}}],[\"gettotal\",{\"1\":{\"130\":2,\"472\":2,\"535\":1,\"641\":1,\"656\":1}}],[\"getter+\",{\"1\":{\"79\":1}}],[\"getter\",{\"1\":{\"79\":2,\"135\":1,\"493\":1}}],[\"gettext\",{\"1\":{\"29\":2}}],[\"getwriter\",{\"1\":{\"93\":2,\"95\":2,\"657\":1}}],[\"getwidth\",{\"1\":{\"22\":1}}],[\"getbean\",{\"1\":{\"226\":3,\"230\":1,\"239\":2,\"555\":2,\"559\":3,\"560\":5,\"561\":3,\"562\":4,\"568\":1,\"574\":2,\"575\":1}}],[\"getbirthday\",{\"1\":{\"176\":4}}],[\"getbyname\",{\"1\":{\"189\":3,\"191\":1,\"200\":3,\"202\":1}}],[\"getbytes\",{\"1\":{\"169\":1,\"184\":1,\"191\":2,\"202\":2,\"652\":1}}],[\"getbyid\",{\"1\":{\"81\":1,\"471\":1}}],[\"getbody\",{\"1\":{\"92\":1,\"655\":2}}],[\"getaccount\",{\"1\":{\"680\":1}}],[\"getallresponseheaders\",{\"1\":{\"253\":1}}],[\"getargs\",{\"1\":{\"213\":1,\"216\":1,\"589\":1,\"592\":1}}],[\"getarray\",{\"1\":{\"11\":1}}],[\"geta\",{\"1\":{\"197\":6}}],[\"getabsolutepath\",{\"1\":{\"182\":1}}],[\"getabsolutefile\",{\"1\":{\"182\":1}}],[\"getage\",{\"1\":{\"135\":1,\"176\":2,\"478\":2,\"479\":1,\"562\":1,\"568\":1,\"575\":1,\"673\":1}}],[\"getattribute\",{\"1\":{\"91\":1}}],[\"getname\",{\"1\":{\"90\":1,\"135\":1,\"175\":2,\"176\":2,\"178\":2,\"182\":1,\"194\":1,\"196\":1,\"205\":1,\"207\":1,\"213\":1,\"478\":3,\"562\":1,\"567\":1,\"568\":1,\"575\":1,\"583\":4,\"589\":4,\"592\":2,\"621\":1}}],[\"getmachinename\",{\"1\":{\"561\":1,\"573\":1}}],[\"getmap\",{\"1\":{\"471\":1}}],[\"getmapper\",{\"1\":{\"220\":1,\"493\":1,\"505\":1,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"514\":5,\"518\":1,\"519\":1,\"535\":1,\"628\":1}}],[\"getmapping\",{\"1\":{\"68\":1,\"90\":2,\"91\":2,\"630\":1,\"641\":1,\"655\":1,\"656\":1,\"657\":1,\"664\":2,\"670\":1,\"673\":2,\"677\":1,\"680\":1}}],[\"getmodifiers\",{\"1\":{\"213\":1,\"589\":1}}],[\"getmonth\",{\"1\":{\"176\":5}}],[\"getmessage\",{\"1\":{\"154\":2,\"368\":2,\"566\":11,\"583\":1,\"652\":3}}],[\"getmetadata\",{\"1\":{\"11\":2}}],[\"get请求方式\",{\"1\":{\"354\":2}}],[\"get请求\",{\"0\":{\"253\":1},\"1\":{\"63\":1}}],[\"getsex\",{\"1\":{\"673\":1}}],[\"getservletmappings\",{\"1\":{\"623\":1,\"629\":1}}],[\"getservletconfigclasses\",{\"1\":{\"623\":1,\"629\":1}}],[\"getservletname\",{\"1\":{\"621\":1}}],[\"getsession\",{\"1\":{\"91\":1}}],[\"getsize\",{\"1\":{\"472\":1,\"656\":1}}],[\"getsimplename\",{\"1\":{\"213\":1}}],[\"getsignature\",{\"1\":{\"100\":1,\"213\":2,\"589\":4,\"592\":1}}],[\"getsource\",{\"1\":{\"26\":1,\"28\":1}}],[\"getscaledinstance\",{\"1\":{\"22\":1}}],[\"getstring\",{\"1\":{\"11\":7,\"562\":3}}],[\"getid\",{\"1\":{\"175\":2,\"178\":2,\"479\":1,\"562\":1,\"568\":1,\"575\":1,\"680\":1}}],[\"getinetaddress\",{\"1\":{\"191\":1,\"192\":1,\"202\":1,\"203\":1}}],[\"getinputstream\",{\"1\":{\"191\":2,\"192\":2,\"202\":2,\"203\":2}}],[\"getinstance\",{\"1\":{\"164\":1,\"652\":1}}],[\"getinfo\",{\"1\":{\"130\":1}}],[\"getinterfaces\",{\"1\":{\"583\":1}}],[\"getint\",{\"1\":{\"7\":1,\"562\":2}}],[\"getimage\",{\"1\":{\"22\":1,\"23\":1}}],[\"get\",{\"1\":{\"17\":1,\"34\":1,\"45\":4,\"68\":1,\"164\":2,\"171\":2,\"177\":2,\"178\":1,\"251\":1,\"252\":1,\"253\":2,\"277\":1,\"285\":1,\"315\":1,\"334\":4,\"368\":1,\"468\":1,\"634\":1,\"655\":3,\"656\":3,\"657\":1}}],[\"getxxx\",{\"1\":{\"7\":1,\"513\":1}}],[\"gears\",{\"1\":{\"1\":1}}],[\"缩小multiple倍\",{\"1\":{\"22\":2}}],[\"缩小图标\",{\"0\":{\"22\":1}}],[\"下出假妙手\",{\"1\":{\"651\":1}}],[\"下出妙手\",{\"1\":{\"651\":1}}],[\"下添加jdk编译版本\",{\"1\":{\"395\":1,\"440\":1}}],[\"下添加中央仓库镜像\",{\"1\":{\"395\":1,\"440\":1}}],[\"下载对应操作系统的\",{\"1\":{\"636\":1}}],[\"下载后\",{\"1\":{\"425\":1}}],[\"下载过程日志\",{\"1\":{\"425\":1}}],[\"下载地址\",{\"1\":{\"422\":1}}],[\"下载速度更快\",{\"1\":{\"421\":1}}],[\"下载的依赖项与实际需要的不一致\",{\"1\":{\"412\":1,\"449\":1}}],[\"下载依赖时出现网络故障或仓库服务器宕机等原因\",{\"1\":{\"412\":1,\"449\":1}}],[\"下载视频\",{\"1\":{\"352\":1}}],[\"下载图片\",{\"1\":{\"352\":1}}],[\"下载网页\",{\"1\":{\"352\":1}}],[\"下载\",{\"0\":{\"352\":1,\"425\":1}}],[\"下载这个外部库\",{\"1\":{\"334\":1}}],[\"下线了\",{\"1\":{\"192\":1,\"203\":1}}],[\"下一章\",{\"1\":{\"176\":1}}],[\"下一篇\",{\"1\":{\"1\":1}}],[\"下面就介绍一下\",{\"1\":{\"534\":1}}],[\"下面\",{\"1\":{\"418\":1,\"452\":1}}],[\"下面是关于java\",{\"1\":{\"686\":1}}],[\"下面是使用\",{\"1\":{\"539\":1}}],[\"下面是半自动和全自动\",{\"1\":{\"537\":1}}],[\"下面是mybatis为常见的\",{\"1\":{\"508\":1}}],[\"下面是前面例子中\",{\"1\":{\"387\":1}}],[\"下面是直接找到待删除的那一个节点\",{\"1\":{\"371\":1}}],[\"下面是false\",{\"1\":{\"170\":1}}],[\"下面代码是自己写的\",{\"1\":{\"371\":1}}],[\"下面加载图片<\",{\"1\":{\"334\":1}}],[\"下面这个在创造实例时会根据传进去的值而相应的改变\",{\"1\":{\"334\":1}}],[\"下面这个在创造实例时就会已经返回了定义好的值\",{\"1\":{\"334\":1}}],[\"下面这是运行过的\",{\"1\":{\"185\":1}}],[\"下面打印出3\",{\"1\":{\"334\":1}}],[\"下面的是io异常\",{\"1\":{\"247\":1}}],[\"下面的示例演示一个只能使用纯\",{\"1\":{\"558\":1}}],[\"下面的示例演示一个只能通过构造函数注入进行依赖项注入的类\",{\"1\":{\"558\":1}}],[\"下面的示例演示通过构造函数注入多个参数\",{\"1\":{\"558\":1}}],[\"下面的示例演示\",{\"1\":{\"237\":1,\"573\":1}}],[\"下面的属性也可以单独声明成属性\",{\"1\":{\"236\":1}}],[\"下面例子\",{\"1\":{\"174\":1}}],[\"下面提供一个缩小的方法来实现\",{\"1\":{\"22\":1}}],[\"下午10\",{\"1\":{\"163\":2}}],[\"下订单前需要记录日志\",{\"1\":{\"98\":1}}],[\"下划线\",{\"1\":{\"38\":1}}],[\"下拉列表\",{\"1\":{\"34\":1}}],[\"调用流程图解\",{\"1\":{\"621\":1}}],[\"调用mapper接口时\",{\"1\":{\"501\":1}}],[\"调用接口的方法\",{\"1\":{\"478\":1}}],[\"调用某个函数时\",{\"1\":{\"325\":1}}],[\"调用set方法的名\",{\"1\":{\"225\":1,\"558\":1}}],[\"调用代理类方法既可以触发对应的sql语句\",{\"1\":{\"220\":1,\"493\":1}}],[\"调用目标方法时先调用代理对象的方法\",{\"1\":{\"211\":1,\"583\":1}}],[\"调用时可以使得当前线程睡眠指定的毫秒数\",{\"1\":{\"196\":1,\"207\":1}}],[\"调用线程的run\",{\"1\":{\"196\":1,\"207\":1}}],[\"调用当前前程的run方法\",{\"1\":{\"194\":1,\"205\":1}}],[\"调用accept\",{\"1\":{\"191\":1,\"202\":1}}],[\"调用fileinputstream\",{\"1\":{\"183\":1}}],[\"调用字符串的tochararray\",{\"1\":{\"169\":1}}],[\"调用字符串的构造器\",{\"1\":{\"169\":2}}],[\"调用字符串的getbytes\",{\"1\":{\"169\":1}}],[\"调用字符串的重载的valueof\",{\"1\":{\"169\":1}}],[\"调用相应包装类的parsexxx\",{\"1\":{\"169\":1}}],[\"调用多次方法\",{\"1\":{\"151\":1}}],[\"调用方法\",{\"1\":{\"151\":1}}],[\"调用也必须时构造方法时的第一个语句\",{\"1\":{\"128\":1}}],[\"调用工具类生成jwt令牌\",{\"1\":{\"92\":1}}],[\"调用格式\",{\"1\":{\"40\":1}}],[\"调用者this\",{\"1\":{\"28\":1}}],[\"调用\",{\"1\":{\"22\":1,\"39\":1,\"136\":1,\"534\":1}}],[\"有诗画里的艺术\",{\"1\":{\"651\":1}}],[\"有接口\",{\"1\":{\"594\":1}}],[\"有\",{\"1\":{\"590\":1}}],[\"有十个附加功能\",{\"1\":{\"584\":1}}],[\"有代理场景\",{\"1\":{\"583\":1}}],[\"有人协助我们整合其他框架\",{\"1\":{\"551\":1}}],[\"有人替我们管理事务\",{\"1\":{\"551\":1}}],[\"有人替我们创建组件的对象\",{\"1\":{\"551\":1}}],[\"有人帮助我们自动组装\",{\"1\":{\"551\":1}}],[\"有人帮我们保存组件的对象\",{\"1\":{\"551\":1}}],[\"有助于更好地沟通和协作\",{\"1\":{\"545\":1}}],[\"有很多的博文\",{\"1\":{\"517\":1}}],[\"有很多零散的参数需要传递\",{\"1\":{\"505\":1}}],[\"有变化\",{\"1\":{\"492\":1}}],[\"有些构件无法从任何一个远程仓库中获得\",{\"1\":{\"421\":1}}],[\"有了具体标识\",{\"1\":{\"398\":1,\"442\":1}}],[\"有了编程语言也就有了数据结构\",{\"1\":{\"365\":1}}],[\"有反爬机制或验证码登录\",{\"1\":{\"334\":1}}],[\"有可能因为遇到某些问题\",{\"1\":{\"609\":1}}],[\"有可能产生错误的代码\",{\"1\":{\"334\":1}}],[\"有可变集合\",{\"1\":{\"316\":1}}],[\"有多个\",{\"1\":{\"598\":3}}],[\"有多个也可以\",{\"1\":{\"214\":1}}],[\"有多少个不同的值\",{\"1\":{\"365\":1}}],[\"有多条指令在单个cpu上快速轮换\",{\"1\":{\"192\":1,\"203\":1}}],[\"有多条指令在多个cpu上同时执行\",{\"1\":{\"192\":1,\"203\":1}}],[\"有没有参数都行\",{\"1\":{\"214\":1}}],[\"有参数\",{\"1\":{\"214\":1}}],[\"有参构造方法执行\",{\"1\":{\"127\":1}}],[\"有jvm进行控制\",{\"1\":{\"189\":1,\"200\":1}}],[\"有两种排序方法\",{\"1\":{\"174\":1}}],[\"有两种方式\",{\"1\":{\"149\":1,\"155\":1}}],[\"有正负两种\",{\"1\":{\"160\":1}}],[\"有弊端\",{\"1\":{\"146\":1}}],[\"有时需要对某些方法的性能进行监控\",{\"1\":{\"584\":1}}],[\"有时候需要在标头里面加上cookie等数据\",{\"1\":{\"355\":1}}],[\"有时候插入的图标太大了需要缩小以下\",{\"1\":{\"22\":1}}],[\"有时将一个父类设计的非常抽象\",{\"1\":{\"138\":1}}],[\"有特殊处理\",{\"1\":{\"114\":1}}],[\"有异常不会执行\",{\"1\":{\"102\":1}}],[\"有则加入\",{\"1\":{\"98\":2}}],[\"有效时间为了保证token的时效性\",{\"1\":{\"655\":1}}],[\"有效时间\",{\"1\":{\"655\":3}}],[\"有效\",{\"1\":{\"411\":3,\"655\":1}}],[\"有效final的\",{\"1\":{\"150\":1}}],[\"有效载荷\",{\"1\":{\"92\":1}}],[\"有效行\",{\"1\":{\"7\":1}}],[\"有属性name和age和address\",{\"1\":{\"68\":1}}],[\"有标准的目录结构\",{\"1\":{\"49\":1}}],[\"有返回值的\",{\"1\":{\"40\":1}}],[\"对外称\",{\"1\":{\"651\":1}}],[\"对外部\",{\"1\":{\"515\":1}}],[\"对内讲\",{\"1\":{\"651\":1}}],[\"对华北地区来说\",{\"1\":{\"651\":1}}],[\"对此\",{\"1\":{\"651\":1}}],[\"对增删改方法设置\",{\"1\":{\"608\":1}}],[\"对没实现接口的类应用切面new\",{\"1\":{\"599\":1}}],[\"对实现了接口的类应用切面\",{\"1\":{\"599\":1}}],[\"对上面的类应用通知\",{\"1\":{\"598\":1}}],[\"对上面接口的实现类应用通知\",{\"1\":{\"598\":1}}],[\"对核心业务功能有干扰\",{\"1\":{\"582\":1}}],[\"对所有的拦截器进行管理\",{\"1\":{\"534\":1}}],[\"对插件进行了标准化的设计\",{\"1\":{\"534\":1}}],[\"对多关系下\",{\"1\":{\"517\":1}}],[\"对多\",{\"1\":{\"517\":2,\"519\":3,\"522\":1}}],[\"对多映射\",{\"0\":{\"519\":1},\"1\":{\"489\":1}}],[\"对一个方法来说\",{\"1\":{\"608\":1}}],[\"对一个查询操作来说\",{\"1\":{\"608\":1}}],[\"对一个比较大型的项目进行了模块拆分\",{\"1\":{\"418\":1,\"452\":1}}],[\"对一关系下\",{\"1\":{\"517\":1}}],[\"对一\",{\"1\":{\"517\":2,\"518\":3,\"522\":1}}],[\"对一映射\",{\"0\":{\"518\":1},\"1\":{\"489\":1}}],[\"对比用户密码\",{\"1\":{\"655\":1}}],[\"对比理解\",{\"1\":{\"547\":1}}],[\"对比mapper接口crud区别\",{\"0\":{\"469\":1},\"1\":{\"459\":1}}],[\"对比一下\",{\"1\":{\"145\":1}}],[\"对\",{\"1\":{\"424\":1}}],[\"对应接口和mapperxml文件所在的包\",{\"1\":{\"628\":3}}],[\"对应容器\",{\"1\":{\"622\":1}}],[\"对应内容\",{\"1\":{\"622\":1}}],[\"对应的类实现了接口\",{\"1\":{\"598\":1}}],[\"对应的类没有实现任何接口\",{\"1\":{\"598\":1}}],[\"对应的foreach标签如下\",{\"1\":{\"529\":1}}],[\"对应\",{\"1\":{\"544\":1}}],[\"对应关系可以参考下图\",{\"1\":{\"518\":1,\"519\":1}}],[\"对应关系\",{\"1\":{\"503\":1,\"504\":1,\"505\":1}}],[\"对应数据库表名\",{\"1\":{\"480\":1}}],[\"对应jar包的作用范围\",{\"1\":{\"411\":1}}],[\"对应c语言\",{\"1\":{\"334\":1}}],[\"对应类中的成员方法\",{\"1\":{\"126\":1}}],[\"对应类中的成员变量\",{\"1\":{\"126\":1}}],[\"对元素进行排序\",{\"1\":{\"333\":1}}],[\"对列表进行排序\",{\"1\":{\"311\":1}}],[\"对代码的可读性和可维护性有一定影响\",{\"1\":{\"243\":1,\"602\":1}}],[\"对maven工程的目录结构来说\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"对ticket进行操作\",{\"1\":{\"197\":1,\"208\":1}}],[\"对list集合元素进行随机排序\",{\"1\":{\"180\":1}}],[\"对格式\",{\"1\":{\"151\":1}}],[\"对属性的要求就可以通过方法来实现\",{\"1\":{\"135\":1}}],[\"对像\",{\"1\":{\"135\":1}}],[\"对于使用基于\",{\"1\":{\"623\":1}}],[\"对于开发人员而言\",{\"1\":{\"545\":1}}],[\"对于三种\",{\"1\":{\"411\":1}}],[\"对于双向链表可以直接找到要删除的这个节点\",{\"1\":{\"371\":1}}],[\"对于\",{\"1\":{\"249\":1,\"320\":1,\"612\":1}}],[\"对于那些熟悉\",{\"1\":{\"236\":1,\"572\":1}}],[\"对于注解来说指定全类名即可\",{\"1\":{\"231\":1,\"564\":1}}],[\"对于spring使用ioc容器管理这些组件来说没有区别\",{\"1\":{\"231\":1,\"564\":1}}],[\"对于非文本文件\",{\"1\":{\"186\":1}}],[\"对于不同数据的输入输出操作以流\",{\"1\":{\"180\":1}}],[\"对于编译时异常来说\",{\"1\":{\"154\":1}}],[\"对于运行时异常来说\",{\"1\":{\"154\":1}}],[\"对于和当前类属于同一个包的情况\",{\"1\":{\"126\":1}}],[\"对于二维数组\",{\"1\":{\"124\":1}}],[\"对于一维数组\",{\"1\":{\"124\":1}}],[\"对于字符串string的转化\",{\"1\":{\"114\":1}}],[\"对于浮点数来说默认是double\",{\"1\":{\"112\":1}}],[\"对于整数来说默认类型是int\",{\"1\":{\"112\":1}}],[\"对于事务处理没有记忆能力\",{\"1\":{\"62\":1}}],[\"对特定的方法进行编程\",{\"1\":{\"99\":1}}],[\"对请求进行处理\",{\"1\":{\"71\":1}}],[\"对原生ajax进行了封装\",{\"1\":{\"45\":1}}],[\"对http协议的操作进行封装\",{\"1\":{\"65\":1}}],[\"对html\",{\"1\":{\"40\":1}}],[\"对history对象的只读引用\",{\"1\":{\"40\":1}}],[\"对navigator对象的只读引用\",{\"1\":{\"40\":1}}],[\"对当前按钮进行判断\",{\"1\":{\"26\":1}}],[\"对话框\",{\"1\":{\"23\":1}}],[\"对象获取外界调用目标方法时传入的实参列表组成的数组\",{\"1\":{\"589\":1}}],[\"对象内\",{\"1\":{\"560\":1,\"565\":1}}],[\"对象不一定是组件\",{\"1\":{\"551\":1}}],[\"对象插入到\",{\"1\":{\"512\":2}}],[\"对象工厂\",{\"1\":{\"496\":1}}],[\"对象方法引用\",{\"1\":{\"478\":1}}],[\"对象是类的实例\",{\"1\":{\"334\":1}}],[\"对象写进文件\",{\"1\":{\"187\":1}}],[\"对象流\",{\"0\":{\"187\":1}}],[\"对象一旦向上转型为父类\",{\"1\":{\"146\":1}}],[\"对象转型\",{\"0\":{\"146\":1}}],[\"对象就是是实实在在的汽车\",{\"1\":{\"126\":1}}],[\"对象的反序列化过程\",{\"1\":{\"187\":1}}],[\"对象的序列化过程\",{\"1\":{\"187\":1}}],[\"对象的序列化机制\",{\"1\":{\"187\":1}}],[\"对象的引用\",{\"1\":{\"125\":1}}],[\"对象的创建控制权由程序自身转移到外部\",{\"1\":{\"72\":1}}],[\"对象名称\",{\"1\":{\"151\":1}}],[\"对象名\",{\"1\":{\"40\":2,\"126\":3,\"145\":2,\"146\":2,\"149\":2,\"151\":1}}],[\"对象名=\",{\"1\":{\"40\":1}}],[\"对象为空\",{\"1\":{\"38\":1}}],[\"对象\",{\"1\":{\"21\":1,\"40\":1,\"130\":1,\"135\":1,\"182\":1,\"226\":1,\"303\":1,\"464\":1,\"466\":1,\"491\":1,\"537\":1,\"559\":1,\"560\":1,\"565\":1,\"583\":3,\"598\":1}}],[\"对类型为t的对象应用操作\",{\"1\":{\"17\":2}}],[\"文件内容如下\",{\"1\":{\"677\":1}}],[\"文件位置\",{\"1\":{\"630\":1}}],[\"文件或注解方式来指定\",{\"1\":{\"537\":1}}],[\"文件就显得相对简单\",{\"1\":{\"515\":1}}],[\"文件都不用编写\",{\"1\":{\"461\":1}}],[\"文件名和内容\",{\"1\":{\"652\":1}}],[\"文件名\",{\"1\":{\"461\":1,\"652\":1}}],[\"文件名启动\",{\"1\":{\"252\":1}}],[\"文件夹下面新建\",{\"1\":{\"668\":1}}],[\"文件夹\",{\"1\":{\"461\":1}}],[\"文件中加入如下依赖\",{\"1\":{\"664\":1}}],[\"文件中的依赖项是否正确\",{\"1\":{\"412\":1,\"449\":1}}],[\"文件中\",{\"1\":{\"411\":1}}],[\"文件的目录\",{\"1\":{\"401\":2,\"445\":2}}],[\"文件扩展名与文件类型映射表\",{\"1\":{\"283\":1}}],[\"文件流\",{\"1\":{\"181\":1}}],[\"文件\",{\"1\":{\"126\":1,\"223\":1,\"230\":1,\"401\":1,\"408\":1,\"412\":2,\"423\":1,\"445\":1,\"447\":1,\"449\":2,\"450\":1,\"514\":1,\"538\":1,\"539\":1,\"557\":3,\"558\":1,\"561\":1}}],[\"文件上传\",{\"0\":{\"87\":1}}],[\"文档对象模型\",{\"1\":{\"40\":1}}],[\"文本cowsay\",{\"1\":{\"279\":1}}],[\"文本cowthink\",{\"1\":{\"279\":1}}],[\"文本\",{\"1\":{\"163\":1,\"279\":1}}],[\"文本对象\",{\"1\":{\"40\":2}}],[\"文本域等\",{\"1\":{\"34\":1}}],[\"文本框\",{\"0\":{\"29\":1},\"1\":{\"21\":1}}],[\"文字提示\",{\"1\":{\"25\":1}}],[\"文章类别\",{\"1\":{\"657\":1}}],[\"文章内容\",{\"1\":{\"657\":1}}],[\"文章标题\",{\"1\":{\"657\":1}}],[\"文章详细描述\",{\"1\":{\"1\":1}}],[\"文章名称\",{\"1\":{\"1\":1}}],[\"一款紧凑型suv\",{\"1\":{\"651\":1}}],[\"一款基于idea的快速开发mybatis的插件\",{\"1\":{\"83\":1}}],[\"一介打工人\",{\"1\":{\"651\":1}}],[\"一起来寻味端午\",{\"1\":{\"651\":1}}],[\"一二三产业融合发展\",{\"1\":{\"651\":1}}],[\"一千个观众眼中有一千个哈姆雷特\",{\"1\":{\"545\":1}}],[\"一的一端类的全类名\",{\"1\":{\"518\":1}}],[\"一对多|\",{\"1\":{\"517\":1}}],[\"一对一\",{\"1\":{\"517\":1}}],[\"一级\",{\"1\":{\"398\":1,\"442\":1}}],[\"一级路径\",{\"1\":{\"94\":1}}],[\"一定保证user\",{\"1\":{\"396\":1}}],[\"一定要记得关闭流\",{\"1\":{\"181\":1}}],[\"一定要重写equals\",{\"1\":{\"172\":1}}],[\"一定要执行的代码\",{\"1\":{\"154\":1}}],[\"一定要设置这个\",{\"1\":{\"21\":1}}],[\"一次\",{\"1\":{\"552\":3}}],[\"一次读取一行\",{\"1\":{\"351\":1}}],[\"一次请求对应一次响应\",{\"1\":{\"62\":1}}],[\"一律返回字符串\",{\"1\":{\"334\":1}}],[\"一切都是对象\",{\"1\":{\"327\":1}}],[\"一\",{\"0\":{\"385\":1,\"435\":1,\"437\":1,\"490\":1,\"543\":1,\"616\":1,\"645\":1,\"661\":1,\"697\":1},\"1\":{\"315\":3,\"436\":1,\"459\":1,\"489\":1,\"542\":1,\"615\":1,\"644\":1,\"660\":1}}],[\"一小部分来自网络\",{\"1\":{\"291\":1}}],[\"一些无法从外部仓库下载到的构件\",{\"1\":{\"421\":1}}],[\"一些命令\",{\"0\":{\"287\":1}}],[\"一些常用命令\",{\"0\":{\"271\":1}}],[\"一直等着\",{\"1\":{\"191\":1,\"202\":1}}],[\"一并创建\",{\"1\":{\"182\":1}}],[\"一方面\",{\"1\":{\"169\":1}}],[\"一部分实现是不确定的\",{\"1\":{\"138\":1}}],[\"一号\",{\"1\":{\"130\":1}}],[\"一旦被创建就应该在应用的运行期间一直存在\",{\"1\":{\"628\":1}}],[\"一旦创建了\",{\"1\":{\"628\":1}}],[\"一旦执行此方法\",{\"1\":{\"196\":1,\"207\":1}}],[\"一旦执行过程中\",{\"1\":{\"155\":1}}],[\"一旦返回0\",{\"1\":{\"174\":1}}],[\"一旦赋值其值不可改变\",{\"1\":{\"165\":1}}],[\"一旦满足就执行catch中的代码\",{\"1\":{\"154\":1}}],[\"一旦抛出此异常类的对象\",{\"1\":{\"153\":1}}],[\"一旦出现异常\",{\"1\":{\"153\":1}}],[\"一旦使用final关键字进行修饰\",{\"1\":{\"143\":1}}],[\"一旦初始化后就不可再赋值\",{\"1\":{\"131\":1}}],[\"一旦编写了至少一个构造方法\",{\"1\":{\"127\":1}}],[\"一旦在i后发现存在比其小的元素\",{\"1\":{\"126\":1}}],[\"一旦有浮点型参与运算得出的结果一定不要==比较\",{\"1\":{\"112\":1}}],[\"一旦声明\",{\"1\":{\"38\":1}}],[\"一字节\",{\"1\":{\"112\":1}}],[\"一组操作开始前\",{\"1\":{\"97\":1}}],[\"一种维护浏览器状态的方法\",{\"1\":{\"89\":1}}],[\"一个容器可能就够了\",{\"1\":{\"619\":1}}],[\"一个方法的全部声明信息\",{\"1\":{\"589\":1}}],[\"一个工程\",{\"1\":{\"544\":1}}],[\"一个简单查询的\",{\"1\":{\"515\":1}}],[\"一个特定的适用场景是\",{\"1\":{\"498\":1}}],[\"一个\",{\"1\":{\"418\":1,\"452\":1}}],[\"一个项目\",{\"1\":{\"544\":2}}],[\"一个项目就会出现相同的重复jar包\",{\"1\":{\"416\":1,\"448\":1}}],[\"一个项目中可以引入多个依赖\",{\"1\":{\"59\":1}}],[\"一个groupid下面可能多个项目\",{\"1\":{\"409\":1,\"447\":1}}],[\"一个模块里面用到上百个jar包是非常正常的\",{\"1\":{\"387\":1}}],[\"一个字符\",{\"1\":{\"345\":2}}],[\"一个参数是end是从0开始的到end\",{\"1\":{\"333\":1}}],[\"一个函数相当于一块积木\",{\"1\":{\"330\":1}}],[\"一个是接口的实现\",{\"1\":{\"195\":1,\"206\":1}}],[\"一个是类的继承\",{\"1\":{\"195\":1,\"206\":1}}],[\"一个进程中的多个线程共享相同的内存单元\",{\"1\":{\"192\":1,\"203\":1}}],[\"一个进程同一时间若并行执行多个线程\",{\"1\":{\"192\":1,\"203\":1}}],[\"一个进程至少有一个线程\",{\"1\":{\"192\":1,\"203\":1}}],[\"一个线程负责发送自己的话\",{\"1\":{\"192\":1,\"203\":1}}],[\"一个负责看别人聊\",{\"1\":{\"192\":1,\"203\":1}}],[\"一个key\",{\"1\":{\"177\":1}}],[\"一个对象拥有多种形态\",{\"1\":{\"145\":1}}],[\"一个类型和六个方法\",{\"1\":{\"351\":1}}],[\"一个类中可以有多个非静态的代码块\",{\"1\":{\"132\":1}}],[\"一个类里面的属性是另一个类\",{\"1\":{\"68\":1}}],[\"一个web应用中\",{\"1\":{\"93\":1}}],[\"一个页面可以有多个标签\",{\"1\":{\"0\":1}}],[\"一个页面可以有多个分类\",{\"1\":{\"0\":1}}],[\"一般情况\",{\"1\":{\"655\":1}}],[\"一般情况下\",{\"1\":{\"230\":1,\"245\":1,\"561\":1}}],[\"一般在开发过程中\",{\"1\":{\"517\":1}}],[\"一般编写sql语句的文件命名\",{\"1\":{\"493\":1}}],[\"一般是功能开发完成\",{\"1\":{\"517\":1}}],[\"一般是系统定义名字\",{\"1\":{\"327\":1}}],[\"一般是url输入错误或者资源被删\",{\"1\":{\"64\":1}}],[\"一般不推荐使用\",{\"1\":{\"411\":1}}],[\"一般不用\",{\"1\":{\"248\":1,\"611\":1}}],[\"一般不编写针对性的代码处理\",{\"1\":{\"152\":1}}],[\"一般主动发起通信的应用程序属客户端\",{\"1\":{\"190\":1,\"201\":1}}],[\"一般由公司团队搭建的私有仓库\",{\"1\":{\"55\":1}}],[\"一般会把脚本置于<body>元素的底部\",{\"1\":{\"37\":1}}],[\"一套为开发者\",{\"1\":{\"50\":1}}],[\"一行显示不下\",{\"1\":{\"259\":1}}],[\"一行可以显示多个\",{\"1\":{\"36\":1}}],[\"一行只显示一个\",{\"1\":{\"36\":1}}],[\"一行小字\",{\"1\":{\"34\":1}}],[\"创建与数据库表交互的mapper接口\",{\"1\":{\"679\":1}}],[\"创建与数据库表对应的实体类\",{\"1\":{\"679\":1}}],[\"创建mapper接口sql实现\",{\"1\":{\"679\":1}}],[\"创建mapper接口\",{\"1\":{\"679\":1}}],[\"创建maven工程\",{\"1\":{\"557\":1,\"664\":1}}],[\"创建maven项目\",{\"1\":{\"57\":1}}],[\"创建maven环境\",{\"1\":{\"57\":1}}],[\"创建实体类\",{\"1\":{\"673\":1,\"679\":1}}],[\"创建实现类的对象\",{\"1\":{\"139\":1}}],[\"创建程序启动类\",{\"1\":{\"679\":1}}],[\"创建程序\",{\"1\":{\"673\":1,\"677\":1}}],[\"创建开发\",{\"1\":{\"671\":1}}],[\"创建类\",{\"1\":{\"664\":1,\"670\":1}}],[\"创建package\",{\"1\":{\"664\":2}}],[\"创建启动类\",{\"1\":{\"664\":2,\"673\":1}}],[\"创建项目\",{\"1\":{\"664\":1,\"680\":1}}],[\"创建项目时已选择\",{\"1\":{\"52\":1}}],[\"创建boot工程\",{\"1\":{\"652\":1}}],[\"创建bean\",{\"1\":{\"557\":1}}],[\"创建携带spring约束的xml配置文件\",{\"1\":{\"557\":1}}],[\"创建ioc容器对象\",{\"1\":{\"555\":1}}],[\"创建resultmap实现\",{\"1\":{\"518\":1}}],[\"创建父工程\",{\"1\":{\"456\":1}}],[\"创建了很多个\",{\"1\":{\"418\":1,\"452\":1}}],[\"创建链表\",{\"1\":{\"370\":1}}],[\"创建空集合时只能使用set\",{\"1\":{\"316\":1}}],[\"创建集合\",{\"1\":{\"316\":1}}],[\"创建值为空的字典\",{\"1\":{\"315\":1}}],[\"创建元组只包括一个元素a\",{\"1\":{\"312\":1}}],[\"创建元组\",{\"1\":{\"312\":1}}],[\"创建数值列表a\",{\"1\":{\"307\":1}}],[\"创建列表\",{\"1\":{\"307\":1}}],[\"创建路由规则\",{\"1\":{\"252\":1}}],[\"创建应用对象\",{\"1\":{\"252\":1}}],[\"创建sqlsession\",{\"1\":{\"628\":1}}],[\"创建sqlsessionfactory\",{\"1\":{\"628\":2}}],[\"创建sqlsessionfactory对象\",{\"1\":{\"220\":1,\"493\":1}}],[\"创建sql如下\",{\"1\":{\"514\":1}}],[\"创建springboot工程\",{\"1\":{\"61\":1}}],[\"创建的\",{\"1\":{\"555\":1}}],[\"创建的线程对象\",{\"1\":{\"195\":1,\"206\":1}}],[\"创建的是子类对象\",{\"1\":{\"137\":1}}],[\"创建thread类的实例new\",{\"1\":{\"195\":1,\"206\":1}}],[\"创建treeset时传入comparator对象\",{\"1\":{\"176\":1}}],[\"创建当前实现类的对象\",{\"1\":{\"195\":1,\"206\":1}}],[\"创建当前thread的子类的对象\",{\"1\":{\"194\":1,\"205\":1}}],[\"创建和启动线程\",{\"0\":{\"193\":1,\"204\":1}}],[\"创建文件夹\",{\"1\":{\"188\":1}}],[\"创建该类的5个对象\",{\"1\":{\"176\":1}}],[\"创建对象之后\",{\"1\":{\"552\":1}}],[\"创建对象的时机\",{\"1\":{\"228\":2,\"560\":2,\"565\":2}}],[\"创建对象\",{\"1\":{\"151\":1,\"253\":1,\"552\":1}}],[\"创建对应的实体类emp\",{\"1\":{\"80\":1}}],[\"创建完成\",{\"1\":{\"57\":1}}],[\"创建模块\",{\"1\":{\"57\":1,\"456\":3}}],[\"创建xmlhttprequest\",{\"1\":{\"45\":1}}],[\"创建后\",{\"1\":{\"44\":1}}],[\"创建前\",{\"1\":{\"44\":1}}],[\"创建vue核心对象\",{\"1\":{\"42\":1}}],[\"创建字符串的方式有两种\",{\"1\":{\"40\":1}}],[\"创建选项下面的条目对象\",{\"1\":{\"28\":2}}],[\"创建菜单上面两个选项的对象\",{\"1\":{\"28\":2}}],[\"创建整个菜单对象\",{\"1\":{\"28\":2}}],[\"创建一个切面类\",{\"1\":{\"598\":2}}],[\"创建一个代理实例\",{\"1\":{\"583\":1}}],[\"创建一个预处理语句\",{\"1\":{\"515\":1}}],[\"创建一个javasemaven工程\",{\"1\":{\"400\":1,\"444\":2}}],[\"创建一个jlabel的对象\",{\"1\":{\"28\":2}}],[\"创建一个maven的javase工程\",{\"1\":{\"400\":1}}],[\"创建一个mapper接口\",{\"1\":{\"220\":1}}],[\"创建一个栈\",{\"1\":{\"371\":1}}],[\"创建一个复数\",{\"1\":{\"295\":1}}],[\"创建一个vue3项目\",{\"1\":{\"269\":1}}],[\"创建一个新事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"创建一个新的springboot工程\",{\"1\":{\"80\":1}}],[\"创建一个实现runnable接口的类\",{\"1\":{\"195\":1,\"206\":1}}],[\"创建一个继承于thread类的子类\",{\"1\":{\"194\":1,\"205\":1}}],[\"创建一个serversocket\",{\"1\":{\"191\":1,\"202\":1}}],[\"创建一个socket\",{\"1\":{\"191\":1,\"202\":1}}],[\"创建一个fileoutputstream的对象\",{\"1\":{\"184\":1}}],[\"创建一个file对象\",{\"1\":{\"184\":1}}],[\"创建一个fileinoutstream类的对象\",{\"1\":{\"183\":1}}],[\"创建一个file类的对象\",{\"1\":{\"183\":1}}],[\"创建一个文件目录\",{\"1\":{\"182\":2}}],[\"创建一个是是实现了comparator接口的类对象\",{\"1\":{\"175\":1}}],[\"创建一个xmlhttpreuest对象\",{\"1\":{\"45\":1}}],[\"创建一个图片imageico的对象\",{\"1\":{\"28\":2}}],[\"创建一个按钮对象\",{\"1\":{\"26\":2}}],[\"创建\",{\"1\":{\"22\":1,\"49\":1,\"126\":1,\"160\":1,\"315\":1,\"370\":1,\"551\":1}}],[\"创建缩放后的\",{\"1\":{\"22\":1}}],[\"创建窗口\",{\"1\":{\"21\":1}}],[\"创建工程之后\",{\"1\":{\"399\":1}}],[\"创建工程\",{\"1\":{\"2\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1}}],[\"此前\",{\"1\":{\"651\":1}}],[\"此配置元数据表示您作为应用程序开发人员如何告诉\",{\"1\":{\"552\":1}}],[\"此接口对应的方法为什么会自动触发\",{\"1\":{\"480\":1}}],[\"此外\",{\"1\":{\"421\":1}}],[\"此时这个很可能出问题的程序应该被回滚\",{\"1\":{\"609\":1}}],[\"此时这个包下的所有\",{\"1\":{\"532\":1}}],[\"此时应该将缓存切面的优先级提高\",{\"1\":{\"593\":1}}],[\"此时需要在数据库连接信息的url地址中设置\",{\"1\":{\"529\":1}}],[\"此时需要统计每一个业务的执行耗时\",{\"1\":{\"99\":1}}],[\"此时不需要任何特殊处理\",{\"1\":{\"511\":1}}],[\"此时只能使用\",{\"1\":{\"498\":1}}],[\"此时\",{\"1\":{\"434\":1}}],[\"此时映射文件就不会被打包\",{\"1\":{\"413\":1}}],[\"此处的配置信息\",{\"1\":{\"668\":1}}],[\"此处要添加一些约束\",{\"1\":{\"555\":1}}],[\"此处使用了\",{\"1\":{\"461\":1}}],[\"此处省略了version\",{\"1\":{\"399\":1,\"443\":1}}],[\"此处两个结构按照顺序执行\",{\"1\":{\"132\":1}}],[\"此方法在以编程方式生成\",{\"1\":{\"571\":1}}],[\"此方法简化了容器实例化\",{\"1\":{\"239\":1,\"574\":1}}],[\"此方法的默认实现返回\",{\"1\":{\"229\":1,\"561\":1}}],[\"此类表示用来发送和接收udp数据包的套接字\",{\"1\":{\"190\":1,\"201\":1}}],[\"此类实现tcp服务器套接字\",{\"1\":{\"190\":1,\"201\":1}}],[\"此对象对应着一个文件\",{\"1\":{\"182\":1}}],[\"此属性值相同\",{\"1\":{\"174\":1}}],[\"此属性就是一个常量\",{\"1\":{\"131\":1}}],[\"此哈希值决定了此对象在set中的存储位置\",{\"1\":{\"172\":1}}],[\"此案成安全的\",{\"1\":{\"167\":1}}],[\"此异常类的对象抛给方法的调用者\",{\"1\":{\"153\":1}}],[\"此常量在哪里赋值\",{\"1\":{\"131\":1}}],[\"此注解标注的通知方法发生异常后执行\",{\"1\":{\"102\":1}}],[\"此注解标注的通知方法在目标方法后被执行\",{\"1\":{\"102\":1}}],[\"此注解标注的通知方法在目标方法后执行\",{\"1\":{\"102\":1}}],[\"此注解标注的通知方法在目标方法前被执行\",{\"1\":{\"102\":1}}],[\"此注解标准的通知方法在目标方法前\",{\"1\":{\"102\":1}}],[\"此规则由predicate的方法决定\",{\"1\":{\"17\":1}}],[\"此页面会出现在星标文章中\",{\"1\":{\"0\":1}}],[\"此页面会在文章列表置顶\",{\"1\":{\"0\":1}}],[\"京东养车和天猫养车均贯彻着\",{\"1\":{\"651\":1}}],[\"京东养车和天猫养车两大大厂玩家\",{\"1\":{\"651\":1}}],[\"京城连续三日\",{\"1\":{\"651\":1}}],[\"京\",{\"1\":{\"17\":2}}],[\"北京时间6月25日\",{\"1\":{\"651\":2}}],[\"北京时隔9年再次发布最高级别的高温红色预警信号\",{\"1\":{\"651\":1}}],[\"北京南郊观象台最高气温为40\",{\"1\":{\"651\":1}}],[\"北京南郊观象台最高气温达41\",{\"1\":{\"651\":1}}],[\"北京市气象局表示\",{\"1\":{\"651\":1}}],[\"北京高温\",{\"1\":{\"651\":1}}],[\"北京连续三天最高温超40℃\",{\"1\":{\"651\":1}}],[\"北京\",{\"1\":{\"17\":1,\"40\":1,\"43\":1,\"651\":2}}],[\"断定式\",{\"1\":{\"17\":1}}],[\"元旦联欢会要布置教室\",{\"1\":{\"564\":1}}],[\"元字符\",{\"1\":{\"345\":2}}],[\"元组不可变\",{\"1\":{\"334\":1}}],[\"元组等其他可迭代对象转换为集合\",{\"1\":{\"316\":1}}],[\"元组等任何类型的内容放入列表中\",{\"1\":{\"307\":1}}],[\"元组比列表访问速度更快\",{\"1\":{\"313\":1}}],[\"元组需要转换\",{\"1\":{\"313\":1}}],[\"元组则没有\",{\"1\":{\"313\":1}}],[\"元组与列表区别\",{\"0\":{\"313\":1}}],[\"元组推导式\",{\"1\":{\"312\":1}}],[\"元组是不可变序列\",{\"1\":{\"312\":2}}],[\"元组\",{\"0\":{\"312\":1},\"1\":{\"334\":1}}],[\"元素可能会感觉似曾相识\",{\"1\":{\"524\":1}}],[\"元素允许你配置很多属性来配置每条语句的行为细节\",{\"1\":{\"515\":1}}],[\"元素是非常简单\",{\"1\":{\"515\":1}}],[\"元素将会首先运行\",{\"1\":{\"512\":1}}],[\"元素配合使用\",{\"1\":{\"411\":1}}],[\"元素指定本地依赖的路径\",{\"1\":{\"411\":1}}],[\"元素的缺省值\",{\"1\":{\"411\":1}}],[\"元素节点中存放数据元素以及相邻元素的地址信息\",{\"1\":{\"365\":1}}],[\"元素上的\",{\"1\":{\"237\":1,\"573\":1}}],[\"元素起着相同的作用\",{\"1\":{\"236\":1,\"572\":1}}],[\"元素时\",{\"1\":{\"173\":1}}],[\"元素有序\",{\"1\":{\"169\":1}}],[\"元素无序\",{\"1\":{\"169\":1}}],[\"元素获得焦点\",{\"1\":{\"41\":1}}],[\"元素失去焦点\",{\"1\":{\"41\":1}}],[\"元素对象\",{\"1\":{\"40\":2}}],[\"元素列表\",{\"1\":{\"40\":2}}],[\"元素选择器\",{\"1\":{\"35\":1}}],[\"元\",{\"1\":{\"17\":2}}],[\"原来的顺序为\",{\"1\":{\"375\":1}}],[\"原来的链表head\",{\"1\":{\"371\":1}}],[\"原来的写法\",{\"1\":{\"17\":1}}],[\"原数组11行11列2个有效值\",{\"1\":{\"365\":1}}],[\"原列表的元素顺序不变\",{\"1\":{\"311\":1}}],[\"原样输出\",{\"1\":{\"292\":1,\"318\":1}}],[\"原有注解方案\",{\"1\":{\"237\":1}}],[\"原因分析\",{\"1\":{\"598\":1}}],[\"原因是避免调试不方便\",{\"1\":{\"517\":1}}],[\"原因\",{\"1\":{\"150\":1,\"242\":1}}],[\"原生ajax\",{\"1\":{\"45\":1}}],[\"原始匿名内部类方式\",{\"1\":{\"478\":1}}],[\"原始的二维数组\",{\"1\":{\"365\":1}}],[\"原始二位数组记录了很多无意义的数据\",{\"1\":{\"365\":1}}],[\"原始方式\",{\"1\":{\"68\":1}}],[\"原始类型\",{\"1\":{\"38\":1}}],[\"原始数据类型和引用数据类型\",{\"1\":{\"38\":1}}],[\"原理\",{\"1\":{\"9\":1}}],[\"包下的\",{\"1\":{\"461\":1}}],[\"包部署到\",{\"0\":{\"426\":1}}],[\"包组合\",{\"1\":{\"418\":1,\"452\":1}}],[\"包时\",{\"1\":{\"415\":1}}],[\"包之间的依赖关系是普遍存在的\",{\"1\":{\"387\":1}}],[\"包之间的依赖关系\",{\"1\":{\"387\":1}}],[\"包之间有可能产生冲突\",{\"1\":{\"387\":1}}],[\"包使用过程中的难度\",{\"1\":{\"387\":1}}],[\"包能够自动下载\",{\"1\":{\"387\":1}}],[\"包只需要配置三个\",{\"1\":{\"387\":1}}],[\"包的宿主仓库\",{\"1\":{\"424\":2}}],[\"包的规模\",{\"1\":{\"387\":1}}],[\"包的位置\",{\"1\":{\"214\":1}}],[\"包\",{\"0\":{\"425\":1,\"427\":1},\"1\":{\"235\":4,\"387\":2,\"389\":1,\"418\":2,\"424\":2,\"425\":1,\"452\":1,\"493\":1,\"571\":2,\"630\":1,\"640\":3,\"652\":1}}],[\"包要精准\",{\"1\":{\"231\":1,\"564\":1,\"571\":1}}],[\"包装类等默认按照从小到大的顺序遍历\",{\"1\":{\"174\":1}}],[\"包装类之间转换\",{\"1\":{\"169\":1}}],[\"包装类\",{\"0\":{\"169\":1},\"1\":{\"169\":2}}],[\"包括数据库url\",{\"1\":{\"679\":1}}],[\"包括数据的增\",{\"1\":{\"71\":1}}],[\"包括前面四种通知的所有功能\",{\"1\":{\"592\":1}}],[\"包括我们今天要学习的\",{\"1\":{\"562\":1}}],[\"包括将所有的\",{\"1\":{\"534\":1}}],[\"包括自动下载所需依赖库\",{\"1\":{\"390\":1,\"439\":1}}],[\"包括换行符\",{\"1\":{\"320\":1}}],[\"包括编码的文本\",{\"1\":{\"317\":1}}],[\"包括上面四种通知对应的所有位置\",{\"1\":{\"211\":1,\"584\":1}}],[\"包括\",{\"1\":{\"138\":1,\"345\":1,\"549\":1,\"566\":3}}],[\"包名称\",{\"1\":{\"126\":1}}],[\"包名\",{\"1\":{\"110\":1}}],[\"包含int类型\",{\"1\":{\"590\":1}}],[\"包含定义的信息\",{\"1\":{\"560\":1,\"565\":1}}],[\"包含引用类型和基本数据类型\",{\"1\":{\"558\":1}}],[\"包含与\",{\"1\":{\"514\":1}}],[\"包含多个值的数据类型\",{\"1\":{\"501\":1}}],[\"包含命令\",{\"1\":{\"406\":2,\"450\":3}}],[\"包含其他持久层框架的事务管理器实现类例如\",{\"1\":{\"243\":1,\"604\":1}}],[\"包含datasource方式事务管理器实现类datasourcetransactionmanager\",{\"1\":{\"243\":1,\"604\":1}}],[\"包含声明式事务实现的基本规范\",{\"1\":{\"243\":1,\"604\":1}}],[\"包含\",{\"1\":{\"154\":1}}],[\"包含匿名内部类\",{\"1\":{\"148\":1}}],[\"包含了单元测试所需要的常见依赖\",{\"1\":{\"66\":1}}],[\"包含了web应用开发所需要的常见依赖\",{\"1\":{\"66\":1}}],[\"包含方法r\",{\"1\":{\"17\":1}}],[\"包含方法t\",{\"1\":{\"17\":1}}],[\"包含方法void\",{\"1\":{\"17\":1}}],[\"包裹到一个configuration对象\",{\"1\":{\"628\":1}}],[\"包裹外部配置文件地址对象\",{\"1\":{\"628\":2}}],[\"包裹\",{\"1\":{\"17\":1}}],[\"成\",{\"1\":{\"655\":1}}],[\"成功状态描述\",{\"1\":{\"655\":2}}],[\"成功状态码\",{\"1\":{\"655\":2}}],[\"成功\",{\"1\":{\"655\":5,\"656\":3,\"657\":4}}],[\"成功脱离保级区\",{\"1\":{\"651\":1}}],[\"成功把博客部署到github\",{\"1\":{\"364\":1}}],[\"成功接受数据\",{\"1\":{\"191\":1,\"202\":1}}],[\"成功执行完毕\",{\"1\":{\"97\":1}}],[\"成员属性指定\",{\"1\":{\"233\":1}}],[\"成员内部类的定义格式\",{\"1\":{\"149\":1}}],[\"成员内部类\",{\"0\":{\"149\":1},\"1\":{\"148\":1,\"150\":1}}],[\"成员方法\",{\"1\":{\"145\":1}}],[\"成员方法名\",{\"1\":{\"126\":1}}],[\"成员变量name\",{\"1\":{\"176\":1}}],[\"成员变量用的是左边的通过成员方法访问成员变量\",{\"1\":{\"145\":1}}],[\"成员变量其实是常量\",{\"1\":{\"144\":1}}],[\"成员变量名\",{\"1\":{\"128\":1}}],[\"成员变量\",{\"1\":{\"126\":1,\"143\":1,\"145\":1,\"566\":1}}],[\"成为今年继英伟达和苹果之后\",{\"1\":{\"651\":1}}],[\"成为了一个稳定\",{\"1\":{\"549\":1}}],[\"成为本来的子类对象\",{\"1\":{\"146\":1}}],[\"成为ioc容器中的bean\",{\"1\":{\"73\":1}}],[\"成为函数式接口\",{\"1\":{\"17\":1}}],[\"成都\",{\"1\":{\"43\":1}}],[\"成立于\",{\"1\":{\"34\":1}}],[\"成绩\",{\"1\":{\"11\":1}}],[\"成绩=90\",{\"1\":{\"11\":1}}],[\"省略这一对\",{\"1\":{\"17\":1}}],[\"其在中国的销量为31\",{\"1\":{\"651\":1}}],[\"其在编译时只需\",{\"1\":{\"411\":1}}],[\"其主要目标是使企业级应用程序的开发变得更加简单和快速\",{\"1\":{\"547\":1}}],[\"其表结构如下\",{\"1\":{\"461\":1}}],[\"其功能是将目标\",{\"1\":{\"411\":1}}],[\"其功能与\",{\"1\":{\"231\":3,\"564\":3}}],[\"其用于添加非\",{\"1\":{\"411\":1}}],[\"其效果与\",{\"1\":{\"411\":1}}],[\"其中包括excel\",{\"1\":{\"651\":1}}],[\"其中包括sqlsessionfactorybean和mapperscannerconfigurer的初始化\",{\"1\":{\"628\":1}}],[\"其中一些想法被分享在一份名为\",{\"1\":{\"651\":1}}],[\"其中最后一年为1560万美元球队选项\",{\"1\":{\"651\":1}}],[\"其中有三个参数\",{\"1\":{\"583\":1}}],[\"其中\",{\"1\":{\"535\":1,\"547\":1}}],[\"其中经常出现很多条件不取值的情况\",{\"1\":{\"524\":1}}],[\"其中的许多组件\",{\"1\":{\"545\":1}}],[\"其中的键是列名\",{\"1\":{\"515\":1}}],[\"其中的注解起到了重要作用\",{\"1\":{\"480\":1}}],[\"其中前三个是必要的\",{\"1\":{\"398\":1,\"442\":1}}],[\"其中birthday为mydate类的对象\",{\"1\":{\"176\":1}}],[\"其特点是数据元素之间存在一对一的线性关系\",{\"1\":{\"365\":1}}],[\"其可选值可以是strict\",{\"1\":{\"317\":1}}],[\"其作为一个顶级接口定义了容器的基本行为\",{\"1\":{\"230\":1,\"561\":1}}],[\"其实人生中大部分时间都是在下本手\",{\"1\":{\"651\":1}}],[\"其实只是看\",{\"1\":{\"226\":1,\"559\":1}}],[\"其实就是一个还原的动作\",{\"1\":{\"146\":1}}],[\"其实就是一句话\",{\"1\":{\"145\":1}}],[\"其实就是重写的抽象方法的方法体\",{\"1\":{\"17\":1}}],[\"其实就是接口中的抽象方法的形参列表\",{\"1\":{\"17\":1}}],[\"其方法的参数和返回值类型一般为double型\",{\"1\":{\"157\":1}}],[\"其抛出的异常类型只能是被重写的方法的异常类的子类或者异常类型一样\",{\"1\":{\"155\":1}}],[\"其他用户标识信息\",{\"1\":{\"655\":1}}],[\"其他\",{\"1\":{\"651\":1,\"656\":1}}],[\"其他属性通常不需要设置\",{\"1\":{\"608\":1}}],[\"其他解决方案\",{\"1\":{\"480\":1}}],[\"其他服务依赖此模块\",{\"1\":{\"429\":1,\"455\":1}}],[\"其他远程公共仓库\",{\"1\":{\"421\":1}}],[\"其他位置有符合的匹配也可以\",{\"1\":{\"321\":1}}],[\"其他操作\",{\"0\":{\"311\":1}}],[\"其他传播行为值\",{\"1\":{\"249\":1,\"612\":1}}],[\"其他两种方式就没有\",{\"1\":{\"224\":1}}],[\"其他需要\",{\"1\":{\"220\":1,\"493\":1}}],[\"其他线程才可以操作ticket\",{\"1\":{\"197\":1,\"208\":1}}],[\"其他线程必须等待\",{\"1\":{\"197\":2,\"208\":2}}],[\"其他线程也参与进来\",{\"1\":{\"197\":1,\"208\":1}}],[\"其他因编程错误或偶然的外在因素导致的一般性问题\",{\"1\":{\"152\":1}}],[\"其他均为true\",{\"1\":{\"38\":1}}],[\"其他类型转boolean\",{\"1\":{\"38\":1}}],[\"其一对\",{\"1\":{\"17\":1}}],[\"类级别标记的\",{\"1\":{\"608\":1}}],[\"类对应的\",{\"1\":{\"564\":1}}],[\"类信息就足够了\",{\"1\":{\"557\":1}}],[\"类和\",{\"1\":{\"539\":1}}],[\"类和接口\",{\"1\":{\"180\":1}}],[\"类路径根目录\",{\"1\":{\"518\":1,\"519\":1}}],[\"类中只要包含对方类型集合属性即可\",{\"1\":{\"517\":1}}],[\"类中只要包含单个对方对象类型属性即可\",{\"1\":{\"517\":1}}],[\"类继承serviceimpl实现类\",{\"1\":{\"470\":1}}],[\"类继承练习\",{\"1\":{\"334\":1}}],[\"类即可进行强大的\",{\"1\":{\"460\":1}}],[\"类定义属性\",{\"1\":{\"334\":1}}],[\"类是创建对象的模板\",{\"1\":{\"334\":1}}],[\"类体\",{\"1\":{\"327\":1,\"329\":1}}],[\"类下的所有方法都有事务\",{\"1\":{\"245\":1}}],[\"类进行接值\",{\"1\":{\"218\":1,\"594\":1}}],[\"类自己的\",{\"1\":{\"197\":2}}],[\"类设计合理即可\",{\"1\":{\"188\":1}}],[\"类似技术\",{\"1\":{\"655\":1}}],[\"类似maven依赖管理工具软件\",{\"1\":{\"636\":1}}],[\"类似java程序运行的服务器tomcat\",{\"1\":{\"636\":1}}],[\"类似人的\",{\"1\":{\"442\":1}}],[\"类似人的姓\",{\"1\":{\"398\":1}}],[\"类似高中数学上的\",{\"1\":{\"169\":1}}],[\"类似于servlet的init\",{\"1\":{\"560\":1,\"565\":1}}],[\"类似于局部变量\",{\"1\":{\"154\":1}}],[\"类似于\",{\"1\":{\"146\":1}}],[\"类似于强制类型转换\",{\"1\":{\"146\":1}}],[\"类似于过滤器\",{\"1\":{\"94\":1}}],[\"类的帮助信息\",{\"1\":{\"329\":1}}],[\"类的名称\",{\"1\":{\"214\":1}}],[\"类的\",{\"1\":{\"197\":3}}],[\"类的设计应该保证父类和子类能够共享特征\",{\"1\":{\"138\":1}}],[\"类的多个构造器之间构成重载\",{\"1\":{\"127\":1}}],[\"类变得越来越具体\",{\"1\":{\"138\":1}}],[\"类变量存在于静态域中\",{\"1\":{\"130\":1}}],[\"类变量的加载要早于对象\",{\"1\":{\"130\":1}}],[\"类变量随着类的加载而加载的\",{\"1\":{\"130\":1}}],[\"类变量\",{\"1\":{\"130\":4}}],[\"类内部\",{\"1\":{\"135\":1}}],[\"类属性\",{\"1\":{\"132\":1}}],[\"类方法\",{\"1\":{\"130\":2,\"132\":1}}],[\"类比作汽车设计图\",{\"1\":{\"126\":1}}],[\"类名首字母小写就是\",{\"1\":{\"564\":1}}],[\"类名称\",{\"1\":{\"126\":3,\"149\":2}}],[\"类名\",{\"1\":{\"110\":1,\"478\":4}}],[\"类上\",{\"1\":{\"69\":1,\"97\":1,\"564\":1}}],[\"类注解\",{\"1\":{\"69\":1}}],[\"类\",{\"1\":{\"68\":1,\"113\":1,\"130\":3,\"164\":1,\"239\":1,\"478\":2,\"574\":1}}],[\"类型支持\",{\"1\":{\"669\":1}}],[\"类型的对象\",{\"1\":{\"515\":1}}],[\"类型的参数\",{\"1\":{\"515\":1}}],[\"类型内建的类型别名\",{\"1\":{\"508\":1}}],[\"类型设置一个缩写名字\",{\"1\":{\"508\":1}}],[\"类型为例\",{\"1\":{\"508\":1}}],[\"类型接收即可\",{\"1\":{\"507\":1}}],[\"类型处理器\",{\"1\":{\"496\":1}}],[\"类型别名可为\",{\"1\":{\"508\":1}}],[\"类型别名\",{\"1\":{\"496\":1}}],[\"类型名\",{\"1\":{\"221\":2,\"552\":1}}],[\"类型\",{\"1\":{\"69\":1,\"112\":1,\"334\":1,\"463\":1,\"464\":1,\"465\":1,\"466\":1,\"480\":2,\"481\":1,\"484\":1}}],[\"类型可变\",{\"1\":{\"40\":1}}],[\"类型转换\",{\"1\":{\"38\":1}}],[\"类型是underfined\",{\"1\":{\"38\":1}}],[\"类型推断\",{\"1\":{\"17\":1}}],[\"类选择器\",{\"1\":{\"35\":1}}],[\"类库\",{\"1\":{\"16\":1}}],[\"可广泛访问的入门体验\",{\"1\":{\"662\":1}}],[\"可也是包名或全类名\",{\"1\":{\"625\":1}}],[\"可维护和可扩展的应用程序架构\",{\"1\":{\"619\":1}}],[\"可重用\",{\"1\":{\"551\":1}}],[\"可重复读\",{\"1\":{\"248\":1,\"611\":1}}],[\"可重复\",{\"1\":{\"177\":1}}],[\"可重复的集合\",{\"1\":{\"169\":1}}],[\"可靠\",{\"1\":{\"549\":1}}],[\"可扩展性和可维护性\",{\"1\":{\"549\":1}}],[\"可惜它们并不都是那样\",{\"1\":{\"517\":1}}],[\"可为\",{\"1\":{\"465\":1}}],[\"可输出\",{\"1\":{\"460\":1}}],[\"可自由配置\",{\"1\":{\"460\":1}}],[\"可变参数\",{\"1\":{\"325\":1,\"562\":1}}],[\"可变字符序列\",{\"1\":{\"168\":1}}],[\"可将元组组合为一个索引序列\",{\"1\":{\"312\":1}}],[\"可通过for循环打印\",{\"1\":{\"334\":1}}],[\"可通过元素下标访问内容\",{\"1\":{\"312\":1}}],[\"可通过两行代码查看python中的保留字\",{\"1\":{\"294\":1}}],[\"可覆盖align\",{\"1\":{\"265\":1}}],[\"可被候选用于自动装配\",{\"1\":{\"237\":1,\"573\":1}}],[\"可分为collection和map两种体系\",{\"1\":{\"169\":1}}],[\"可选值\",{\"1\":{\"521\":1}}],[\"可选操作\",{\"1\":{\"431\":1}}],[\"可选参数arrars赋值为一个字典\",{\"1\":{\"334\":1}}],[\"可选参数\",{\"1\":{\"317\":1,\"320\":1}}],[\"可选\",{\"1\":{\"154\":1,\"515\":2}}],[\"可能是java程序或mysql数据库或网络连接等等\",{\"1\":{\"609\":1}}],[\"可能存在局限性\",{\"1\":{\"545\":1}}],[\"可能会导致注入的属性值为null\",{\"1\":{\"628\":1}}],[\"可能会导致\",{\"1\":{\"628\":1}}],[\"可能会导致系统出现设计和架构缺陷\",{\"1\":{\"545\":1}}],[\"可能会发生依赖项下载错误的情况\",{\"1\":{\"412\":1,\"449\":1}}],[\"可能会出现乱码\",{\"1\":{\"191\":1,\"202\":1}}],[\"可能会出现不满足实际情况的意外\",{\"1\":{\"135\":1}}],[\"可能影响效果\",{\"1\":{\"229\":1,\"561\":1}}],[\"可能造成死锁\",{\"1\":{\"196\":1,\"207\":1}}],[\"可能出现异常的代码\",{\"1\":{\"154\":1}}],[\"可能时return语句\",{\"1\":{\"17\":1}}],[\"可用关键字final来修饰\",{\"1\":{\"131\":1}}],[\"可改善显示速度\",{\"1\":{\"37\":1}}],[\"可点击按钮\",{\"1\":{\"34\":1}}],[\"可视化方式构建\",{\"1\":{\"450\":1}}],[\"可视化方式项目构建\",{\"0\":{\"405\":1}}],[\"可视\",{\"1\":{\"23\":3}}],[\"可以定义各自环境的配置参数\",{\"1\":{\"671\":1}}],[\"可以创建application\",{\"1\":{\"671\":2}}],[\"可以更方便地表示长文本或数据块\",{\"1\":{\"669\":1}}],[\"可以说是没有对手\",{\"1\":{\"651\":1}}],[\"可以代理某个类的所有方法\",{\"1\":{\"584\":1}}],[\"可以实现\",{\"1\":{\"582\":1}}],[\"可以实现文本文件的复制\",{\"1\":{\"186\":1}}],[\"可以作为lambda表达式的目标\",{\"1\":{\"566\":1}}],[\"可以引用构造参数\",{\"1\":{\"558\":1}}],[\"可以降低开发复杂度和学习成本\",{\"1\":{\"549\":1}}],[\"可以降低程序员之间沟通以及日后维护的成本\",{\"1\":{\"545\":1}}],[\"可以帮助开发人员快速构建高可靠性的企业应用程序\",{\"1\":{\"549\":1}}],[\"可以帮助开发者更容易地管理项目的依赖\",{\"1\":{\"401\":1,\"445\":1}}],[\"可以访问实体类的属性\",{\"1\":{\"525\":1}}],[\"可以访问相同的变量和对象\",{\"1\":{\"192\":1,\"203\":1}}],[\"可以彻底摆脱这种痛苦\",{\"1\":{\"524\":1}}],[\"可以被动态代理拦截目标类的方法\",{\"1\":{\"584\":1}}],[\"可以被用来引用这条语句\",{\"1\":{\"515\":2}}],[\"可以被aop控制的方法\",{\"1\":{\"101\":1}}],[\"可以方便地实现对数据库记录的逻辑删除而不是物理删除\",{\"1\":{\"481\":1}}],[\"可以为每个容器提供各自的配置\",{\"1\":{\"619\":1}}],[\"可以为开发人员提供一种共同的语言和思想基础\",{\"1\":{\"545\":1}}],[\"可以为\",{\"1\":{\"464\":1,\"465\":1,\"466\":2}}],[\"可以为参数设置默认值\",{\"1\":{\"325\":1}}],[\"可以将配置参数分离到不同的yaml文件中\",{\"1\":{\"671\":1}}],[\"可以将上述三个注解的功能集中在一个注解上\",{\"1\":{\"664\":1}}],[\"可以将各个层次的关注点进行分离\",{\"1\":{\"619\":1}}],[\"可以将jsr注解分为不同的系列\",{\"1\":{\"566\":1}}],[\"可以将创建过程存储在factorybean\",{\"1\":{\"561\":1}}],[\"可以将框架总结\",{\"1\":{\"545\":1}}],[\"可以将mapperxml文件放在mapper接口所在的包\",{\"1\":{\"532\":1}}],[\"可以将多个子项目组织在一起\",{\"1\":{\"419\":1,\"453\":1}}],[\"可以将zip对象使用tuple\",{\"1\":{\"315\":1}}],[\"可以把这个数值配置大一些\",{\"1\":{\"677\":1}}],[\"可以把版本号去掉\",{\"1\":{\"418\":1,\"452\":1}}],[\"可以把类想象成建筑图纸\",{\"1\":{\"334\":1}}],[\"可以传递\",{\"1\":{\"415\":1}}],[\"可以指定使用\",{\"1\":{\"573\":1}}],[\"可以指定name名称查找\",{\"1\":{\"566\":1}}],[\"可以指定零个或多个参数\",{\"1\":{\"478\":1}}],[\"可以指定依赖生效范围\",{\"1\":{\"410\":1,\"447\":1}}],[\"可以指定多个\",{\"1\":{\"317\":1}}],[\"可以确保每一个构建过程都遵循同样的规则和最佳实践\",{\"1\":{\"390\":1,\"439\":1}}],[\"可以管理项目的编译\",{\"1\":{\"390\":1,\"439\":1}}],[\"可以管理项目的依赖\",{\"1\":{\"390\":1,\"439\":1}}],[\"可以自动管理依赖项\",{\"1\":{\"448\":1}}],[\"可以自动下载并且只下载一次该库\",{\"1\":{\"448\":1}}],[\"可以自动化构建\",{\"1\":{\"390\":1,\"438\":1}}],[\"可以自定义任何所需的初始化逻辑\",{\"1\":{\"230\":1,\"561\":1}}],[\"可以利用栈这个数据结构\",{\"1\":{\"371\":1}}],[\"可以理解为在\",{\"1\":{\"346\":1}}],[\"可以理解为main里面的\",{\"1\":{\"112\":1}}],[\"可以匹配任意字符\",{\"1\":{\"345\":1}}],[\"可以伪装成用户去访问\",{\"1\":{\"334\":1}}],[\"可以提前预判由于用户输入不规范而产生的错误\",{\"1\":{\"334\":1}}],[\"可以提示查询事务的效率\",{\"1\":{\"245\":1}}],[\"可以强制类型转化\",{\"1\":{\"334\":1}}],[\"可以同时导入多个定义\",{\"1\":{\"330\":1}}],[\"可以读取不能修改\",{\"1\":{\"328\":1}}],[\"可以包含多个字符\",{\"1\":{\"317\":1}}],[\"可以包裹内容\",{\"1\":{\"34\":1}}],[\"可以包裹多个<td><td>\",{\"1\":{\"34\":1}}],[\"可以包裹多个<tr>border\",{\"1\":{\"34\":1}}],[\"可以放\",{\"1\":{\"307\":1}}],[\"可以返回变量类型\",{\"1\":{\"292\":1}}],[\"可以只设置一个ip\",{\"1\":{\"277\":1}}],[\"可以无需刷新页面而与服务器端进行通信\",{\"1\":{\"250\":1}}],[\"可以避免以上所有问题\",{\"1\":{\"248\":1,\"611\":1}}],[\"可以避免脏读和不可重复读\",{\"1\":{\"248\":1,\"611\":1}}],[\"可以避免脏读问题\",{\"1\":{\"248\":1,\"611\":1}}],[\"可以建一个根配置类\",{\"1\":{\"239\":1}}],[\"可以直接在形参列表接收ioc容器中的bean\",{\"1\":{\"238\":1,\"573\":1}}],[\"可以直接通过方法名来访问方法\",{\"1\":{\"328\":1}}],[\"可以直接通过\",{\"1\":{\"130\":1}}],[\"可以进行用户识别和校验\",{\"1\":{\"655\":1}}],[\"可以进行完整注解开发\",{\"1\":{\"235\":1,\"571\":1}}],[\"可以进行科学计数法\",{\"1\":{\"112\":1}}],[\"可以总结\",{\"1\":{\"235\":1}}],[\"可以添加配置注解\",{\"1\":{\"235\":2,\"571\":1}}],[\"可以配置扫描包\",{\"1\":{\"235\":1,\"571\":1}}],[\"可以配置多个环境\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"可以给与默认值\",{\"1\":{\"235\":1,\"567\":1}}],[\"可以给setter方法对应的属性赋值\",{\"1\":{\"225\":1,\"558\":1}}],[\"可以设置私服中中央仓库的地址为阿里云仓库地址\",{\"1\":{\"425\":1}}],[\"可以设置\",{\"1\":{\"411\":1}}],[\"可以设置一个或者多个配置\",{\"1\":{\"226\":1,\"559\":1}}],[\"可以设置宽高\",{\"1\":{\"36\":1}}],[\"可以考虑使用\",{\"1\":{\"197\":1,\"208\":1}}],[\"可以是一个布尔类型\",{\"1\":{\"481\":1}}],[\"可以是同一变量\",{\"1\":{\"197\":1,\"208\":1}}],[\"可以是各种类型\",{\"1\":{\"167\":1}}],[\"可以查看当前有多少在后台运行\",{\"1\":{\"273\":1}}],[\"可以查看一下文本的存储编码格式是不是utf\",{\"1\":{\"181\":1}}],[\"可以查看文档\",{\"1\":{\"34\":1}}],[\"可以载入进这个文件的内容\",{\"1\":{\"179\":1}}],[\"可以按照自己的需求来控制事务的粒度\",{\"1\":{\"243\":1,\"602\":1}}],[\"可以按照相应构造函数的角标注入数据\",{\"1\":{\"224\":1,\"558\":1}}],[\"可以按照相应构造函数的名称注入数据\",{\"1\":{\"224\":1,\"558\":1}}],[\"可以按照相应构造函数的顺序注入数据\",{\"1\":{\"224\":1,\"558\":1}}],[\"可以按照添加进集合中的元素的指定的顺序遍历\",{\"1\":{\"174\":1}}],[\"可以按照xy轴坐标添加组件\",{\"1\":{\"21\":1}}],[\"可以重复的元素\",{\"1\":{\"169\":1}}],[\"可以动态地把多个对象的引用放入容器中\",{\"1\":{\"169\":1}}],[\"可以连着\",{\"1\":{\"167\":1}}],[\"可以对仓库进行一些更加高级的控制\",{\"1\":{\"421\":1}}],[\"可以对多个项目进行顺序控制\",{\"1\":{\"419\":1,\"453\":1}}],[\"可以对字符串内容进行增删\",{\"1\":{\"167\":1}}],[\"可以对类的属性\",{\"1\":{\"132\":1}}],[\"可以写的名称有\",{\"1\":{\"508\":1}}],[\"可以写自定义模块并使用import导入模块\",{\"1\":{\"330\":1}}],[\"可以写成一个方法\",{\"1\":{\"185\":1}}],[\"可以写一个猜数小游戏\",{\"1\":{\"160\":1}}],[\"可以写在页面任何位置\",{\"1\":{\"35\":1}}],[\"可以不显式的处理\",{\"1\":{\"155\":1}}],[\"可以不显式的进行处理\",{\"1\":{\"154\":1}}],[\"可以不设置高度\",{\"1\":{\"34\":1}}],[\"可以看作局部内部类copy了一份局部变量\",{\"1\":{\"150\":1}}],[\"可以看成是自java5以来最具革命性的版本\",{\"1\":{\"16\":1}}],[\"可以解决接口升级的问题\",{\"1\":{\"140\":1}}],[\"可以随意定义\",{\"1\":{\"139\":1}}],[\"可以选择性地忽略\",{\"1\":{\"139\":1}}],[\"可以用于对java\",{\"1\":{\"566\":1}}],[\"可以用于计算id的时间部分\",{\"1\":{\"480\":1}}],[\"可以用在任何有需要的地方\",{\"1\":{\"527\":1}}],[\"可以用在任何使用\",{\"1\":{\"508\":1}}],[\"可以用逗号分隔多个属性名称\",{\"1\":{\"515\":2}}],[\"可以用数组或是链表来实现\",{\"1\":{\"366\":1}}],[\"可以用方法string\",{\"1\":{\"334\":1}}],[\"可以用type\",{\"1\":{\"312\":1}}],[\"可以用super继承\",{\"1\":{\"137\":1}}],[\"可以用来修饰类\",{\"1\":{\"138\":1}}],[\"可以用来修饰属性\",{\"1\":{\"130\":1,\"135\":1}}],[\"可以用来存放字符串\",{\"1\":{\"113\":1}}],[\"可以用来判断输入是否正确加个if语句\",{\"1\":{\"109\":1}}],[\"可以用来设置样式<\",{\"1\":{\"34\":1}}],[\"可以有构造器创建其对象\",{\"1\":{\"182\":1}}],[\"可以有多个\",{\"1\":{\"329\":1}}],[\"可以有多个catch语句\",{\"1\":{\"154\":1}}],[\"可以有多个路径参数\",{\"1\":{\"68\":1}}],[\"可以有输出语句\",{\"1\":{\"132\":1}}],[\"可以\",{\"1\":{\"130\":1,\"146\":1}}],[\"可以存储一个汉字\",{\"1\":{\"112\":1}}],[\"可以尝试引入依赖\",{\"1\":{\"92\":1}}],[\"可以使用mapperxml文件或者注解方式\",{\"1\":{\"679\":1}}],[\"可以使用yaml语法定义各自环境的配置参数\",{\"1\":{\"671\":1}}],[\"可以使用多环境配置来根据不同的运行环境\",{\"1\":{\"671\":1}}],[\"可以使用下面的缩写值\",{\"1\":{\"628\":2}}],[\"可以使用aop来实现缓存控制的功能\",{\"1\":{\"584\":1}}],[\"可以使用aop来实现异常处理的功能\",{\"1\":{\"584\":1}}],[\"可以使用aop来实现性能监控的功能\",{\"1\":{\"584\":1}}],[\"可以使用aop来实现安全控制的功能\",{\"1\":{\"584\":1}}],[\"可以使用aop来实现事务处理的功能\",{\"1\":{\"584\":1}}],[\"可以使用aop来实现日志记录的功能\",{\"1\":{\"584\":1}}],[\"可以使用\",{\"1\":{\"571\":1,\"671\":1}}],[\"可以使用69年\",{\"1\":{\"480\":1}}],[\"可以使用注解\",{\"1\":{\"467\":1}}],[\"可以使用稀疏数组来保存该数组\",{\"1\":{\"365\":1}}],[\"可以使用gdb调试一下a\",{\"1\":{\"338\":1}}],[\"可以使用dir\",{\"1\":{\"330\":1}}],[\"可以使用函数名\",{\"1\":{\"325\":1}}],[\"可以使用span方法饭hi匹配位置的元组\",{\"1\":{\"320\":1}}],[\"可以使用set\",{\"1\":{\"316\":1}}],[\"可以使用+拼接字符串\",{\"1\":{\"317\":1}}],[\"可以使用方法返回值+\",{\"1\":{\"236\":1,\"572\":1}}],[\"可以使用try\",{\"1\":{\"183\":1}}],[\"可以使用针对性的代码处理\",{\"1\":{\"152\":1}}],[\"可以使用匿名内部类\",{\"1\":{\"139\":1}}],[\"可以使用该传播行为\",{\"1\":{\"98\":1}}],[\"可以使用这个方法解决上面的问题\",{\"1\":{\"81\":1}}],[\"可以使用数组进行接收\",{\"1\":{\"68\":1}}],[\"可以通过application\",{\"1\":{\"686\":1}}],[\"可以通过system\",{\"1\":{\"686\":1}}],[\"可以通过命令行参数来指定当前的环境\",{\"1\":{\"671\":1}}],[\"可以通过在bean类上使用注解来代替xml配置文件中的配置信息\",{\"1\":{\"552\":1}}],[\"可以通过简单的配置和操作快速生成\",{\"1\":{\"539\":1}}],[\"可以通过简单的\",{\"1\":{\"491\":1}}],[\"可以通过配置或自动分配的方式获得\",{\"1\":{\"480\":1}}],[\"可以通过查看网站的robots\",{\"1\":{\"334\":1}}],[\"可以通过三种方式添加指定的目录到sys\",{\"1\":{\"331\":1}}],[\"可以通过接口实现类对象\",{\"1\":{\"140\":1}}],[\"可以通过方法赋值\",{\"1\":{\"135\":1}}],[\"可以通过value属性指定bean的名字\",{\"1\":{\"74\":1}}],[\"可以通过<scope>\",{\"1\":{\"59\":1}}],[\"可以改为false不报错\",{\"1\":{\"68\":1}}],[\"可以省略符合列和属性命名映射规则\",{\"1\":{\"521\":1}}],[\"可以省略该注解\",{\"1\":{\"480\":1}}],[\"可以省略小括号\",{\"1\":{\"478\":2}}],[\"可以省略public\",{\"1\":{\"143\":1}}],[\"可以省略导包语句不写\",{\"1\":{\"126\":1}}],[\"可以省略\",{\"1\":{\"40\":1,\"478\":1,\"521\":1}}],[\"可以在编译的target文件中查看jar包\",{\"1\":{\"685\":1}}],[\"可以在编译期织入\",{\"1\":{\"211\":1,\"584\":1}}],[\"可以在配置文件中添加说明性的注释\",{\"1\":{\"669\":1}}],[\"可以在配置类的方法上面标注\",{\"1\":{\"237\":1}}],[\"可以在命令行终端输入\",{\"1\":{\"636\":1}}],[\"可以在通知方法声明joinpoint类型的形参\",{\"1\":{\"589\":1}}],[\"可以在方法开始前开启事务\",{\"1\":{\"584\":1}}],[\"可以在方法执行前查询缓存中是否有数据\",{\"1\":{\"584\":1}}],[\"可以在方法执行前记录时间戳\",{\"1\":{\"584\":1}}],[\"可以在方法执行前进行权限判断\",{\"1\":{\"584\":1}}],[\"可以在方法执行前\",{\"1\":{\"584\":1}}],[\"可以在不修改原来代码的基础上添加新功能\",{\"1\":{\"584\":1}}],[\"可以在不重新加载整个页面的情况下\",{\"1\":{\"45\":1}}],[\"可以在sources下创建mapper接口包一致的文件夹结构存放mapperxml文件\",{\"1\":{\"532\":1}}],[\"可以在父项目中管理公共依赖项和插件\",{\"1\":{\"419\":1}}],[\"可以在一个命令中构建和发布多个相关的项目\",{\"1\":{\"419\":1}}],[\"可以在列表的名称前加\",{\"1\":{\"325\":1}}],[\"可以在\",{\"1\":{\"230\":1,\"561\":1}}],[\"可以在创建一个实例调用\",{\"1\":{\"194\":1,\"205\":1}}],[\"可以在application\",{\"1\":{\"80\":1}}],[\"可以在任何地方使用\",{\"1\":{\"59\":1}}],[\"可以在任意地方\",{\"1\":{\"37\":1}}],[\"可以在函数内部直接使用return返回即可\",{\"1\":{\"39\":1}}],[\"可以之后加上if判断执行相应的程序\",{\"1\":{\"28\":1}}],[\"可带返回值\",{\"1\":{\"17\":1}}],[\"yml文件来加载相应的配置\",{\"1\":{\"686\":1}}],[\"yml等文件\",{\"1\":{\"671\":1}}],[\"yml和application\",{\"1\":{\"671\":1}}],[\"yml\",{\"1\":{\"667\":3,\"669\":1,\"671\":4,\"674\":1}}],[\"yml中配置数据库连接信息\",{\"1\":{\"679\":1}}],[\"yml中\",{\"1\":{\"97\":1}}],[\"yygh\",{\"1\":{\"655\":1}}],[\"yyyy\",{\"1\":{\"68\":1,\"163\":1}}],[\"y高出一大截\",{\"1\":{\"651\":1}}],[\"y一较高下\",{\"1\":{\"651\":1}}],[\"y相比\",{\"1\":{\"651\":1}}],[\"y的全球销量为74\",{\"1\":{\"651\":1}}],[\"y的价格足够低\",{\"1\":{\"651\":1}}],[\"y的结果为啥是0\",{\"1\":{\"117\":1}}],[\"y确实解决了用户对model\",{\"1\":{\"651\":1}}],[\"y最初被用户吐槽是model\",{\"1\":{\"651\":1}}],[\"y和model\",{\"1\":{\"651\":1}}],[\"y上实践过\",{\"1\":{\"651\":1}}],[\"yaml配置文件\",{\"1\":{\"671\":1}}],[\"yaml配置文件示例\",{\"1\":{\"669\":1}}],[\"yaml配置文件的扩展名是yaml\",{\"1\":{\"669\":1}}],[\"yaml配置文件使用\",{\"0\":{\"669\":1},\"1\":{\"660\":1}}],[\"yaml语法说明\",{\"1\":{\"669\":1}}],[\"yaml文件具有自我描述性\",{\"1\":{\"669\":1}}],[\"yaml文件使用缩进和冒号来表示层次结构\",{\"1\":{\"669\":1}}],[\"yaml格式相对于\",{\"1\":{\"669\":1}}],[\"yaml格式天然支持复杂的数据类型\",{\"1\":{\"669\":1}}],[\"yaml格式支持多行文本的表示\",{\"1\":{\"669\":1}}],[\"yaml格式支持注释\",{\"1\":{\"669\":1}}],[\"yaml格式有以下优势\",{\"1\":{\"669\":1}}],[\"yaml格式介绍\",{\"1\":{\"669\":1}}],[\"yaml\",{\"1\":{\"387\":1,\"461\":1,\"652\":1,\"655\":1,\"667\":2,\"669\":2}}],[\"yapi是高效\",{\"1\":{\"46\":1}}],[\"yapi\",{\"0\":{\"46\":1}}],[\"yum库\",{\"1\":{\"277\":1}}],[\"yum\",{\"1\":{\"274\":1,\"277\":3}}],[\"yield\",{\"1\":{\"196\":1,\"207\":1,\"294\":1,\"334\":1}}],[\"year会替换\",{\"1\":{\"334\":1}}],[\"years\",{\"1\":{\"298\":1}}],[\"year=year\",{\"1\":{\"334\":2}}],[\"year=\",{\"1\":{\"176\":1,\"334\":1}}],[\"year\",{\"1\":{\"176\":10,\"334\":4}}],[\"yes\",{\"1\":{\"135\":10,\"252\":1}}],[\"y=\",{\"1\":{\"117\":1}}],[\"y==0\",{\"1\":{\"117\":1}}],[\"y=1\",{\"1\":{\"117\":1}}],[\"y=3\",{\"1\":{\"112\":1}}],[\"y\",{\"1\":{\"17\":3,\"59\":8,\"112\":1,\"224\":6,\"277\":2,\"478\":2,\"558\":8,\"651\":4}}],[\"xms256m\",{\"1\":{\"686\":1}}],[\"xms<size>\",{\"1\":{\"686\":1}}],[\"xmx512m\",{\"1\":{\"686\":1}}],[\"xmx<size>\",{\"1\":{\"686\":1}}],[\"xml和配置类方式进行ioc配置\",{\"1\":{\"623\":1}}],[\"xml和注解都可以\",{\"1\":{\"566\":1}}],[\"xml+注解方式\",{\"1\":{\"571\":1}}],[\"xml+注解方式配置总结\",{\"0\":{\"241\":1,\"578\":1},\"1\":{\"542\":1}}],[\"xml格式解析效率低\",{\"1\":{\"568\":1}}],[\"xml引入外部配置\",{\"1\":{\"567\":1}}],[\"xml引入依赖\",{\"1\":{\"535\":1}}],[\"xmlioc方式问题总结\",{\"1\":{\"562\":1}}],[\"xml实现\",{\"1\":{\"467\":2}}],[\"xml配置方式\",{\"1\":{\"552\":2}}],[\"xml配置分页插件\",{\"1\":{\"535\":1}}],[\"xml配置等\",{\"1\":{\"493\":1}}],[\"xml配置\",{\"1\":{\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":3,\"628\":1}}],[\"xml配置文件解析效率低\",{\"1\":{\"562\":1}}],[\"xml配置文件\",{\"1\":{\"395\":1,\"440\":1,\"518\":1}}],[\"xml配置文件编写错误\",{\"1\":{\"396\":1,\"440\":1}}],[\"xml配置文件编写\",{\"1\":{\"223\":1,\"557\":3}}],[\"xml<\",{\"1\":{\"413\":1}}],[\"xml定制一些配置\",{\"1\":{\"413\":1}}],[\"xml依赖\",{\"1\":{\"412\":1,\"449\":1,\"625\":1}}],[\"xml路径\",{\"1\":{\"400\":1}}],[\"xml的路径\",{\"1\":{\"396\":1}}],[\"xml方式\",{\"1\":{\"588\":1}}],[\"xml方式配置文件使用classpathxmlapplicationcontext容器读取\",{\"1\":{\"571\":1}}],[\"xml方式配置总结\",{\"0\":{\"240\":1,\"577\":1},\"1\":{\"542\":1}}],[\"xml方式可以使用<bean标签\",{\"1\":{\"236\":1,\"572\":1}}],[\"xml方式实现\",{\"0\":{\"219\":1},\"1\":{\"236\":1,\"572\":1}}],[\"xmlschema\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"xmlns\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":2,\"236\":2,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"555\":1,\"562\":4,\"564\":2,\"568\":2,\"571\":2,\"572\":2,\"588\":3,\"625\":1,\"673\":1,\"677\":1}}],[\"xmlns=\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"xml位置\",{\"1\":{\"220\":1}}],[\"xml映射文件中sql语句的id与mapper接口中的方法名一致\",{\"1\":{\"82\":1}}],[\"xml映射文件的namespace属性为mapper接口全限定名一致\",{\"1\":{\"82\":1}}],[\"xml映射文件的名称与mapper接口名称一致\",{\"1\":{\"82\":1}}],[\"xml映射文件\",{\"0\":{\"82\":1}}],[\"xml中编写具体sql语句\",{\"1\":{\"493\":1}}],[\"xml中编写<dependencies>标签\",{\"1\":{\"59\":1}}],[\"xml中引入aop依赖\",{\"1\":{\"100\":1}}],[\"xml中的<mirrors>标签\",{\"1\":{\"56\":1}}],[\"xml中的<localrepository>为指定一个目录\",{\"1\":{\"56\":1}}],[\"xml文件打包方式\",{\"1\":{\"400\":1,\"444\":1}}],[\"xml文件替换成使用\",{\"1\":{\"242\":1,\"579\":1}}],[\"xml文件依然需要\",{\"1\":{\"241\":1,\"578\":1}}],[\"xml文件\",{\"1\":{\"57\":1,\"447\":1,\"519\":1,\"628\":1}}],[\"xml文档标准模型\",{\"1\":{\"40\":1}}],[\"xmlhttprequest\",{\"1\":{\"45\":8,\"253\":1}}],[\"xml\",{\"1\":{\"40\":1,\"45\":1,\"65\":1,\"82\":1,\"92\":1,\"220\":4,\"221\":5,\"223\":1,\"224\":2,\"226\":4,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"235\":1,\"236\":3,\"237\":2,\"242\":1,\"243\":1,\"395\":1,\"400\":1,\"401\":4,\"404\":1,\"409\":1,\"410\":1,\"411\":2,\"413\":1,\"425\":2,\"426\":5,\"431\":1,\"432\":1,\"433\":1,\"434\":2,\"440\":1,\"444\":1,\"445\":4,\"456\":5,\"461\":2,\"467\":3,\"491\":1,\"493\":9,\"505\":1,\"508\":1,\"514\":7,\"515\":1,\"518\":2,\"519\":2,\"521\":2,\"524\":1,\"532\":1,\"537\":1,\"538\":1,\"539\":1,\"552\":3,\"553\":1,\"555\":7,\"557\":6,\"558\":1,\"559\":4,\"561\":2,\"562\":7,\"564\":6,\"568\":2,\"570\":2,\"571\":4,\"572\":3,\"573\":2,\"580\":1,\"582\":1,\"588\":2,\"596\":1,\"603\":1,\"607\":1,\"625\":4,\"628\":9,\"630\":2,\"641\":1,\"655\":1,\"662\":1,\"664\":1,\"665\":1,\"673\":1,\"677\":1,\"679\":1,\"680\":4}}],[\"xiaohei\",{\"1\":{\"651\":1}}],[\"x正式更名为mybatis\",{\"1\":{\"491\":1}}],[\"x64\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"636\":2}}],[\"x轴y轴\",{\"1\":{\"257\":1}}],[\"xhr的状态\",{\"1\":{\"254\":1}}],[\"xhr\",{\"1\":{\"253\":12}}],[\"xsd\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":2,\"236\":2,\"431\":2,\"432\":2,\"433\":2,\"434\":2,\"456\":8,\"461\":2,\"555\":1,\"562\":4,\"564\":2,\"568\":2,\"571\":2,\"572\":2,\"588\":3,\"625\":2,\"673\":2,\"677\":2}}],[\"xsi\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"xsi=\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"x++==1||\",{\"1\":{\"117\":1}}],[\"x=10\",{\"1\":{\"114\":1}}],[\"x=6\",{\"1\":{\"112\":1}}],[\"x=0\",{\"1\":{\"112\":1,\"117\":1}}],[\"x=\",{\"1\":{\"108\":1,\"117\":1}}],[\"x版本\",{\"1\":{\"81\":1,\"277\":1}}],[\"x\",{\"1\":{\"17\":3,\"224\":6,\"295\":8,\"311\":2,\"312\":2,\"320\":1,\"478\":6,\"558\":8,\"625\":3,\"686\":1}}],[\"xxxdao\",{\"1\":{\"564\":2}}],[\"xxxservice\",{\"1\":{\"564\":2,\"566\":5}}],[\"xxxcontroller\",{\"1\":{\"564\":2,\"566\":2}}],[\"xxx这样的列名自动映射到xxxxx这样驼峰式命名的属性名\",{\"1\":{\"513\":1}}],[\"xxx一般取表名\",{\"1\":{\"493\":1}}],[\"xxxmapper\",{\"1\":{\"493\":1}}],[\"xxxx\",{\"1\":{\"247\":3,\"248\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"xxx\",{\"1\":{\"7\":1,\"8\":1,\"472\":3,\"478\":1,\"485\":1}}],[\"作者名字\",{\"1\":{\"107\":1}}],[\"作为et5的姐妹车型\",{\"1\":{\"651\":1}}],[\"作为北京地区气象观测代表站的南郊观象台气温突破40℃\",{\"1\":{\"651\":1}}],[\"作为\",{\"1\":{\"549\":1}}],[\"作为字符串类型主键\",{\"1\":{\"512\":1}}],[\"作为前缀\",{\"1\":{\"330\":1}}],[\"作为函数式接口的实例\",{\"1\":{\"17\":1}}],[\"作为接口的实例\",{\"1\":{\"17\":1}}],[\"作用等于\",{\"1\":{\"588\":1}}],[\"作用就是表示单链表的头\",{\"1\":{\"370\":1}}],[\"作用就是表示单链表表头\",{\"1\":{\"370\":1}}],[\"作用域部分中指定的任何标准作用域\",{\"1\":{\"573\":1}}],[\"作用域测试\",{\"1\":{\"560\":1}}],[\"作用域配置\",{\"1\":{\"560\":1,\"565\":1}}],[\"作用域可选值\",{\"1\":{\"560\":1,\"565\":1}}],[\"作用域\",{\"1\":{\"237\":1}}],[\"作用域和周期方法注解\",{\"0\":{\"565\":1},\"1\":{\"542\":1}}],[\"作用域和周期方法配置\",{\"0\":{\"560\":1},\"1\":{\"542\":1}}],[\"作用域和周期方法\",{\"0\":{\"232\":1}}],[\"作用范围\",{\"1\":{\"59\":1}}],[\"作用\",{\"1\":{\"6\":1,\"8\":1,\"45\":1,\"68\":1,\"69\":1,\"79\":1,\"94\":1,\"97\":1,\"295\":1,\"415\":1,\"452\":1,\"485\":1}}],[\"格式的配置文件创建ioc容器对象\",{\"1\":{\"221\":1}}],[\"格式的配置文件创建\",{\"1\":{\"221\":3,\"552\":2}}],[\"格式化字符\",{\"0\":{\"318\":1}}],[\"格式化\",{\"1\":{\"163\":1}}],[\"格式化输出保留两位小数\",{\"1\":{\"108\":1}}],[\"格式为\",{\"1\":{\"132\":1}}],[\"格式key\",{\"1\":{\"63\":1,\"64\":1}}],[\"格式6\",{\"1\":{\"17\":1}}],[\"格式5\",{\"1\":{\"17\":1}}],[\"格式4\",{\"1\":{\"17\":1}}],[\"格式3\",{\"1\":{\"17\":1}}],[\"格式2\",{\"1\":{\"17\":1}}],[\"格式1\",{\"1\":{\"17\":1}}],[\"格式\",{\"1\":{\"17\":1,\"39\":1,\"126\":1,\"139\":1,\"140\":1,\"141\":2,\"142\":2,\"143\":1,\"144\":5,\"145\":1,\"146\":2,\"155\":1,\"325\":1,\"365\":1,\"398\":2,\"442\":2}}],[\"开箱即用\",{\"1\":{\"662\":1}}],[\"开始清理\",{\"1\":{\"412\":1}}],[\"开始接口允许定义静态方法\",{\"1\":{\"144\":1}}],[\"开始\",{\"1\":{\"141\":1,\"142\":1,\"306\":1}}],[\"开启会降低性能\",{\"1\":{\"677\":2}}],[\"开启静态资源\",{\"1\":{\"626\":1}}],[\"开启默认处理器\",{\"1\":{\"626\":1}}],[\"开启aspect\",{\"1\":{\"627\":1}}],[\"开启aspectj框架注解支持\",{\"1\":{\"588\":1}}],[\"开启aspectj注解支持\",{\"1\":{\"588\":1}}],[\"开启aspect注解的支持\",{\"1\":{\"212\":1}}],[\"开启自动映射\",{\"1\":{\"521\":1}}],[\"开启resultmap自动映射\",{\"1\":{\"521\":1,\"628\":2}}],[\"开启logback日志输出\",{\"1\":{\"514\":1,\"628\":2}}],[\"开启驼峰式映射\",{\"1\":{\"514\":1,\"628\":2}}],[\"开启多线程\",{\"1\":{\"192\":1,\"203\":1}}],[\"开启两个线程\",{\"1\":{\"192\":1,\"203\":1}}],[\"开启mybatis的驼峰命名自动映射开关\",{\"1\":{\"81\":1}}],[\"开启事务注解支持\",{\"1\":{\"627\":1}}],[\"开启事务\",{\"1\":{\"5\":1,\"97\":3,\"216\":1,\"243\":1,\"244\":1,\"592\":2,\"602\":1,\"604\":1}}],[\"开启事事务\",{\"1\":{\"5\":1}}],[\"开发步骤\",{\"1\":{\"664\":1}}],[\"开发提供更快速\",{\"1\":{\"662\":1}}],[\"开发提供了一站式的解决方案\",{\"1\":{\"549\":1}}],[\"开发中\",{\"1\":{\"558\":1}}],[\"开发团队一直在不断创新和发展\",{\"1\":{\"549\":1}}],[\"开发人员可以方便地引入和配置应用程序所需的功能\",{\"1\":{\"665\":1}}],[\"开发人员可以轻松地选择自己需要的模块\",{\"1\":{\"549\":1}}],[\"开发人员可能需要更多的控制权和自由度\",{\"1\":{\"545\":1}}],[\"开发效率\",{\"1\":{\"492\":1}}],[\"开发效率稍逊于\",{\"1\":{\"492\":1}}],[\"开发效率高\",{\"1\":{\"492\":1}}],[\"开发效率低\",{\"1\":{\"492\":1}}],[\"开发者可以将配置类与启动类合并在一起\",{\"1\":{\"665\":1}}],[\"开发者可以更快地实现项目的各种要求\",{\"1\":{\"545\":1}}],[\"开发者在使用框架是直接调用封装好的api可以省去很多代码编写\",{\"1\":{\"545\":1}}],[\"开发者无需关心具体操作\",{\"1\":{\"460\":1}}],[\"开发者代码主目录\",{\"1\":{\"401\":1,\"445\":1}}],[\"开发者只需要添加配置即可\",{\"1\":{\"243\":1,\"603\":1}}],[\"开发工具包\",{\"1\":{\"106\":1}}],[\"开发工具与jvm带来了大量的新特性\",{\"1\":{\"16\":1}}],[\"开发\",{\"1\":{\"60\":1,\"252\":1,\"549\":2,\"671\":1}}],[\"小鸡炖蘑菇\",{\"1\":{\"655\":1}}],[\"小型\",{\"1\":{\"651\":1}}],[\"小家庭\",{\"1\":{\"651\":1}}],[\"小鹏\",{\"1\":{\"651\":1}}],[\"小鹏g6动态试驾\",{\"1\":{\"651\":1}}],[\"小结\",{\"1\":{\"461\":1}}],[\"小结一下类的权限修饰符\",{\"1\":{\"150\":1}}],[\"小思考\",{\"1\":{\"448\":1}}],[\"小案例\",{\"1\":{\"416\":1}}],[\"小曾\",{\"1\":{\"334\":1}}],[\"小陈\",{\"1\":{\"334\":1}}],[\"小白\",{\"1\":{\"334\":1}}],[\"小猫\",{\"1\":{\"334\":1}}],[\"小\",{\"1\":{\"334\":1}}],[\"小明\",{\"1\":{\"334\":3}}],[\"小明是一个对象\",{\"1\":{\"145\":1}}],[\"小明是一个学生\",{\"1\":{\"145\":1}}],[\"小了会出现乱码\",{\"1\":{\"191\":2,\"202\":2}}],[\"小红\",{\"1\":{\"188\":1}}],[\"小黑替换\",{\"1\":{\"188\":1}}],[\"小黑\",{\"1\":{\"188\":2}}],[\"小米\",{\"1\":{\"187\":1}}],[\"小狗进食\",{\"1\":{\"146\":1}}],[\"小范围可以转为大范围\",{\"1\":{\"146\":1}}],[\"小驼峰\",{\"1\":{\"110\":1}}],[\"小数部分舍弃\",{\"1\":{\"117\":1}}],[\"小数\",{\"1\":{\"38\":1}}],[\"小细节\",{\"1\":{\"28\":1}}],[\"小不忍则乱大谋\",{\"1\":{\"15\":1}}],[\"小处着手\",{\"1\":{\"15\":1}}],[\"透过现象看本质\",{\"1\":{\"15\":1}}],[\"学好数据结构可以编写出更加漂亮\",{\"1\":{\"365\":1}}],[\"学习azure\",{\"1\":{\"640\":1}}],[\"学习aws\",{\"1\":{\"640\":1}}],[\"学习angular\",{\"1\":{\"640\":1}}],[\"学习kubernetes\",{\"1\":{\"640\":1}}],[\"学习koa\",{\"1\":{\"640\":1}}],[\"学习docker\",{\"1\":{\"640\":1}}],[\"学习git\",{\"1\":{\"640\":1}}],[\"学习redis\",{\"1\":{\"640\":1}}],[\"学习react\",{\"1\":{\"640\":1}}],[\"学习mysql\",{\"1\":{\"640\":1}}],[\"学习mongodb\",{\"1\":{\"640\":1}}],[\"学习express\",{\"1\":{\"640\":1}}],[\"学习node\",{\"1\":{\"640\":1}}],[\"学习c++\",{\"1\":{\"640\":1}}],[\"学习css3\",{\"1\":{\"640\":1}}],[\"学习css\",{\"1\":{\"634\":1}}],[\"学习python\",{\"1\":{\"640\":1}}],[\"学习计划修改\",{\"1\":{\"634\":1}}],[\"学习计划保存\",{\"1\":{\"634\":1}}],[\"学习计划删除\",{\"1\":{\"634\":1}}],[\"学习计划分页查询\",{\"1\":{\"634\":1}}],[\"学习vue\",{\"1\":{\"634\":1,\"640\":1}}],[\"学习js\",{\"1\":{\"634\":1}}],[\"学习javascript\",{\"1\":{\"640\":1}}],[\"学习java\",{\"1\":{\"634\":1,\"640\":1}}],[\"学习html5\",{\"1\":{\"640\":1}}],[\"学习html\",{\"1\":{\"634\":1}}],[\"学习成本高\",{\"1\":{\"545\":1}}],[\"学习成本\",{\"1\":{\"537\":1}}],[\"学习路线\",{\"1\":{\"32\":1}}],[\"学习的思维方式\",{\"1\":{\"15\":1}}],[\"学生表\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"学生\",{\"1\":{\"145\":1,\"334\":1}}],[\"学生登录管理系统\",{\"1\":{\"28\":2}}],[\"学生成绩管理系统\",{\"1\":{\"22\":1}}],[\"学号\",{\"1\":{\"11\":1,\"334\":1}}],[\"0+\",{\"1\":{\"663\":2}}],[\"0分6\",{\"1\":{\"651\":1}}],[\"0对应的npm版本过低\",{\"1\":{\"636\":1}}],[\"0对应48\",{\"1\":{\"114\":1}}],[\"0900\",{\"1\":{\"651\":9}}],[\"09\",{\"1\":{\"609\":1,\"651\":36}}],[\"07\",{\"1\":{\"561\":1,\"651\":2}}],[\"02\",{\"1\":{\"423\":1,\"539\":1,\"558\":1,\"562\":1,\"669\":1}}],[\"0a\",{\"1\":{\"412\":1}}],[\"0<\",{\"1\":{\"409\":2,\"415\":1,\"419\":1,\"431\":3,\"432\":1,\"433\":1,\"434\":1,\"447\":2,\"448\":1,\"453\":1,\"456\":6,\"461\":1,\"625\":4,\"655\":1,\"673\":1,\"677\":1}}],[\"03<\",{\"1\":{\"673\":1}}],[\"03\",{\"1\":{\"406\":1}}],[\"06<\",{\"1\":{\"461\":1}}],[\"06\",{\"1\":{\"406\":1,\"539\":1,\"575\":1,\"651\":38}}],[\"0到行首$到行尾\",{\"1\":{\"287\":1}}],[\"0版本开始提供支持\",{\"1\":{\"552\":1}}],[\"0版本\",{\"1\":{\"269\":1}}],[\"0新加入的\",{\"1\":{\"168\":1}}],[\"05t10\",{\"1\":{\"406\":1}}],[\"05\",{\"1\":{\"162\":1}}],[\"08\",{\"1\":{\"162\":1}}],[\"04<\",{\"1\":{\"677\":1}}],[\"04\",{\"1\":{\"162\":3,\"163\":6,\"568\":1,\"651\":2}}],[\"00\",{\"1\":{\"163\":1,\"406\":1,\"651\":2}}],[\"0001\",{\"1\":{\"116\":1}}],[\"0000\",{\"1\":{\"116\":9}}],[\"0011\",{\"1\":{\"116\":1}}],[\"0~65535\",{\"1\":{\"112\":1}}],[\"0xf\",{\"1\":{\"652\":2}}],[\"0x表示十六进制\",{\"1\":{\"112\":1}}],[\"0x\",{\"1\":{\"112\":1}}],[\"0八进制表示\",{\"1\":{\"112\":1}}],[\"0b二进制表示\",{\"1\":{\"112\":1}}],[\"0b\",{\"1\":{\"112\":1}}],[\"0代表失败\",{\"1\":{\"69\":1}}],[\"0的桌面端组件库\",{\"1\":{\"50\":1}}],[\"0和nan为false\",{\"1\":{\"38\":1}}],[\"0\",{\"1\":{\"12\":2,\"21\":2,\"23\":4,\"24\":2,\"26\":5,\"27\":2,\"28\":6,\"29\":4,\"34\":2,\"45\":2,\"58\":1,\"82\":2,\"92\":1,\"112\":2,\"121\":4,\"122\":1,\"124\":4,\"130\":2,\"135\":1,\"146\":1,\"152\":1,\"160\":2,\"169\":1,\"170\":1,\"174\":1,\"175\":2,\"176\":2,\"178\":2,\"181\":3,\"183\":1,\"185\":4,\"186\":2,\"188\":2,\"189\":2,\"191\":5,\"200\":2,\"202\":5,\"211\":2,\"220\":5,\"224\":4,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"242\":2,\"244\":7,\"253\":5,\"254\":1,\"306\":1,\"307\":1,\"317\":2,\"334\":26,\"345\":2,\"353\":8,\"354\":16,\"355\":8,\"356\":8,\"361\":8,\"365\":1,\"366\":15,\"367\":1,\"368\":1,\"370\":1,\"371\":6,\"387\":26,\"398\":3,\"399\":1,\"400\":1,\"406\":1,\"409\":2,\"416\":11,\"418\":8,\"419\":1,\"423\":1,\"425\":5,\"426\":10,\"429\":8,\"431\":10,\"432\":9,\"433\":10,\"434\":10,\"442\":5,\"443\":1,\"444\":1,\"447\":2,\"448\":10,\"452\":13,\"453\":1,\"455\":11,\"456\":37,\"461\":11,\"467\":2,\"480\":1,\"481\":5,\"493\":5,\"514\":4,\"549\":1,\"555\":1,\"557\":1,\"558\":2,\"562\":5,\"564\":2,\"568\":4,\"571\":1,\"572\":1,\"575\":3,\"580\":1,\"582\":2,\"583\":1,\"588\":29,\"606\":7,\"607\":1,\"612\":1,\"625\":33,\"628\":2,\"630\":2,\"634\":1,\"636\":5,\"641\":2,\"651\":45,\"652\":6,\"655\":1,\"656\":2,\"657\":1,\"662\":1,\"664\":1,\"669\":2,\"673\":10,\"677\":11,\"680\":5}}],[\"013\",{\"1\":{\"406\":1}}],[\"0100\",{\"1\":{\"116\":1}}],[\"0101\",{\"1\":{\"116\":1}}],[\"01\",{\"1\":{\"0\":2,\"223\":1,\"224\":3,\"228\":1,\"229\":1,\"557\":4,\"668\":1}}],[\"7万辆\",{\"1\":{\"651\":1}}],[\"7助攻\",{\"1\":{\"651\":2}}],[\"74\",{\"1\":{\"636\":1}}],[\"74<\",{\"1\":{\"334\":1}}],[\"7kw5gt7nq8yuglbbchem0ghank\",{\"1\":{\"334\":1}}],[\"786\",{\"1\":{\"426\":1}}],[\"78\",{\"1\":{\"334\":1}}],[\"70<=score<80\",{\"1\":{\"334\":1}}],[\"777\",{\"1\":{\"493\":1,\"625\":1}}],[\"779\",{\"1\":{\"426\":1}}],[\"77\",{\"1\":{\"178\":1,\"493\":1,\"625\":1}}],[\"799\",{\"1\":{\"334\":1}}],[\"79\",{\"1\":{\"178\":1}}],[\"7个空格\",{\"1\":{\"120\":1}}],[\"7\",{\"0\":{\"427\":1,\"513\":1,\"530\":1,\"593\":1,\"597\":1,\"598\":1,\"599\":1,\"612\":1},\"1\":{\"12\":1,\"108\":1,\"126\":1,\"170\":2,\"176\":2,\"334\":2,\"387\":4,\"440\":1,\"489\":2,\"542\":5,\"562\":1,\"568\":1,\"575\":1,\"584\":1,\"647\":1,\"651\":1,\"652\":1}}],[\"处理请求\",{\"1\":{\"552\":1}}],[\"处理器\",{\"1\":{\"338\":1}}],[\"处理音视频工具\",{\"1\":{\"337\":1}}],[\"处理服务端返回的结果\",{\"1\":{\"253\":1}}],[\"处理流\",{\"1\":{\"181\":1}}],[\"处理的文本文件\",{\"1\":{\"181\":1}}],[\"处理的方式二\",{\"1\":{\"154\":1}}],[\"处理的方式一\",{\"0\":{\"154\":1},\"1\":{\"154\":1}}],[\"处理方式二\",{\"0\":{\"155\":1}}],[\"处理具体的业务逻辑\",{\"1\":{\"71\":1}}],[\"处理发生错误\",{\"1\":{\"64\":2}}],[\"处理已完成\",{\"1\":{\"64\":1}}],[\"处理结果\",{\"1\":{\"12\":1,\"253\":1}}],[\"处理返回结果\",{\"1\":{\"2\":1}}],[\"6分1\",{\"1\":{\"651\":1}}],[\"6月17日\",{\"1\":{\"651\":1}}],[\"6月18日\",{\"1\":{\"651\":1}}],[\"6月24日\",{\"1\":{\"651\":1}}],[\"6月\",{\"1\":{\"651\":1}}],[\"6中引入的一种支持编译时元数据处理的框架\",{\"1\":{\"566\":1}}],[\"6开始\",{\"1\":{\"549\":1}}],[\"618\",{\"1\":{\"651\":1}}],[\"61\",{\"1\":{\"423\":1}}],[\"66\",{\"1\":{\"318\":1,\"325\":2,\"334\":2,\"493\":1,\"512\":1,\"625\":1}}],[\"666\",{\"1\":{\"12\":1,\"493\":1,\"512\":1,\"625\":1}}],[\"6<\",{\"1\":{\"211\":2,\"242\":2,\"244\":6,\"431\":1,\"456\":1,\"557\":1,\"562\":2,\"564\":1,\"568\":2,\"575\":2,\"580\":1,\"582\":2,\"588\":2,\"606\":6,\"625\":1}}],[\"67\",{\"1\":{\"178\":1,\"334\":1}}],[\"69\",{\"1\":{\"178\":1}}],[\"69>>4\",{\"1\":{\"116\":1}}],[\"655行\",{\"1\":{\"621\":1}}],[\"65\",{\"1\":{\"176\":2}}],[\"64\",{\"1\":{\"387\":2}}],[\"64位有符号整数\",{\"1\":{\"112\":1}}],[\"640\",{\"1\":{\"23\":6}}],[\"680\",{\"1\":{\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"60<=score<70\",{\"1\":{\"334\":1}}],[\"60\",{\"1\":{\"197\":3,\"655\":1}}],[\"603\",{\"1\":{\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"60000\",{\"1\":{\"677\":2}}],[\"6000\",{\"1\":{\"334\":1}}],[\"600\",{\"1\":{\"21\":1}}],[\"6\",{\"0\":{\"413\":1,\"426\":1,\"479\":1,\"505\":1,\"512\":1,\"529\":1,\"562\":1,\"575\":1,\"580\":1,\"592\":1,\"596\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":2,\"612\":1,\"630\":1,\"684\":1,\"685\":1,\"686\":1},\"1\":{\"12\":1,\"29\":1,\"34\":1,\"56\":1,\"114\":1,\"124\":3,\"126\":1,\"170\":2,\"305\":1,\"307\":1,\"312\":1,\"316\":4,\"317\":1,\"334\":3,\"375\":2,\"379\":1,\"380\":1,\"387\":24,\"406\":2,\"425\":1,\"426\":2,\"429\":14,\"440\":2,\"455\":12,\"459\":1,\"489\":3,\"542\":18,\"549\":1,\"562\":1,\"568\":1,\"575\":1,\"584\":1,\"588\":32,\"615\":1,\"625\":14,\"628\":1,\"636\":2,\"651\":3,\"652\":1,\"660\":3,\"663\":2}}],[\"5万台\",{\"1\":{\"651\":1}}],[\"5公里无服务门店赔双倍安装费等举措\",{\"1\":{\"651\":1}}],[\"51\",{\"1\":{\"651\":4}}],[\"59\",{\"1\":{\"651\":2}}],[\"5篮板1\",{\"1\":{\"651\":1}}],[\"5分钟\",{\"1\":{\"651\":1}}],[\"5level\",{\"1\":{\"625\":1}}],[\"5中定义一些支持注解\",{\"1\":{\"566\":2}}],[\"5后的版本中都包含该jsr中定义的注解\",{\"1\":{\"566\":1}}],[\"5引入的\",{\"1\":{\"566\":1}}],[\"5版本开始提供支持\",{\"1\":{\"552\":1}}],[\"5871a482\",{\"1\":{\"481\":1}}],[\"56bac0\",{\"1\":{\"480\":1}}],[\"5<\",{\"1\":{\"461\":1,\"652\":1,\"664\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"537\",{\"1\":{\"334\":4,\"353\":2,\"354\":4,\"355\":2,\"356\":2,\"361\":2}}],[\"5之后\",{\"1\":{\"196\":1,\"207\":1}}],[\"5之前\",{\"1\":{\"196\":1,\"207\":1}}],[\"5种状态\",{\"1\":{\"196\":1,\"207\":1}}],[\"5432\",{\"1\":{\"669\":1}}],[\"54\",{\"1\":{\"176\":2}}],[\"55行\",{\"1\":{\"395\":1,\"440\":1}}],[\"55\",{\"1\":{\"176\":2,\"539\":1}}],[\"5xx服务器错误\",{\"1\":{\"64\":1}}],[\"526px\",{\"1\":{\"34\":1}}],[\"505\",{\"1\":{\"652\":1,\"655\":3}}],[\"504\",{\"1\":{\"652\":1,\"655\":1,\"657\":2}}],[\"503\",{\"1\":{\"652\":1,\"655\":1}}],[\"501\",{\"1\":{\"652\":1,\"655\":1}}],[\"50\",{\"1\":{\"26\":3,\"27\":1,\"461\":1,\"514\":2,\"562\":2,\"568\":2,\"575\":2,\"651\":2}}],[\"5000\",{\"1\":{\"651\":1}}],[\"500服务器发生不可预期的错误\",{\"1\":{\"64\":1}}],[\"500\",{\"1\":{\"17\":2,\"26\":2,\"253\":1,\"334\":1,\"640\":1}}],[\"5\",{\"0\":{\"240\":1,\"241\":1,\"242\":1,\"412\":1,\"425\":1,\"455\":1,\"456\":1,\"478\":1,\"480\":1,\"504\":1,\"511\":1,\"515\":1,\"528\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"561\":1,\"568\":1,\"574\":1,\"576\":1,\"577\":1,\"578\":1,\"579\":1,\"582\":1,\"583\":1,\"584\":1,\"585\":1,\"586\":2,\"587\":2,\"588\":2,\"589\":2,\"590\":2,\"591\":3,\"592\":2,\"593\":2,\"594\":2,\"595\":2,\"596\":1,\"597\":1,\"598\":1,\"599\":1,\"610\":1,\"623\":1,\"629\":1,\"671\":1,\"679\":1,\"680\":1,\"681\":1,\"682\":1},\"1\":{\"12\":1,\"23\":3,\"34\":1,\"52\":1,\"116\":4,\"124\":1,\"126\":1,\"139\":1,\"146\":1,\"170\":2,\"183\":1,\"196\":1,\"207\":1,\"219\":1,\"220\":1,\"305\":1,\"307\":1,\"312\":1,\"315\":1,\"316\":2,\"334\":6,\"351\":1,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"371\":1,\"375\":2,\"379\":2,\"380\":1,\"387\":6,\"406\":1,\"425\":1,\"426\":1,\"429\":1,\"436\":2,\"459\":2,\"460\":1,\"461\":3,\"472\":1,\"481\":2,\"484\":2,\"489\":12,\"491\":1,\"493\":2,\"496\":1,\"505\":1,\"508\":4,\"542\":37,\"562\":1,\"568\":1,\"575\":1,\"584\":1,\"588\":6,\"590\":1,\"615\":2,\"625\":6,\"626\":1,\"627\":1,\"628\":1,\"634\":2,\"651\":9,\"652\":2,\"655\":1,\"656\":1,\"657\":1,\"660\":5,\"662\":1,\"677\":2}}],[\"ubxbkc\",{\"1\":{\"544\":1}}],[\"uuid\",{\"1\":{\"512\":6}}],[\"u9fa5\",{\"1\":{\"345\":1}}],[\"u4e00\",{\"1\":{\"345\":1}}],[\"u>\",{\"1\":{\"334\":1}}],[\"uploaded\",{\"1\":{\"426\":2}}],[\"uploading\",{\"1\":{\"426\":2}}],[\"upper\",{\"1\":{\"317\":1,\"334\":1}}],[\"upgrade\",{\"1\":{\"288\":1}}],[\"updateheadline\",{\"1\":{\"657\":2}}],[\"updateauthor\",{\"1\":{\"515\":1}}],[\"updateagebyid\",{\"1\":{\"247\":3,\"248\":1,\"606\":2,\"607\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":2}}],[\"updatetwice\",{\"1\":{\"608\":1}}],[\"updatetest\",{\"1\":{\"514\":1}}],[\"updatetime\",{\"1\":{\"68\":2}}],[\"update>\",{\"1\":{\"504\":1,\"505\":1,\"514\":1,\"526\":1,\"529\":1,\"641\":1}}],[\"updateemployeebatch\",{\"1\":{\"529\":2}}],[\"updateemployeebymap\",{\"1\":{\"505\":3}}],[\"updateemployeedynamic\",{\"1\":{\"526\":2}}],[\"updateemployee\",{\"1\":{\"504\":2}}],[\"updateentity\",{\"1\":{\"465\":1,\"471\":1}}],[\"updateschedule\",{\"1\":{\"641\":2}}],[\"updates\",{\"1\":{\"481\":1}}],[\"updatebyprimarykey\",{\"1\":{\"539\":1}}],[\"updatebyprimarykeyselective\",{\"1\":{\"539\":1}}],[\"updatebyid\",{\"1\":{\"465\":1,\"471\":1,\"484\":3,\"656\":1,\"657\":1}}],[\"updatebatchbyid\",{\"1\":{\"471\":2}}],[\"updatewrapper1\",{\"1\":{\"479\":2}}],[\"updatewrapper<>\",{\"1\":{\"477\":1,\"479\":1}}],[\"updatewrapper<user>\",{\"1\":{\"477\":1,\"479\":1}}],[\"updatewrapper\",{\"1\":{\"465\":1,\"471\":3,\"475\":1,\"477\":3,\"479\":3}}],[\"updatewrapper组装条件\",{\"0\":{\"477\":1},\"1\":{\"459\":1}}],[\"update方法\",{\"0\":{\"465\":1},\"1\":{\"459\":1}}],[\"updatenamebyid\",{\"1\":{\"247\":3,\"248\":1,\"606\":2,\"607\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":2}}],[\"update\",{\"1\":{\"12\":1,\"81\":3,\"288\":1,\"370\":1,\"371\":1,\"460\":1,\"465\":1,\"471\":2,\"476\":2,\"477\":3,\"479\":1,\"481\":1,\"484\":1,\"485\":2,\"504\":1,\"505\":1,\"514\":4,\"515\":6,\"526\":2,\"529\":1,\"562\":1,\"606\":4,\"641\":4,\"651\":18,\"652\":1,\"657\":3,\"681\":2}}],[\"u\",{\"1\":{\"277\":1,\"656\":2}}],[\"uriencoding>\",{\"1\":{\"413\":1}}],[\"uroot\",{\"1\":{\"277\":1}}],[\"url地址\",{\"1\":{\"655\":6,\"656\":3,\"657\":5}}],[\"urlencode应用场景\",{\"1\":{\"354\":1}}],[\"urlencode\",{\"1\":{\"354\":2,\"355\":1,\"361\":1}}],[\"url的组成\",{\"1\":{\"353\":2}}],[\"urlretrieve\",{\"1\":{\"352\":3}}],[\"url代表的是下载的路径\",{\"1\":{\"352\":1}}],[\"urlopen\",{\"1\":{\"351\":2,\"353\":2,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"urllib\",{\"1\":{\"351\":4,\"352\":4,\"353\":4,\"354\":12,\"355\":5,\"356\":4,\"361\":4}}],[\"urllib库使用\",{\"0\":{\"351\":1}}],[\"url1\",{\"1\":{\"334\":1}}],[\"url1=\",{\"1\":{\"334\":2}}],[\"urlpatterns\",{\"1\":{\"93\":1}}],[\"url>\",{\"1\":{\"56\":1,\"395\":1,\"425\":1,\"426\":1,\"427\":1,\"440\":1}}],[\"url中的hash\",{\"1\":{\"52\":1}}],[\"url=url\",{\"1\":{\"352\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1}}],[\"url=jdbc\",{\"1\":{\"76\":1,\"529\":1,\"562\":1,\"606\":1,\"628\":1,\"668\":1}}],[\"url=\",{\"1\":{\"43\":1,\"334\":1,\"668\":1,\"669\":1,\"670\":1}}],[\"url长度有限制的\",{\"1\":{\"34\":1}}],[\"url\",{\"1\":{\"12\":2,\"34\":1,\"43\":3,\"45\":6,\"93\":2,\"95\":2,\"220\":1,\"236\":5,\"244\":4,\"324\":2,\"334\":1,\"351\":4,\"352\":4,\"353\":3,\"354\":6,\"355\":1,\"356\":1,\"361\":3,\"425\":1,\"461\":1,\"493\":1,\"514\":1,\"538\":1,\"562\":4,\"568\":2,\"572\":5,\"575\":3,\"606\":3,\"607\":4,\"628\":6,\"652\":1,\"668\":7,\"669\":8,\"670\":6,\"671\":3,\"677\":1,\"680\":1}}],[\"uvh\",{\"1\":{\"277\":1}}],[\"using\",{\"1\":{\"651\":4,\"665\":2}}],[\"usbmouse\",{\"1\":{\"147\":2}}],[\"usb\",{\"1\":{\"147\":12}}],[\"used\",{\"1\":{\"652\":1,\"655\":2}}],[\"usedevice\",{\"1\":{\"147\":4}}],[\"uses\",{\"1\":{\"558\":1}}],[\"useserverprestmls=true+\",{\"1\":{\"9\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"512\":1,\"514\":1,\"515\":1}}],[\"usegeneratedkeys属性字面意思就是\",{\"1\":{\"512\":1}}],[\"usegeneratedkeys\",{\"1\":{\"81\":1,\"515\":1}}],[\"use\",{\"1\":{\"50\":1,\"231\":2,\"395\":1,\"440\":1,\"460\":1,\"493\":1,\"562\":1,\"564\":2,\"568\":1,\"575\":1,\"625\":1,\"651\":1,\"677\":1}}],[\"usename\",{\"1\":{\"8\":1}}],[\"userinfo\",{\"1\":{\"655\":1}}],[\"userid\",{\"1\":{\"655\":11,\"657\":2}}],[\"user`\",{\"1\":{\"651\":6}}],[\"user1\",{\"1\":{\"484\":3}}],[\"user表的crud呢\",{\"1\":{\"480\":1}}],[\"user>\",{\"1\":{\"470\":1,\"655\":1}}],[\"userlist\",{\"1\":{\"461\":2,\"478\":2,\"514\":3,\"555\":1,\"680\":3}}],[\"user=root\",{\"1\":{\"628\":1}}],[\"user=a\",{\"1\":{\"324\":2}}],[\"user=tom\",{\"1\":{\"34\":1}}],[\"usercontroller\",{\"1\":{\"231\":1,\"655\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"usercontroller2\",{\"1\":{\"231\":1}}],[\"userdao\",{\"1\":{\"224\":10,\"558\":27}}],[\"usermapper接口\",{\"1\":{\"461\":1}}],[\"usermapper\",{\"1\":{\"76\":1,\"80\":1,\"82\":1,\"461\":4,\"467\":2,\"472\":2,\"476\":5,\"477\":2,\"478\":3,\"479\":1,\"480\":1,\"481\":2,\"484\":4,\"514\":29,\"539\":1,\"655\":7,\"680\":6,\"681\":1}}],[\"user是一个类\",{\"1\":{\"68\":2}}],[\"users=\",{\"1\":{\"478\":1}}],[\"userserviceimpl\",{\"1\":{\"233\":2,\"470\":1,\"655\":1}}],[\"userservice\",{\"1\":{\"224\":6,\"470\":2,\"485\":1,\"558\":12,\"590\":1,\"655\":7,\"680\":4}}],[\"userstr\",{\"1\":{\"40\":2}}],[\"users\",{\"1\":{\"28\":2,\"476\":2,\"478\":1,\"588\":7,\"677\":1,\"680\":4}}],[\"userpwd\",{\"1\":{\"11\":4,\"12\":2,\"653\":1,\"655\":6}}],[\"usernameused\",{\"1\":{\"652\":1}}],[\"usernameerror\",{\"1\":{\"652\":1}}],[\"username=zhangsan\",{\"1\":{\"655\":2}}],[\"username=\",{\"1\":{\"514\":1,\"668\":1,\"669\":1,\"670\":1}}],[\"username=root\",{\"1\":{\"76\":1,\"562\":1,\"606\":1,\"668\":1}}],[\"username>\",{\"1\":{\"425\":1}}],[\"username\",{\"1\":{\"11\":4,\"12\":4,\"34\":1,\"68\":1,\"90\":3,\"92\":1,\"220\":1,\"231\":1,\"235\":1,\"236\":3,\"244\":4,\"461\":1,\"476\":8,\"477\":2,\"493\":1,\"512\":2,\"514\":8,\"517\":4,\"562\":4,\"568\":2,\"572\":3,\"575\":3,\"606\":3,\"607\":4,\"651\":4,\"652\":3,\"653\":1,\"655\":14,\"668\":7,\"669\":9,\"670\":6,\"671\":3,\"673\":5,\"677\":1,\"680\":1}}],[\"user\",{\"0\":{\"433\":1},\"1\":{\"8\":1,\"22\":1,\"63\":1,\"68\":6,\"76\":1,\"80\":1,\"81\":10,\"82\":2,\"84\":2,\"85\":2,\"236\":2,\"242\":3,\"251\":1,\"277\":3,\"334\":11,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"395\":1,\"426\":1,\"440\":1,\"456\":1,\"461\":7,\"467\":2,\"472\":2,\"474\":1,\"476\":12,\"477\":8,\"478\":6,\"479\":3,\"480\":8,\"481\":5,\"484\":6,\"485\":6,\"498\":2,\"512\":6,\"514\":41,\"539\":8,\"572\":2,\"580\":3,\"628\":6,\"651\":6,\"653\":1,\"655\":40,\"656\":1,\"657\":1,\"673\":12,\"676\":5,\"677\":7,\"680\":4,\"681\":7}}],[\"utils\",{\"1\":{\"640\":3,\"655\":1}}],[\"util🫙1\",{\"1\":{\"387\":1}}],[\"util🫙0\",{\"1\":{\"387\":1}}],[\"util\",{\"0\":{\"162\":1},\"1\":{\"109\":1,\"126\":1,\"154\":2,\"160\":2,\"162\":1,\"163\":1,\"164\":3,\"170\":4,\"188\":1,\"426\":1,\"478\":3,\"514\":1,\"655\":2}}],[\"utf8mb4\",{\"1\":{\"651\":19}}],[\"utf8\",{\"1\":{\"106\":1}}],[\"utf\",{\"1\":{\"34\":1,\"82\":1,\"220\":2,\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"253\":1,\"317\":2,\"334\":7,\"351\":1,\"353\":2,\"354\":2,\"355\":2,\"356\":2,\"361\":2,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"467\":1,\"493\":2,\"514\":2,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":2,\"628\":1,\"630\":1,\"641\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"unique`\",{\"1\":{\"651\":1}}],[\"unique\",{\"1\":{\"651\":1}}],[\"unicode编码\",{\"1\":{\"106\":1}}],[\"unset\",{\"1\":{\"515\":3}}],[\"unbescape🫙1\",{\"1\":{\"387\":1}}],[\"unbescape\",{\"1\":{\"387\":1}}],[\"uname\",{\"1\":{\"271\":1}}],[\"uncommitted\",{\"1\":{\"248\":1,\"611\":1}}],[\"unknownhostexception\",{\"1\":{\"189\":1,\"200\":1}}],[\"underscore\",{\"1\":{\"81\":1,\"680\":1}}],[\"underfined\",{\"1\":{\"38\":1}}],[\"uid\",{\"1\":{\"651\":4,\"653\":1,\"655\":2,\"656\":1}}],[\"uic\",{\"1\":{\"398\":1,\"442\":1}}],[\"ui\",{\"1\":{\"50\":3}}],[\"uodated\",{\"1\":{\"44\":1}}],[\"ul>\",{\"1\":{\"34\":1,\"334\":1}}],[\"男\",{\"1\":{\"11\":1,\"354\":1,\"562\":6,\"568\":5,\"575\":5,\"673\":1}}],[\"性别=\",{\"1\":{\"11\":1}}],[\"性能监控\",{\"1\":{\"584\":1}}],[\"性能\",{\"1\":{\"537\":1}}],[\"性能配置\",{\"1\":{\"493\":1}}],[\"性能出色\",{\"1\":{\"492\":1}}],[\"性能基本无损耗\",{\"1\":{\"460\":1}}],[\"性能优秀\",{\"1\":{\"10\":1}}],[\"性能更高\",{\"1\":{\"9\":1,\"80\":1}}],[\"并调用其中的方法进行数据库操作\",{\"1\":{\"679\":1}}],[\"并调用一次传入的函数\",{\"1\":{\"40\":1}}],[\"并处理命令行参数\",{\"1\":{\"664\":1}}],[\"并告诉spring\",{\"1\":{\"664\":1}}],[\"并根据时间降序\",{\"1\":{\"656\":1}}],[\"并根据jwt中的声明进行身份验证和授权操作\",{\"1\":{\"655\":1}}],[\"并客户端在后续的请求中将jwt附加在请求头或参数中\",{\"1\":{\"655\":1}}],[\"并大获成功\",{\"1\":{\"651\":1}}],[\"并同现场技术人员亲切交流\",{\"1\":{\"651\":1}}],[\"并有利于未来的可操作性和可维护性\",{\"1\":{\"584\":1}}],[\"并安装\",{\"1\":{\"539\":1}}],[\"并快速上手进行业务开发\",{\"1\":{\"538\":1}}],[\"并允许通过自定义处理程序来拦截和修改\",{\"1\":{\"534\":1}}],[\"并提供了一套可扩展的插件机制\",{\"1\":{\"534\":1}}],[\"并提高开发效率\",{\"1\":{\"474\":1}}],[\"并提高了软件质量和可维护性\",{\"1\":{\"408\":1}}],[\"并非自研\",{\"1\":{\"651\":1}}],[\"并非一件易事\",{\"1\":{\"524\":1}}],[\"并非强制要求\",{\"1\":{\"493\":1}}],[\"并被传递到一个新的预处理语句中\",{\"1\":{\"515\":1}}],[\"并设置到\",{\"1\":{\"512\":1}}],[\"并设置缩放后的图标\",{\"1\":{\"22\":1}}],[\"并在验证成功后创建一个jwt\",{\"1\":{\"655\":1}}],[\"并在执行\",{\"1\":{\"534\":1}}],[\"并在其中\",{\"1\":{\"514\":1}}],[\"并在其中添加\",{\"1\":{\"514\":1}}],[\"并在整个操作过程中保持锁的状态\",{\"1\":{\"483\":1}}],[\"并在新事务中执行\",{\"1\":{\"249\":1,\"612\":1}}],[\"并保证id的生成顺序性\",{\"1\":{\"480\":1}}],[\"并保持返回类型一致\",{\"1\":{\"82\":1}}],[\"并翻页\",{\"1\":{\"466\":2}}],[\"并配置\",{\"1\":{\"461\":1}}],[\"并配置远程登录密码\",{\"1\":{\"277\":1}}],[\"并部署到服务器中运行\",{\"1\":{\"439\":1}}],[\"并检查\",{\"1\":{\"412\":1,\"449\":1}}],[\"并重新打包\",{\"1\":{\"404\":1}}],[\"并重写tostring方法输出name\",{\"1\":{\"176\":1}}],[\"并重写其所有方法\",{\"1\":{\"93\":1,\"94\":1}}],[\"并能够自动化项目的构建和部署\",{\"1\":{\"403\":1}}],[\"并放在新的链表reversehead的最前端\",{\"1\":{\"371\":1}}],[\"并给出提示\",{\"1\":{\"370\":1}}],[\"并赋值给原始的二维数组即可\",{\"1\":{\"365\":1}}],[\"并赋值给该变量\",{\"1\":{\"73\":1}}],[\"并未列举全自行百度\",{\"1\":{\"345\":1}}],[\"并不是所有正则表达式都支持\",{\"1\":{\"345\":1}}],[\"并删除\",{\"1\":{\"345\":1}}],[\"并输入正确的数字\",{\"1\":{\"334\":2}}],[\"并输出到控制台上\",{\"1\":{\"188\":1}}],[\"并以列表的形式返回\",{\"1\":{\"324\":1}}],[\"并以列表形式返回\",{\"1\":{\"322\":1}}],[\"并集\",{\"1\":{\"316\":2}}],[\"并显示\",{\"1\":{\"271\":1}}],[\"并使用缩进表示层级关系\",{\"1\":{\"669\":1}}],[\"并使用注解\",{\"1\":{\"534\":1}}],[\"并使用插件转为web工程\",{\"1\":{\"434\":1}}],[\"并使用其值\",{\"0\":{\"231\":1}}],[\"并使用反序列化对二进制文件polarbear\",{\"1\":{\"188\":1}}],[\"并负责创建这些对象\",{\"1\":{\"221\":1,\"553\":1}}],[\"并通过合适的集成方式协同工作\",{\"1\":{\"619\":1}}],[\"并通过value属性指定生成策略\",{\"1\":{\"480\":1}}],[\"并通过\",{\"1\":{\"408\":1,\"447\":1}}],[\"并通过迭代器的hashnext\",{\"1\":{\"197\":1}}],[\"并通过标准的方法输入或输出数据\",{\"1\":{\"180\":1}}],[\"并发问题场景演示\",{\"1\":{\"483\":1}}],[\"并发\",{\"1\":{\"192\":1,\"203\":1}}],[\"并行\",{\"1\":{\"192\":1,\"203\":1}}],[\"并写入到另一个位置\",{\"1\":{\"185\":1}}],[\"并按name排序\",{\"1\":{\"176\":2}}],[\"并遍历输出\",{\"1\":{\"176\":1}}],[\"并把这些对象放入treeset集合中\",{\"1\":{\"176\":1}}],[\"并把一个或多个方法留给其子类实现\",{\"1\":{\"138\":1}}],[\"并为每一个属性定义getter\",{\"1\":{\"176\":2}}],[\"并列\",{\"1\":{\"154\":1,\"651\":1}}],[\"并将配置和启动类合二为一\",{\"1\":{\"665\":1}}],[\"并将它们纳入spring\",{\"1\":{\"665\":1}}],[\"并将那些影响了多个类的公共行为封装到一个可重用模块\",{\"1\":{\"584\":1}}],[\"并将查询结果转换成实体对象\",{\"1\":{\"537\":1}}],[\"并将其映射到实际的视图页面\",{\"1\":{\"674\":1}}],[\"并将其命名为\",{\"1\":{\"584\":1}}],[\"并将其放在一个字典中\",{\"1\":{\"325\":1}}],[\"并将其转换为\",{\"1\":{\"230\":1,\"561\":1}}],[\"并将其bin目录加入path环境变量\",{\"1\":{\"56\":1}}],[\"并将对象引入存入\",{\"1\":{\"221\":2,\"552\":1}}],[\"并将此对象抛出\",{\"1\":{\"153\":1}}],[\"并加入指定密钥\",{\"1\":{\"92\":1}}],[\"并会删掉额外的逗号\",{\"1\":{\"84\":1}}],[\"并且和application有重叠属性\",{\"1\":{\"671\":1}}],[\"并且确保应用程序在不同环境中具有正确的配置\",{\"1\":{\"671\":1}}],[\"并且把用户数据封装到结果中key\",{\"1\":{\"655\":1}}],[\"并且使用\",{\"1\":{\"628\":1}}],[\"并且使用非常简单\",{\"1\":{\"534\":1}}],[\"并且\",{\"1\":{\"582\":1}}],[\"并且属性名没有对应的组件\",{\"1\":{\"566\":1}}],[\"并且在将来的版本中可能会被删除\",{\"1\":{\"566\":1}}],[\"并且获取和使用的基本步骤\",{\"1\":{\"555\":1}}],[\"并且创建和销毁组件等\",{\"1\":{\"552\":1}}],[\"并且spring框架被广泛应用于java企业开发领域\",{\"1\":{\"547\":1}}],[\"并且动态去掉两端多余的逗号\",{\"1\":{\"526\":1}}],[\"并且开启驼峰式支持\",{\"1\":{\"521\":1}}],[\"并且插入场景下\",{\"1\":{\"507\":1}}],[\"并且需要明确指定\",{\"1\":{\"478\":1}}],[\"并且邮箱不为null的用户信息\",{\"1\":{\"476\":1}}],[\"并且也无法重新下载\",{\"1\":{\"449\":1}}],[\"并且终止依赖传递\",{\"1\":{\"416\":1,\"448\":1}}],[\"并且配置时生成的路径也是由此生成\",{\"1\":{\"409\":1,\"447\":1}}],[\"并且可以减少冗余的标点符号和引号\",{\"1\":{\"669\":1}}],[\"并且可以根据应用程序的需求灵活地创建多种架构\",{\"1\":{\"549\":1}}],[\"并且可以通过链式调用来组合多个条件\",{\"1\":{\"474\":1}}],[\"并且可以任意嵌套\",{\"1\":{\"314\":1}}],[\"并且可以作用在应用的任何层次\",{\"1\":{\"231\":1,\"564\":1}}],[\"并且可以有返回值\",{\"1\":{\"17\":1}}],[\"并且进行赋值\",{\"1\":{\"220\":1,\"493\":1,\"630\":1}}],[\"并且java实现了一个跨平台的网络库\",{\"1\":{\"189\":1,\"200\":1}}],[\"并且提供了大量的方法来操作字符串\",{\"1\":{\"113\":1}}],[\"并且将xml映射文件和mapper接口放置在相同包下\",{\"1\":{\"82\":1}}],[\"并指定输出到控制台\",{\"1\":{\"80\":1}}],[\"并可以自动化生成日志变量\",{\"1\":{\"79\":1}}],[\"并响应数据\",{\"1\":{\"71\":1}}],[\"并添加注解\",{\"1\":{\"61\":1}}],[\"并勾选web开发相关依赖\",{\"1\":{\"61\":1}}],[\"并修改配置文件及本地仓库路径\",{\"1\":{\"57\":1}}],[\"并获取主键值\",{\"1\":{\"514\":1}}],[\"并获取响应结果\",{\"1\":{\"45\":1}}],[\"并获取服务器响应的数据\",{\"1\":{\"45\":1}}],[\"并返回一个\",{\"1\":{\"515\":1}}],[\"并返回一个对象\",{\"1\":{\"295\":1}}],[\"并返回包含这些内容的zip对象\",{\"1\":{\"315\":1}}],[\"并返回对字符串池中的新引用\",{\"1\":{\"165\":1}}],[\"并返回\",{\"1\":{\"92\":1}}],[\"并返回新的长度\",{\"1\":{\"40\":1}}],[\"并返回结果\",{\"1\":{\"17\":1}}],[\"并打印返回的值\",{\"1\":{\"11\":1}}],[\"并传入对应的sql语句\",{\"1\":{\"8\":1}}],[\"课程使用springboot版本\",{\"1\":{\"662\":1}}],[\"课程node版本\",{\"1\":{\"636\":1}}],[\"课程版本\",{\"1\":{\"460\":1}}],[\"课程号\",{\"1\":{\"11\":1}}],[\"课后练习\",{\"1\":{\"366\":1}}],[\"课件连接\",{\"1\":{\"0\":1}}],[\"是何方神圣\",{\"1\":{\"665\":1}}],[\"是多表查询\",{\"1\":{\"656\":1}}],[\"是多态的前提\",{\"1\":{\"145\":1}}],[\"是具体可以生成\",{\"1\":{\"655\":1}}],[\"是意料之中\",{\"1\":{\"651\":1}}],[\"是全球最大的模块生态系统\",{\"1\":{\"636\":1}}],[\"是全局变量\",{\"1\":{\"38\":1}}],[\"是node\",{\"1\":{\"636\":1}}],[\"是前端依赖包管理工具\",{\"1\":{\"636\":1}}],[\"是前端程序运行的服务器\",{\"1\":{\"636\":1}}],[\"是加入\",{\"1\":{\"612\":1}}],[\"是我们之前编写切点表达式的方式\",{\"1\":{\"591\":1}}],[\"是实现aop思维编程的具体技术\",{\"1\":{\"585\":1}}],[\"是实现java\",{\"1\":{\"566\":1}}],[\"是现在主流配置方式\",{\"1\":{\"575\":1}}],[\"是使用您提供给容器的配置元数据创建的\",{\"1\":{\"557\":1}}],[\"是spring框架最早的配置方式之一\",{\"1\":{\"552\":1}}],[\"是其他子项目的基础\",{\"1\":{\"547\":1}}],[\"是半自动\",{\"1\":{\"538\":1}}],[\"是必须设置的\",{\"1\":{\"515\":1}}],[\"是列名或者关键字\",{\"1\":{\"498\":1}}],[\"是链式存储\",{\"1\":{\"370\":1}}],[\"是不会拼接在url的后面的\",{\"1\":{\"355\":1}}],[\"是不行的\",{\"1\":{\"130\":1}}],[\"是指通过\",{\"1\":{\"570\":1}}],[\"是指\",{\"1\":{\"398\":1,\"442\":1}}],[\"是指向实例本身的引用\",{\"1\":{\"327\":1}}],[\"是指在组件之间传递依赖关系的过程中\",{\"1\":{\"221\":1,\"553\":1}}],[\"是返回true否则返回false\",{\"1\":{\"317\":1}}],[\"是分为主轴和侧轴两个方向\",{\"1\":{\"257\":1}}],[\"是xhr对象中的属性\",{\"1\":{\"253\":1}}],[\"是\",{\"1\":{\"221\":1,\"228\":1,\"230\":2,\"493\":1,\"524\":1,\"534\":1,\"535\":1,\"552\":2,\"560\":1,\"561\":2,\"565\":1}}],[\"是通过容器调用具有多个参数的构造函数来完成的\",{\"1\":{\"558\":2}}],[\"是通过辅助变量\",{\"1\":{\"370\":1}}],[\"是通过\",{\"1\":{\"221\":1,\"553\":1}}],[\"是程序内部的一条执行路径\",{\"1\":{\"192\":1,\"203\":1}}],[\"是两台机器间通信的端点\",{\"1\":{\"190\":1,\"201\":1}}],[\"是按照添加进去的顺序遍历的\",{\"1\":{\"173\":1}}],[\"是按添加的顺序遍历的\",{\"1\":{\"169\":1}}],[\"是jdk5\",{\"1\":{\"168\":1}}],[\"是java注解最早的规范化版本\",{\"1\":{\"566\":1}}],[\"是java平台标准化进程中的一种技术规范\",{\"1\":{\"566\":1}}],[\"是javaweb三大组件\",{\"1\":{\"93\":1}}],[\"是java语言最好的数据库连接池之一\",{\"1\":{\"10\":1}}],[\"是1就补1\",{\"1\":{\"116\":1}}],[\"是0就补0\",{\"1\":{\"116\":1}}],[\"是一款优秀的持久层框架\",{\"1\":{\"491\":1}}],[\"是一款为\",{\"1\":{\"390\":1,\"438\":1}}],[\"是一款用于管理和构建java项目的工具\",{\"1\":{\"55\":1}}],[\"是一个组合注解\",{\"1\":{\"665\":1}}],[\"是一个表达式\",{\"1\":{\"584\":1}}],[\"是一个高级工厂的接口\",{\"1\":{\"555\":1}}],[\"是一个开源的应用程序框架\",{\"1\":{\"547\":1}}],[\"是一个开源免费的轻量级web服务器\",{\"1\":{\"65\":1}}],[\"是一个集成了基本结构\",{\"1\":{\"545\":1}}],[\"是一个\",{\"1\":{\"460\":1,\"539\":1}}],[\"是一个强大的构建工具\",{\"1\":{\"401\":1,\"445\":1}}],[\"是一个默认的装配目标\",{\"1\":{\"237\":1,\"573\":1}}],[\"是一个类\",{\"1\":{\"211\":1,\"584\":1}}],[\"是一个entry\",{\"1\":{\"177\":1}}],[\"是一种基于层次结构的数据序列化格式\",{\"1\":{\"669\":1}}],[\"是一种基于64个可打印字符\",{\"1\":{\"92\":1}}],[\"是一种用于指定切点的语言\",{\"1\":{\"590\":1}}],[\"是一种用于生成唯一id的算法\",{\"1\":{\"480\":1}}],[\"是一种编程范式\",{\"1\":{\"584\":1}}],[\"是一种将数据库和面向对象编程语言中的对象之间进行转换的技术\",{\"1\":{\"537\":1}}],[\"是一种能够生产其他\",{\"1\":{\"230\":1,\"561\":1}}],[\"是一种横向的操作思维\",{\"1\":{\"211\":1}}],[\"是一种二进制文件\",{\"1\":{\"106\":1}}],[\"是一种动态拦截方法调用的机制\",{\"1\":{\"94\":1}}],[\"是否缓存preparedstatement\",{\"1\":{\"677\":1}}],[\"是否为数据库表字段\",{\"1\":{\"480\":1}}],[\"是否有下一页\",{\"1\":{\"472\":1}}],[\"是否有上一页\",{\"1\":{\"472\":1}}],[\"是否能够传递到\",{\"1\":{\"415\":1}}],[\"是否候选用于自动装配\",{\"1\":{\"237\":1,\"573\":1}}],[\"是否参与打包运行\",{\"1\":{\"59\":1}}],[\"是否可以为null\",{\"1\":{\"11\":1}}],[\"是饿了么团队研发的\",{\"1\":{\"50\":1}}],[\"是用来控制网页行为的\",{\"1\":{\"37\":1}}],[\"是华特迪士尼世界度假区的主题公园\",{\"1\":{\"34\":1}}],[\"+e\",{\"1\":{\"583\":1}}],[\"+entry\",{\"1\":{\"177\":1}}],[\"+methodname+\",{\"1\":{\"589\":2}}],[\"+method\",{\"1\":{\"583\":4}}],[\"+map\",{\"1\":{\"177\":1}}],[\"+page\",{\"1\":{\"472\":6}}],[\"+heronode\",{\"1\":{\"370\":1,\"371\":1}}],[\"+1\",{\"1\":{\"370\":1,\"656\":1}}],[\"+1是因为相等的不用比较\",{\"1\":{\"126\":1}}],[\"+匹配多层域名的情况\",{\"1\":{\"346\":1}}],[\"+匹配一个或多个字符\",{\"1\":{\"346\":1}}],[\"+query+\",{\"1\":{\"334\":1}}],[\"+value+\",{\"1\":{\"328\":1}}],[\"+id\",{\"1\":{\"229\":1}}],[\"+str\",{\"1\":{\"192\":1,\"203\":1,\"325\":3,\"327\":1,\"334\":3}}],[\"+a2\",{\"1\":{\"188\":1}}],[\"+age\",{\"1\":{\"68\":2,\"135\":1}}],[\"+2\",{\"1\":{\"164\":1}}],[\"+n\",{\"1\":{\"124\":2}}],[\"+name+\",{\"1\":{\"135\":1,\"325\":2}}],[\"+name\",{\"1\":{\"68\":1}}],[\"+y\",{\"1\":{\"117\":1}}],[\"+x+\",{\"1\":{\"117\":1}}],[\"+=\",{\"1\":{\"38\":1}}],[\"++x==y\",{\"1\":{\"117\":1}}],[\"++\",{\"1\":{\"38\":1}}],[\"+rs\",{\"1\":{\"11\":3}}],[\"+\",{\"1\":{\"11\":11,\"38\":1,\"43\":1,\"90\":1,\"92\":2,\"100\":2,\"114\":2,\"127\":1,\"130\":8,\"138\":1,\"155\":2,\"165\":3,\"176\":18,\"177\":2,\"178\":2,\"187\":8,\"188\":5,\"192\":1,\"203\":1,\"220\":1,\"231\":1,\"233\":1,\"237\":1,\"242\":1,\"325\":3,\"327\":1,\"346\":1,\"347\":1,\"354\":2,\"367\":1,\"368\":2,\"370\":12,\"371\":11,\"472\":4,\"476\":2,\"477\":3,\"478\":1,\"479\":1,\"493\":1,\"505\":1,\"508\":1,\"510\":2,\"511\":1,\"512\":1,\"514\":3,\"518\":1,\"519\":3,\"535\":6,\"561\":2,\"562\":18,\"564\":2,\"566\":1,\"568\":15,\"575\":15,\"579\":1,\"582\":20,\"583\":10,\"588\":2,\"589\":8,\"592\":10,\"621\":4,\"628\":1,\"652\":2,\"655\":8,\"668\":13,\"669\":13,\"670\":15,\"680\":9,\"682\":1}}],[\"列不可再分\",{\"1\":{\"341\":1}}],[\"列出所有已添加的端口\",{\"1\":{\"276\":1}}],[\"列出所有规则\",{\"1\":{\"276\":1}}],[\"列出这个文件下的所有文件\",{\"1\":{\"182\":1}}],[\"列表不能作为字典的键\",{\"1\":{\"313\":1}}],[\"列表和元组支持切片\",{\"1\":{\"313\":1}}],[\"列表和字符串不能相加\",{\"1\":{\"305\":1}}],[\"列表可以使用append\",{\"1\":{\"313\":1}}],[\"列表属于可变序列\",{\"1\":{\"313\":1}}],[\"列表推导式\",{\"1\":{\"311\":1}}],[\"列表末尾追加\",{\"1\":{\"309\":1}}],[\"列表的操作\",{\"0\":{\"308\":1}}],[\"列表中的所有元素都放在一对中括号\",{\"1\":{\"307\":1}}],[\"列表与元组\",{\"0\":{\"305\":1}}],[\"列表进行动态设置时使用\",{\"1\":{\"81\":1}}],[\"列表渲染\",{\"1\":{\"43\":1}}],[\"列表\",{\"0\":{\"307\":1},\"1\":{\"34\":1,\"307\":1,\"334\":2,\"464\":1,\"466\":1}}],[\"列名=属性名\",{\"1\":{\"521\":1}}],[\"列名\",{\"1\":{\"11\":1,\"476\":1,\"478\":1}}],[\"列的名称\",{\"1\":{\"7\":1}}],[\"列的编号从1开始\",{\"1\":{\"7\":1}}],[\"omitted\",{\"1\":{\"558\":1}}],[\"o3\",{\"1\":{\"517\":1}}],[\"oceanbase\",{\"1\":{\"460\":1}}],[\"oct\",{\"1\":{\"295\":1}}],[\"octet\",{\"1\":{\"283\":1}}],[\"o给了一个waring\",{\"1\":{\"338\":1}}],[\"o发现变短了\",{\"1\":{\"338\":1}}],[\"oop引入封装\",{\"1\":{\"584\":1}}],[\"oobjdump\",{\"1\":{\"338\":1}}],[\"oos\",{\"1\":{\"187\":13,\"188\":4}}],[\"oip\",{\"1\":{\"334\":1}}],[\"ois\",{\"1\":{\"187\":9,\"188\":3}}],[\"ount\",{\"1\":{\"323\":1}}],[\"outlook和word等\",{\"1\":{\"651\":1}}],[\"outer\",{\"1\":{\"517\":5}}],[\"outputencoding>\",{\"1\":{\"410\":1,\"447\":1}}],[\"outputencoding>utf\",{\"1\":{\"410\":1,\"447\":1}}],[\"outputstream|fileoutputstream\",{\"1\":{\"181\":1}}],[\"outputstream\",{\"1\":{\"181\":1,\"191\":2,\"192\":4,\"202\":2,\"203\":4}}],[\"out发现真的执行了\",{\"1\":{\"338\":1}}],[\"out查看\",{\"1\":{\"338\":1}}],[\"out\",{\"1\":{\"11\":7,\"12\":1,\"16\":8,\"17\":14,\"26\":1,\"27\":5,\"28\":8,\"29\":2,\"61\":1,\"68\":8,\"90\":1,\"92\":2,\"100\":1,\"108\":4,\"109\":1,\"112\":1,\"114\":1,\"116\":4,\"117\":5,\"119\":2,\"121\":8,\"122\":2,\"124\":3,\"126\":1,\"127\":3,\"130\":5,\"135\":1,\"138\":2,\"145\":9,\"146\":8,\"147\":9,\"149\":3,\"150\":1,\"151\":4,\"154\":3,\"160\":1,\"162\":3,\"163\":4,\"164\":3,\"165\":6,\"170\":20,\"176\":2,\"177\":6,\"178\":1,\"182\":1,\"183\":3,\"186\":1,\"187\":3,\"188\":1,\"189\":4,\"191\":4,\"192\":2,\"194\":3,\"197\":5,\"200\":4,\"202\":4,\"203\":2,\"205\":3,\"212\":3,\"213\":1,\"216\":3,\"220\":1,\"242\":1,\"338\":6,\"366\":9,\"367\":3,\"368\":11,\"370\":9,\"371\":7,\"461\":2,\"472\":11,\"476\":5,\"477\":2,\"478\":7,\"479\":1,\"493\":1,\"514\":5,\"535\":7,\"557\":1,\"560\":2,\"561\":2,\"562\":4,\"566\":2,\"568\":1,\"573\":1,\"575\":1,\"580\":1,\"582\":8,\"583\":6,\"588\":4,\"589\":6,\"591\":4,\"594\":1,\"596\":1,\"606\":1,\"607\":1,\"609\":1,\"628\":1,\"655\":7,\"668\":1,\"669\":1,\"670\":2,\"676\":3,\"682\":2}}],[\"os\",{\"1\":{\"191\":9,\"202\":9}}],[\"osi参考模型\",{\"1\":{\"189\":1,\"200\":1}}],[\"o\",{\"1\":{\"174\":3,\"176\":3,\"317\":5,\"334\":1,\"338\":2,\"518\":3,\"519\":3}}],[\"oldfile\",{\"1\":{\"188\":4}}],[\"oldval\",{\"1\":{\"180\":1}}],[\"old\",{\"1\":{\"166\":1,\"298\":1,\"311\":2,\"491\":1}}],[\"oldchar\",{\"1\":{\"166\":1}}],[\"ol>\",{\"1\":{\"34\":1,\"334\":1}}],[\"otherwise>\",{\"1\":{\"528\":1}}],[\"otherwise标签\",{\"0\":{\"528\":1},\"1\":{\"489\":1}}],[\"otherstart\",{\"1\":{\"166\":1}}],[\"other\",{\"1\":{\"166\":1,\"176\":8}}],[\"overload\",{\"1\":{\"137\":1}}],[\"override写在方法前面\",{\"1\":{\"137\":1}}],[\"override\",{\"1\":{\"16\":1,\"17\":3,\"26\":1,\"27\":5,\"28\":9,\"29\":1,\"93\":3,\"94\":4,\"137\":1,\"145\":3,\"147\":2,\"151\":3,\"155\":1,\"174\":1,\"175\":1,\"176\":9,\"187\":2,\"188\":1,\"194\":1,\"205\":1,\"229\":2,\"370\":1,\"371\":1,\"478\":1,\"561\":2,\"562\":3,\"566\":1,\"568\":3,\"575\":3,\"582\":8,\"583\":2,\"588\":4,\"623\":3,\"626\":1,\"629\":3,\"630\":1,\"641\":4,\"655\":4,\"656\":2,\"657\":5,\"668\":1,\"669\":1,\"670\":1,\"676\":4,\"680\":1}}],[\"ognl\",{\"1\":{\"524\":1}}],[\"og\",{\"1\":{\"92\":1}}],[\"oftype\",{\"1\":{\"519\":1}}],[\"oftype属性\",{\"1\":{\"519\":1,\"522\":1}}],[\"oftype=\",{\"1\":{\"517\":3,\"519\":1,\"521\":1}}],[\"off\",{\"1\":{\"412\":1}}],[\"of\",{\"1\":{\"72\":1,\"164\":4,\"221\":1,\"485\":1,\"553\":1,\"621\":1,\"651\":3}}],[\"ok\",{\"1\":{\"68\":8,\"252\":1,\"334\":1,\"412\":2,\"640\":1,\"641\":4,\"652\":1,\"655\":4,\"656\":4,\"657\":5}}],[\"operation\",{\"1\":{\"485\":1}}],[\"opentest4j\",{\"1\":{\"588\":6}}],[\"open属性\",{\"1\":{\"529\":1}}],[\"openfeign🫙2\",{\"1\":{\"387\":1}}],[\"openfeign\",{\"1\":{\"387\":6}}],[\"open方法默认情况下使用的是gbk的编码\",{\"1\":{\"356\":1}}],[\"opens\",{\"1\":{\"460\":2,\"462\":1,\"468\":1}}],[\"openssh\",{\"1\":{\"285\":1}}],[\"opensession\",{\"1\":{\"220\":1,\"493\":1,\"505\":1,\"514\":1,\"518\":1,\"628\":1}}],[\"open=\",{\"1\":{\"85\":1,\"529\":1}}],[\"open\",{\"1\":{\"45\":1,\"85\":1,\"147\":4,\"253\":1,\"254\":1,\"334\":6,\"356\":1}}],[\"optimisticlockerinnerinterceptor\",{\"1\":{\"484\":1,\"652\":1}}],[\"option\",{\"1\":{\"277\":1}}],[\"options\",{\"1\":{\"81\":1}}],[\"option>\",{\"1\":{\"34\":3}}],[\"optional>\",{\"1\":{\"415\":1}}],[\"optional\",{\"1\":{\"16\":1}}],[\"objdump\",{\"1\":{\"338\":1}}],[\"obj\",{\"1\":{\"28\":5,\"145\":7,\"151\":4,\"170\":7,\"171\":5,\"174\":1,\"176\":10,\"177\":8,\"178\":3,\"181\":1,\"187\":2,\"309\":1,\"311\":2,\"355\":2,\"361\":2}}],[\"objectmapper\",{\"1\":{\"657\":4}}],[\"objectfactory\",{\"1\":{\"496\":1}}],[\"objectinputstream\",{\"1\":{\"187\":4,\"188\":2}}],[\"objectinputstream和objectoutputstream\",{\"1\":{\"187\":1}}],[\"objectoutputstream\",{\"1\":{\"187\":4,\"188\":2}}],[\"objects\",{\"1\":{\"176\":6,\"491\":1}}],[\"object类是所有类的公共最高类\",{\"1\":{\"137\":1}}],[\"object>>\",{\"1\":{\"466\":2,\"471\":2,\"476\":1,\"510\":1}}],[\"object>\",{\"1\":{\"92\":1,\"464\":2,\"466\":2,\"471\":3,\"505\":2,\"510\":4,\"656\":3,\"657\":1}}],[\"object\",{\"1\":{\"26\":1,\"28\":1,\"40\":2,\"69\":1,\"71\":1,\"91\":1,\"94\":3,\"95\":1,\"100\":2,\"166\":1,\"170\":6,\"171\":11,\"174\":2,\"175\":2,\"176\":5,\"177\":13,\"178\":3,\"180\":8,\"211\":1,\"213\":3,\"215\":1,\"216\":3,\"471\":3,\"508\":4,\"510\":1,\"534\":2,\"537\":1,\"561\":1,\"583\":7,\"584\":1,\"589\":2,\"591\":1,\"592\":3,\"640\":5,\"657\":1,\"676\":3}}],[\"once\",{\"1\":{\"460\":1}}],[\"onclick\",{\"1\":{\"41\":1,\"253\":1}}],[\"onclick=function\",{\"1\":{\"41\":1}}],[\"onclick=\",{\"1\":{\"41\":1}}],[\"one\",{\"1\":{\"269\":1,\"544\":1}}],[\"only\",{\"1\":{\"608\":1}}],[\"online\",{\"1\":{\"192\":4,\"203\":4}}],[\"onload\",{\"1\":{\"41\":1}}],[\"onreadystatechange\",{\"1\":{\"45\":1,\"253\":1}}],[\"onmouseout\",{\"1\":{\"41\":1}}],[\"onmouseover\",{\"1\":{\"41\":1}}],[\"onkyrdown\",{\"1\":{\"41\":1}}],[\"onsubmit\",{\"1\":{\"41\":1}}],[\"onfocus\",{\"1\":{\"41\":1}}],[\"onblur\",{\"1\":{\"41\":1}}],[\"on\",{\"1\":{\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1,\"41\":2,\"43\":3,\"192\":2,\"203\":2,\"253\":1,\"277\":3,\"286\":1,\"517\":7,\"518\":1,\"519\":1,\"656\":2,\"677\":2}}],[\"oracle中为\",{\"1\":{\"677\":1}}],[\"oracle\",{\"1\":{\"460\":2,\"512\":1,\"534\":1,\"628\":2}}],[\"oracle的jdbc驱动等\",{\"1\":{\"421\":1}}],[\"oracle1521\",{\"1\":{\"353\":1}}],[\"ord\",{\"1\":{\"295\":1}}],[\"ordermapper\",{\"1\":{\"518\":7,\"519\":1}}],[\"ordermapper接口\",{\"1\":{\"518\":1}}],[\"order`\",{\"1\":{\"517\":4}}],[\"orderlist\",{\"1\":{\"517\":2,\"519\":3}}],[\"ordername\",{\"1\":{\"517\":3,\"518\":1,\"519\":1}}],[\"orderid\",{\"1\":{\"517\":3,\"518\":4,\"519\":1}}],[\"orderbyasc\",{\"1\":{\"476\":1}}],[\"orderbydesc\",{\"1\":{\"476\":1,\"478\":2}}],[\"order属性定义项目排列顺序\",{\"1\":{\"265\":1}}],[\"order属性定义子项的排列顺序\",{\"1\":{\"263\":1}}],[\"order=\",{\"1\":{\"219\":1,\"512\":1}}],[\"order\",{\"0\":{\"434\":1},\"1\":{\"0\":1,\"1\":1,\"58\":1,\"81\":2,\"82\":1,\"84\":1,\"217\":3,\"456\":1,\"476\":1,\"517\":3,\"518\":13,\"519\":10,\"593\":3,\"676\":1}}],[\"or\",{\"1\":{\"292\":1,\"294\":1,\"334\":3,\"476\":2,\"477\":2,\"525\":4,\"527\":1,\"663\":2}}],[\"orm思维介绍\",{\"0\":{\"537\":1},\"1\":{\"489\":1}}],[\"orm\",{\"1\":{\"243\":1,\"537\":16,\"538\":1,\"604\":1}}],[\"origin\",{\"1\":{\"252\":1}}],[\"originalheight\",{\"1\":{\"22\":2}}],[\"originalwidth\",{\"1\":{\"22\":2}}],[\"originalimage\",{\"1\":{\"22\":4}}],[\"originalicon\",{\"1\":{\"22\":2}}],[\"oriented\",{\"1\":{\"211\":1,\"584\":2}}],[\"org\",{\"1\":{\"82\":2,\"97\":1,\"220\":4,\"224\":4,\"226\":1,\"228\":4,\"229\":4,\"231\":9,\"235\":3,\"236\":7,\"238\":2,\"248\":4,\"387\":50,\"390\":1,\"393\":1,\"431\":5,\"432\":4,\"433\":4,\"434\":4,\"438\":1,\"440\":1,\"456\":16,\"461\":5,\"467\":2,\"480\":1,\"491\":1,\"493\":4,\"508\":1,\"514\":10,\"555\":4,\"559\":1,\"562\":16,\"564\":9,\"566\":1,\"567\":2,\"568\":8,\"571\":10,\"572\":7,\"573\":2,\"588\":32,\"609\":6,\"611\":4,\"612\":1,\"625\":6,\"628\":5,\"630\":2,\"636\":3,\"641\":2,\"652\":1,\"655\":4,\"664\":4,\"668\":2,\"669\":2,\"670\":2,\"673\":8,\"675\":1,\"676\":7,\"677\":5,\"680\":3}}],[\"organization\",{\"1\":{\"34\":1}}],[\"o2\",{\"1\":{\"16\":4,\"17\":8,\"175\":3,\"176\":3,\"178\":3,\"517\":1}}],[\"o1\",{\"1\":{\"16\":4,\"17\":8,\"175\":3,\"176\":3,\"178\":3,\"224\":1,\"517\":1}}],[\"v16\",{\"1\":{\"636\":2}}],[\"v1版本号\",{\"1\":{\"107\":1}}],[\"v>\",{\"1\":{\"471\":3}}],[\"vector\",{\"1\":{\"169\":1}}],[\"verbose\",{\"1\":{\"320\":1,\"338\":2}}],[\"version注解\",{\"1\":{\"484\":1}}],[\"version+\",{\"1\":{\"483\":1}}],[\"version版本号格式推荐\",{\"1\":{\"398\":1,\"442\":1}}],[\"version=\",{\"1\":{\"82\":1,\"220\":2,\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"467\":1,\"493\":2,\"514\":2,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":2,\"628\":1,\"630\":1,\"641\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"version>3\",{\"1\":{\"625\":3}}],[\"version>8\",{\"1\":{\"625\":2}}],[\"version>9\",{\"1\":{\"625\":1}}],[\"version>1\",{\"1\":{\"456\":1,\"625\":3}}],[\"version>5\",{\"1\":{\"431\":1,\"625\":1}}],[\"version>2\",{\"1\":{\"431\":2,\"456\":2,\"625\":2}}],[\"version>6\",{\"1\":{\"431\":1,\"456\":1,\"625\":1}}],[\"version>4\",{\"1\":{\"410\":1,\"447\":1}}],[\"version>\",{\"1\":{\"58\":1,\"59\":3,\"78\":1,\"92\":2,\"211\":2,\"220\":3,\"233\":1,\"242\":4,\"244\":10,\"400\":1,\"404\":1,\"409\":1,\"410\":3,\"412\":1,\"413\":1,\"415\":2,\"416\":1,\"418\":8,\"419\":1,\"431\":10,\"432\":1,\"433\":2,\"434\":2,\"443\":1,\"444\":1,\"447\":4,\"448\":1,\"449\":1,\"450\":1,\"452\":8,\"453\":1,\"456\":13,\"461\":6,\"493\":3,\"535\":1,\"557\":2,\"562\":4,\"564\":2,\"566\":1,\"568\":5,\"575\":5,\"580\":2,\"582\":4,\"588\":2,\"606\":10,\"625\":34,\"652\":6,\"655\":2,\"664\":1,\"673\":2,\"677\":5,\"680\":5}}],[\"version\",{\"1\":{\"58\":1,\"59\":1,\"107\":1,\"398\":1,\"410\":1,\"416\":5,\"431\":4,\"442\":1,\"447\":1,\"448\":5,\"456\":4,\"483\":3,\"484\":3,\"625\":20,\"653\":2,\"656\":2,\"657\":2,\"669\":1}}],[\"verdana\",{\"1\":{\"34\":1}}],[\"vscode安装完毕\",{\"1\":{\"649\":1}}],[\"vscodeusersetup\",{\"1\":{\"636\":1}}],[\"vs\",{\"1\":{\"130\":1,\"155\":1}}],[\"vite用于项目的构建架工具\",{\"1\":{\"647\":1}}],[\"video\",{\"1\":{\"352\":2}}],[\"vimrc\",{\"1\":{\"286\":1}}],[\"vim配置及其命令\",{\"0\":{\"286\":1}}],[\"view\",{\"1\":{\"674\":4}}],[\"views\",{\"1\":{\"651\":18,\"656\":2}}],[\"views`\",{\"1\":{\"651\":1}}],[\"views视图组件\",{\"1\":{\"49\":1}}],[\"view>\",{\"1\":{\"52\":1}}],[\"viewport\",{\"1\":{\"34\":1,\"253\":1}}],[\"vi\",{\"1\":{\"49\":1}}],[\"v\",{\"1\":{\"42\":1,\"43\":25,\"56\":1,\"315\":2,\"317\":1,\"345\":3,\"394\":1,\"440\":1,\"471\":1,\"636\":2}}],[\"validation\",{\"1\":{\"677\":1}}],[\"validator<\",{\"1\":{\"625\":3}}],[\"validator\",{\"1\":{\"625\":13}}],[\"val\",{\"1\":{\"365\":1}}],[\"value等注解读取\",{\"1\":{\"668\":1}}],[\"value注解所在的bean还没有被完全初始化\",{\"1\":{\"628\":1}}],[\"value注解来注入属性值\",{\"1\":{\"628\":1}}],[\"value注解读取不到值为null的问题\",{\"1\":{\"628\":1}}],[\"value注解读取配置\",{\"1\":{\"567\":1}}],[\"valueerror\",{\"1\":{\"334\":1}}],[\"value属性\",{\"1\":{\"588\":1,\"589\":1,\"591\":1}}],[\"value属性的属性名可以省略\",{\"1\":{\"564\":1}}],[\"value属性代表基本属性值\",{\"1\":{\"225\":1,\"558\":1}}],[\"value属性指定普通属性值\",{\"1\":{\"224\":1,\"558\":1}}],[\"value直接注入基本类型值\",{\"1\":{\"224\":3,\"558\":3}}],[\"value是用collection来存放的\",{\"1\":{\"177\":1}}],[\"value对用冒号\",{\"1\":{\"669\":1}}],[\"value对\",{\"1\":{\"169\":1,\"177\":2}}],[\"valueof\",{\"1\":{\"169\":1,\"655\":1}}],[\"values\",{\"1\":{\"81\":1,\"177\":5,\"315\":1,\"334\":1,\"461\":1,\"493\":3,\"503\":1,\"512\":2,\"514\":1,\"517\":4,\"529\":1,\"562\":2,\"568\":1,\"575\":1,\"625\":3,\"640\":1,\"641\":1,\"651\":27}}],[\"value2\",{\"1\":{\"40\":1}}],[\"value1\",{\"1\":{\"40\":1}}],[\"value\",{\"1\":{\"38\":2,\"40\":1,\"63\":2,\"64\":1,\"177\":4,\"213\":2,\"215\":2,\"233\":4,\"234\":1,\"235\":1,\"236\":4,\"237\":2,\"240\":1,\"241\":1,\"242\":2,\"244\":5,\"315\":1,\"325\":2,\"328\":2,\"480\":2,\"481\":2,\"498\":3,\"510\":2,\"558\":1,\"564\":1,\"566\":7,\"567\":3,\"572\":4,\"573\":2,\"575\":4,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"588\":5,\"589\":3,\"591\":9,\"592\":1,\"606\":4,\"607\":5,\"628\":8,\"668\":5,\"669\":5}}],[\"value=token值\",{\"1\":{\"655\":1}}],[\"value=\",{\"1\":{\"34\":6,\"41\":2,\"43\":1,\"220\":4,\"224\":7,\"225\":2,\"231\":3,\"236\":4,\"239\":1,\"480\":1,\"493\":4,\"496\":1,\"509\":1,\"513\":1,\"514\":6,\"521\":1,\"535\":1,\"558\":8,\"560\":2,\"561\":1,\"562\":8,\"566\":1,\"568\":4,\"572\":4,\"628\":8}}],[\"varchar\",{\"1\":{\"461\":2,\"514\":2,\"562\":3,\"568\":3,\"575\":3,\"640\":1,\"651\":6}}],[\"var\",{\"1\":{\"39\":1,\"40\":13,\"45\":1,\"277\":1,\"305\":3,\"306\":3}}],[\"var关键字来声明变量\",{\"1\":{\"38\":1}}],[\"vue3用于项目数据的渲染框架\",{\"1\":{\"647\":1}}],[\"vue3\",{\"1\":{\"637\":1}}],[\"vuerouter\",{\"1\":{\"52\":1}}],[\"vuerouter是vue的官方路由\",{\"1\":{\"52\":1}}],[\"vue路由\",{\"0\":{\"52\":1}}],[\"vue组件库element\",{\"0\":{\"50\":1}}],[\"vue入口组件\",{\"1\":{\"49\":1}}],[\"vue项目中使用axios\",{\"1\":{\"51\":1}}],[\"vue项目\",{\"1\":{\"49\":2}}],[\"vue项目简介\",{\"0\":{\"49\":1}}],[\"vue挂载完成\",{\"1\":{\"44\":1}}],[\"vue的声明周期\",{\"0\":{\"44\":1}}],[\"vue中的常用指令\",{\"0\":{\"43\":1}}],[\"vue是一套前端框架\",{\"1\":{\"42\":1}}],[\"vue\",{\"0\":{\"42\":1,\"268\":1},\"1\":{\"32\":1,\"42\":3,\"43\":3,\"44\":1,\"48\":3,\"49\":2,\"50\":1,\"52\":1,\"269\":2}}],[\"vuejs\",{\"1\":{\"1\":1}}],[\"void的都不写\",{\"1\":{\"127\":1}}],[\"void\",{\"1\":{\"11\":2,\"12\":2,\"16\":3,\"17\":8,\"23\":7,\"24\":1,\"25\":1,\"26\":3,\"27\":6,\"28\":18,\"29\":2,\"81\":1,\"85\":1,\"92\":2,\"93\":3,\"94\":3,\"108\":1,\"109\":1,\"127\":3,\"130\":5,\"135\":4,\"138\":5,\"145\":11,\"146\":11,\"147\":12,\"149\":3,\"150\":3,\"151\":9,\"154\":1,\"155\":5,\"160\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"170\":1,\"171\":1,\"176\":11,\"177\":5,\"180\":1,\"185\":2,\"186\":2,\"187\":4,\"188\":5,\"189\":1,\"191\":2,\"192\":6,\"194\":2,\"196\":1,\"197\":3,\"200\":1,\"202\":2,\"203\":6,\"205\":2,\"207\":1,\"212\":3,\"213\":3,\"215\":2,\"220\":1,\"232\":2,\"237\":2,\"239\":1,\"242\":1,\"247\":3,\"248\":1,\"366\":1,\"367\":2,\"368\":1,\"370\":8,\"371\":6,\"461\":2,\"472\":2,\"476\":6,\"477\":2,\"478\":5,\"479\":1,\"481\":2,\"484\":1,\"485\":1,\"493\":1,\"505\":3,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"514\":7,\"518\":3,\"519\":1,\"526\":1,\"535\":1,\"557\":1,\"558\":2,\"560\":4,\"561\":2,\"562\":13,\"565\":5,\"566\":8,\"567\":1,\"568\":7,\"573\":5,\"574\":1,\"575\":7,\"580\":1,\"583\":1,\"588\":5,\"589\":3,\"590\":1,\"591\":9,\"594\":2,\"596\":1,\"606\":4,\"607\":2,\"608\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":7,\"626\":1,\"640\":3,\"641\":6,\"652\":4,\"655\":1,\"657\":1,\"664\":1,\"668\":4,\"669\":4,\"670\":4,\"673\":5,\"676\":3,\"677\":1,\"680\":4,\"681\":1,\"682\":1}}],[\"加载不同的配置\",{\"1\":{\"671\":1}}],[\"加载spring容器\",{\"1\":{\"625\":1}}],[\"加载动态生成的代理类的类加载器\",{\"1\":{\"583\":1}}],[\"加载配置和条件判断\",{\"1\":{\"665\":1}}],[\"加载配置元数据\",{\"1\":{\"555\":1}}],[\"加载配置文件\",{\"1\":{\"11\":1}}],[\"加工成getxxx\",{\"1\":{\"503\":1}}],[\"加入依赖\",{\"1\":{\"588\":1,\"596\":1}}],[\"加入\",{\"1\":{\"370\":1}}],[\"加了f\",{\"1\":{\"334\":1}}],[\"加油\",{\"1\":{\"334\":1}}],[\"加个if语句来限制输入的条件\",{\"1\":{\"135\":1}}],[\"加l是因为默认的是int类型\",{\"1\":{\"112\":1}}],[\"加上r表示\",{\"1\":{\"292\":1,\"318\":1}}],[\"加上方法体大括号\",{\"1\":{\"139\":1}}],[\"加上\",{\"1\":{\"94\":1,\"681\":1}}],[\"加上laber标签之后\",{\"1\":{\"34\":1}}],[\"加锁图标\",{\"1\":{\"0\":1}}],[\"1秒\",{\"1\":{\"655\":1}}],[\"1l\",{\"1\":{\"653\":1,\"655\":1}}],[\"1美元\",{\"1\":{\"651\":1}}],[\"1℃\",{\"1\":{\"651\":1}}],[\"1=1\",{\"1\":{\"528\":1}}],[\"1梳理maven工程gavp属性\",{\"0\":{\"442\":1},\"1\":{\"436\":1}}],[\"1等\",{\"1\":{\"398\":1,\"442\":1}}],[\"1$\",{\"1\":{\"375\":1}}],[\"1qwe\",{\"1\":{\"346\":1}}],[\"1nf\",{\"1\":{\"341\":1}}],[\"1开始\",{\"1\":{\"334\":1}}],[\"1开始往左递减\",{\"1\":{\"305\":1}}],[\"1则分割次数没有限制\",{\"1\":{\"317\":1}}],[\"1表示最后一个元素\",{\"1\":{\"305\":1}}],[\"1px\",{\"1\":{\"253\":1}}],[\"19\",{\"1\":{\"234\":1,\"387\":3,\"426\":1,\"562\":3,\"568\":3,\"575\":3}}],[\"192\",{\"1\":{\"189\":1,\"200\":1}}],[\"1954\",{\"1\":{\"176\":3}}],[\"1945\",{\"1\":{\"176\":2}}],[\"1948\",{\"1\":{\"34\":1}}],[\"1967\",{\"1\":{\"176\":1}}],[\"1965\",{\"1\":{\"176\":2}}],[\"1976\",{\"1\":{\"176\":2}}],[\"17+\",{\"1\":{\"549\":1,\"663\":1}}],[\"171\",{\"1\":{\"426\":1}}],[\"1712239525782l\",{\"1\":{\"162\":1}}],[\"1712239525782\",{\"1\":{\"162\":1}}],[\"17<\",{\"1\":{\"395\":1,\"410\":1,\"440\":1,\"447\":1}}],[\"175\",{\"1\":{\"188\":1,\"566\":1}}],[\"179\",{\"1\":{\"188\":1}}],[\"17\",{\"1\":{\"163\":3,\"393\":1,\"588\":1,\"651\":1}}],[\"11版本\",{\"1\":{\"491\":1}}],[\"110\",{\"1\":{\"425\":1}}],[\"1100\",{\"1\":{\"116\":1}}],[\"11<\",{\"1\":{\"220\":1,\"447\":1,\"493\":1,\"535\":1,\"625\":2}}],[\"114\",{\"1\":{\"192\":1,\"203\":1}}],[\"11\",{\"1\":{\"117\":3,\"126\":1,\"317\":1,\"334\":1,\"365\":4,\"366\":2,\"387\":17,\"429\":1,\"431\":1,\"440\":1,\"455\":1,\"456\":1,\"461\":1,\"514\":1,\"588\":2,\"625\":4,\"651\":1}}],[\"111111\",{\"1\":{\"514\":1}}],[\"1111\",{\"1\":{\"116\":1}}],[\"137878\",{\"1\":{\"334\":1}}],[\"139\",{\"1\":{\"192\":1,\"203\":1}}],[\"13\",{\"1\":{\"116\":1,\"163\":3,\"170\":1,\"178\":1,\"327\":1,\"387\":5,\"651\":3}}],[\"1字节=8bit\",{\"1\":{\"112\":1,\"114\":1}}],[\"1字节byte=8bit\",{\"1\":{\"106\":1}}],[\"1号事务出现异常\",{\"1\":{\"98\":1}}],[\"1<\",{\"1\":{\"92\":2,\"220\":1,\"233\":1,\"242\":2,\"244\":2,\"456\":5,\"461\":1,\"493\":1,\"557\":1,\"564\":1,\"566\":1,\"568\":1,\"575\":1,\"580\":1,\"582\":2,\"606\":2,\"625\":1,\"652\":1,\"655\":1,\"680\":1}}],[\"1代表成功\",{\"1\":{\"69\":1}}],[\"160行附近\",{\"1\":{\"395\":1,\"440\":1}}],[\"168\",{\"1\":{\"189\":1,\"200\":1}}],[\"16位有符号整数\",{\"1\":{\"112\":1}}],[\"16\",{\"1\":{\"68\":1,\"145\":1,\"539\":1,\"636\":7,\"651\":1}}],[\"1xx响应中\",{\"1\":{\"64\":1}}],[\"155\",{\"1\":{\"609\":1}}],[\"15<\",{\"1\":{\"415\":1}}],[\"1592653589793\",{\"1\":{\"326\":1}}],[\"150\",{\"1\":{\"114\":1}}],[\"15\",{\"1\":{\"50\":1,\"170\":1,\"334\":1,\"431\":1,\"448\":1,\"455\":1,\"456\":1,\"625\":3,\"651\":1}}],[\"18全民养车季\",{\"1\":{\"651\":1}}],[\"18<\",{\"1\":{\"461\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"180\",{\"1\":{\"188\":1}}],[\"18\",{\"1\":{\"40\":1,\"45\":1,\"187\":1,\"224\":3,\"387\":1,\"461\":3,\"476\":2,\"477\":3,\"478\":3,\"479\":3,\"558\":3,\"562\":3,\"568\":2,\"575\":2,\"625\":2,\"651\":3,\"652\":1,\"673\":1,\"677\":2,\"680\":1}}],[\"1467\",{\"1\":{\"609\":1}}],[\"144\",{\"1\":{\"609\":1}}],[\"14\",{\"1\":{\"38\":1,\"170\":1,\"387\":1,\"651\":1}}],[\"1433\",{\"1\":{\"11\":2,\"12\":1}}],[\"10位\",{\"1\":{\"480\":1}}],[\"1024\",{\"1\":{\"188\":1,\"191\":2,\"202\":2,\"334\":1}}],[\"1010\",{\"1\":{\"116\":1}}],[\"106\",{\"1\":{\"114\":1,\"387\":1}}],[\"10的平方\",{\"1\":{\"112\":1}}],[\"10<\",{\"1\":{\"59\":1,\"418\":5}}],[\"10px\",{\"1\":{\"36\":1}}],[\"100$\",{\"1\":{\"376\":1}}],[\"100622\",{\"1\":{\"334\":1}}],[\"100618\",{\"1\":{\"334\":1}}],[\"100的随机数\",{\"1\":{\"311\":1}}],[\"100px\",{\"1\":{\"253\":1}}],[\"1002\",{\"1\":{\"178\":1,\"334\":1}}],[\"1004\",{\"1\":{\"178\":1}}],[\"1001\",{\"1\":{\"116\":1,\"178\":2,\"334\":1}}],[\"1000毫秒\",{\"1\":{\"655\":1}}],[\"100000\",{\"1\":{\"138\":1}}],[\"10000就是16+32=48\",{\"1\":{\"116\":1}}],[\"1000\",{\"1\":{\"92\":1,\"655\":1}}],[\"100\",{\"1\":{\"26\":4,\"27\":1,\"28\":1,\"135\":1,\"160\":1,\"247\":3,\"248\":1,\"311\":1,\"312\":1,\"315\":1,\"317\":1,\"334\":1,\"493\":1,\"517\":2,\"606\":1,\"607\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":1,\"625\":1}}],[\"10\",{\"1\":{\"23\":4,\"25\":2,\"34\":1,\"117\":2,\"135\":1,\"145\":1,\"146\":2,\"149\":2,\"150\":1,\"160\":1,\"163\":3,\"170\":2,\"196\":2,\"197\":1,\"207\":2,\"299\":1,\"307\":1,\"311\":4,\"312\":4,\"315\":1,\"326\":1,\"334\":4,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"387\":4,\"415\":1,\"455\":1,\"456\":1,\"478\":2,\"493\":1,\"508\":4,\"562\":1,\"568\":1,\"575\":1,\"609\":1,\"625\":1,\"651\":2,\"656\":2,\"663\":1}}],[\"12位\",{\"1\":{\"480\":1}}],[\"12<\",{\"1\":{\"410\":1}}],[\"126\",{\"1\":{\"353\":2,\"354\":4,\"355\":2,\"356\":2,\"361\":2}}],[\"122\",{\"1\":{\"334\":4}}],[\"128\",{\"1\":{\"112\":2,\"188\":1,\"609\":1}}],[\"128~127\",{\"1\":{\"112\":2}}],[\"123456\",{\"1\":{\"514\":1,\"655\":4,\"673\":1}}],[\"1234567l\",{\"1\":{\"155\":1}}],[\"123\",{\"1\":{\"112\":1,\"169\":1,\"170\":7,\"177\":2}}],[\"123e2\",{\"1\":{\"112\":1}}],[\"123a13\",{\"1\":{\"38\":1}}],[\"120\",{\"1\":{\"25\":1,\"29\":3,\"334\":1,\"655\":1}}],[\"127\",{\"1\":{\"12\":1,\"112\":4,\"189\":1,\"191\":1,\"200\":1,\"202\":1,\"253\":1}}],[\"12\",{\"1\":{\"11\":1,\"16\":1,\"17\":2,\"116\":5,\"170\":1,\"176\":6,\"325\":3,\"334\":1,\"387\":1,\"406\":1,\"425\":1,\"651\":1}}],[\"1\",{\"0\":{\"48\":1,\"240\":1,\"378\":1,\"379\":1,\"380\":1,\"386\":1,\"387\":2,\"388\":1,\"389\":1,\"393\":1,\"398\":1,\"403\":1,\"408\":1,\"415\":1,\"418\":1,\"421\":1,\"429\":1,\"438\":2,\"439\":1,\"440\":1,\"447\":1,\"452\":1,\"455\":1,\"460\":2,\"461\":1,\"462\":1,\"474\":1,\"481\":1,\"483\":1,\"486\":1,\"491\":2,\"492\":1,\"493\":1,\"495\":1,\"496\":2,\"497\":1,\"498\":1,\"500\":1,\"507\":1,\"517\":1,\"521\":1,\"524\":1,\"532\":1,\"534\":1,\"537\":1,\"544\":2,\"545\":1,\"547\":1,\"551\":1,\"555\":1,\"557\":1,\"564\":1,\"570\":1,\"577\":1,\"582\":1,\"587\":1,\"598\":1,\"601\":1,\"602\":2,\"603\":1,\"604\":1,\"606\":1,\"617\":2,\"618\":1,\"619\":2,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"625\":1,\"632\":1,\"633\":2,\"634\":1,\"636\":1,\"640\":1,\"651\":1,\"655\":1,\"662\":2,\"663\":1,\"664\":1,\"665\":1,\"667\":1,\"673\":1,\"679\":1,\"684\":1},\"1\":{\"11\":6,\"12\":1,\"16\":3,\"24\":7,\"28\":2,\"34\":3,\"43\":1,\"45\":1,\"52\":1,\"56\":1,\"82\":1,\"85\":1,\"92\":2,\"100\":1,\"112\":3,\"120\":1,\"121\":6,\"124\":4,\"126\":8,\"130\":1,\"132\":1,\"135\":1,\"158\":1,\"166\":2,\"170\":3,\"171\":2,\"176\":2,\"177\":1,\"183\":4,\"184\":1,\"185\":3,\"186\":3,\"187\":1,\"188\":2,\"189\":2,\"191\":4,\"194\":1,\"196\":3,\"197\":1,\"200\":2,\"202\":4,\"205\":1,\"207\":3,\"213\":1,\"220\":4,\"224\":4,\"228\":1,\"229\":1,\"231\":2,\"233\":1,\"236\":1,\"244\":1,\"246\":2,\"247\":9,\"248\":3,\"251\":2,\"252\":3,\"253\":4,\"254\":1,\"301\":1,\"305\":4,\"306\":2,\"307\":3,\"310\":4,\"311\":1,\"312\":3,\"315\":8,\"316\":10,\"317\":4,\"333\":1,\"334\":12,\"338\":1,\"351\":1,\"365\":3,\"366\":8,\"367\":4,\"370\":5,\"371\":3,\"379\":1,\"380\":1,\"387\":15,\"395\":1,\"396\":1,\"398\":6,\"399\":1,\"406\":3,\"410\":1,\"412\":2,\"416\":10,\"425\":4,\"426\":6,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"436\":7,\"440\":1,\"442\":7,\"447\":1,\"448\":10,\"455\":8,\"456\":4,\"459\":8,\"460\":1,\"461\":3,\"467\":1,\"471\":1,\"472\":2,\"476\":2,\"478\":1,\"481\":6,\"483\":1,\"484\":2,\"489\":17,\"493\":4,\"514\":7,\"515\":1,\"517\":3,\"519\":1,\"535\":2,\"542\":19,\"551\":5,\"552\":1,\"555\":3,\"558\":2,\"562\":3,\"564\":2,\"566\":2,\"568\":3,\"571\":2,\"572\":1,\"575\":2,\"582\":1,\"583\":4,\"584\":1,\"588\":53,\"589\":1,\"590\":1,\"596\":2,\"606\":3,\"607\":3,\"609\":3,\"610\":9,\"611\":3,\"612\":6,\"615\":16,\"625\":13,\"626\":1,\"627\":1,\"628\":4,\"630\":1,\"634\":3,\"636\":1,\"641\":2,\"644\":2,\"647\":1,\"651\":23,\"652\":1,\"655\":13,\"656\":22,\"657\":6,\"660\":9,\"664\":1,\"669\":1,\"673\":1,\"677\":5,\"680\":1,\"681\":1}}],[\"德鲁伊\",{\"1\":{\"10\":1}}],[\"功能配置参数说明\",{\"1\":{\"667\":1}}],[\"功能展示\",{\"0\":{\"648\":1},\"1\":{\"644\":1}}],[\"功能实现\",{\"0\":{\"641\":1},\"1\":{\"615\":1}}],[\"功能集成\",{\"1\":{\"552\":1}}],[\"功能介绍\",{\"1\":{\"548\":1}}],[\"功能模块\",{\"1\":{\"548\":1}}],[\"功能边界清晰\",{\"1\":{\"492\":1}}],[\"功能编码\",{\"1\":{\"461\":1}}],[\"功能调整\",{\"1\":{\"398\":1,\"442\":1}}],[\"功能强大的api管理平台\",{\"1\":{\"46\":1}}],[\"功能强大\",{\"1\":{\"10\":1}}],[\"功能\",{\"1\":{\"10\":1,\"28\":4,\"78\":1,\"461\":1,\"487\":1}}],[\"功能禁用\",{\"0\":{\"1\":1}}],[\"提前剧透\",{\"1\":{\"583\":1}}],[\"提出进一步的需求\",{\"1\":{\"583\":1}}],[\"提取切点注解使用\",{\"1\":{\"591\":1}}],[\"提取重复附加功能代码到一个类中\",{\"1\":{\"582\":1}}],[\"提取数据库连接信息\",{\"1\":{\"562\":1}}],[\"提取\",{\"0\":{\"591\":1},\"1\":{\"542\":1,\"591\":1}}],[\"提取字符串中指定的索引号之间的字符\",{\"1\":{\"40\":1}}],[\"提高了开发效率\",{\"1\":{\"665\":1}}],[\"提高了代码的可维护性和可测试性\",{\"1\":{\"619\":1}}],[\"提高了代码的可重用性和可维护性\",{\"1\":{\"551\":1}}],[\"提高了系统的并发性能和吞吐量\",{\"1\":{\"483\":1}}],[\"提高应用程序的稳定性\",{\"1\":{\"545\":1}}],[\"提高开发效率\",{\"1\":{\"545\":1}}],[\"提高程序员的开发效率\",{\"1\":{\"538\":1}}],[\"提高持久层数据处理效率\",{\"0\":{\"488\":1,\"700\":1}}],[\"提高项目的稳定性\",{\"1\":{\"421\":1}}],[\"提高代码的可读性和可维护性\",{\"1\":{\"243\":1,\"478\":1,\"603\":1}}],[\"提高性能\",{\"1\":{\"231\":1,\"564\":1,\"571\":1}}],[\"提高效率而生\",{\"1\":{\"460\":1}}],[\"提高效率\",{\"1\":{\"79\":1,\"245\":1}}],[\"提示\",{\"1\":{\"137\":1,\"141\":1,\"176\":1}}],[\"提示信息\",{\"1\":{\"69\":1}}],[\"提供约定优于配置\",{\"1\":{\"665\":1}}],[\"提供一系列大型项目通用的非功能性程序\",{\"1\":{\"662\":1}}],[\"提供一个高效\",{\"1\":{\"619\":1}}],[\"提供一个版本号private\",{\"1\":{\"187\":1}}],[\"提供一个序列号\",{\"1\":{\"155\":1}}],[\"提供给\",{\"1\":{\"555\":1}}],[\"提供标准化的解决方案\",{\"1\":{\"545\":1}}],[\"提供深度优化的系统\",{\"1\":{\"545\":1}}],[\"提供丰富的条件拼接方式\",{\"1\":{\"460\":1}}],[\"提供全表\",{\"1\":{\"460\":1}}],[\"提供的\",{\"1\":{\"411\":1}}],[\"提供的数据库连接池接口\",{\"1\":{\"78\":1}}],[\"提供的数据库连接池标准接口\",{\"1\":{\"10\":1}}],[\"提供了各种组件对应的方法\",{\"1\":{\"626\":1}}],[\"提供了各种工具和\",{\"1\":{\"549\":1}}],[\"提供了以下多个注解\",{\"1\":{\"564\":1}}],[\"提供了配置框架和基本功能\",{\"1\":{\"552\":1}}],[\"提供了面向web应用程序的集成功能\",{\"1\":{\"548\":1}}],[\"提供了一系列简化和增强的功能\",{\"1\":{\"480\":1}}],[\"提供了一个内置的sorted\",{\"1\":{\"311\":1}}],[\"提供了很多控制功能\",{\"1\":{\"421\":1}}],[\"提供了基本的容器功能和\",{\"1\":{\"230\":1,\"561\":1}}],[\"提供了额外的强大功能\",{\"1\":{\"230\":1,\"561\":1}}],[\"提供了更综合的生成代码功能\",{\"1\":{\"79\":1}}],[\"提供相应的流\",{\"1\":{\"185\":1}}],[\"提供读入\",{\"1\":{\"185\":1}}],[\"提供几个重载的构造器\",{\"1\":{\"155\":1}}],[\"提供公共的方法\",{\"1\":{\"135\":1}}],[\"提供网上信息浏览服务\",{\"1\":{\"65\":1}}],[\"提交前先请求登录校验接口校验登录状态\",{\"1\":{\"657\":1}}],[\"提交token请求头\",{\"1\":{\"655\":1}}],[\"提交和回滚\",{\"1\":{\"628\":1}}],[\"提交事务\",{\"1\":{\"97\":3,\"220\":1,\"243\":1,\"493\":1,\"592\":2,\"602\":1,\"604\":1}}],[\"提交\",{\"1\":{\"34\":1}}],[\"提升系统响应速度\",{\"1\":{\"10\":1}}],[\"释放数据库连接\",{\"1\":{\"592\":2,\"602\":1}}],[\"释放空间时间超过最大空闲时间的连接\",{\"1\":{\"78\":1}}],[\"释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏\",{\"1\":{\"10\":1}}],[\"释放资源逻辑\",{\"1\":{\"560\":1,\"565\":1}}],[\"释放资源\",{\"1\":{\"2\":1,\"11\":1,\"12\":1,\"334\":1,\"609\":1}}],[\"这使得在配置文件中表示嵌套结构或数据集合更加容易\",{\"1\":{\"669\":1}}],[\"这使得配置文件更易于阅读和理解\",{\"1\":{\"669\":1}}],[\"这家初创公司凭借聊天机器人chatgpt引发生成式人工智能的热潮\",{\"1\":{\"651\":1}}],[\"这家软件巨头正致力于在其产品和服务中添加生成式人工智能功能\",{\"1\":{\"651\":1}}],[\"这次我们开着小鹏g6上了赛道\",{\"1\":{\"651\":1}}],[\"这份文件共列了chatgpt和类似应用程序在亚马逊多个团队中的67个潜在应用案例\",{\"1\":{\"651\":1}}],[\"这么难的题目\",{\"1\":{\"651\":1}}],[\"这段时间主要是干热型高温为主\",{\"1\":{\"651\":1}}],[\"这也对应着高温日数也要高于常年同期\",{\"1\":{\"651\":1}}],[\"这也是超级杯四冠王本赛季首次登台\",{\"1\":{\"651\":1}}],[\"这也是一个纯逻辑概念\",{\"1\":{\"584\":1}}],[\"这也是块注释\",{\"1\":{\"334\":1}}],[\"这意味着\",{\"1\":{\"560\":1,\"565\":1}}],[\"这两个属性用于配置http请求和响应的字符编码\",{\"1\":{\"674\":1}}],[\"这两个属性用于配置视图解析器的前缀和后缀\",{\"1\":{\"674\":1}}],[\"这两个方法我们成为生命周期方法\",{\"1\":{\"560\":1,\"565\":1}}],[\"这两个关键字修饰符\",{\"1\":{\"139\":1}}],[\"这对于新手而言可能会耗费较长时间\",{\"1\":{\"545\":1}}],[\"这三个字段\",{\"1\":{\"534\":1}}],[\"这会令\",{\"1\":{\"515\":1}}],[\"这会让\",{\"1\":{\"515\":2}}],[\"这提高了代码的可读性和可维护性\",{\"1\":{\"478\":1}}],[\"这四个属性主要为每个项目在maven仓库总做一个标识\",{\"1\":{\"442\":1}}],[\"这四个属性主要为每个项目在maven仓库中做一个标识\",{\"1\":{\"398\":1}}],[\"这几个仓库都没有内容\",{\"1\":{\"424\":1}}],[\"这一点可以通过异常信息看出来\",{\"1\":{\"529\":1}}],[\"这一部分可以在javaweb中实现\",{\"1\":{\"252\":1}}],[\"这一节很重要哟\",{\"1\":{\"151\":1}}],[\"这种特殊的双重关系导致了双方关系的紧张和潜在冲突\",{\"1\":{\"651\":1}}],[\"这种解耦合使得各个模块可以独立操作和测试\",{\"1\":{\"619\":1}}],[\"这种分离使得各个层次的组件能够更好地聚焦于各自的责任和功能\",{\"1\":{\"619\":1}}],[\"这种做法有以下好处和目的\",{\"1\":{\"619\":1}}],[\"这种散布在各处的无关的代码被称为横切\",{\"1\":{\"584\":1}}],[\"这种情况我们如何让进行处理\",{\"1\":{\"517\":1}}],[\"这种锁机制可以确保资源独占性和数据的一致性\",{\"1\":{\"483\":1}}],[\"这种依赖传递结构可以形成一个依赖树\",{\"1\":{\"448\":1}}],[\"这种行为就是因为构建生命周期产生的\",{\"1\":{\"406\":1}}],[\"这种方式基本上是通过依赖查找的方式来实现的\",{\"1\":{\"221\":1,\"553\":1}}],[\"这种思想成为控制反转\",{\"1\":{\"72\":1}}],[\"这就需要使用动态代理技术了\",{\"1\":{\"583\":1}}],[\"这就算作冲突\",{\"1\":{\"416\":1,\"448\":1}}],[\"这就是依赖的传递性\",{\"1\":{\"415\":1}}],[\"这就是个数字1025\",{\"1\":{\"213\":1}}],[\"这就使得线程间通信更简便\",{\"1\":{\"192\":1,\"203\":1}}],[\"这就对象的多态性\",{\"1\":{\"145\":1}}],[\"这才是匿名内部类的内容\",{\"1\":{\"151\":1}}],[\"这其实就是接口的\",{\"1\":{\"143\":1}}],[\"这时候就不对应了\",{\"1\":{\"480\":1}}],[\"这时候就可以加上封装隐藏来实现\",{\"1\":{\"135\":1}}],[\"这时呢\",{\"1\":{\"416\":1,\"448\":1}}],[\"这时下面实现类就可以删除了\",{\"1\":{\"151\":1}}],[\"这时就可以把不确定的部分暴露出去\",{\"1\":{\"138\":1}}],[\"这表示\",{\"1\":{\"126\":1}}],[\"这里我们引入web启动器\",{\"1\":{\"664\":1}}],[\"这里我们演示禁用匿名登录的操作\",{\"1\":{\"423\":1}}],[\"这里通过\",{\"1\":{\"625\":1}}],[\"这里能够得到map集合的key\",{\"1\":{\"529\":1}}],[\"这里能够得到list集合的索引值\",{\"1\":{\"529\":1}}],[\"这里起一个名字\",{\"1\":{\"529\":1}}],[\"这里数据输入具体是指上层方法\",{\"1\":{\"501\":1}}],[\"这里\",{\"1\":{\"426\":1}}],[\"这里需要格外注意\",{\"1\":{\"425\":1}}],[\"这里需要使用一个以类路径根目录为基准的相对路径\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"这里的\",{\"1\":{\"425\":1}}],[\"这里参考提示\",{\"1\":{\"423\":1}}],[\"这里pass是一个占位符\",{\"1\":{\"334\":1}}],[\"这里没变化的原因就是形参不能改变实参的值\",{\"1\":{\"197\":1}}],[\"这里没有调用iterator\",{\"1\":{\"170\":1}}],[\"这里会打印出\",{\"1\":{\"197\":4}}],[\"这里可以写一个创建文件\",{\"1\":{\"186\":1}}],[\"这里在person内部已经实现了compareto方法\",{\"1\":{\"178\":1}}],[\"这里i有跟j相等的时候所以不能\",{\"1\":{\"126\":1}}],[\"这里为了举例并未完全列出来\",{\"1\":{\"116\":1}}],[\"这里写登录页面\",{\"1\":{\"28\":2}}],[\"这个端午\",{\"1\":{\"651\":1}}],[\"这个类可以被实例化\",{\"1\":{\"628\":1}}],[\"这个类就不能被继承\",{\"1\":{\"131\":1}}],[\"这个操作不涉及写操作\",{\"1\":{\"608\":1}}],[\"这个接口也只有这一个实现类\",{\"1\":{\"598\":1}}],[\"这个概念不是语法层面天然存在的\",{\"1\":{\"584\":1}}],[\"这个jsr主要是java\",{\"1\":{\"566\":2}}],[\"这个jsr主要用于在java\",{\"1\":{\"566\":1}}],[\"这个jsr是java\",{\"1\":{\"566\":1}}],[\"这个jar包所属技术的官网\",{\"1\":{\"387\":1}}],[\"这个bean标签中class属性指定的是happyfactorybean\",{\"1\":{\"561\":1}}],[\"这个sql语句片段是否要加入整个sql语句\",{\"1\":{\"525\":1}}],[\"这个对象表示了一篇博客\",{\"1\":{\"517\":1}}],[\"这个对象既有学生形态\",{\"1\":{\"145\":1}}],[\"这个设置是在抛出异常之前\",{\"1\":{\"515\":2}}],[\"这个语句名为\",{\"1\":{\"515\":1}}],[\"这个配置文件可以省略\",{\"1\":{\"493\":1}}],[\"这个文件名仅仅只是建议\",{\"1\":{\"493\":1}}],[\"这个文件可以被jvm读取\",{\"1\":{\"106\":1}}],[\"这个时候可以使用mybatisx插件\",{\"1\":{\"486\":1}}],[\"这个时候就得到了一个a\",{\"1\":{\"338\":1}}],[\"这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索\",{\"1\":{\"418\":1,\"452\":1}}],[\"这个项目作为父工程\",{\"1\":{\"409\":1,\"447\":1}}],[\"这个节点不存在\",{\"1\":{\"370\":1,\"371\":1}}],[\"这个库函数有很多实用的方法\",{\"1\":{\"334\":1}}],[\"这个实例包括这个状态码\",{\"1\":{\"334\":1}}],[\"这个\",{\"1\":{\"228\":2,\"560\":2,\"565\":2}}],[\"这个myfile文件夹已经创建了\",{\"1\":{\"188\":1}}],[\"这个月的第几天\",{\"1\":{\"164\":1}}],[\"这个会报错\",{\"1\":{\"117\":1}}],[\"这个结果是\",{\"1\":{\"114\":1}}],[\"这个结果是2\",{\"1\":{\"112\":1}}],[\"这个事务方法应该如何进行事务控制\",{\"1\":{\"98\":1}}],[\"这样我们就不用操心依赖的版本问题了\",{\"1\":{\"664\":1}}],[\"这样我们就可以定义atm和钱两个类\",{\"1\":{\"334\":1}}],[\"这样看\",{\"1\":{\"651\":1}}],[\"这样类中所有的查询方法都不需要设置\",{\"1\":{\"608\":1}}],[\"这样数据库就能够针对查询操作来进行优化\",{\"1\":{\"608\":1}}],[\"这样spring\",{\"1\":{\"552\":1}}],[\"这样可以简化在不同环境之间的配置切换\",{\"1\":{\"671\":1}}],[\"这样可以简化查询的编写过程\",{\"1\":{\"474\":1}}],[\"这样可以更容易理解和维护复杂的配置\",{\"1\":{\"669\":1}}],[\"这样可以进行解耦\",{\"1\":{\"619\":1}}],[\"这样可以减少项目的构建时间和磁盘空间\",{\"1\":{\"448\":1}}],[\"这样做的问题是会破坏原来的单链表的结构\",{\"1\":{\"371\":1}}],[\"这样写会自动关闭文件\",{\"1\":{\"334\":1}}],[\"这样写就会报错\",{\"1\":{\"197\":1}}],[\"这样调用写作业方法时就会因为所属类的不同而调用不同的类\",{\"1\":{\"334\":1}}],[\"这样大学生和小学生里面可以定义两个不同的方法\",{\"1\":{\"334\":1}}],[\"这样父类的属性和方法都可以继承\",{\"1\":{\"334\":1}}],[\"这样每次连接都会出现cowsay的图像了\",{\"1\":{\"282\":1}}],[\"这样配置每次getbean获得的对象就不是同一个对象了\",{\"1\":{\"228\":1}}],[\"这样就不必在应用程序代码中硬编码对象之间的依赖关系\",{\"1\":{\"221\":1,\"553\":1}}],[\"这样就是错误的\",{\"1\":{\"112\":1}}],[\"这样实现对应\",{\"1\":{\"220\":1,\"493\":1,\"514\":1,\"630\":1,\"641\":1}}],[\"这样很麻烦\",{\"1\":{\"211\":1}}],[\"这样年龄一样就存不进去\",{\"1\":{\"174\":1}}],[\"这样名字一样存不进去\",{\"1\":{\"174\":1}}],[\"这样不行\",{\"1\":{\"170\":1}}],[\"这样会报错\",{\"1\":{\"150\":1}}],[\"这样的做法有迹可循\",{\"1\":{\"651\":1}}],[\"这样的组件的一生\",{\"1\":{\"552\":1}}],[\"这样的关系型数据库管理系统的自动递增字段\",{\"1\":{\"515\":1}}],[\"这样的一个参数在\",{\"1\":{\"515\":1}}],[\"这样的方法就叫通知方法\",{\"1\":{\"211\":1,\"584\":1}}],[\"这样的格式\",{\"1\":{\"149\":1}}],[\"这样的类叫做抽象类\",{\"1\":{\"138\":1}}],[\"这样负数补完以后就会变成正数\",{\"1\":{\"116\":1}}],[\"这样内存就不用重复的申请和释放空间\",{\"1\":{\"114\":1,\"131\":1}}],[\"这样有了两个事务\",{\"1\":{\"98\":1}}],[\"这样图片才会按照xy轴放置\",{\"1\":{\"28\":2}}],[\"这组操作全部成功后\",{\"1\":{\"97\":1}}],[\"这多个过滤器就形成了一个过滤器链\",{\"1\":{\"93\":1}}],[\"这些是在spring\",{\"1\":{\"674\":1}}],[\"这些特点使yaml成为一种有力的配置文件格式\",{\"1\":{\"669\":1}}],[\"这些玩家会这样做\",{\"1\":{\"651\":1}}],[\"这些配置类通常在\",{\"1\":{\"628\":1}}],[\"这些注解可以直接标注在\",{\"1\":{\"564\":1}}],[\"这些<bean标签对应的信息转成spring内部\",{\"1\":{\"560\":1,\"565\":1}}],[\"这些\",{\"1\":{\"555\":1,\"557\":1}}],[\"这些优点使得\",{\"1\":{\"549\":1}}],[\"这些子项目涵盖了从企业级应用开发到云计算等各方面的内容\",{\"1\":{\"547\":1}}],[\"这些信息是可靠的\",{\"1\":{\"92\":1}}],[\"这些步骤很耗时\",{\"1\":{\"9\":1}}],[\"这是应用程序在url中的基本路径\",{\"1\":{\"674\":1}}],[\"这是红牛车队历史上的第100座分站冠军\",{\"1\":{\"651\":1}}],[\"这是该观象台建站以来首次出现连续两天最高气温超40℃\",{\"1\":{\"651\":1}}],[\"这是该站观测史上首次连续三天气温超40℃\",{\"1\":{\"651\":1}}],[\"这是有观测纪录以来历史第二高\",{\"1\":{\"651\":1}}],[\"这是错误语法\",{\"1\":{\"590\":1}}],[\"这是最主要的使用方式\",{\"1\":{\"566\":1}}],[\"这是一种固定的约束\",{\"1\":{\"561\":1}}],[\"这是一个比较运算\",{\"1\":{\"476\":1,\"478\":1}}],[\"这是一个<br>换行文本段落\",{\"1\":{\"334\":1}}],[\"这是一个求平均值的小程序\",{\"1\":{\"334\":1}}],[\"这是一个对话框\",{\"1\":{\"23\":1}}],[\"这是它的魔力所在\",{\"1\":{\"515\":1}}],[\"这是因为src\",{\"1\":{\"667\":1}}],[\"这是因为sqlsessionfactorybean和mapperscannerconfigurer是基于mybatis框架的配置\",{\"1\":{\"628\":1}}],[\"这是因为spring框架中使用代理模式实现了事务机制\",{\"1\":{\"249\":1,\"612\":1}}],[\"这是因为\",{\"1\":{\"512\":1}}],[\"这是外部库\",{\"1\":{\"334\":1}}],[\"这是调用的子类里面的方法\",{\"1\":{\"334\":1}}],[\"这是调用的父类里面的方法\",{\"1\":{\"334\":1}}],[\"这是定义方法\",{\"1\":{\"334\":1}}],[\"这是与列表的区别\",{\"1\":{\"334\":1}}],[\"这是块注释\",{\"1\":{\"334\":1}}],[\"这是行注释\",{\"1\":{\"334\":1}}],[\"这是匿名内部类b\",{\"1\":{\"151\":1}}],[\"这是匿名内部类a\",{\"1\":{\"151\":1}}],[\"这是匿名内部类\",{\"1\":{\"151\":1}}],[\"这是true\",{\"1\":{\"147\":1}}],[\"这是普通子类方法\",{\"1\":{\"146\":1}}],[\"这是普通父类方法\",{\"1\":{\"146\":1}}],[\"这是子类method\",{\"1\":{\"146\":1}}],[\"这是子类特有方法\",{\"1\":{\"145\":1,\"146\":1}}],[\"这是子类方法\",{\"1\":{\"145\":1}}],[\"这是父类特有方法\",{\"1\":{\"145\":1,\"146\":1}}],[\"这是父类方法\",{\"1\":{\"145\":1}}],[\"这是测试显示的页脚\",{\"1\":{\"0\":1}}],[\"这是侧边栏的顺序\",{\"1\":{\"0\":1}}],[\"这是页面的图标\",{\"1\":{\"0\":1}}],[\"这是文章的标题\",{\"1\":{\"0\":1}}],[\"编程语言和程序库等基础组件的软件系统\",{\"1\":{\"545\":1}}],[\"编程式的实现方式存在缺陷\",{\"1\":{\"243\":1,\"602\":1}}],[\"编程式事务\",{\"0\":{\"602\":1},\"1\":{\"542\":1}}],[\"编程式事务需要手动编写代码来管理事务\",{\"1\":{\"243\":1,\"603\":1}}],[\"编程式事务的主要优点是灵活性高\",{\"1\":{\"243\":1,\"602\":1}}],[\"编程式事务是指手动编写程序来管理事务\",{\"1\":{\"243\":1,\"602\":1}}],[\"编解码\",{\"0\":{\"354\":1}}],[\"编码分开\",{\"1\":{\"492\":1}}],[\"编码之后必须调用encode方法\",{\"1\":{\"354\":1}}],[\"编码格式\",{\"1\":{\"334\":1}}],[\"编码是将字符转换为二进制数据的过程\",{\"1\":{\"114\":1}}],[\"编写三层架构代码\",{\"1\":{\"680\":1}}],[\"编写controller\",{\"1\":{\"673\":1,\"677\":1}}],[\"编写处理器controller\",{\"1\":{\"664\":2}}],[\"编写启动引导类\",{\"1\":{\"664\":1}}],[\"编写配置\",{\"1\":{\"652\":1,\"655\":1}}],[\"编写配置文件\",{\"1\":{\"557\":1,\"558\":3}}],[\"编写不是很方便\",{\"1\":{\"562\":1}}],[\"编写具体的sql语句\",{\"1\":{\"509\":1,\"513\":1}}],[\"编写\",{\"1\":{\"461\":1}}],[\"编写实体类\",{\"1\":{\"461\":1}}],[\"编写pom\",{\"1\":{\"447\":1}}],[\"编写一个方法\",{\"1\":{\"371\":1}}],[\"编写一个抽象父类\",{\"1\":{\"138\":1}}],[\"编写大量的事务控制代码容易出现问题\",{\"1\":{\"243\":1,\"602\":1}}],[\"编写aop程序\",{\"1\":{\"100\":1}}],[\"编写sql语句\",{\"1\":{\"76\":1}}],[\"编写视图\",{\"1\":{\"42\":1}}],[\"编译不充分\",{\"1\":{\"450\":1}}],[\"编译不会报错\",{\"1\":{\"146\":1}}],[\"编译依赖范围\",{\"1\":{\"411\":1}}],[\"编译环境\",{\"1\":{\"411\":1}}],[\"编译项目\",{\"1\":{\"404\":1,\"450\":1}}],[\"编译项目源代码\",{\"1\":{\"59\":1}}],[\"编译javac\",{\"1\":{\"152\":1}}],[\"编译时就要解决\",{\"1\":{\"155\":1}}],[\"编译时异常不回滚\",{\"1\":{\"247\":1,\"610\":1}}],[\"编译时异常\",{\"1\":{\"152\":1}}],[\"编译时左边要有相应的方法\",{\"1\":{\"145\":1}}],[\"编译看左\",{\"1\":{\"145\":1,\"155\":1}}],[\"编译看左边\",{\"1\":{\"145\":3}}],[\"编译器将不再赠送\",{\"1\":{\"127\":1}}],[\"编译器就会给出错误信息\",{\"1\":{\"126\":1}}],[\"编译器\",{\"1\":{\"16\":1}}],[\"编译\",{\"1\":{\"9\":2,\"59\":1}}],[\"编辑此页链接\",{\"1\":{\"1\":1}}],[\"在需要使用数据库操作的地方\",{\"1\":{\"679\":1}}],[\"在您的spring\",{\"1\":{\"679\":1}}],[\"在druid中\",{\"1\":{\"677\":1}}],[\"在dofilter中添加filterchain\",{\"1\":{\"93\":1}}],[\"在计算机领域\",{\"1\":{\"655\":1}}],[\"在中高端suv的细分市场中一骑绝尘\",{\"1\":{\"651\":1}}],[\"在本次618期间\",{\"1\":{\"651\":1}}],[\"在本次618期间也喊出了各自的营销口号\",{\"1\":{\"651\":1}}],[\"在本类的构造方法中\",{\"1\":{\"128\":1}}],[\"在本类的成员方法中\",{\"1\":{\"128\":2}}],[\"在语文考试后\",{\"1\":{\"651\":1}}],[\"在年底进行的甲级联赛总决赛中\",{\"1\":{\"651\":1}}],[\"在线上线下观众的共同见证下\",{\"1\":{\"651\":1}}],[\"在线程a中通过线程b调用join\",{\"1\":{\"196\":1,\"207\":1}}],[\"在元祐三年所写的端午帖子中说\",{\"1\":{\"651\":1}}],[\"在web开发中我们需要引入一些静态资源\",{\"1\":{\"675\":1}}],[\"在web项目下\",{\"1\":{\"623\":1}}],[\"在web工程中\",{\"1\":{\"387\":1}}],[\"在默认设置和已有设置的基础上\",{\"1\":{\"610\":1}}],[\"在事务操作之前先检查缓存中是否存在目标数据\",{\"1\":{\"593\":1}}],[\"在目标方法最终结束后\",{\"1\":{\"592\":1}}],[\"在目标方法抛异常后\",{\"1\":{\"592\":1}}],[\"在目标方法成功返回后\",{\"1\":{\"592\":1}}],[\"在目标方法执行前\",{\"1\":{\"592\":1}}],[\"在目标类没有实现任何接口的情况下\",{\"1\":{\"218\":1,\"594\":1}}],[\"在增强上进行引用即可\",{\"1\":{\"591\":1}}],[\"在异常通知中获取目标方法抛出的异常分两步\",{\"1\":{\"589\":1}}],[\"在异常通知中\",{\"1\":{\"589\":1}}],[\"在返回通知中获取目标方法返回值分两步\",{\"1\":{\"589\":1}}],[\"在返回通知中\",{\"1\":{\"589\":1}}],[\"在前置通知方法形参位置声明一个joinpoint类型的参数\",{\"1\":{\"589\":1}}],[\"在同一个项目中\",{\"1\":{\"584\":1}}],[\"在同一个类中的方法调用并不经过代理\",{\"1\":{\"249\":1,\"612\":1}}],[\"在同一个类中\",{\"1\":{\"249\":1,\"612\":1}}],[\"在系统运行过程中\",{\"1\":{\"584\":1}}],[\"在系统中有些数据可以缓存起来以提高访问速度\",{\"1\":{\"584\":1}}],[\"在系统中包含某些需要安全控制的操作\",{\"1\":{\"584\":1}}],[\"在系统中记录日志是非常重要的\",{\"1\":{\"584\":1}}],[\"在oop设计中\",{\"1\":{\"584\":1}}],[\"在order类中对一的一端进行引用时使用的属性名\",{\"1\":{\"518\":1}}],[\"在每个方法中\",{\"1\":{\"582\":1}}],[\"在每一个\",{\"1\":{\"418\":1}}],[\"在我们使用\",{\"1\":{\"564\":1}}],[\"在框架提供的规范化环境中\",{\"1\":{\"545\":1}}],[\"在全局配置文件中一个一个注册太麻烦\",{\"1\":{\"532\":1}}],[\"在全局范围内对mybatis进行配置\",{\"1\":{\"509\":1}}],[\"在foreach标签内部如果需要引用遍历得到的具体的一个对象\",{\"1\":{\"529\":1}}],[\"在flex布局中\",{\"1\":{\"257\":1}}],[\"在多个分支条件中\",{\"1\":{\"528\":1}}],[\"在多态的代码当中成员方法的访问规则是\",{\"1\":{\"145\":1}}],[\"在idea点击package进行打包\",{\"1\":{\"685\":1}}],[\"在idea中高配置mysql数据库连接\",{\"1\":{\"77\":1}}],[\"在idea中\",{\"1\":{\"59\":1}}],[\"在ioc容器中\",{\"1\":{\"560\":1,\"565\":1}}],[\"在item属性中设置一个名字\",{\"1\":{\"529\":1}}],[\"在if标签内部\",{\"1\":{\"525\":1}}],[\"在if标签的test属性中\",{\"1\":{\"525\":1}}],[\"在后台应该如何完成最终的sql语句呢\",{\"1\":{\"524\":1}}],[\"在查询方法中使用分页\",{\"1\":{\"535\":1}}],[\"在查询映射的时候\",{\"1\":{\"517\":1}}],[\"在查询和结果映射做了相当多的改进\",{\"1\":{\"515\":1}}],[\"在某些数据库\",{\"1\":{\"515\":1}}],[\"在命名空间中唯一的标识符\",{\"1\":{\"515\":2}}],[\"在命令的末尾+\",{\"1\":{\"273\":1}}],[\"在命令行中\",{\"1\":{\"59\":1}}],[\"在命令行执行指令\",{\"1\":{\"50\":1}}],[\"在将\",{\"1\":{\"512\":1}}],[\"在上例中\",{\"1\":{\"512\":1}}],[\"在resources目录下创建index\",{\"1\":{\"675\":1}}],[\"在resulttype属性中还是设置实体类类型即可\",{\"1\":{\"511\":1}}],[\"在router下的index\",{\"1\":{\"52\":1}}],[\"在没有注解的情况下\",{\"1\":{\"508\":1}}],[\"在更新\",{\"1\":{\"484\":1}}],[\"在数据库操作中使用事务可以保证数据的一致性\",{\"1\":{\"584\":1}}],[\"在数据库层面使用行级锁或表级锁来控制并发访问\",{\"1\":{\"483\":1}}],[\"在数据添加成功后\",{\"1\":{\"81\":1}}],[\"在乐观锁的应用中\",{\"1\":{\"483\":1}}],[\"在悲观锁的应用中\",{\"1\":{\"483\":1}}],[\"在整个数据访问过程中\",{\"1\":{\"483\":1}}],[\"在传统的自增id生成方式中\",{\"1\":{\"480\":1}}],[\"在以下场景下\",{\"1\":{\"480\":1}}],[\"在父工程中统一管理项目中的依赖信息\",{\"1\":{\"418\":1,\"452\":1}}],[\"在exclude标签中配置一个具体的排除\",{\"1\":{\"416\":1}}],[\"在<depencies><\",{\"1\":{\"416\":1,\"448\":1}}],[\"在<dependencies>标签中使用<dependency>引入坐标\",{\"1\":{\"59\":1}}],[\"在编译\",{\"1\":{\"411\":1}}],[\"在编译期间会出现的异常\",{\"1\":{\"152\":1}}],[\"在mysql下建议关闭\",{\"1\":{\"677\":1}}],[\"在mybatis全局配置文件加入如下配置\",{\"1\":{\"513\":1}}],[\"在mapper标签的resource属性中指定mapper配置文件以\",{\"1\":{\"518\":1,\"519\":1}}],[\"在main\",{\"1\":{\"50\":1,\"52\":1}}],[\"在mirrors节点\",{\"1\":{\"395\":1,\"440\":1}}],[\"在使用\",{\"1\":{\"412\":1,\"449\":1}}],[\"在使用maven之后\",{\"1\":{\"387\":1}}],[\"在使用过程中会出现各种问题\",{\"1\":{\"387\":1}}],[\"在使用时可以将其重写\",{\"1\":{\"130\":1}}],[\"在链表尾部添加\",{\"1\":{\"371\":1}}],[\"在原来的队列上修改得到环形队列\",{\"1\":{\"370\":1}}],[\"在原始的web程序中\",{\"1\":{\"68\":1}}],[\"在浏览器检查代码里面找到user\",{\"1\":{\"334\":1}}],[\"在思考\",{\"1\":{\"334\":1}}],[\"在调用模块中的变量\",{\"1\":{\"330\":1}}],[\"在调用一个函数时\",{\"1\":{\"325\":1}}],[\"在派生类中定义\",{\"1\":{\"329\":1}}],[\"在属性或方法名前面添加单下划线表示\",{\"1\":{\"327\":1}}],[\"在定义函数时\",{\"1\":{\"325\":1}}],[\"在设置解码采用的字符编码时\",{\"1\":{\"317\":1}}],[\"在profiles节点\",{\"1\":{\"395\":1,\"440\":1}}],[\"在pythonpath环境变量中添加\",{\"1\":{\"331\":1}}],[\"在python中可以通过\",{\"1\":{\"328\":1}}],[\"在python中\",{\"1\":{\"327\":1}}],[\"在pyhton中\",{\"1\":{\"311\":1}}],[\"在pom\",{\"1\":{\"59\":1,\"100\":1}}],[\"在右下角显示光标位置的状态行\",{\"1\":{\"286\":1}}],[\"在左侧行号\",{\"1\":{\"286\":1}}],[\"在这些文件中\",{\"1\":{\"671\":2}}],[\"在这个过程中\",{\"1\":{\"628\":1}}],[\"在这个过程中包括编译源代码\",{\"1\":{\"403\":1,\"413\":1,\"450\":1}}],[\"在这个目录里面有nginx\",{\"1\":{\"283\":1}}],[\"在这里仅仅大致了解一下开发流程\",{\"1\":{\"32\":1}}],[\"在~\",{\"1\":{\"282\":1}}],[\"在侧轴中间显示\",{\"1\":{\"261\":1}}],[\"在侧轴的尾部开始排列\",{\"1\":{\"261\":1}}],[\"在单行下没有效果\",{\"1\":{\"261\":1}}],[\"在子项为单项的时候使用\",{\"1\":{\"260\":1}}],[\"在子类的构造方法中\",{\"1\":{\"129\":2}}],[\"在子类的成员方法中\",{\"1\":{\"129\":1}}],[\"在主轴居中对齐\",{\"1\":{\"258\":1}}],[\"在实际开发中\",{\"1\":{\"529\":1}}],[\"在实例化上下文时不需要同时指定\",{\"1\":{\"239\":1,\"574\":1}}],[\"在实现runnable接口的方式中\",{\"1\":{\"197\":1,\"208\":1}}],[\"在对应的属性上面使用\",{\"1\":{\"235\":1}}],[\"在成员变量上直接标记\",{\"1\":{\"233\":1,\"566\":1}}],[\"在初始化方法前加上注解\",{\"1\":{\"232\":1}}],[\"在容器启动时被创建\",{\"1\":{\"230\":1,\"561\":1}}],[\"在beanone类中声明一个方法init\",{\"1\":{\"227\":1}}],[\"在满足bean唯一性的前提下\",{\"1\":{\"226\":1,\"559\":1}}],[\"在springboot中就定义了静态资源的默认查找路径\",{\"1\":{\"675\":1}}],[\"在springboot的1\",{\"1\":{\"81\":1}}],[\"在spring\",{\"1\":{\"664\":1,\"671\":1,\"679\":1,\"684\":1}}],[\"在spring配置文件\",{\"1\":{\"224\":1}}],[\"在众多具体环境中\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"在测试中一定要使用接口进行传值\",{\"1\":{\"212\":1}}],[\"在被迅速刷屏的朋友圈里\",{\"1\":{\"651\":1}}],[\"在被调用的子方法中设置传播行为\",{\"1\":{\"612\":1}}],[\"在被代理的目标方法最终结束后执行\",{\"1\":{\"211\":1,\"584\":1}}],[\"在被代理的目标方法异常结束后执行\",{\"1\":{\"211\":1,\"584\":1}}],[\"在被代理的目标方法成功结束后执行\",{\"1\":{\"211\":1,\"584\":1}}],[\"在被代理的目标方法前执行\",{\"1\":{\"211\":1,\"584\":1}}],[\"在被synchronized包裹以后\",{\"1\":{\"197\":1,\"208\":1}}],[\"在继承thread类的方式中\",{\"1\":{\"197\":1,\"208\":1}}],[\"在于可以将任何实现了serializable接口的对象转化为字节数据\",{\"1\":{\"187\":1}}],[\"在此期间北京车主可享受\",{\"1\":{\"651\":1}}],[\"在此规范中定义了多种注解\",{\"1\":{\"566\":1}}],[\"在此compare\",{\"1\":{\"175\":1}}],[\"在此方法中\",{\"1\":{\"174\":1}}],[\"在方法执行过程中\",{\"1\":{\"584\":1}}],[\"在方法执行完毕后计算方法执行时间并输出到日志中\",{\"1\":{\"584\":1}}],[\"在方法执行完毕后提交或回滚事务\",{\"1\":{\"584\":1}}],[\"在方法的声明处\",{\"1\":{\"155\":1}}],[\"在方括号中\",{\"1\":{\"40\":1}}],[\"在运行期间会出现的异常\",{\"1\":{\"152\":1}}],[\"在\",{\"1\":{\"151\":2,\"221\":1,\"228\":2,\"237\":1,\"243\":1,\"415\":1,\"460\":1,\"502\":1,\"509\":1,\"512\":1,\"514\":1,\"515\":1,\"518\":1,\"519\":1,\"524\":1,\"535\":1,\"539\":1,\"548\":1,\"553\":1,\"560\":2,\"565\":2,\"573\":1,\"584\":1,\"589\":2,\"602\":1,\"664\":1,\"668\":1}}],[\"在栈内存中\",{\"1\":{\"150\":1}}],[\"在外部类的方法中\",{\"1\":{\"149\":1}}],[\"在内存中独一份\",{\"1\":{\"130\":1}}],[\"在内存中也是独一份\",{\"1\":{\"130\":1}}],[\"在第三种用法要注意\",{\"1\":{\"128\":1}}],[\"在一个tomcat上运行\",{\"1\":{\"544\":1}}],[\"在一个事务中\",{\"1\":{\"248\":1,\"611\":1}}],[\"在一个\",{\"1\":{\"238\":1,\"573\":1}}],[\"在一定程度上可以与if\",{\"1\":{\"119\":1}}],[\"在一次会话中可以包含多次请求和响应\",{\"1\":{\"89\":1}}],[\"在java\",{\"1\":{\"120\":1}}],[\"在java中声明类\",{\"1\":{\"131\":1}}],[\"在java中\",{\"1\":{\"114\":1,\"120\":1}}],[\"在java中严格区分大小写\",{\"1\":{\"110\":1}}],[\"在js代码区域\",{\"1\":{\"42\":1}}],[\"在js中函数调用可以传递任意个数的参数\",{\"1\":{\"39\":1}}],[\"在项目\",{\"1\":{\"108\":1}}],[\"在项目目录下安装axios\",{\"1\":{\"51\":1}}],[\"在controller注入\",{\"1\":{\"668\":1,\"669\":1}}],[\"在controller的方法中进行tyr\",{\"1\":{\"96\":1}}],[\"在customer类中\",{\"1\":{\"519\":1}}],[\"在cmd命令中改变编码格式\",{\"1\":{\"106\":1}}],[\"在2号事务方法前加上\",{\"1\":{\"98\":1}}],[\"在无事务状态下运行\",{\"1\":{\"98\":1}}],[\"在指定的索引位置index添加元素ele\",{\"1\":{\"171\":1}}],[\"在指定的方法调用前后\",{\"1\":{\"94\":1}}],[\"在指定的毫秒数后调用函数或计算表达式\",{\"1\":{\"40\":1}}],[\"在application\",{\"1\":{\"81\":1,\"671\":1,\"679\":1}}],[\"在添加套餐数据时\",{\"1\":{\"81\":1}}],[\"在类上通过\",{\"1\":{\"670\":1}}],[\"在类级别\",{\"1\":{\"608\":1}}],[\"在类型前面加上final后这个变量的值就不能修改了\",{\"1\":{\"114\":1}}],[\"在类里面加上注解autowired运行时\",{\"1\":{\"73\":1}}],[\"在类的上面加上注解\",{\"1\":{\"73\":1}}],[\"在当前目录下查找\",{\"1\":{\"331\":1}}],[\"在当前目录下\",{\"1\":{\"275\":1}}],[\"在当前项目中通过依赖配置建立的依赖关系\",{\"1\":{\"59\":1}}],[\"在当前工程的目录下\",{\"1\":{\"50\":1}}],[\"在当前工作目录下新建一个images文件里面放了book\",{\"1\":{\"23\":1}}],[\"在表单元素上创建双向数据绑定\",{\"1\":{\"43\":1}}],[\"在花括号中\",{\"1\":{\"40\":1}}],[\"在双引号中\",{\"1\":{\"40\":1}}],[\"在网页检查\",{\"1\":{\"334\":1}}],[\"在网页中主要负责数据采集功能\",{\"1\":{\"34\":1}}],[\"在网络中进行传输\",{\"1\":{\"40\":1}}],[\"在html文档中\",{\"1\":{\"37\":1}}],[\"在消息体中\",{\"1\":{\"34\":1}}],[\"在url后面拼接表单数据\",{\"1\":{\"34\":1}}],[\"在最下面\",{\"1\":{\"24\":1}}],[\"在标题左边加载图片\",{\"1\":{\"23\":1}}],[\"在获取preparedstatement对象时\",{\"1\":{\"9\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"1\":1}}],[\"将应用程序的配置参数分离到不同的属性文件中\",{\"1\":{\"671\":1}}],[\"将该类标识为应用程序的配置类\",{\"1\":{\"664\":1}}],[\"将该字\",{\"1\":{\"165\":1}}],[\"将要删除的新闻id发送给服务端\",{\"1\":{\"657\":1}}],[\"将数据插入\",{\"1\":{\"655\":1}}],[\"将密码加密\",{\"1\":{\"655\":1}}],[\"将用户数据的密码置空\",{\"1\":{\"655\":1}}],[\"将mapper实例存储到ioc容器\",{\"1\":{\"628\":1}}],[\"将mapunderscoretocamelcase属性配置为true\",{\"1\":{\"509\":1}}],[\"将框架核心组件交给spring进行ioc管理\",{\"1\":{\"617\":1}}],[\"将学习的spring\",{\"1\":{\"617\":1}}],[\"将切点表达式统一存储到一个类中进行集中管理和维护\",{\"1\":{\"591\":1}}],[\"将核心关注点和横切关注点分离开来\",{\"1\":{\"584\":1}}],[\"将日志功能集中到一个代理类中\",{\"1\":{\"583\":1}}],[\"将被标注的类声明为配置类\",{\"1\":{\"665\":1}}],[\"将被代理的目标对象声明为成员变量\",{\"1\":{\"583\":1}}],[\"将被合并为一个新的字符串\",{\"1\":{\"317\":1}}],[\"将非核心逻辑剥离出来以后\",{\"1\":{\"583\":1}}],[\"将重复的代码统一提取\",{\"1\":{\"582\":1}}],[\"将它们定义成\",{\"1\":{\"564\":1}}],[\"将bean注册到spring\",{\"1\":{\"552\":1}}],[\"将组件的实例化过程\",{\"1\":{\"551\":1}}],[\"将组件之间的依赖关系削弱\",{\"1\":{\"551\":1}}],[\"将实体类和数据表进行映射\",{\"1\":{\"537\":1}}],[\"将来有任何日志需求\",{\"1\":{\"583\":1}}],[\"将来其他地方也需要附加日志\",{\"1\":{\"583\":1}}],[\"将来通过这个名字引用遍历出来的对象\",{\"1\":{\"529\":1}}],[\"将来整合\",{\"1\":{\"243\":1,\"493\":1,\"604\":1}}],[\"将查询结果映射到\",{\"1\":{\"514\":1}}],[\"将xxx\",{\"1\":{\"513\":1}}],[\"将x转化为表达式字符串\",{\"1\":{\"295\":1}}],[\"将x转化为字符串\",{\"1\":{\"295\":1}}],[\"将x转换成浮点数类型\",{\"1\":{\"295\":1}}],[\"将x转换为整数类\",{\"1\":{\"295\":1}}],[\"将字段的别名设置成和实体类属性一致\",{\"1\":{\"513\":1}}],[\"将字符串中全部小写字母转换为大写字母\",{\"1\":{\"317\":1}}],[\"将字符串中的全部大写字母转换为小写字母\",{\"1\":{\"317\":1}}],[\"将字符串字面值转为数字\",{\"1\":{\"38\":1}}],[\"将共享资源锁定\",{\"1\":{\"483\":1}}],[\"将对应数据中代表是否被删除字段的状态修改为\",{\"1\":{\"481\":1}}],[\"将对应数据从数据库中删除\",{\"1\":{\"481\":1}}],[\"将id\",{\"1\":{\"477\":1,\"479\":1}}],[\"将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改\",{\"1\":{\"476\":1,\"477\":1}}],[\"将\",{\"0\":{\"426\":1}}],[\"将所需构件下载并缓存到\",{\"1\":{\"421\":1}}],[\"将所需构件下载到本地仓库\",{\"1\":{\"421\":1}}],[\"将以下内容复制到文件中\",{\"1\":{\"412\":1}}],[\"将栈中的节点进行打印\",{\"1\":{\"371\":1}}],[\"将链表的所有节点压入栈中\",{\"1\":{\"371\":1}}],[\"将各个节点压入栈中\",{\"1\":{\"371\":1}}],[\"将各个节点压入到栈中\",{\"1\":{\"371\":1}}],[\"将temp\",{\"1\":{\"370\":1}}],[\"将temp后移\",{\"1\":{\"370\":1,\"371\":1}}],[\"将最后这个节点的next指向新的节点\",{\"1\":{\"370\":1}}],[\"将临时保存的变量返回\",{\"1\":{\"370\":1}}],[\"将front后裔\",{\"1\":{\"370\":1}}],[\"将file的对象作为形参传递给fileoutputstream的构造器中\",{\"1\":{\"184\":1}}],[\"将这个数组使用算法\",{\"1\":{\"369\":1}}],[\"将这个按钮加入当前\",{\"1\":{\"23\":2}}],[\"将二维数组的有效数据存入到稀疏数组中\",{\"1\":{\"365\":1}}],[\"将二位数组的行列颠倒\",{\"0\":{\"125\":1}}],[\"将周杰伦三个字变成unicode编码的格式\",{\"1\":{\"354\":1}}],[\"将其内容复制下来\",{\"1\":{\"334\":1}}],[\"将序列组合为一个索引序列\",{\"1\":{\"333\":1}}],[\"将序列转换为字符串\",{\"1\":{\"333\":1}}],[\"将序列转换为列表\",{\"1\":{\"333\":1}}],[\"将方法转换为属性后\",{\"1\":{\"328\":1}}],[\"将方法返回值直接响应\",{\"1\":{\"69\":1}}],[\"将返回none\",{\"1\":{\"325\":1}}],[\"将^和$用于包括整个字符串的开始和结尾的每一行\",{\"1\":{\"320\":1}}],[\"将一个数组中的值按逆序重新存放\",{\"1\":{\"375\":1}}],[\"将一个方法转换为属性\",{\"1\":{\"328\":1}}],[\"将一个列表中的全部元素添加到另一个列表\",{\"1\":{\"309\":1}}],[\"将一个整数x转换为一个八进制的字符串\",{\"1\":{\"295\":1}}],[\"将一个整数x转换为一个十六进制的字符串\",{\"1\":{\"295\":1}}],[\"将一个字符x转换为它对应的整数值\",{\"1\":{\"295\":1}}],[\"将整数x转化为一个字符\",{\"1\":{\"295\":1}}],[\"将两段文本\",{\"1\":{\"293\":1}}],[\"将多行内容隐式的连接起来\",{\"1\":{\"293\":1}}],[\"将druid连接池对象存储到ioc容器\",{\"1\":{\"236\":1,\"572\":1}}],[\"将类com\",{\"1\":{\"224\":1}}],[\"将类的属性私有化\",{\"1\":{\"135\":1}}],[\"将交给ioc管理的对象\",{\"1\":{\"224\":1}}],[\"将工厂类进行ioc配置\",{\"1\":{\"223\":1,\"557\":1}}],[\"将依赖关系在容器内部进行处理\",{\"1\":{\"221\":1,\"553\":1}}],[\"将代码中的重复的非核心业务提取到一个公共模块\",{\"1\":{\"211\":1}}],[\"将线程要执行的操作\",{\"1\":{\"196\":1,\"207\":1}}],[\"将此对象作为参数传递到thread类的构造器中\",{\"1\":{\"195\":1,\"206\":1}}],[\"将此对象作为形参传递给treeset的构造器中\",{\"1\":{\"175\":1}}],[\"将此线程要执行的操作声明在此方法发中\",{\"1\":{\"195\":1,\"206\":1}}],[\"将此线程要执行的操作声明在此方法体中\",{\"1\":{\"194\":1,\"205\":1}}],[\"将替换后的内容写入到d\",{\"1\":{\"188\":1}}],[\"将硬盘中的文件通过objectinputstream转化为相应的对象\",{\"1\":{\"187\":1}}],[\"将内存中的对象通过objectoutputstream转化为二进制流\",{\"1\":{\"187\":1}}],[\"将sqlsessionfactory实例存储到ioc容器\",{\"1\":{\"628\":1}}],[\"将sql语句发送给mysql服务器进行检查\",{\"1\":{\"9\":1}}],[\"将src中的内容复制到dest中\",{\"1\":{\"180\":1}}],[\"将指定list集合中i处元素和j处元素进行交换\",{\"1\":{\"180\":1}}],[\"将集合转化为数组\",{\"1\":{\"170\":1}}],[\"将形参coll中包含的所有元素添加到当前集合中\",{\"1\":{\"170\":1}}],[\"将父类对象\",{\"1\":{\"146\":1}}],[\"将当前方法交给spring进行事务管理\",{\"1\":{\"97\":1}}],[\"将header\",{\"1\":{\"92\":1}}],[\"将会报出如下错误\",{\"1\":{\"75\":1}}],[\"将会转换为json格式响应\",{\"1\":{\"69\":1}}],[\"将项目放置到webapps目录下\",{\"1\":{\"65\":1}}],[\"将不用输入端口号\",{\"1\":{\"65\":1}}],[\"将编译后的文件打包\",{\"1\":{\"59\":1}}],[\"将编程的关注点放在数据上\",{\"1\":{\"42\":1}}],[\"将标记语言\",{\"1\":{\"40\":1}}],[\"将新元素添加到数组的末尾\",{\"1\":{\"40\":1}}],[\"将js代码定义在外部js文件中\",{\"1\":{\"37\":1}}],[\"将js代码定义在html页面中\",{\"1\":{\"37\":1}}],[\"将菜单里面的两个选项添加到菜单当中\",{\"1\":{\"28\":2}}],[\"将每一个选项下的条目添加到选项当中\",{\"1\":{\"28\":2}}],[\"将按钮放在北边\",{\"1\":{\"23\":1}}],[\"将敏感字符转义\",{\"1\":{\"9\":1}}],[\"将光标从当前位置向前移动一行\",{\"1\":{\"7\":1}}],[\"从token字符串获取userid\",{\"1\":{\"655\":1}}],[\"从作用域的角度来说\",{\"1\":{\"628\":1}}],[\"从每个方法中抽取出来的同一类非核心业务\",{\"1\":{\"584\":1}}],[\"从spring\",{\"1\":{\"549\":1,\"552\":2}}],[\"从ssh\",{\"1\":{\"545\":1}}],[\"从session中获取数据\",{\"1\":{\"91\":1}}],[\"从org\",{\"1\":{\"509\":1}}],[\"从原来的java类\",{\"1\":{\"493\":1}}],[\"从0开始自增\",{\"1\":{\"480\":1}}],[\"从以上步骤中\",{\"1\":{\"461\":1}}],[\"从私服下载构建更快更稳定\",{\"1\":{\"421\":1}}],[\"从头到尾打印单链表\",{\"1\":{\"371\":1}}],[\"从头到尾遍历原来的链表\",{\"1\":{\"371\":1}}],[\"从队列取出数据\",{\"1\":{\"368\":1}}],[\"从大到小\",{\"1\":{\"334\":1}}],[\"从linux下载文件到本地\",{\"1\":{\"274\":1}}],[\"从下到上\",{\"1\":{\"260\":1}}],[\"从上面的代码对比可以看出\",{\"1\":{\"478\":1}}],[\"从上代下\",{\"1\":{\"260\":1}}],[\"从上到下依次执行条件判断\",{\"1\":{\"528\":1}}],[\"从上到下\",{\"1\":{\"257\":2}}],[\"从尾部开始排列\",{\"1\":{\"258\":1}}],[\"从右到左\",{\"1\":{\"257\":1}}],[\"从文件读出对象\",{\"1\":{\"187\":1}}],[\"从硬盘读取一个文件\",{\"1\":{\"185\":1}}],[\"从硬盘存在的一个文件中\",{\"1\":{\"183\":1}}],[\"从当前元素中删除包含在coll中的元素\",{\"1\":{\"170\":1}}],[\"从小范围转向了大范围\",{\"1\":{\"146\":1}}],[\"从效果上看\",{\"1\":{\"143\":1}}],[\"从java9开始\",{\"1\":{\"144\":1}}],[\"从java9\",{\"1\":{\"142\":1,\"144\":1}}],[\"从java\",{\"1\":{\"141\":1,\"150\":1}}],[\"从java8开始\",{\"1\":{\"140\":1,\"144\":1}}],[\"从最后面的else往上开始找\",{\"1\":{\"121\":1}}],[\"从而减少了错误和歧义\",{\"1\":{\"669\":1}}],[\"从而使应用程序的配置变得简单和维护成本降低\",{\"1\":{\"665\":1}}],[\"从而长时间占用数据库资源\",{\"1\":{\"609\":1}}],[\"从而代替xml配置文件的方式\",{\"1\":{\"552\":1}}],[\"从而提高工作效率和开发速度\",{\"1\":{\"545\":1}}],[\"从而提高了应用程序的稳定性\",{\"1\":{\"545\":1}}],[\"从而影响系统的健康性和安全性\",{\"1\":{\"545\":1}}],[\"从而导致应用程序无法满足要求\",{\"1\":{\"545\":1}}],[\"从而获取到对应的数据\",{\"1\":{\"503\":1}}],[\"从而保留了删除前的数据\",{\"1\":{\"481\":1}}],[\"从而引发错误\",{\"1\":{\"412\":1,\"449\":1}}],[\"从而无法下载依赖\",{\"1\":{\"412\":1,\"449\":1}}],[\"从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题\",{\"1\":{\"408\":1,\"447\":1}}],[\"从而缩小程序的规模\",{\"1\":{\"365\":1}}],[\"从而实现多环境配置\",{\"1\":{\"671\":1}}],[\"从而实现用于计算的属性\",{\"1\":{\"328\":1}}],[\"从而实现一些特殊的功能\",{\"1\":{\"93\":1}}],[\"从而允许把这种二进制流\",{\"1\":{\"187\":1}}],[\"从而可以解决多线程并发访问集合时的线程安全问题\",{\"1\":{\"180\":1}}],[\"从而打印出类中的属性\",{\"1\":{\"130\":1}}],[\"从而阻止sql注入\",{\"1\":{\"8\":1}}],[\"从httpsession中获取值\",{\"1\":{\"91\":1}}],[\"从数组中删除元素从3开始删除2个\",{\"1\":{\"40\":1}}],[\"从1开始\",{\"1\":{\"8\":1}}],[\"或更高版本\",{\"1\":{\"663\":1}}],[\"或这项工作\",{\"1\":{\"583\":1}}],[\"或任何基于类\",{\"1\":{\"524\":1}}],[\"或其它类似的框架\",{\"1\":{\"524\":1}}],[\"或注解来配置和映射原始类型\",{\"1\":{\"491\":1}}],[\"或读写锁\",{\"1\":{\"483\":1}}],[\"或字符集合\",{\"1\":{\"346\":1}}],[\"或下划线字符\",{\"1\":{\"345\":1}}],[\"或xmlcharrefreplace\",{\"1\":{\"317\":1}}],[\"或基本类型都能注入\",{\"1\":{\"224\":1}}],[\"或remove\",{\"1\":{\"197\":1}}],[\"或是正在内存中运行的应用程序\",{\"1\":{\"192\":1,\"203\":1}}],[\"或通过网络将这种二进制流传输到另一个网络节点\",{\"1\":{\"187\":1}}],[\"或者类\",{\"1\":{\"681\":1}}],[\"或者可以理解成被选中的连接点\",{\"1\":{\"584\":1}}],[\"或者可以将清除lastupdated文件的操作写在一个脚本文件中\",{\"1\":{\"412\":1}}],[\"或者开启驼峰映射也可以自定映射\",{\"1\":{\"521\":1}}],[\"或者字符串类型主键\",{\"1\":{\"512\":1}}],[\"或者说依赖信息组合\",{\"1\":{\"418\":1,\"452\":1}}],[\"或者依赖项没有正确定义\",{\"1\":{\"412\":1,\"449\":1}}],[\"或者使用的是新的本地仓库\",{\"1\":{\"399\":1}}],[\"或者增加了能改变产品方向的新功能\",{\"1\":{\"398\":1,\"442\":1}}],[\"或者框架封装程度越来越高\",{\"1\":{\"387\":1}}],[\"或者只有一个节点\",{\"1\":{\"371\":1}}],[\"或者为同一个值的数组时\",{\"1\":{\"365\":1}}],[\"或者r的全体属性均为主属性\",{\"1\":{\"341\":1}}],[\"或者省略了return语句的参数时\",{\"1\":{\"325\":1}}],[\"或者元组\",{\"1\":{\"314\":1}}],[\"或者三个双引号也行\",{\"1\":{\"293\":1}}],[\"或者接口的实现类\",{\"1\":{\"226\":1,\"559\":1}}],[\"或者之类\",{\"1\":{\"226\":1,\"559\":1}}],[\"或者一个文件夹\",{\"1\":{\"182\":1}}],[\"或者是父类的子类\",{\"1\":{\"151\":1}}],[\"或者\",{\"1\":{\"145\":1,\"231\":1,\"480\":1,\"590\":2}}],[\"或者查看\",{\"1\":{\"0\":1}}],[\"或初始化块\",{\"1\":{\"130\":1}}],[\"或美元符号\",{\"1\":{\"38\":1}}],[\"或\",{\"1\":{\"17\":1,\"398\":1,\"415\":1,\"442\":1,\"480\":1,\"507\":1,\"515\":5,\"669\":1}}],[\"或executequery\",{\"1\":{\"8\":1}}],[\"的事务管理了\",{\"1\":{\"681\":1}}],[\"的starter\",{\"1\":{\"665\":1}}],[\"的原则\",{\"1\":{\"665\":1}}],[\"的底气\",{\"1\":{\"651\":1}}],[\"的战略\",{\"1\":{\"651\":1}}],[\"的口号\",{\"1\":{\"651\":1}}],[\"的内部文件中\",{\"1\":{\"651\":1}}],[\"的内容\",{\"1\":{\"334\":1}}],[\"的作文命题时\",{\"1\":{\"651\":1}}],[\"的版本号\",{\"1\":{\"636\":1}}],[\"的最佳作用域是应用作用域\",{\"1\":{\"628\":1}}],[\"的最佳实践是在应用运行期间不要重复创建多次\",{\"1\":{\"628\":1}}],[\"的组件\",{\"1\":{\"617\":1}}],[\"的技术\",{\"1\":{\"584\":1}}],[\"的id进行匹配\",{\"1\":{\"566\":1}}],[\"的getobject方法\",{\"1\":{\"561\":1}}],[\"的实例不是线程安全的\",{\"1\":{\"628\":1}}],[\"的实例\",{\"1\":{\"555\":1}}],[\"的实现非常接近\",{\"1\":{\"515\":1}}],[\"的完整超集\",{\"1\":{\"552\":1}}],[\"的数据库操作mapper\",{\"1\":{\"539\":1}}],[\"的数据类型为\",{\"1\":{\"40\":1}}],[\"的逆向工程为程序员提供了一种方便快捷的方式\",{\"1\":{\"538\":1}}],[\"的逆向工程有两种方式\",{\"1\":{\"538\":1}}],[\"的逆向工程是一种自动化生成持久层代码和映射文件的工具\",{\"1\":{\"538\":1}}],[\"的使用方式\",{\"1\":{\"534\":1}}],[\"的强大特性之一\",{\"1\":{\"524\":1}}],[\"的result标签\",{\"1\":{\"521\":1}}],[\"的一端的属性名\",{\"1\":{\"519\":1}}],[\"的关联关系\",{\"1\":{\"519\":1}}],[\"的返回值或\",{\"1\":{\"515\":1}}],[\"的返回结果\",{\"1\":{\"226\":1,\"559\":1}}],[\"的命名引用\",{\"1\":{\"515\":1}}],[\"的真正强大在于它的语句映射\",{\"1\":{\"515\":1}}],[\"的表达式\",{\"1\":{\"524\":1}}],[\"的表\",{\"1\":{\"514\":1}}],[\"的语句就是一个\",{\"1\":{\"512\":1}}],[\"的类型并使用完全限定的类名\",{\"1\":{\"555\":1}}],[\"的类型为\",{\"1\":{\"512\":1}}],[\"的类标识为\",{\"1\":{\"231\":1,\"564\":1}}],[\"的插件\",{\"1\":{\"535\":1}}],[\"的插件机制包括以下三个组件\",{\"1\":{\"534\":1}}],[\"的插件机制也使得开发者可以对构建过程进行扩展和定制\",{\"1\":{\"390\":1,\"439\":1}}],[\"的插入语句来将\",{\"1\":{\"512\":1}}],[\"的别名为\",{\"1\":{\"508\":1}}],[\"的首字母小写的非限定类名来作为它的别名\",{\"1\":{\"508\":1}}],[\"的地方\",{\"1\":{\"508\":1}}],[\"的输出效果\",{\"1\":{\"496\":1}}],[\"的代码生成插件\",{\"1\":{\"539\":1}}],[\"的代码\",{\"1\":{\"493\":1,\"515\":1}}],[\"的快速开发插件\",{\"1\":{\"486\":1}}],[\"的快捷键是\",{\"1\":{\"108\":1}}],[\"的email设置为null\",{\"1\":{\"477\":1,\"479\":1}}],[\"的基础上只做增强不做改变\",{\"1\":{\"460\":1}}],[\"的增强工具\",{\"1\":{\"460\":1}}],[\"的项目中\",{\"1\":{\"418\":1,\"452\":1}}],[\"的前提下\",{\"1\":{\"415\":1}}],[\"的配置元数据的基本结构\",{\"1\":{\"555\":1}}],[\"的配置文件中添加\",{\"1\":{\"535\":1}}],[\"的配置文件中添加插件即可\",{\"1\":{\"534\":1}}],[\"的配置导入合并到当前\",{\"1\":{\"411\":1}}],[\"的配置类\",{\"1\":{\"235\":1,\"571\":1}}],[\"的依赖注入\",{\"1\":{\"558\":1}}],[\"的依赖范围一致\",{\"1\":{\"411\":1}}],[\"的依赖管理是\",{\"1\":{\"408\":1}}],[\"的依赖管理能够帮助开发人员自动解决软件包依赖问题\",{\"1\":{\"408\":1,\"447\":1}}],[\"的理解和使用即可\",{\"1\":{\"390\":1}}],[\"的坐标\",{\"1\":{\"387\":1}}],[\"的下一个节点来删除的\",{\"1\":{\"371\":1}}],[\"的节点\",{\"1\":{\"370\":1,\"371\":1}}],[\"的第二个作用就是分组\",{\"1\":{\"347\":1}}],[\"的多次重复\",{\"1\":{\"346\":1}}],[\"的属性\",{\"1\":{\"334\":1}}],[\"的成绩为\",{\"1\":{\"334\":1}}],[\"的框架基础接口\",{\"1\":{\"230\":1,\"561\":1}}],[\"的接口\",{\"1\":{\"230\":1,\"561\":1}}],[\"的装配和依赖注入等\",{\"1\":{\"230\":1,\"561\":1}}],[\"的生命周期\",{\"1\":{\"230\":1,\"561\":1}}],[\"的生命周期要早于非静态的结构\",{\"1\":{\"130\":1}}],[\"的\",{\"1\":{\"230\":1,\"231\":1,\"236\":1,\"411\":1,\"424\":1,\"426\":1,\"475\":1,\"514\":1,\"515\":1,\"552\":1,\"557\":1,\"561\":1,\"564\":3,\"566\":1,\"572\":1,\"623\":1}}],[\"的对象始终为单实例\",{\"1\":{\"228\":1,\"560\":1,\"565\":1}}],[\"的名称\",{\"1\":{\"223\":1,\"557\":1}}],[\"的子接口\",{\"1\":{\"221\":1,\"552\":1}}],[\"的补充和完善\",{\"1\":{\"211\":1,\"584\":1}}],[\"的调用\",{\"1\":{\"194\":1,\"205\":1}}],[\"的方法\",{\"1\":{\"183\":1,\"334\":1}}],[\"的方式传值\",{\"1\":{\"498\":1}}],[\"的方式\",{\"1\":{\"230\":1,\"561\":1}}],[\"的方式处理异常\",{\"1\":{\"183\":1}}],[\"的方式进行\",{\"1\":{\"180\":1}}],[\"的方式对相应的对象赋值的话\",{\"1\":{\"135\":1}}],[\"的方式调用\",{\"1\":{\"130\":1}}],[\"的集合\",{\"1\":{\"169\":1}}],[\"的时候\",{\"1\":{\"151\":2,\"197\":1,\"208\":1,\"564\":1}}],[\"的形式\",{\"1\":{\"135\":1}}],[\"的形式来调用\",{\"1\":{\"130\":1}}],[\"的区别是什么\",{\"1\":{\"405\":1}}],[\"的区别主要在于前者是用于创建\",{\"1\":{\"230\":1,\"561\":1}}],[\"的区别\",{\"1\":{\"118\":1}}],[\"的各个部分封装成对应的对象\",{\"1\":{\"40\":1}}],[\"的值\",{\"1\":{\"8\":1}}],[\"的位置编号\",{\"1\":{\"8\":1}}],[\"2接口分析\",{\"0\":{\"634\":1},\"1\":{\"615\":1}}],[\"28<\",{\"1\":{\"461\":2,\"652\":2,\"677\":2,\"680\":2}}],[\"28\",{\"1\":{\"461\":2,\"651\":2}}],[\"2项目搭建和统一构建\",{\"0\":{\"456\":1},\"1\":{\"436\":1}}],[\"2依赖传递和冲突\",{\"0\":{\"448\":1},\"1\":{\"436\":1}}],[\"2<\",{\"1\":{\"404\":1,\"413\":1,\"431\":2,\"450\":1,\"456\":1,\"625\":1}}],[\"26<\",{\"1\":{\"625\":1}}],[\"269\",{\"1\":{\"566\":1}}],[\"268行附近\",{\"1\":{\"395\":1,\"440\":1}}],[\"26\",{\"1\":{\"387\":1,\"625\":1,\"651\":4}}],[\"263~263\",{\"1\":{\"112\":1}}],[\"2nf\",{\"1\":{\"341\":1}}],[\"2为数组下标\",{\"1\":{\"334\":1}}],[\"2的三次方\",{\"1\":{\"334\":1}}],[\"29\",{\"1\":{\"318\":1}}],[\"2d1dee39\",{\"1\":{\"213\":1}}],[\"2==0\",{\"1\":{\"194\":1,\"205\":1}}],[\"24\",{\"1\":{\"163\":2,\"186\":2,\"461\":2,\"609\":1}}],[\"242\",{\"1\":{\"28\":2}}],[\"255\",{\"1\":{\"640\":1}}],[\"250标准中制定的注解类型\",{\"1\":{\"566\":1}}],[\"250注解\",{\"1\":{\"566\":1}}],[\"250\",{\"1\":{\"334\":1,\"566\":3}}],[\"25<\",{\"1\":{\"220\":1,\"244\":1,\"493\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":1}}],[\"25\",{\"1\":{\"162\":1,\"334\":1,\"440\":1,\"588\":2,\"625\":2,\"651\":36}}],[\"23赛季年度最佳新秀\",{\"1\":{\"651\":1}}],[\"23日下午\",{\"1\":{\"651\":1}}],[\"23日\",{\"1\":{\"651\":1}}],[\"230\",{\"1\":{\"334\":1}}],[\"23\",{\"1\":{\"126\":1,\"130\":1,\"164\":1,\"178\":2,\"187\":1,\"189\":2,\"200\":2,\"298\":1,\"316\":1,\"334\":2}}],[\"231~231\",{\"1\":{\"112\":1}}],[\"2个字节\",{\"1\":{\"112\":1}}],[\"2字节\",{\"1\":{\"112\":1}}],[\"273\",{\"1\":{\"426\":1}}],[\"27\",{\"1\":{\"112\":1}}],[\"2f\",{\"1\":{\"108\":1}}],[\"2号事务也会回滚\",{\"1\":{\"98\":1}}],[\"2xx成功\",{\"1\":{\"64\":1}}],[\"22日8时至16时\",{\"1\":{\"651\":1}}],[\"22日18时\",{\"1\":{\"651\":1}}],[\"22日\",{\"1\":{\"651\":1}}],[\"22日以来\",{\"1\":{\"651\":1}}],[\"22\",{\"1\":{\"162\":2,\"163\":1,\"178\":1,\"192\":1,\"203\":1}}],[\"22<\",{\"1\":{\"78\":1}}],[\"222\",{\"1\":{\"34\":2}}],[\"223\",{\"1\":{\"34\":2}}],[\"220\",{\"1\":{\"25\":2}}],[\"2010年6月这个项目由apache\",{\"1\":{\"491\":1}}],[\"2019\",{\"1\":{\"440\":1}}],[\"20\",{\"1\":{\"43\":1,\"145\":1,\"149\":2,\"150\":1,\"169\":1,\"185\":2,\"197\":4,\"315\":1,\"461\":3,\"476\":2,\"477\":1,\"484\":1,\"515\":3,\"527\":1,\"562\":3,\"568\":3,\"575\":3,\"651\":8,\"656\":1,\"677\":1}}],[\"20<br\",{\"1\":{\"34\":1}}],[\"2021年\",{\"1\":{\"651\":1}}],[\"2023赛季ctcc中国汽车场地职业联赛绍兴柯桥站在雨中的浙江国际赛车场上演了两回合决赛的巅峰角逐\",{\"1\":{\"651\":1}}],[\"2023年f1加拿大大奖赛正式比赛结束\",{\"1\":{\"651\":1}}],[\"20231023120733029\",{\"1\":{\"434\":1}}],[\"20231023120621402\",{\"1\":{\"433\":1}}],[\"20231023115707282\",{\"1\":{\"433\":1}}],[\"20231023115404302\",{\"1\":{\"433\":1}}],[\"20231023114649705\",{\"1\":{\"432\":1}}],[\"20231023114531521\",{\"1\":{\"432\":1}}],[\"20231023112630117\",{\"1\":{\"431\":1}}],[\"20231021164631791\",{\"1\":{\"421\":1}}],[\"20231021161615994\",{\"1\":{\"412\":1}}],[\"20231021153444864\",{\"1\":{\"405\":1}}],[\"20231021152310802\",{\"1\":{\"400\":1}}],[\"20231021151921943\",{\"1\":{\"400\":1}}],[\"20231021151753318\",{\"1\":{\"400\":1}}],[\"20231021151627161\",{\"1\":{\"400\":1}}],[\"20231021151040531\",{\"1\":{\"400\":1}}],[\"20231021150134082\",{\"1\":{\"400\":1}}],[\"20231021145713433\",{\"1\":{\"399\":1}}],[\"20231021145024505\",{\"1\":{\"399\":1}}],[\"20231021143559114\",{\"1\":{\"399\":1}}],[\"20231021112046512\",{\"1\":{\"396\":1}}],[\"20231021110938230\",{\"1\":{\"394\":1}}],[\"20231021110800113\",{\"1\":{\"393\":1}}],[\"20231021103758624\",{\"1\":{\"388\":1}}],[\"20231021102831531\",{\"1\":{\"387\":1}}],[\"20231021101825708\",{\"1\":{\"387\":1}}],[\"20231031175134745\",{\"1\":{\"425\":1}}],[\"20231031175035345\",{\"1\":{\"425\":1}}],[\"20231031172137288\",{\"1\":{\"425\":1}}],[\"20231031171708085\",{\"1\":{\"423\":1}}],[\"20231031171607378\",{\"1\":{\"423\":1}}],[\"20231031171242874\",{\"1\":{\"423\":1}}],[\"20231031171116756\",{\"1\":{\"423\":1}}],[\"2023\",{\"1\":{\"406\":1,\"539\":1,\"609\":1,\"651\":36}}],[\"2022年\",{\"1\":{\"651\":1}}],[\"2022\",{\"1\":{\"277\":1,\"393\":1,\"588\":5}}],[\"2024南京大学jyy操作系统设计与实现\",{\"1\":{\"337\":1}}],[\"20240802162750173\",{\"1\":{\"211\":1}}],[\"2024\",{\"1\":{\"34\":1,\"162\":2,\"163\":4}}],[\"2020年9月18日\",{\"1\":{\"269\":1}}],[\"2020\",{\"1\":{\"0\":1}}],[\"20px\",{\"1\":{\"34\":1,\"36\":1}}],[\"200成功状态码\",{\"1\":{\"640\":1}}],[\"2000\",{\"1\":{\"525\":1}}],[\"200正确\",{\"1\":{\"351\":1}}],[\"2001\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"200请求成功\",{\"1\":{\"64\":1}}],[\"200px\",{\"1\":{\"36\":2,\"253\":1}}],[\"200\",{\"1\":{\"25\":1,\"26\":2,\"28\":5,\"45\":1,\"188\":1,\"252\":1,\"253\":2,\"334\":1,\"493\":1,\"625\":1,\"634\":4,\"640\":1,\"652\":1,\"655\":8,\"656\":4,\"657\":5}}],[\"2134435\",{\"1\":{\"334\":1}}],[\"213\",{\"1\":{\"177\":2}}],[\"215~215\",{\"1\":{\"112\":1}}],[\"21\",{\"1\":{\"16\":3,\"17\":2,\"130\":1,\"176\":2,\"187\":1,\"189\":1,\"200\":1,\"387\":1,\"426\":1,\"461\":2}}],[\"2\",{\"0\":{\"49\":1,\"241\":1,\"388\":1,\"390\":1,\"394\":1,\"399\":1,\"404\":1,\"409\":1,\"416\":1,\"419\":1,\"422\":1,\"430\":1,\"439\":1,\"442\":1,\"443\":2,\"444\":1,\"445\":1,\"453\":1,\"461\":1,\"462\":1,\"468\":2,\"472\":1,\"473\":1,\"474\":1,\"475\":2,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"483\":1,\"484\":2,\"487\":1,\"492\":1,\"495\":1,\"496\":1,\"497\":2,\"498\":1,\"499\":2,\"500\":2,\"501\":3,\"502\":2,\"503\":2,\"504\":2,\"505\":2,\"506\":1,\"507\":1,\"508\":2,\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"514\":1,\"515\":1,\"518\":1,\"522\":1,\"525\":1,\"533\":1,\"534\":1,\"535\":2,\"538\":1,\"545\":1,\"547\":1,\"548\":2,\"549\":1,\"552\":1,\"556\":1,\"557\":1,\"558\":2,\"559\":1,\"560\":1,\"561\":1,\"562\":1,\"565\":1,\"571\":1,\"578\":1,\"583\":1,\"588\":1,\"599\":1,\"603\":1,\"605\":1,\"606\":1,\"607\":2,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"612\":1,\"618\":1,\"619\":1,\"620\":2,\"621\":1,\"622\":1,\"623\":1,\"625\":1,\"626\":2,\"627\":1,\"628\":1,\"629\":1,\"630\":1,\"635\":1,\"636\":1,\"637\":2,\"641\":1,\"652\":1,\"656\":1,\"663\":1,\"667\":1,\"668\":2,\"669\":1,\"670\":1,\"671\":1,\"674\":1,\"680\":1,\"685\":1},\"1\":{\"8\":1,\"11\":1,\"23\":1,\"24\":2,\"28\":2,\"34\":3,\"40\":1,\"45\":1,\"50\":1,\"59\":2,\"78\":1,\"85\":1,\"100\":1,\"121\":6,\"124\":5,\"126\":1,\"130\":2,\"132\":1,\"135\":1,\"138\":2,\"160\":1,\"164\":1,\"170\":2,\"176\":1,\"177\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":1,\"189\":1,\"191\":1,\"194\":1,\"196\":1,\"200\":1,\"202\":1,\"205\":1,\"207\":1,\"220\":1,\"223\":1,\"224\":2,\"231\":1,\"244\":1,\"252\":1,\"253\":2,\"254\":1,\"277\":1,\"305\":3,\"306\":2,\"307\":3,\"310\":2,\"311\":1,\"312\":4,\"315\":6,\"316\":7,\"317\":1,\"334\":10,\"351\":1,\"365\":6,\"366\":8,\"370\":3,\"371\":3,\"387\":27,\"393\":1,\"395\":1,\"396\":1,\"398\":2,\"404\":1,\"406\":4,\"410\":2,\"412\":3,\"415\":1,\"416\":9,\"421\":1,\"425\":17,\"426\":1,\"429\":2,\"431\":1,\"436\":7,\"440\":1,\"442\":2,\"447\":2,\"448\":11,\"449\":1,\"450\":1,\"455\":2,\"456\":1,\"459\":19,\"461\":3,\"472\":2,\"478\":1,\"489\":40,\"493\":1,\"518\":1,\"535\":1,\"542\":30,\"551\":1,\"552\":6,\"555\":2,\"557\":1,\"558\":2,\"562\":3,\"564\":1,\"566\":1,\"568\":2,\"571\":1,\"575\":2,\"583\":1,\"584\":1,\"588\":11,\"589\":1,\"590\":1,\"606\":1,\"615\":19,\"625\":6,\"626\":1,\"627\":1,\"628\":2,\"634\":1,\"641\":1,\"644\":2,\"651\":17,\"652\":3,\"655\":6,\"656\":7,\"657\":5,\"660\":10,\"664\":1,\"677\":2,\"680\":1}}],[\"赋值给对象中的\",{\"1\":{\"512\":1}}],[\"赋值运算符=\",{\"1\":{\"38\":1}}],[\"赋值\",{\"1\":{\"8\":1,\"238\":1,\"573\":1}}],[\"给那些对价格敏感\",{\"1\":{\"651\":1}}],[\"给service装配dao\",{\"1\":{\"566\":1}}],[\"给controller装配service\",{\"1\":{\"566\":1}}],[\"给开发人员带来了更好的开发体验\",{\"1\":{\"547\":1}}],[\"给实体类起别名\",{\"1\":{\"514\":1,\"628\":2}}],[\"给每一个字段设置一个别名\",{\"1\":{\"509\":1,\"513\":1}}],[\"给bean的属性赋值\",{\"1\":{\"236\":1,\"572\":1}}],[\"给客户端发送消息\",{\"1\":{\"191\":1,\"202\":1}}],[\"给属性赋值的时候加上一些限制\",{\"1\":{\"135\":1}}],[\"给字段起别名\",{\"1\":{\"81\":1}}],[\"给浏览器返回字符串\",{\"1\":{\"61\":1}}],[\"给条目绑定事件\",{\"1\":{\"28\":1}}],[\"给整个界面设置菜单\",{\"1\":{\"28\":2}}],[\"给整个窗口添加键盘监听\",{\"1\":{\"28\":1}}],[\"给按钮绑定一个鼠标事件\",{\"1\":{\"27\":1}}],[\"给按钮添加动作监听\",{\"1\":{\"26\":2}}],[\"给\",{\"1\":{\"8\":1,\"233\":1,\"566\":2}}],[\"wait\",{\"1\":{\"677\":1}}],[\"wac\",{\"1\":{\"621\":7}}],[\"was\",{\"1\":{\"609\":1}}],[\"warn\",{\"1\":{\"625\":1}}],[\"war文件\",{\"1\":{\"439\":1}}],[\"war<\",{\"1\":{\"409\":1,\"447\":1}}],[\"war指的是web项目打包方式\",{\"1\":{\"409\":1,\"447\":1}}],[\"war包版本插件不匹配\",{\"1\":{\"404\":1,\"431\":1,\"450\":1,\"456\":1}}],[\"war包打包插件和jdk版本不匹配\",{\"1\":{\"404\":1}}],[\"war结尾的文件\",{\"1\":{\"398\":1,\"442\":1}}],[\"war\",{\"1\":{\"398\":1,\"404\":1,\"431\":1,\"442\":1,\"450\":1,\"456\":1}}],[\"war等\",{\"1\":{\"59\":1}}],[\"ws\",{\"1\":{\"387\":1}}],[\"wd\",{\"1\":{\"354\":1}}],[\"wd=\",{\"1\":{\"353\":1,\"354\":1}}],[\"w只能匹配单个字符\",{\"1\":{\"346\":1}}],[\"wl\",{\"1\":{\"338\":1}}],[\"w如果文件已经存在\",{\"1\":{\"334\":1}}],[\"w+\",{\"1\":{\"320\":1}}],[\"wo\",{\"1\":{\"317\":1}}],[\"working\",{\"1\":{\"426\":1}}],[\"work\",{\"1\":{\"334\":4,\"423\":1}}],[\"workspace\",{\"1\":{\"187\":1}}],[\"word\",{\"1\":{\"334\":2}}],[\"world~\",{\"1\":{\"61\":1}}],[\"world\",{\"1\":{\"16\":1,\"34\":1,\"61\":2,\"81\":1,\"184\":1,\"317\":12,\"338\":1,\"478\":3}}],[\"wrapper<t>\",{\"1\":{\"464\":2,\"465\":2,\"466\":8,\"471\":13,\"474\":1}}],[\"wrapper\",{\"1\":{\"464\":3,\"465\":1,\"466\":11,\"471\":8,\"474\":2,\"475\":1,\"484\":1}}],[\"wrap属性的复合属性\",{\"1\":{\"262\":1}}],[\"wrap属性定义\",{\"1\":{\"259\":1}}],[\"wrap\",{\"0\":{\"259\":1},\"1\":{\"256\":2,\"259\":2}}],[\"writevalueasstring\",{\"1\":{\"657\":1}}],[\"writeobject\",{\"1\":{\"187\":3,\"188\":2}}],[\"writer|filewriter\",{\"1\":{\"181\":1}}],[\"writer\",{\"1\":{\"181\":1}}],[\"write\",{\"1\":{\"38\":1,\"93\":2,\"95\":2,\"181\":1,\"184\":1,\"185\":4,\"186\":1,\"188\":3,\"191\":4,\"202\":4,\"334\":3,\"356\":1,\"460\":1,\"483\":1}}],[\"w3\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"w3school\",{\"1\":{\"34\":2}}],[\"w3school在线教程\",{\"1\":{\"0\":1}}],[\"w\",{\"1\":{\"149\":6,\"150\":3,\"317\":5,\"320\":2,\"334\":1,\"345\":2,\"346\":2,\"347\":1,\"356\":1}}],[\"wwww\",{\"1\":{\"324\":2}}],[\"www\",{\"1\":{\"34\":1,\"40\":1,\"43\":1,\"224\":4,\"228\":4,\"229\":4,\"231\":7,\"236\":7,\"334\":2,\"351\":2,\"352\":1,\"353\":2,\"354\":2,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"480\":1,\"555\":4,\"562\":14,\"564\":7,\"568\":7,\"571\":7,\"572\":7,\"588\":10,\"625\":1,\"673\":1,\"677\":1}}],[\"wikis\",{\"1\":{\"534\":1,\"628\":2}}],[\"win\",{\"1\":{\"651\":1}}],[\"win64\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"423\":1}}],[\"windows\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"412\":2}}],[\"window\",{\"1\":{\"22\":1,\"38\":1,\"40\":3,\"460\":2,\"462\":1,\"468\":1}}],[\"with\",{\"1\":{\"277\":4,\"294\":1,\"334\":7,\"387\":1,\"621\":1}}],[\"will\",{\"1\":{\"239\":1,\"395\":1,\"440\":1,\"481\":1,\"574\":1}}],[\"width=\",{\"1\":{\"34\":1,\"334\":1}}],[\"width=device\",{\"1\":{\"34\":1,\"253\":1}}],[\"width\",{\"1\":{\"34\":2,\"36\":1,\"253\":2}}],[\"wed\",{\"1\":{\"609\":1}}],[\"weave\",{\"1\":{\"211\":1,\"584\":1}}],[\"web用于构建web应用程序\",{\"1\":{\"665\":1}}],[\"web相关的配置\",{\"1\":{\"674\":1,\"675\":1}}],[\"web相关配置\",{\"0\":{\"674\":1},\"1\":{\"660\":1}}],[\"web相关组件\",{\"1\":{\"620\":1,\"621\":1}}],[\"webioc容器的配置类\",{\"1\":{\"623\":1}}],[\"webjavaconfig\",{\"1\":{\"622\":1,\"623\":1,\"626\":2,\"629\":1}}],[\"web容器设置root容器为父容器\",{\"1\":{\"621\":1}}],[\"web容器是root容器的子容器\",{\"1\":{\"621\":1}}],[\"web容器\",{\"1\":{\"620\":1,\"621\":1,\"622\":1}}],[\"web容器和root容器\",{\"1\":{\"619\":1}}],[\"web应用卸载之前\",{\"1\":{\"552\":1}}],[\"web应用启动过程中\",{\"1\":{\"552\":1}}],[\"webapp\",{\"1\":{\"401\":3,\"445\":3,\"675\":1}}],[\"webapplicationcontext\",{\"1\":{\"221\":2,\"552\":2,\"621\":2}}],[\"web工程打包方式为war\",{\"1\":{\"433\":1,\"434\":1}}],[\"web工程\",{\"0\":{\"400\":1}}],[\"web<\",{\"1\":{\"387\":1,\"400\":1,\"625\":1,\"652\":1,\"664\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"web启动器依赖\",{\"1\":{\"387\":1,\"664\":1}}],[\"web🫙2\",{\"1\":{\"387\":1}}],[\"web🫙5\",{\"1\":{\"387\":1}}],[\"webmvcconfig\",{\"1\":{\"657\":1}}],[\"webmvcconfigurer\",{\"1\":{\"94\":1,\"626\":1,\"657\":1,\"676\":2}}],[\"webmvc<\",{\"1\":{\"625\":1}}],[\"webmvc\",{\"1\":{\"625\":2}}],[\"webmvc🫙5\",{\"1\":{\"387\":1}}],[\"websocket🫙9\",{\"1\":{\"387\":1}}],[\"webconfig\",{\"1\":{\"94\":1}}],[\"webfilter\",{\"1\":{\"93\":1}}],[\"webfilter注解\",{\"1\":{\"93\":1}}],[\"web\",{\"1\":{\"66\":1,\"92\":1,\"221\":4,\"387\":1,\"401\":10,\"445\":10,\"549\":1,\"552\":2,\"623\":1,\"625\":7,\"655\":1,\"664\":2,\"673\":3,\"675\":2,\"676\":4}}],[\"web服务器是一个软件程序\",{\"1\":{\"65\":1}}],[\"web服务器\",{\"0\":{\"65\":1}}],[\"web后端开发\",{\"0\":{\"60\":1}}],[\"web开发的场景启动器\",{\"1\":{\"664\":1,\"673\":1,\"677\":1}}],[\"web开发\",{\"0\":{\"54\":1}}],[\"web案例\",{\"1\":{\"32\":1}}],[\"weight=float\",{\"1\":{\"334\":1}}],[\"weight\",{\"1\":{\"334\":2}}],[\"weighty\",{\"1\":{\"24\":3}}],[\"weightx\",{\"1\":{\"24\":3}}],[\"west\",{\"1\":{\"23\":1}}],[\"what\",{\"1\":{\"390\":1,\"438\":1}}],[\"white\",{\"1\":{\"334\":1}}],[\"while循环\",{\"0\":{\"302\":1}}],[\"while循环和for循环可以相互转换\",{\"1\":{\"121\":1}}],[\"while\",{\"1\":{\"11\":2,\"38\":2,\"170\":2,\"176\":2,\"177\":1,\"183\":2,\"185\":2,\"186\":2,\"188\":2,\"191\":2,\"192\":4,\"197\":1,\"202\":2,\"203\":4,\"294\":1,\"302\":1,\"334\":3,\"368\":1,\"370\":5,\"371\":9,\"677\":1}}],[\"who\",{\"1\":{\"271\":1}}],[\"when>\",{\"1\":{\"528\":2}}],[\"when\",{\"0\":{\"528\":1},\"1\":{\"489\":1}}],[\"when当什么时候\",{\"1\":{\"253\":1}}],[\"where标签会自动去掉\",{\"1\":{\"525\":1}}],[\"wherewrapper\",{\"1\":{\"465\":2,\"471\":2}}],[\"where>\",{\"1\":{\"84\":1,\"525\":1}}],[\"where\",{\"1\":{\"8\":1,\"11\":2,\"12\":1,\"80\":1,\"81\":6,\"82\":1,\"85\":2,\"220\":1,\"465\":1,\"472\":1,\"474\":1,\"475\":1,\"476\":4,\"477\":1,\"481\":2,\"493\":1,\"498\":1,\"502\":1,\"504\":1,\"505\":1,\"509\":1,\"510\":1,\"513\":3,\"514\":3,\"515\":2,\"517\":1,\"518\":1,\"519\":1,\"525\":3,\"526\":2,\"527\":1,\"528\":4,\"529\":1,\"540\":1,\"562\":1,\"606\":2,\"641\":2,\"656\":2,\"677\":1}}],[\"wzy\",{\"1\":{\"11\":1,\"12\":1,\"82\":1,\"84\":1,\"100\":1,\"138\":1,\"188\":1,\"197\":1,\"212\":3,\"213\":3,\"216\":1,\"224\":4,\"228\":1,\"229\":1,\"231\":1}}],[\"=10\",{\"1\":{\"656\":1}}],[\"=11\",{\"1\":{\"366\":2}}],[\"=sum\",{\"1\":{\"366\":1}}],[\"=int\",{\"1\":{\"365\":1}}],[\"=grade\",{\"1\":{\"334\":1}}],[\"=new\",{\"1\":{\"184\":1,\"656\":1}}],[\"=null\",{\"1\":{\"84\":2,\"183\":1,\"184\":1,\"185\":4,\"186\":2,\"187\":1,\"191\":1,\"192\":1,\"202\":1,\"203\":1,\"656\":1}}],[\"=随机性\",{\"1\":{\"172\":1}}],[\"=temp\",{\"1\":{\"125\":1,\"126\":1}}],[\"=arr\",{\"1\":{\"125\":1,\"126\":1}}],[\"=>\",{\"1\":{\"40\":1,\"45\":2,\"252\":2}}],[\"=值\",{\"1\":{\"40\":1}}],[\"==>\",{\"1\":{\"481\":2}}],[\"==0\",{\"1\":{\"138\":1}}],[\"===\",{\"1\":{\"38\":2}}],[\"==\",{\"1\":{\"26\":2,\"28\":4,\"38\":2,\"45\":2,\"122\":1,\"165\":4,\"174\":1,\"175\":1,\"176\":6,\"178\":1,\"253\":1,\"334\":1,\"367\":2,\"370\":12,\"371\":17,\"412\":3,\"555\":1,\"560\":2,\"566\":1,\"590\":1,\"628\":1,\"655\":2}}],[\"=\",{\"1\":{\"8\":4,\"11\":26,\"12\":13,\"16\":8,\"17\":12,\"21\":1,\"22\":11,\"23\":14,\"24\":17,\"25\":2,\"26\":5,\"27\":1,\"28\":21,\"29\":3,\"38\":4,\"40\":9,\"45\":3,\"68\":4,\"80\":1,\"81\":9,\"82\":1,\"84\":1,\"90\":1,\"91\":2,\"92\":3,\"93\":8,\"95\":5,\"96\":1,\"98\":1,\"100\":3,\"109\":2,\"112\":1,\"114\":3,\"117\":1,\"119\":1,\"121\":1,\"124\":9,\"126\":15,\"130\":13,\"135\":3,\"138\":7,\"143\":1,\"144\":1,\"145\":7,\"146\":9,\"147\":6,\"149\":5,\"150\":4,\"151\":3,\"154\":2,\"155\":2,\"160\":5,\"162\":2,\"163\":6,\"164\":4,\"165\":8,\"169\":12,\"170\":15,\"174\":2,\"175\":4,\"176\":44,\"177\":8,\"178\":7,\"180\":1,\"181\":1,\"182\":2,\"183\":8,\"184\":1,\"185\":19,\"186\":17,\"187\":22,\"188\":32,\"189\":2,\"191\":27,\"192\":25,\"194\":1,\"197\":5,\"200\":2,\"202\":27,\"203\":25,\"205\":1,\"213\":13,\"215\":2,\"216\":3,\"220\":10,\"222\":1,\"223\":1,\"225\":3,\"226\":5,\"229\":1,\"231\":1,\"232\":2,\"233\":8,\"235\":3,\"236\":2,\"237\":2,\"238\":2,\"239\":3,\"242\":3,\"244\":3,\"245\":1,\"246\":2,\"247\":15,\"248\":8,\"249\":1,\"252\":2,\"253\":6,\"296\":1,\"298\":2,\"299\":3,\"305\":4,\"306\":1,\"307\":3,\"310\":2,\"311\":3,\"312\":5,\"315\":12,\"316\":7,\"317\":11,\"318\":4,\"320\":5,\"324\":3,\"325\":1,\"326\":3,\"327\":3,\"328\":5,\"329\":2,\"334\":17,\"351\":5,\"352\":3,\"353\":8,\"354\":14,\"355\":8,\"356\":6,\"361\":13,\"365\":1,\"366\":13,\"367\":7,\"368\":8,\"370\":39,\"371\":64,\"461\":1,\"467\":2,\"472\":12,\"474\":3,\"476\":14,\"477\":8,\"478\":12,\"479\":6,\"483\":1,\"484\":3,\"485\":2,\"493\":10,\"498\":1,\"505\":5,\"508\":4,\"510\":6,\"511\":3,\"512\":3,\"514\":15,\"515\":3,\"517\":6,\"518\":4,\"519\":6,\"525\":1,\"526\":1,\"527\":2,\"528\":1,\"535\":14,\"545\":1,\"547\":2,\"555\":4,\"557\":2,\"558\":11,\"559\":5,\"560\":5,\"561\":7,\"562\":32,\"564\":2,\"565\":2,\"566\":13,\"567\":1,\"568\":12,\"571\":5,\"572\":2,\"573\":6,\"574\":3,\"575\":16,\"579\":1,\"580\":2,\"582\":12,\"583\":11,\"588\":11,\"589\":16,\"590\":4,\"591\":9,\"592\":6,\"596\":1,\"602\":1,\"606\":9,\"607\":6,\"608\":6,\"609\":2,\"610\":15,\"611\":8,\"612\":13,\"621\":4,\"627\":1,\"628\":21,\"630\":2,\"640\":11,\"641\":10,\"651\":17,\"652\":22,\"653\":1,\"655\":36,\"656\":15,\"657\":10,\"668\":5,\"669\":5,\"670\":7,\"673\":5,\"675\":6,\"677\":3,\"680\":6,\"681\":1,\"682\":1}}],[\"用法举例\",{\"1\":{\"608\":1}}],[\"用在包上\",{\"1\":{\"590\":1}}],[\"用在update语句中\",{\"1\":{\"84\":1}}],[\"用不上这个属性\",{\"1\":{\"566\":1}}],[\"用分号分开\",{\"1\":{\"529\":1}}],[\"用批量插入举例\",{\"1\":{\"529\":1}}],[\"用请求头进行伪装\",{\"1\":{\"334\":1}}],[\"用父类的初始化\",{\"1\":{\"334\":1}}],[\"用items方法返回的是键值对\",{\"1\":{\"334\":1}}],[\"用instanceof关键字进行类判断\",{\"0\":{\"147\":1}}],[\"用以下格式导入库函数\",{\"1\":{\"334\":1}}],[\"用以获取不同种类的数据\",{\"1\":{\"180\":1}}],[\"用\",{\"1\":{\"317\":1}}],[\"用flex来表示占多少份数\",{\"1\":{\"264\":1}}],[\"用某种语言编写的一组指令的集合\",{\"1\":{\"192\":1,\"203\":1}}],[\"用字节流和字符流\",{\"1\":{\"186\":1}}],[\"用下面这种\",{\"1\":{\"183\":1}}],[\"用下划线进行分隔\",{\"1\":{\"143\":1,\"144\":1}}],[\"用链表存的\",{\"1\":{\"169\":1}}],[\"用对象的向下转型\",{\"1\":{\"146\":1}}],[\"用public类来表现\",{\"1\":{\"126\":1}}],[\"用户token\",{\"1\":{\"657\":1}}],[\"用户点击\",{\"1\":{\"656\":1}}],[\"用户在客户端输入发布的新闻信息完毕后\",{\"1\":{\"657\":1}}],[\"用户在客户端输入用户名密码并向后端提交\",{\"1\":{\"655\":1}}],[\"用户在注册时输入用户名时\",{\"1\":{\"655\":1}}],[\"用户有误或者密码有误响应不同的提示信息\",{\"1\":{\"655\":1}}],[\"用户信息为了我们自己解析的时候\",{\"1\":{\"655\":1}}],[\"用户提供其凭据\",{\"1\":{\"655\":1}}],[\"用户昵称\",{\"1\":{\"651\":1}}],[\"用户登录密码密文\",{\"1\":{\"651\":1}}],[\"用户登录名\",{\"1\":{\"651\":1}}],[\"用户id的token\",{\"1\":{\"655\":2}}],[\"用户id\",{\"1\":{\"651\":1}}],[\"用户功能\",{\"1\":{\"646\":1}}],[\"用户对应的订单\",{\"1\":{\"517\":1}}],[\"用户和用户的订单\",{\"1\":{\"517\":1}}],[\"用户模块开发\",{\"0\":{\"655\":1},\"1\":{\"644\":1}}],[\"用户模块\",{\"1\":{\"456\":1}}],[\"用户注册功能\",{\"1\":{\"655\":1}}],[\"用户注册\",{\"1\":{\"429\":1,\"455\":1}}],[\"用户服务\",{\"1\":{\"429\":1,\"455\":2}}],[\"用户代理\",{\"1\":{\"353\":1}}],[\"用户可以自己禁用cookie\",{\"1\":{\"90\":1}}],[\"用户打开浏览器\",{\"1\":{\"89\":1}}],[\"用户名占用\",{\"1\":{\"655\":2}}],[\"用户名有误\",{\"1\":{\"655\":1}}],[\"用户名是否可用的校验等等\",{\"1\":{\"45\":1}}],[\"用户名\",{\"1\":{\"12\":1,\"34\":1,\"272\":1,\"423\":1,\"538\":1,\"655\":2,\"679\":1}}],[\"用的少i\",{\"1\":{\"74\":1}}],[\"用此注解\",{\"1\":{\"74\":1}}],[\"用于扫描和注册mapper接口\",{\"1\":{\"679\":1}}],[\"用于自动扫描并加载应用程序中的组件\",{\"1\":{\"665\":1}}],[\"用于启用spring\",{\"1\":{\"665\":1}}],[\"用于标识一个spring\",{\"1\":{\"664\":1}}],[\"用于标识分布式系统中的不同节点\",{\"1\":{\"480\":1}}],[\"用于验证用户的身份或授权用户对特定资源的访问\",{\"1\":{\"655\":1}}],[\"用于实现各种功能\",{\"1\":{\"584\":1}}],[\"用于模拟公共行为的一个集合\",{\"1\":{\"584\":1}}],[\"用于配置复杂的bean对象\",{\"1\":{\"561\":1}}],[\"用于国际化\",{\"1\":{\"552\":1}}],[\"用于解决分布式系统中生成全局唯一id的需求\",{\"1\":{\"480\":1}}],[\"用于加快开发人员在使用mybatis进行数据库访问时的效率\",{\"1\":{\"480\":1}}],[\"用于lambda语法使用的查询wrapper\",{\"1\":{\"475\":1}}],[\"用于查询条件封装\",{\"1\":{\"475\":1}}],[\"用于生成一些元数据\",{\"1\":{\"566\":1}}],[\"用于生成一系列连续的整数\",{\"1\":{\"333\":1}}],[\"用于生成\",{\"1\":{\"465\":1}}],[\"用于描述项目的依赖和构建配置等信息\",{\"1\":{\"401\":1,\"445\":1}}],[\"用于访问类中的属性和方法\",{\"1\":{\"327\":1}}],[\"用于在整个字符串中搜索第一个匹配的值\",{\"1\":{\"321\":1}}],[\"用于在通信双方以json数据格式安全的传输信息\",{\"1\":{\"92\":1}}],[\"用于控制匹配方式\",{\"1\":{\"320\":1}}],[\"用于指定要继承的基类\",{\"1\":{\"329\":1}}],[\"用于指定要去除的字符\",{\"1\":{\"317\":1}}],[\"用于指定错误处理方式\",{\"1\":{\"317\":1}}],[\"用于去掉字符串左右两侧的空格和特殊字符\",{\"1\":{\"317\":1}}],[\"用于检测字符串是否以指定字符串结尾\",{\"1\":{\"317\":1}}],[\"用于检索字符串是否以指定子字符串开头\",{\"1\":{\"317\":1}}],[\"用于对列表进行排序\",{\"1\":{\"311\":1}}],[\"用于将二进制数据转换为字符串\",{\"1\":{\"317\":1}}],[\"用于将字符串转换为二进制数据\",{\"1\":{\"317\":1}}],[\"用于将多个列表或元组对应位置的元素组合为元组\",{\"1\":{\"315\":1}}],[\"用于将控制层的类标识为\",{\"1\":{\"231\":1,\"564\":1}}],[\"用于将业务层的类标识为\",{\"1\":{\"231\":1,\"564\":1}}],[\"用于100以内偶数的遍历\",{\"1\":{\"194\":1,\"205\":1}}],[\"用于保存具有映射关系的数据\",{\"1\":{\"177\":1}}],[\"用于简化jdbc的开发\",{\"1\":{\"76\":1}}],[\"用于快速生成一个vue的项目模板\",{\"1\":{\"48\":1}}],[\"用于和服务器交换数据\",{\"1\":{\"45\":1}}],[\"用于窗口或框架location对象\",{\"1\":{\"40\":1}}],[\"用来检测数据库连接是否有效的sql\",{\"1\":{\"677\":1}}],[\"用来检测是不是有效的正确覆盖重写\",{\"1\":{\"137\":1}}],[\"用来完善和解决oop的非核心代码冗余和不方便统一维护问题\",{\"1\":{\"585\":1}}],[\"用来代理位于外部的远程仓库\",{\"1\":{\"421\":1}}],[\"用来做继承的父工程\",{\"1\":{\"398\":1,\"442\":1}}],[\"用来为盒子模型提供最大的灵活性\",{\"1\":{\"255\":1}}],[\"用来存储所有在线的客户端\",{\"1\":{\"192\":1,\"203\":1}}],[\"用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差\",{\"1\":{\"161\":1}}],[\"用来解决两个默认方法之间重复代码的问题\",{\"1\":{\"142\":1}}],[\"用来动态拦截控制器方法的执行\",{\"1\":{\"94\":1}}],[\"用来渲染展示与路由路径对应的组件\",{\"1\":{\"52\":1}}],[\"用来声明一个只读的常量\",{\"1\":{\"38\":1}}],[\"用来达到执行代码对服务器进行攻击的方法\",{\"1\":{\"8\":1}}],[\"用途\",{\"1\":{\"17\":1}}],[\"用异常处理机制\",{\"1\":{\"5\":1}}],[\"预算30万左右\",{\"1\":{\"651\":1}}],[\"预计23日白天\",{\"1\":{\"651\":1}}],[\"预防误操作\",{\"1\":{\"460\":1}}],[\"预防sql注入\",{\"1\":{\"11\":1}}],[\"预防sql注入问题\",{\"1\":{\"8\":1}}],[\"预编译sql\",{\"1\":{\"9\":1,\"80\":1}}],[\"预编译sql语句并执行\",{\"1\":{\"8\":1}}],[\"预编译sql的执行对象\",{\"1\":{\"5\":1}}],[\"如pom\",{\"1\":{\"679\":1}}],[\"如public\",{\"1\":{\"138\":1}}],[\"如数据库连接信息\",{\"1\":{\"671\":1}}],[\"如开发\",{\"1\":{\"671\":1}}],[\"如列表\",{\"1\":{\"669\":1}}],[\"如web开发\",{\"1\":{\"665\":1}}],[\"如控制器\",{\"1\":{\"664\":1}}],[\"如嵌入式服务器\",{\"1\":{\"662\":1}}],[\"如访问令牌\",{\"1\":{\"655\":1}}],[\"如记录日志\",{\"1\":{\"584\":1}}],[\"如空指针异常\",{\"1\":{\"584\":1}}],[\"如登录\",{\"1\":{\"584\":1}}],[\"如日志\",{\"1\":{\"584\":1}}],[\"如安全性\",{\"1\":{\"584\":1}}],[\"如类\",{\"1\":{\"566\":1}}],[\"如图\",{\"1\":{\"559\":1}}],[\"如本地文件系统\",{\"1\":{\"555\":1}}],[\"如使用java代码生成uuid并在类中显式设置值等\",{\"1\":{\"512\":1}}],[\"如互斥锁\",{\"1\":{\"483\":1}}],[\"如无锁队列\",{\"1\":{\"483\":1}}],[\"如微服务架构\",{\"1\":{\"480\":1}}],[\"如丝般顺滑\",{\"1\":{\"460\":1}}],[\"如druid连接池\",{\"1\":{\"439\":1}}],[\"如下配置编码格式\",{\"1\":{\"410\":1,\"447\":1}}],[\"如下图\",{\"1\":{\"399\":1}}],[\"如com\",{\"1\":{\"409\":1,\"447\":1}}],[\"如测试配置文件等\",{\"1\":{\"401\":1,\"445\":1}}],[\"如配置文件\",{\"1\":{\"401\":1,\"445\":1}}],[\"如是否区分字母大小写\",{\"1\":{\"320\":1}}],[\"如以下示例所示\",{\"1\":{\"237\":1,\"239\":2,\"555\":1,\"573\":2,\"574\":2,\"623\":1}}],[\"如运行中的qq\",{\"1\":{\"192\":1,\"203\":1}}],[\"如jvm系统内部错误\",{\"1\":{\"152\":1}}],[\"如何定义\",{\"1\":{\"651\":1}}],[\"如何通过定义xml配置文件\",{\"1\":{\"557\":1}}],[\"如何配置数据库方言\",{\"1\":{\"534\":1}}],[\"如何选择重复依赖\",{\"1\":{\"416\":1,\"448\":1}}],[\"如何进行注释\",{\"1\":{\"334\":1}}],[\"如何设置可以修改呢\",{\"1\":{\"328\":1}}],[\"如何实例化\",{\"1\":{\"327\":1}}],[\"如何实例化ioc容器\",{\"0\":{\"226\":1}}],[\"如何装配\",{\"1\":{\"233\":1}}],[\"如何解决\",{\"1\":{\"197\":1,\"208\":1,\"413\":1}}],[\"如何解决服务器一直等待的问题的\",{\"1\":{\"191\":1,\"202\":1}}],[\"如何遍历key\",{\"1\":{\"177\":1}}],[\"如何遍历map\",{\"1\":{\"177\":1}}],[\"如何自定义一个异常类\",{\"1\":{\"155\":1}}],[\"如何抓\",{\"1\":{\"153\":1}}],[\"如何处理异常exception\",{\"0\":{\"153\":1}}],[\"如何使用成员的内部类\",{\"1\":{\"149\":1}}],[\"如何使用呢\",{\"1\":{\"126\":1}}],[\"如何调用子类的特有方法\",{\"1\":{\"146\":1}}],[\"如springmvc\",{\"1\":{\"231\":1,\"564\":1}}],[\"如string类\",{\"1\":{\"131\":1}}],[\"如string\",{\"1\":{\"124\":1}}],[\"如setint\",{\"1\":{\"8\":1}}],[\"如程序抛出异常等\",{\"1\":{\"64\":1}}],[\"如\",{\"1\":{\"49\":1,\"59\":2,\"63\":1,\"64\":1,\"81\":1,\"243\":1,\"421\":3,\"448\":1,\"549\":1,\"552\":1,\"602\":1}}],[\"如搜索联想\",{\"1\":{\"45\":1}}],[\"如设置href\",{\"1\":{\"43\":1}}],[\"如注册\",{\"1\":{\"34\":1}}],[\"如鼠标点击\",{\"1\":{\"25\":1}}],[\"如果空闲时间大于timebetweenevictionrunsmillis\",{\"1\":{\"677\":1}}],[\"如果设置\",{\"1\":{\"675\":1}}],[\"如果设置了spring\",{\"1\":{\"671\":2}}],[\"如果同时存在application\",{\"1\":{\"667\":1}}],[\"如果说全系降价3万是李斌的\",{\"1\":{\"651\":1}}],[\"如果事务切面优先级高\",{\"1\":{\"593\":1}}],[\"如果事先不知道类型\",{\"1\":{\"229\":1,\"561\":1}}],[\"如果需要切换也不方便统一维护\",{\"1\":{\"591\":1}}],[\"如果需要使用除了默认主键生成策略以外的策略\",{\"1\":{\"480\":1}}],[\"如果出现异常\",{\"1\":{\"584\":1}}],[\"如果出现了重名现象\",{\"1\":{\"149\":1}}],[\"如果用户没有权限\",{\"1\":{\"584\":1}}],[\"如果完全找不到匹配这个类型的\",{\"1\":{\"566\":1}}],[\"如果开发者没有足够的理解和掌握其架构\",{\"1\":{\"545\":1}}],[\"如果所有的when分支都不满足\",{\"1\":{\"528\":1}}],[\"如果能有一种数据库映射模式\",{\"1\":{\"517\":1}}],[\"如果生成列不止一个\",{\"1\":{\"515\":2}}],[\"如果你之前用过\",{\"1\":{\"524\":1}}],[\"如果你使用过\",{\"1\":{\"524\":1}}],[\"如果你对其理解透彻\",{\"1\":{\"515\":1}}],[\"如果你需要做一些很复杂的操作\",{\"1\":{\"82\":1}}],[\"如果返回的是集合\",{\"1\":{\"515\":1}}],[\"如果返回值类型是实体对象\",{\"1\":{\"69\":1}}],[\"如果创建某一个对象\",{\"1\":{\"493\":1}}],[\"如果拿它跟具有相同功能的\",{\"1\":{\"493\":1,\"515\":1}}],[\"如果\",{\"1\":{\"483\":1,\"628\":1}}],[\"如果一致则执行更新操作\",{\"1\":{\"483\":1}}],[\"如果一个类中每一个方法上都使用了\",{\"1\":{\"608\":1}}],[\"如果一个类是定义在一个方法内部的\",{\"1\":{\"150\":1}}],[\"如果一个事物的内部包含另一个事物\",{\"1\":{\"148\":1}}],[\"如果表名和实体类名相同\",{\"1\":{\"480\":1}}],[\"如果只有一个参数\",{\"1\":{\"478\":1}}],[\"如果只要匹配\",{\"1\":{\"345\":1}}],[\"如果年龄相同则按id升序排列\",{\"1\":{\"476\":1}}],[\"如果子工程坐标中的groupid和version与父工程一致\",{\"1\":{\"418\":1,\"452\":1}}],[\"如果本地仓库地址不变化\",{\"1\":{\"396\":1,\"440\":1}}],[\"如果错误\",{\"1\":{\"394\":1,\"440\":1}}],[\"如果要由程序员手动梳理无疑会增加极高的学习成本\",{\"1\":{\"387\":1}}],[\"如果当前链表为空\",{\"1\":{\"371\":1}}],[\"如果当前存在事务\",{\"1\":{\"249\":5,\"612\":5}}],[\"如果当前存在已有事务\",{\"1\":{\"98\":1}}],[\"如果带头节点\",{\"1\":{\"371\":1}}],[\"如果改成while\",{\"1\":{\"338\":1}}],[\"如果我们把它设置成只读\",{\"1\":{\"608\":1}}],[\"如果我们在前面允许了匿名访问\",{\"1\":{\"425\":1}}],[\"如果我们想要保存汉字\",{\"1\":{\"356\":1}}],[\"如果我们只想要中间的价格\",{\"1\":{\"334\":1}}],[\"如果我们按下一个按键没有松开\",{\"1\":{\"28\":1}}],[\"如果定义一个空函数可以使用padd语句占位符\",{\"1\":{\"325\":1}}],[\"如果匹配成功则返回包含匹配结构的列表\",{\"1\":{\"322\":1}}],[\"如果在java文件夹中添加java类\",{\"1\":{\"413\":1}}],[\"如果在起始位置匹配成功\",{\"1\":{\"321\":1}}],[\"如果在起始位置匹配成功则返回match对象\",{\"1\":{\"320\":1}}],[\"如果在某个编译单元内有一个以上的public类\",{\"1\":{\"126\":1}}],[\"如果检索的字符串不存在\",{\"1\":{\"317\":1}}],[\"如果两者长度不一样则与最短的列表长度相同\",{\"1\":{\"315\":1}}],[\"如果超过\",{\"1\":{\"293\":1}}],[\"如果报错试试\",{\"1\":{\"277\":1}}],[\"如果主轴是x轴则水平居中\",{\"1\":{\"258\":1}}],[\"如果主轴是x轴\",{\"1\":{\"258\":1}}],[\"如果父方法有事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"如果父类用的collection则需要向下转型\",{\"1\":{\"171\":1}}],[\"如果指定\",{\"1\":{\"247\":3,\"248\":1,\"610\":4,\"611\":1,\"612\":1}}],[\"如果类上设置事务属性\",{\"1\":{\"246\":1}}],[\"如果有多个切面嵌套的情况\",{\"1\":{\"593\":1}}],[\"如果有多个bean\",{\"1\":{\"238\":1,\"573\":1}}],[\"如果有则返回\",{\"1\":{\"584\":1}}],[\"如果有这个排名\",{\"1\":{\"370\":1}}],[\"如果有接口\",{\"1\":{\"218\":1,\"594\":1}}],[\"如果将\",{\"1\":{\"237\":1,\"573\":1}}],[\"如果将tomcat端口号改为80\",{\"1\":{\"65\":1}}],[\"如果第三方类进行ioc管理\",{\"1\":{\"236\":1,\"572\":1}}],[\"如果想根据名称装配\",{\"1\":{\"566\":1}}],[\"如果想要一个已经存在的列表作为函数的可变参数\",{\"1\":{\"325\":1}}],[\"如果想要判断字符串是否存在可以使用in\",{\"1\":{\"317\":1}}],[\"如果想要获取factorybean对象\",{\"1\":{\"229\":1,\"561\":1}}],[\"如果想得到列表可以使用\",{\"1\":{\"315\":1}}],[\"如果想得到元组\",{\"1\":{\"315\":1}}],[\"如果想监听一个按钮的单击事件可以用以下几种方式\",{\"1\":{\"27\":1}}],[\"如果此处错误\",{\"1\":{\"440\":1}}],[\"如果此\",{\"1\":{\"229\":1,\"561\":1}}],[\"如果构造对象时带有参数string\",{\"1\":{\"224\":1}}],[\"如果目标类没有接口\",{\"1\":{\"218\":1,\"594\":1}}],[\"如果目标类有接口\",{\"1\":{\"218\":1,\"594\":1}}],[\"如果使用mysql数据库\",{\"1\":{\"679\":1}}],[\"如果使用aop技术\",{\"1\":{\"599\":1}}],[\"如果使用updatewrapper\",{\"1\":{\"477\":1,\"479\":1}}],[\"如果使用\",{\"1\":{\"330\":1}}],[\"如果使用实现类\",{\"1\":{\"212\":1}}],[\"如果使用在循环中\",{\"1\":{\"122\":1}}],[\"如果调用外部的remove会使expectedmodcount和modcount不相等而抛出异常\",{\"1\":{\"197\":1}}],[\"如果端口号被另一个服务或应用所占\",{\"1\":{\"189\":1,\"200\":1}}],[\"如果相同\",{\"1\":{\"172\":1}}],[\"如果存入集合中的元素是自定义类的对象\",{\"1\":{\"170\":1}}],[\"如果存在多个相同类型的bean\",{\"1\":{\"75\":1}}],[\"如果字符串中没有应该被转换的字符\",{\"1\":{\"317\":1}}],[\"如果字符串池中已经存在相同内容的字符串\",{\"1\":{\"165\":1}}],[\"如果字面值不是数字\",{\"1\":{\"38\":1}}],[\"如果异常处理了\",{\"1\":{\"154\":1}}],[\"如果希望同一个对象\",{\"1\":{\"151\":1}}],[\"如果希望多次创建对象\",{\"1\":{\"151\":1}}],[\"如果接口的实现类\",{\"1\":{\"151\":1}}],[\"如果实体类中的字段与数据库表的主键字段不一致\",{\"1\":{\"480\":1}}],[\"如果实体类属性名和数据库表查询返回的字段名不一致\",{\"1\":{\"81\":1}}],[\"如果实现类并没有覆盖重写接口中所有的抽象方法\",{\"1\":{\"139\":1}}],[\"如果是普通的项目静态资源可以放在项目的webapp目录下\",{\"1\":{\"675\":1}}],[\"如果是返回集合类型\",{\"1\":{\"508\":1}}],[\"如果是\",{\"1\":{\"483\":1}}],[\"如果是多条语句的代码块\",{\"1\":{\"478\":1}}],[\"如果是多个会抛出异常\",{\"1\":{\"471\":1}}],[\"如果是一个表达式\",{\"1\":{\"478\":1}}],[\"如果是最后一个节点呢\",{\"1\":{\"371\":1}}],[\"如果是嵌套循环\",{\"1\":{\"334\":1}}],[\"如果是在webapplicationcontext环境下还会有另外两个作用域\",{\"1\":{\"228\":1,\"560\":1,\"565\":1}}],[\"如果是java9\",{\"1\":{\"139\":1}}],[\"如果是java8\",{\"1\":{\"139\":1}}],[\"如果是java7\",{\"1\":{\"139\":1}}],[\"如果是表头单元格可以为<th>\",{\"1\":{\"34\":1}}],[\"如果直接通过\",{\"1\":{\"135\":1}}],[\"如果注释\",{\"1\":{\"127\":1}}],[\"如果没有安装可以回看ssm整合实战\",{\"1\":{\"649\":1}}],[\"如果没有给接口中list类型的参数使用\",{\"1\":{\"529\":1}}],[\"如果没有特殊处理\",{\"1\":{\"504\":1}}],[\"如果没有参数\",{\"1\":{\"478\":1}}],[\"如果没有找到最后\",{\"1\":{\"370\":1,\"371\":1}}],[\"如果没有父元素\",{\"1\":{\"265\":1}}],[\"如果没有事务\",{\"1\":{\"249\":1,\"612\":1}}],[\"如果没有就新建自己独立\",{\"1\":{\"249\":1,\"612\":1}}],[\"如果没有有效抽取出来\",{\"1\":{\"243\":1,\"602\":1}}],[\"如果没有接口\",{\"1\":{\"218\":1,\"594\":1}}],[\"如果没有写任何构造函数\",{\"1\":{\"127\":1}}],[\"如果没有指定name\",{\"1\":{\"566\":2}}],[\"如果没有指定某个参数将抛出异常\",{\"1\":{\"325\":1}}],[\"如果没有指定\",{\"1\":{\"74\":1}}],[\"如果提前排序好了就不需要进行后面的比较\",{\"1\":{\"126\":1}}],[\"如果对象创建的时候本来不是猫\",{\"1\":{\"146\":1}}],[\"如果对负数取余数呢\",{\"1\":{\"117\":1}}],[\"如果对表名\",{\"1\":{\"81\":1}}],[\"如果格式化输出错误\",{\"1\":{\"108\":1}}],[\"如果解析失败\",{\"1\":{\"93\":1}}],[\"如果不添加spring\",{\"1\":{\"684\":1}}],[\"如果不建立私服\",{\"1\":{\"421\":1}}],[\"如果不考虑必须都不考虑\",{\"1\":{\"214\":1}}],[\"如果不考虑访问修饰符和返回值\",{\"1\":{\"214\":1}}],[\"如果不存在\",{\"1\":{\"93\":1}}],[\"如果不指定\",{\"1\":{\"34\":1,\"317\":1}}],[\"如果包含返回true\",{\"1\":{\"170\":1}}],[\"如果包含\",{\"1\":{\"93\":1}}],[\"如果jwt令牌解析校验时错误\",{\"1\":{\"92\":1}}],[\"如果上面的报错\",{\"1\":{\"92\":1}}],[\"如果更新时有值传递更新有值的\",{\"1\":{\"84\":1}}],[\"如果条件为true\",{\"1\":{\"84\":1}}],[\"如果引入的依赖本地不存在将会远程仓库\",{\"1\":{\"59\":1}}],[\"如果lambda体只有一条执行语句\",{\"1\":{\"17\":1}}],[\"如果参数列表只有一个参数\",{\"1\":{\"17\":1}}],[\"如果sql模板一样\",{\"1\":{\"9\":1}}],[\"如int\",{\"1\":{\"7\":1}}],[\"如有侵权请联系邮箱\",{\"1\":{\"0\":1}}],[\"无代理场景\",{\"1\":{\"583\":1}}],[\"无锁哈希表等\",{\"1\":{\"483\":1}}],[\"无锁数据结构\",{\"1\":{\"483\":1}}],[\"无侵入\",{\"1\":{\"460\":1}}],[\"无需指定\",{\"1\":{\"664\":1}}],[\"无需校验\",{\"1\":{\"657\":1}}],[\"无需ioc容器管理\",{\"1\":{\"628\":2}}],[\"无需手动干预\",{\"1\":{\"537\":1}}],[\"无需再担心字段写错\",{\"1\":{\"460\":1}}],[\"无需自己导入jar包\",{\"1\":{\"390\":1}}],[\"无需反转\",{\"1\":{\"371\":1}}],[\"无情的\",{\"1\":{\"338\":1}}],[\"无刷新获取数据\",{\"1\":{\"250\":1}}],[\"无法提供类似的解释和说明\",{\"1\":{\"669\":1}}],[\"无法获取\",{\"1\":{\"598\":1}}],[\"无法正确地使用现有的依赖项\",{\"1\":{\"412\":1,\"449\":1}}],[\"无法删除\",{\"1\":{\"371\":1}}],[\"无法直接使用\",{\"1\":{\"236\":1,\"572\":1}}],[\"无法使用\",{\"1\":{\"236\":1,\"572\":1}}],[\"无形参列表\",{\"1\":{\"232\":1,\"560\":1,\"565\":2}}],[\"无形参列表的方法\",{\"1\":{\"227\":1}}],[\"无限等待\",{\"1\":{\"196\":1,\"207\":1}}],[\"无序性\",{\"1\":{\"172\":2}}],[\"无符号右移\",{\"1\":{\"116\":1}}],[\"无论使用静态代理和动态代理\",{\"1\":{\"583\":1}}],[\"无论是哪种方式\",{\"1\":{\"538\":1}}],[\"无论是否嵌套\",{\"1\":{\"521\":1}}],[\"无论是否有异常都会执行\",{\"1\":{\"102\":1}}],[\"无论多少张表联查\",{\"1\":{\"517\":1}}],[\"无论右边new的时候换成哪个子类对象\",{\"1\":{\"145\":1}}],[\"无论有无\",{\"1\":{\"98\":1}}],[\"无则在无事务状态中运行\",{\"1\":{\"98\":1}}],[\"无则创建新事务\",{\"1\":{\"98\":1}}],[\"无布局\",{\"0\":{\"25\":1},\"1\":{\"23\":1}}],[\"无布局格式\",{\"1\":{\"21\":1}}],[\"无\",{\"1\":{\"17\":1,\"656\":1,\"657\":1}}],[\"无返回值\",{\"1\":{\"17\":1}}],[\"无参数的方法\",{\"1\":{\"590\":1}}],[\"无参数构造方法执行\",{\"1\":{\"127\":1}}],[\"无参数\",{\"1\":{\"17\":1}}],[\"无效行\",{\"1\":{\"7\":1}}],[\"无版权\",{\"1\":{\"0\":1}}],[\"当大于0时\",{\"1\":{\"677\":1}}],[\"当涉及spring\",{\"1\":{\"674\":1}}],[\"当天\",{\"1\":{\"651\":1}}],[\"当配置类被加载时\",{\"1\":{\"628\":1}}],[\"当注解中只设置一个属性时\",{\"1\":{\"564\":1}}],[\"当通过构造函数方法创建一个\",{\"1\":{\"557\":1}}],[\"当框架变更时\",{\"1\":{\"545\":1}}],[\"当主键列不是表中的第一列的时候\",{\"1\":{\"515\":1}}],[\"当这样配置时\",{\"1\":{\"508\":1}}],[\"当线程准备更新资源时\",{\"1\":{\"483\":1}}],[\"当name不为null拼接等于\",{\"1\":{\"476\":1}}],[\"当多个项目依赖同一个库时\",{\"1\":{\"448\":1}}],[\"当局域网内的用户需要某个构件时\",{\"1\":{\"421\":1}}],[\"当直接引用或者间接引用出现了相同的jar包\",{\"1\":{\"416\":1,\"448\":1}}],[\"当然是spring\",{\"1\":{\"551\":1}}],[\"当然\",{\"1\":{\"512\":1}}],[\"当然也并不是说私服只能建立在局域网\",{\"1\":{\"421\":1}}],[\"当然了\",{\"1\":{\"413\":1}}],[\"当然在向上抛的过程中可以通过try\",{\"1\":{\"155\":1}}],[\"当创建完毕maven工程之后\",{\"1\":{\"399\":1}}],[\"当创建了类的对象以后\",{\"1\":{\"135\":1}}],[\"当做了向下兼容的功能性新增\",{\"1\":{\"398\":1,\"442\":1}}],[\"当做了不兼容的\",{\"1\":{\"398\":1,\"442\":1}}],[\"当退出while循环时\",{\"1\":{\"370\":1,\"371\":1}}],[\"当不考虑编号顺序时\",{\"1\":{\"370\":1}}],[\"当队列满时\",{\"1\":{\"370\":1}}],[\"当一个数组中大部分元素为0\",{\"1\":{\"365\":1}}],[\"当一个常数或字符串我们需要在程序里反复反复使用的时候\",{\"1\":{\"114\":1,\"131\":1}}],[\"当你在spring配置类中添加了sqlsessionfactorybean和mapperscannerconfigurer配置方法时\",{\"1\":{\"628\":1}}],[\"当你编写一个函数时没有实现功能就可以使用pass避免错误\",{\"1\":{\"334\":1}}],[\"当你引入springcontext依赖之后\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"当你引入spring\",{\"1\":{\"244\":1,\"557\":1,\"564\":1,\"582\":1,\"606\":1}}],[\"当函数中没有return语句时\",{\"1\":{\"325\":1}}],[\"当第一个字母不符合条件时\",{\"1\":{\"320\":1}}],[\"当应用程序需要使用一个对象时\",{\"1\":{\"221\":1,\"553\":1}}],[\"当其他程序\",{\"1\":{\"187\":1}}],[\"当其中一个对象对此属性进行修改\",{\"1\":{\"130\":1}}],[\"当执行过程中\",{\"1\":{\"184\":1}}],[\"当执行到文件结尾时\",{\"1\":{\"183\":1}}],[\"当向treeset中添加自定义类的对象时\",{\"1\":{\"174\":1}}],[\"当向set中添加对象时\",{\"1\":{\"172\":1}}],[\"当向set中添加进相同的元素的时候\",{\"1\":{\"172\":1}}],[\"当集合中添加自定义类的元素时\",{\"1\":{\"171\":1}}],[\"当在此方法内部出现异常的时候\",{\"1\":{\"155\":1}}],[\"当我们引入一个库或框架时\",{\"1\":{\"448\":1}}],[\"当我们执行package命令也会自动执行compile命令\",{\"1\":{\"406\":1}}],[\"当我们执行代码时\",{\"1\":{\"153\":1}}],[\"当我们使用\",{\"1\":{\"388\":1}}],[\"当我们使用多个线程访问同一资源\",{\"1\":{\"197\":1,\"208\":1}}],[\"当我们这样分析\",{\"1\":{\"370\":1}}],[\"当我们为父盒子设置为flex布局以后\",{\"1\":{\"255\":1}}],[\"当我们不希望事务之间相互影响时\",{\"1\":{\"98\":1}}],[\"当对象是右边类或子类所创建对象时\",{\"1\":{\"147\":1}}],[\"当功能内部一部分实现是确定\",{\"1\":{\"138\":1}}],[\"当次循环\",{\"1\":{\"122\":1}}],[\"当左端为true时\",{\"1\":{\"118\":1}}],[\"当左端为true时右端照样做运算\",{\"1\":{\"118\":1}}],[\"当左端为false时右端不再进行运算\",{\"1\":{\"118\":1}}],[\"当表单提交时触发该事件\",{\"1\":{\"41\":1}}],[\"当声明的变量未初始化时\",{\"1\":{\"38\":1}}],[\"当事件被触发之后\",{\"1\":{\"28\":1}}],[\"当事件源上发生了某个事件\",{\"1\":{\"25\":1}}],[\"当前程序签名秘钥\",{\"1\":{\"655\":2}}],[\"当前例子用where标签实现更简洁\",{\"1\":{\"527\":1}}],[\"当前时间戳从某一固定的起始时间开始计算\",{\"1\":{\"480\":1}}],[\"当前页数据等信息\",{\"1\":{\"656\":1}}],[\"当前页的数据集合\",{\"1\":{\"640\":1}}],[\"当前页码\",{\"1\":{\"634\":1,\"640\":1}}],[\"当前页\",{\"1\":{\"472\":1}}],[\"当前页面\",{\"1\":{\"34\":1}}],[\"当前最流行\",{\"1\":{\"421\":1}}],[\"当前工程作为父工程\",{\"1\":{\"418\":1,\"452\":1}}],[\"当前目录的上一级目录\",{\"1\":{\"334\":1}}],[\"当前目录\",{\"1\":{\"334\":2}}],[\"当前词典收录数为\",{\"1\":{\"334\":1}}],[\"当前类\",{\"1\":{\"197\":1,\"208\":1,\"226\":1,\"559\":1}}],[\"当前线程的名字\",{\"1\":{\"194\":1,\"205\":1}}],[\"当前循环\",{\"1\":{\"122\":1}}],[\"当前项目间接依赖其他资源\",{\"1\":{\"59\":1}}],[\"当前的界面对象\",{\"1\":{\"28\":1}}],[\"当前行没有数据\",{\"1\":{\"7\":1}}],[\"当前行有数据false\",{\"1\":{\"7\":1}}],[\"当键已被释放时调用\",{\"1\":{\"28\":1}}],[\"当lambda体只有一条语句时\",{\"1\":{\"17\":1}}],[\"当写的多条代码出错时防止运行了前面几条\",{\"1\":{\"5\":1}}],[\"返回含页码数\",{\"1\":{\"656\":1}}],[\"返回200\",{\"1\":{\"655\":1}}],[\"返回用户对象\",{\"1\":{\"655\":1}}],[\"返回数据\",{\"1\":{\"652\":2}}],[\"返回消息\",{\"1\":{\"652\":1}}],[\"返回码\",{\"1\":{\"652\":1}}],[\"返回分页pagebean\",{\"1\":{\"641\":1}}],[\"返回具体数据\",{\"1\":{\"640\":1}}],[\"返回状态\",{\"1\":{\"640\":1}}],[\"返回状态码\",{\"1\":{\"351\":1}}],[\"返回对应json数据\",{\"1\":{\"630\":1}}],[\"返回对象逻辑\",{\"1\":{\"628\":1}}],[\"返回要生产的对象的类型\",{\"1\":{\"561\":1}}],[\"返回工资最高的员工的姓名和他的工资\",{\"1\":{\"510\":1}}],[\"返回主键值\",{\"0\":{\"512\":1},\"1\":{\"489\":1}}],[\"返回list类型\",{\"0\":{\"511\":1},\"1\":{\"489\":1}}],[\"返回map类型\",{\"0\":{\"510\":1},\"1\":{\"489\":1}}],[\"返回map集合列表\",{\"1\":{\"476\":1}}],[\"返回实体类对象\",{\"0\":{\"509\":1},\"1\":{\"489\":1}}],[\"返回结果类\",{\"1\":{\"640\":1}}],[\"返回结果为ipage\",{\"1\":{\"472\":1}}],[\"返回结果即可\",{\"1\":{\"236\":1,\"572\":1}}],[\"返回url地址\",{\"1\":{\"351\":1}}],[\"返回所有值\",{\"1\":{\"334\":1}}],[\"返回所有键值对\",{\"1\":{\"334\":1}}],[\"返回所有键\",{\"1\":{\"334\":1}}],[\"返回变量的类型\",{\"1\":{\"334\":1}}],[\"返回字典的值和键的列表\",{\"1\":{\"315\":1}}],[\"返回字符串的长度\",{\"1\":{\"166\":1}}],[\"返回最小元素\",{\"1\":{\"305\":1}}],[\"返回最大元素min\",{\"1\":{\"305\":1}}],[\"返回序列长度max\",{\"1\":{\"305\":1}}],[\"返回单例\",{\"1\":{\"229\":1,\"561\":1}}],[\"返回单个element对象\",{\"1\":{\"40\":1}}],[\"返回此工厂创建的对象的实例\",{\"1\":{\"229\":1,\"561\":1}}],[\"返回为object\",{\"1\":{\"226\":1,\"559\":1}}],[\"返回的是列表\",{\"1\":{\"361\":1}}],[\"返回的不是可迭代对象\",{\"1\":{\"334\":1}}],[\"返回的结果\",{\"1\":{\"213\":1}}],[\"返回的数据\",{\"1\":{\"69\":1}}],[\"返回通知\",{\"1\":{\"211\":1,\"584\":1}}],[\"返回file\",{\"1\":{\"182\":1}}],[\"返回false\",{\"1\":{\"109\":1,\"147\":1,\"655\":1}}],[\"返回指定集合中指定元素的出现次数\",{\"1\":{\"180\":1}}],[\"返回指定位置的字符\",{\"1\":{\"40\":1}}],[\"返回给定集合中的最大\",{\"1\":{\"180\":1}}],[\"返回给定集合中的最大元素\",{\"1\":{\"180\":1}}],[\"返回给当前集合\",{\"1\":{\"170\":1}}],[\"返回collection视图\",{\"1\":{\"177\":1}}],[\"返回string\",{\"1\":{\"182\":1}}],[\"返回set视图\",{\"1\":{\"177\":1}}],[\"返回s字符串最后一次在当前字符串中出现的位置\",{\"1\":{\"166\":1}}],[\"返回s字符串从当前字符串startpoint位置开始首次出现的位置\",{\"1\":{\"166\":1}}],[\"返回s字符串在当前字符串中首次出现的位置\",{\"1\":{\"166\":1}}],[\"返回null\",{\"1\":{\"177\":1}}],[\"返回从fromindex到toindex结束的一个子list\",{\"1\":{\"171\":1}}],[\"返回从start开始到end结束的一个左闭右开的字串\",{\"1\":{\"166\":1}}],[\"返回\",{\"1\":{\"171\":1,\"177\":1,\"183\":1,\"229\":1,\"561\":1,\"655\":2,\"664\":1}}],[\"返回obj在集合中最后一次出现的位置\",{\"1\":{\"171\":1}}],[\"返回obj在集合中首次出现的位置\",{\"1\":{\"171\":1}}],[\"返回一个可迭代对象\",{\"1\":{\"334\":1}}],[\"返回一个iterator接口实现类的对象\",{\"1\":{\"170\":1}}],[\"返回一个缩小后的icon对象\",{\"1\":{\"22\":1}}],[\"返回元素个数\",{\"1\":{\"170\":1}}],[\"返回0表示相等\",{\"1\":{\"166\":1}}],[\"返回负数表示里面的大于外面的\",{\"1\":{\"166\":1}}],[\"返回正数表示外面的字符串大于里面的\",{\"1\":{\"166\":1}}],[\"返回在指定index位置的字符\",{\"1\":{\"166\":1}}],[\"返回true或false\",{\"1\":{\"147\":1}}],[\"返回true\",{\"1\":{\"147\":1,\"170\":1,\"655\":1}}],[\"返回true放行\",{\"1\":{\"94\":1}}],[\"返回错误结果\",{\"1\":{\"93\":2}}],[\"返回错误提示信息\",{\"1\":{\"92\":1}}],[\"返回值是int的全部方法\",{\"1\":{\"590\":1}}],[\"返回值是\",{\"1\":{\"589\":1}}],[\"返回值类型\",{\"1\":{\"140\":1,\"141\":1,\"142\":2,\"144\":5,\"150\":1,\"220\":1,\"493\":1}}],[\"返回值\",{\"1\":{\"139\":1,\"325\":1}}],[\"返回值表示删除的记录数\",{\"1\":{\"80\":1}}],[\"返回值也不需要定义类型\",{\"1\":{\"39\":1}}],[\"返回json数据的网址\",{\"1\":{\"45\":1}}],[\"返回element对象数组\",{\"1\":{\"40\":3}}],[\"返回删除后的\",{\"1\":{\"40\":1}}],[\"返回boolean包含方法boolean\",{\"1\":{\"17\":1}}],[\"返回类型t的对象\",{\"1\":{\"17\":1}}],[\"返回类型\",{\"1\":{\"17\":1}}],[\"返回受影响的行数\",{\"1\":{\"12\":1}}],[\"返回列的数量\",{\"1\":{\"11\":1}}],[\"返回resultset结果集\",{\"1\":{\"11\":1}}],[\"返回resultset结果集对象\",{\"1\":{\"6\":1}}],[\"返回resultset对象\",{\"1\":{\"7\":1}}],[\"返回顶部按钮\",{\"1\":{\"1\":1}}],[\"et5t和et5的双车合璧\",{\"1\":{\"651\":1}}],[\"et5t是蔚来首款售价下探到30万元以下的新车\",{\"1\":{\"651\":1}}],[\"etc\",{\"1\":{\"53\":2,\"283\":1}}],[\"e8\",{\"1\":{\"628\":2}}],[\"e6\",{\"1\":{\"628\":6}}],[\"e7\",{\"1\":{\"628\":2}}],[\"e9\",{\"1\":{\"628\":2}}],[\"ee组件进行管理\",{\"1\":{\"566\":1}}],[\"ee组件之间依赖关系的一种方式\",{\"1\":{\"566\":1}}],[\"ee\",{\"1\":{\"566\":2}}],[\"ee工程创建\",{\"1\":{\"457\":1}}],[\"eq\",{\"1\":{\"474\":1,\"476\":5,\"477\":1,\"478\":6,\"479\":2,\"655\":3,\"656\":1}}],[\"equals比较内容\",{\"1\":{\"165\":1}}],[\"equalsandhashcode\",{\"1\":{\"79\":2}}],[\"equals\",{\"1\":{\"79\":1,\"90\":1,\"165\":2,\"166\":1,\"170\":2,\"176\":6,\"177\":1,\"192\":1,\"197\":1,\"203\":1,\"655\":1}}],[\"echo\",{\"1\":{\"412\":18}}],[\"eclipsenew\",{\"1\":{\"187\":1}}],[\"email=\",{\"1\":{\"476\":1,\"477\":1}}],[\"email\",{\"1\":{\"461\":4,\"474\":2,\"476\":8,\"477\":3,\"479\":1,\"480\":3,\"481\":3,\"517\":4}}],[\"embed\",{\"1\":{\"387\":4}}],[\"empmapper\",{\"1\":{\"628\":4}}],[\"emplist\",{\"1\":{\"529\":5}}],[\"employees\",{\"1\":{\"630\":3}}],[\"employeeserviceimpl\",{\"1\":{\"630\":1}}],[\"employeeservice\",{\"1\":{\"594\":5,\"630\":4}}],[\"employeecontroller\",{\"1\":{\"630\":1}}],[\"employeelist\",{\"1\":{\"511\":2,\"630\":2}}],[\"employeemapper\",{\"1\":{\"220\":6,\"493\":8,\"505\":2,\"508\":4,\"510\":4,\"511\":4,\"512\":4,\"532\":2,\"630\":5}}],[\"employee1\",{\"1\":{\"176\":19}}],[\"employee\",{\"1\":{\"176\":21,\"220\":5,\"334\":3,\"493\":8,\"501\":1,\"502\":2,\"503\":2,\"509\":2,\"511\":5,\"512\":12,\"513\":5,\"525\":3,\"526\":2,\"527\":3,\"528\":3,\"625\":1,\"630\":2}}],[\"employee类是否需要重写equals\",{\"1\":{\"176\":1}}],[\"employy类\",{\"1\":{\"176\":1}}],[\"empgender\",{\"1\":{\"527\":1,\"529\":1}}],[\"empgender==\",{\"1\":{\"527\":1}}],[\"empage\",{\"1\":{\"527\":2}}],[\"emp表对应数据库sql语句映射接口\",{\"1\":{\"493\":1}}],[\"emp`\",{\"1\":{\"493\":4,\"625\":4}}],[\"empty\",{\"1\":{\"387\":1,\"464\":1,\"466\":1}}],[\"empname\",{\"1\":{\"220\":1,\"493\":2,\"502\":1,\"503\":1,\"509\":1,\"511\":1,\"512\":1,\"513\":2,\"525\":2,\"526\":3,\"527\":2,\"528\":2,\"529\":2,\"625\":1,\"630\":1}}],[\"empidkey\",{\"1\":{\"505\":2}}],[\"empid\",{\"1\":{\"220\":3,\"493\":6,\"502\":3,\"504\":3,\"509\":2,\"511\":1,\"512\":1,\"513\":6,\"526\":1,\"529\":1,\"608\":1,\"625\":1,\"630\":2}}],[\"empservice\",{\"1\":{\"608\":1}}],[\"empsalarykey\",{\"1\":{\"505\":2}}],[\"empsalary\",{\"1\":{\"220\":1,\"493\":2,\"502\":1,\"503\":1,\"504\":3,\"509\":1,\"511\":1,\"512\":1,\"513\":2,\"525\":2,\"526\":3,\"527\":2,\"528\":1,\"529\":1,\"625\":1,\"630\":1}}],[\"emps下的所有资源\",{\"1\":{\"93\":1}}],[\"emps\",{\"1\":{\"93\":1}}],[\"emp\",{\"1\":{\"81\":2,\"220\":5,\"426\":1,\"493\":15,\"502\":5,\"503\":3,\"504\":3,\"505\":3,\"508\":1,\"509\":5,\"510\":8,\"511\":4,\"512\":3,\"513\":18,\"525\":9,\"526\":11,\"527\":10,\"528\":6,\"529\":10,\"530\":6,\"625\":10,\"630\":4}}],[\"edg\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"editlink\",{\"1\":{\"1\":1}}],[\"e+\",{\"1\":{\"334\":1}}],[\"e=\",{\"1\":{\"334\":1}}],[\"evictable\",{\"1\":{\"677\":1}}],[\"eviction\",{\"1\":{\"677\":1}}],[\"eval\",{\"1\":{\"295\":1}}],[\"every\",{\"1\":{\"192\":2,\"203\":2}}],[\"events\",{\"1\":{\"53\":1,\"283\":1}}],[\"erdaye\",{\"1\":{\"590\":1}}],[\"erap\",{\"1\":{\"262\":1}}],[\"errorprone\",{\"1\":{\"387\":1}}],[\"errors=\",{\"1\":{\"317\":3}}],[\"error\",{\"1\":{\"93\":4,\"95\":4,\"96\":1,\"152\":2,\"212\":1,\"213\":1,\"247\":3,\"248\":1,\"387\":1,\"610\":4,\"611\":1,\"612\":1,\"621\":1,\"625\":1,\"652\":2,\"655\":2}}],[\"e5\",{\"1\":{\"176\":4,\"628\":4}}],[\"e4\",{\"1\":{\"176\":4,\"628\":2}}],[\"e3\",{\"1\":{\"176\":4}}],[\"e2\",{\"1\":{\"154\":1,\"176\":6}}],[\"ea\",{\"1\":{\"588\":1}}],[\"eat\",{\"1\":{\"138\":1,\"146\":4}}],[\"east\",{\"1\":{\"23\":1}}],[\"eyjuyw1lijoidg9tiiwiawqiojesimv4cci6mtcymdg5njg3mh0\",{\"1\":{\"92\":1}}],[\"eyjhbgcioijiuzi1nij9\",{\"1\":{\"92\":1}}],[\"egtest\",{\"1\":{\"64\":1}}],[\"eg\",{\"1\":{\"40\":1,\"64\":2,\"68\":1,\"92\":2,\"138\":1,\"147\":1,\"152\":1,\"154\":2,\"181\":1,\"276\":1,\"311\":1}}],[\"es6作为基础js语法\",{\"1\":{\"647\":1}}],[\"es6新增了const关键字\",{\"1\":{\"38\":1}}],[\"es6中新增了let关键字\",{\"1\":{\"38\":1}}],[\"epcot\",{\"1\":{\"34\":1}}],[\"engine\",{\"1\":{\"588\":4,\"651\":3}}],[\"engine=innodb\",{\"1\":{\"514\":1}}],[\"engineering\",{\"1\":{\"406\":1,\"588\":2}}],[\"enum\",{\"1\":{\"480\":1,\"652\":1}}],[\"enumerate\",{\"1\":{\"307\":1,\"312\":2,\"333\":1}}],[\"entitylist\",{\"1\":{\"471\":6}}],[\"entity\",{\"1\":{\"426\":1,\"463\":2,\"464\":1,\"465\":5,\"466\":3,\"471\":4,\"474\":1,\"484\":1,\"502\":1,\"509\":1,\"511\":1,\"513\":3,\"527\":1,\"528\":1,\"539\":1}}],[\"entity🫙1\",{\"1\":{\"387\":1}}],[\"entry<string\",{\"1\":{\"510\":2}}],[\"entry\",{\"1\":{\"177\":5,\"510\":3}}],[\"entryset\",{\"1\":{\"177\":2,\"510\":3}}],[\"enabled用于启用或禁用字符编码的自动配置\",{\"1\":{\"674\":1}}],[\"enabled\",{\"1\":{\"674\":1}}],[\"enabled>\",{\"1\":{\"427\":2}}],[\"enableautoconfiguration注解\",{\"1\":{\"665\":1}}],[\"enableautoconfiguration\",{\"1\":{\"664\":1,\"665\":1}}],[\"enableaspectjautoproxy注解\",{\"1\":{\"627\":1}}],[\"enableaspectjautoproxy\",{\"1\":{\"212\":1,\"588\":1,\"627\":1}}],[\"enable\",{\"1\":{\"626\":1}}],[\"enablewebmvc\",{\"1\":{\"626\":2}}],[\"enabletransactionmanagement\",{\"1\":{\"244\":1,\"607\":1,\"627\":1}}],[\"enabletransactionmanagement注解\",{\"1\":{\"244\":1,\"627\":1}}],[\"ens\",{\"1\":{\"166\":1}}],[\"environments\",{\"1\":{\"496\":1}}],[\"environments>\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"environments表示配置mybatis的开发环境\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"environment>\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"environment表示配置mybatis的一个具体的环境\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"environment\",{\"1\":{\"106\":1,\"496\":1}}],[\"encrypt\",{\"1\":{\"652\":1,\"655\":2}}],[\"encryptor\",{\"1\":{\"573\":2}}],[\"encrypt=false\",{\"1\":{\"11\":2,\"12\":1}}],[\"encooding\",{\"1\":{\"334\":1}}],[\"encoder>\",{\"1\":{\"625\":1}}],[\"encode\",{\"1\":{\"317\":2,\"355\":1,\"361\":1}}],[\"encoding>\",{\"1\":{\"413\":1}}],[\"encoding=utf\",{\"1\":{\"588\":1}}],[\"encoding=\",{\"1\":{\"82\":1,\"220\":2,\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"317\":2,\"334\":7,\"356\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"467\":1,\"493\":2,\"514\":2,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":2,\"628\":1,\"630\":1,\"641\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"encoding\",{\"1\":{\"63\":1,\"64\":1,\"106\":1,\"252\":1,\"674\":4}}],[\"end默认为\",{\"1\":{\"333\":1}}],[\"end=\",{\"1\":{\"333\":1}}],[\"endindex\",{\"1\":{\"167\":2}}],[\"endswith\",{\"1\":{\"166\":1,\"317\":1}}],[\"end\",{\"1\":{\"40\":1,\"100\":2,\"138\":2,\"167\":1,\"185\":2,\"258\":1,\"260\":1,\"261\":1,\"306\":1,\"317\":5,\"320\":1,\"333\":2}}],[\"en\",{\"1\":{\"34\":1,\"82\":1,\"220\":2,\"253\":1,\"467\":1,\"493\":2,\"514\":2,\"628\":1,\"630\":1,\"636\":1,\"641\":1,\"680\":1}}],[\"el🫙3\",{\"1\":{\"387\":1}}],[\"elif\",{\"1\":{\"294\":1,\"301\":1,\"334\":8}}],[\"el7\",{\"1\":{\"277\":1}}],[\"eles\",{\"1\":{\"171\":1}}],[\"ele\",{\"1\":{\"171\":3}}],[\"elemnetui\",{\"1\":{\"50\":1}}],[\"elemen\",{\"1\":{\"40\":2}}],[\"elementui\",{\"1\":{\"50\":1}}],[\"element\",{\"1\":{\"32\":1,\"50\":4,\"316\":1,\"647\":1}}],[\"else的简化\",{\"1\":{\"299\":1}}],[\"else语句\",{\"0\":{\"301\":1},\"1\":{\"121\":1}}],[\"else互换\",{\"1\":{\"119\":1}}],[\"else>老年人<\",{\"1\":{\"43\":1}}],[\"else>老年人\",{\"1\":{\"43\":1}}],[\"else\",{\"1\":{\"26\":1,\"28\":3,\"38\":2,\"43\":5,\"121\":1,\"135\":1,\"147\":1,\"174\":1,\"176\":2,\"253\":1,\"294\":1,\"299\":1,\"301\":2,\"328\":1,\"334\":9,\"370\":4,\"371\":6,\"657\":1}}],[\"e\",{\"1\":{\"26\":2,\"27\":5,\"28\":14,\"29\":1,\"40\":4,\"93\":2,\"95\":2,\"154\":2,\"155\":2,\"176\":2,\"182\":1,\"183\":4,\"184\":4,\"185\":12,\"186\":13,\"187\":8,\"189\":2,\"191\":18,\"192\":6,\"200\":2,\"202\":18,\"203\":6,\"216\":2,\"317\":2,\"334\":1,\"368\":6,\"423\":1,\"583\":2,\"592\":2,\"602\":1,\"609\":2,\"652\":4,\"655\":1}}],[\"e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"651\":4}}],[\"e1\",{\"1\":{\"26\":1,\"42\":1,\"43\":3,\"44\":1,\"154\":1,\"176\":6}}],[\"expiration\",{\"1\":{\"655\":3}}],[\"express\",{\"1\":{\"252\":6}}],[\"expression<\",{\"1\":{\"418\":2,\"452\":2}}],[\"expression🫙5\",{\"1\":{\"387\":1}}],[\"expression\",{\"1\":{\"326\":1,\"344\":1,\"588\":2,\"590\":1}}],[\"expression属性\",{\"1\":{\"231\":1,\"564\":1}}],[\"expression=\",{\"1\":{\"219\":1,\"231\":2,\"564\":2,\"596\":1}}],[\"extras\",{\"1\":{\"387\":2}}],[\"extend\",{\"1\":{\"309\":1,\"313\":1}}],[\"extends继承或者implements实现\",{\"1\":{\"145\":1}}],[\"extends\",{\"1\":{\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1,\"136\":1,\"138\":1,\"145\":2,\"146\":3,\"155\":2,\"192\":3,\"194\":1,\"197\":1,\"203\":3,\"205\":1,\"461\":1,\"464\":2,\"466\":2,\"467\":1,\"470\":2,\"471\":2,\"480\":1,\"623\":1,\"629\":1,\"655\":1,\"656\":2}}],[\"externalizable接口\",{\"1\":{\"187\":1}}],[\"externalizable\",{\"1\":{\"187\":1}}],[\"exist\",{\"1\":{\"480\":1}}],[\"exists\",{\"1\":{\"182\":1,\"461\":1,\"651\":3}}],[\"exit\",{\"1\":{\"23\":3,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1,\"368\":1,\"412\":1}}],[\"exe\",{\"1\":{\"588\":1,\"636\":1}}],[\"exe命令时\",{\"1\":{\"152\":2}}],[\"execution\",{\"1\":{\"57\":1,\"100\":1,\"212\":3,\"213\":3,\"215\":1,\"216\":1,\"219\":1,\"588\":4,\"589\":3,\"590\":3,\"591\":8,\"596\":1,\"682\":1}}],[\"executeupdate\",{\"1\":{\"8\":1,\"12\":1}}],[\"executequery\",{\"1\":{\"6\":2,\"7\":1,\"11\":2}}],[\"ex\",{\"1\":{\"94\":2,\"96\":3,\"676\":1}}],[\"except\",{\"1\":{\"294\":1,\"334\":4}}],[\"exceptions\",{\"1\":{\"485\":1}}],[\"exception2\",{\"1\":{\"154\":1}}],[\"exception1\",{\"1\":{\"154\":1}}],[\"exceptionhandler\",{\"1\":{\"96\":1}}],[\"exception\",{\"1\":{\"93\":1,\"94\":4,\"95\":2,\"96\":2,\"152\":2,\"184\":1,\"185\":3,\"186\":1,\"187\":1,\"192\":2,\"203\":2,\"229\":1,\"247\":2,\"248\":1,\"368\":2,\"561\":1,\"583\":1,\"602\":1,\"610\":2,\"611\":1,\"612\":1,\"628\":1,\"655\":1,\"657\":1,\"676\":4}}],[\"exclude\",{\"1\":{\"231\":2,\"564\":2}}],[\"excludepathpatterns\",{\"1\":{\"94\":1}}],[\"exclusions>\",{\"1\":{\"416\":1}}],[\"exclusions>>\",{\"1\":{\"59\":1}}],[\"exclusion>\",{\"1\":{\"59\":1,\"416\":1}}],[\"example`\",{\"1\":{\"493\":2,\"625\":2}}],[\"examples\",{\"1\":{\"222\":1,\"223\":1,\"225\":2,\"227\":2,\"557\":2,\"558\":2,\"560\":2}}],[\"example\",{\"1\":{\"82\":1,\"220\":1,\"401\":1,\"445\":1,\"493\":1,\"514\":1,\"529\":1,\"628\":1}}],[\"example<\",{\"1\":{\"58\":1,\"419\":1,\"453\":1}}],[\"rt\",{\"1\":{\"588\":5}}],[\"rxnetty🫙0\",{\"1\":{\"387\":1}}],[\"rxnetty\",{\"1\":{\"387\":2}}],[\"rxjava🫙1\",{\"1\":{\"387\":1}}],[\"ribbon🫙2\",{\"1\":{\"387\":3}}],[\"ribbon\",{\"1\":{\"387\":9}}],[\"r可读\",{\"1\":{\"334\":1}}],[\"rld\",{\"1\":{\"317\":1}}],[\"rm\",{\"1\":{\"311\":1}}],[\"ruler\",{\"1\":{\"286\":1}}],[\"runs\",{\"1\":{\"677\":1}}],[\"run命令启动\",{\"1\":{\"422\":1}}],[\"runoob\",{\"1\":{\"64\":1}}],[\"runtimeexception\",{\"1\":{\"135\":1,\"155\":2,\"191\":2,\"202\":2,\"216\":1,\"247\":3,\"248\":1,\"367\":2,\"370\":2,\"609\":1,\"610\":4,\"611\":1,\"612\":1,\"652\":1}}],[\"runtime\",{\"1\":{\"59\":1,\"106\":1,\"387\":13,\"411\":1,\"447\":1}}],[\"run\",{\"1\":{\"16\":3,\"49\":1,\"192\":3,\"194\":2,\"196\":1,\"203\":3,\"205\":2,\"207\":1,\"461\":1,\"638\":1,\"649\":2,\"652\":1,\"664\":2,\"673\":1,\"677\":1,\"680\":1}}],[\"runnable方式的好处\",{\"1\":{\"195\":1,\"206\":1}}],[\"runnable\",{\"1\":{\"16\":3,\"17\":1,\"195\":1,\"196\":2,\"206\":1,\"207\":2}}],[\"r随机图像\",{\"1\":{\"279\":1}}],[\"rpm\",{\"1\":{\"277\":4}}],[\"rz上传本地文件到linux\",{\"1\":{\"274\":1}}],[\"rolesallowed\",{\"1\":{\"566\":1}}],[\"rollbackfor属性\",{\"1\":{\"610\":1}}],[\"rollbackfor属性用于控制出现何种异常类型\",{\"1\":{\"98\":1}}],[\"rollbackfor=exception\",{\"1\":{\"98\":1}}],[\"rollbackfor\",{\"1\":{\"98\":1,\"247\":5,\"248\":2,\"610\":5,\"611\":2,\"612\":2}}],[\"rollback\",{\"1\":{\"5\":2,\"97\":1,\"602\":1}}],[\"rownum\",{\"1\":{\"562\":1}}],[\"rows\",{\"1\":{\"562\":3,\"606\":1,\"628\":3,\"655\":3}}],[\"rows=\",{\"1\":{\"34\":1}}],[\"rowbounds\",{\"1\":{\"466\":1}}],[\"row\",{\"1\":{\"257\":2,\"262\":1,\"365\":1,\"366\":4,\"651\":3}}],[\"roundadvice\",{\"1\":{\"215\":1,\"591\":1}}],[\"router用于页面的跳转\",{\"1\":{\"647\":1}}],[\"router\",{\"1\":{\"52\":2}}],[\"route\",{\"1\":{\"52\":1}}],[\"route路由配置\",{\"1\":{\"49\":1}}],[\"root>\",{\"1\":{\"625\":1}}],[\"root容器的配置类\",{\"1\":{\"623\":1}}],[\"root容器\",{\"1\":{\"620\":1,\"621\":1,\"622\":2}}],[\"root\",{\"1\":{\"53\":2,\"220\":2,\"277\":4,\"283\":2,\"461\":2,\"476\":1,\"478\":1,\"493\":2,\"514\":3,\"652\":2,\"669\":2,\"671\":6,\"677\":3,\"680\":2}}],[\"rar\",{\"1\":{\"637\":1,\"649\":1}}],[\"rangw\",{\"1\":{\"334\":1}}],[\"range\",{\"1\":{\"307\":1,\"311\":1,\"312\":2,\"315\":1,\"333\":2,\"334\":2}}],[\"randint\",{\"1\":{\"311\":1,\"312\":1,\"315\":1}}],[\"random类\",{\"0\":{\"160\":1}}],[\"random\",{\"1\":{\"26\":2,\"160\":6,\"311\":1,\"312\":1,\"315\":2}}],[\"raise\",{\"1\":{\"294\":1,\"334\":1}}],[\"rasius\",{\"1\":{\"130\":2}}],[\"radius=\",{\"1\":{\"130\":1}}],[\"radius\",{\"1\":{\"130\":8}}],[\"radio\",{\"1\":{\"34\":3}}],[\"rgb\",{\"1\":{\"34\":2}}],[\"r\",{\"1\":{\"17\":1,\"26\":3,\"120\":1,\"160\":5,\"281\":1,\"292\":1,\"317\":2,\"318\":1,\"320\":1,\"324\":1,\"326\":5,\"334\":5,\"345\":3,\"412\":2,\"640\":16,\"641\":8}}],[\"r>函数型接口\",{\"1\":{\"17\":1}}],[\"re2\",{\"1\":{\"320\":2}}],[\"re1\",{\"1\":{\"320\":2,\"324\":2}}],[\"re\",{\"1\":{\"320\":5,\"321\":1,\"322\":1,\"323\":1,\"324\":2}}],[\"re正则表达式使用到了这个模块\",{\"1\":{\"319\":1}}],[\"reactor\",{\"1\":{\"426\":1}}],[\"reactivex\",{\"1\":{\"387\":4}}],[\"rear==front\",{\"1\":{\"370\":1}}],[\"rear+maxsize\",{\"1\":{\"370\":2}}],[\"rear+1\",{\"1\":{\"370\":2}}],[\"rear++\",{\"1\":{\"367\":1}}],[\"rear的初始值=0\",{\"1\":{\"370\":1}}],[\"rear指向队列的最后一个元素的后一个位置\",{\"1\":{\"370\":1}}],[\"rear变量的含义做一个调整\",{\"1\":{\"370\":1}}],[\"rear\",{\"1\":{\"367\":5,\"370\":5}}],[\"real\",{\"1\":{\"295\":1}}],[\"readme\",{\"1\":{\"393\":1}}],[\"read返回的是字节形式二进制数据\",{\"1\":{\"351\":1}}],[\"read返回了读取到几个\",{\"1\":{\"183\":1}}],[\"readelf\",{\"1\":{\"338\":1}}],[\"reader|filereader\",{\"1\":{\"181\":1}}],[\"reader\",{\"1\":{\"181\":1,\"192\":2,\"203\":2}}],[\"readonly\",{\"1\":{\"245\":1,\"247\":3,\"248\":1,\"608\":7,\"609\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"readobject\",{\"1\":{\"187\":3,\"188\":2}}],[\"readlines\",{\"1\":{\"334\":2,\"351\":1}}],[\"readline\",{\"1\":{\"188\":1,\"192\":1,\"203\":1,\"334\":2,\"351\":1}}],[\"read\",{\"1\":{\"183\":4,\"185\":2,\"186\":2,\"188\":2,\"191\":2,\"202\":2,\"248\":5,\"334\":3,\"351\":2,\"353\":2,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"483\":1,\"608\":1,\"611\":5,\"612\":2}}],[\"readystate\",{\"1\":{\"45\":1,\"253\":2}}],[\"reference\",{\"1\":{\"662\":1,\"665\":1,\"667\":1,\"674\":1,\"675\":1}}],[\"ref引用不同\",{\"1\":{\"566\":1}}],[\"ref引用其他bean的标识\",{\"1\":{\"558\":1}}],[\"refresh\",{\"1\":{\"226\":1,\"559\":1,\"571\":1}}],[\"ref代表引用bean的标识id\",{\"1\":{\"225\":1,\"558\":1}}],[\"ref\",{\"1\":{\"225\":1,\"240\":1,\"558\":1,\"577\":1,\"625\":1}}],[\"ref=\",{\"1\":{\"219\":6,\"224\":4,\"225\":1,\"558\":5,\"562\":5,\"568\":1,\"596\":6,\"625\":1}}],[\"ref属性\",{\"1\":{\"219\":2,\"596\":2}}],[\"refid=\",{\"1\":{\"86\":1,\"530\":1}}],[\"record\",{\"1\":{\"539\":4}}],[\"records\",{\"1\":{\"472\":3,\"651\":3}}],[\"recodetime\",{\"1\":{\"100\":1}}],[\"receive\",{\"1\":{\"192\":6,\"203\":6}}],[\"renameto\",{\"1\":{\"182\":2}}],[\"retlist\",{\"1\":{\"630\":1}}],[\"retainall\",{\"1\":{\"170\":2,\"171\":1}}],[\"returning=\",{\"1\":{\"219\":1,\"596\":1}}],[\"returning属性\",{\"1\":{\"219\":1,\"596\":1}}],[\"returning标签\",{\"1\":{\"219\":1,\"596\":1}}],[\"returning\",{\"1\":{\"213\":1,\"219\":1,\"589\":1,\"596\":1}}],[\"return与大括号若有\",{\"1\":{\"17\":1}}],[\"return\",{\"1\":{\"16\":1,\"17\":4,\"22\":1,\"61\":1,\"68\":8,\"90\":2,\"91\":2,\"93\":3,\"94\":2,\"95\":4,\"96\":1,\"100\":1,\"130\":5,\"135\":2,\"174\":5,\"175\":3,\"176\":28,\"178\":3,\"187\":2,\"188\":1,\"197\":1,\"216\":2,\"222\":1,\"223\":1,\"229\":2,\"236\":1,\"237\":3,\"238\":6,\"239\":2,\"244\":6,\"294\":1,\"328\":1,\"334\":4,\"367\":6,\"370\":10,\"371\":15,\"472\":1,\"478\":3,\"484\":1,\"485\":1,\"493\":1,\"557\":2,\"561\":3,\"562\":13,\"567\":1,\"568\":12,\"572\":1,\"573\":12,\"574\":2,\"575\":14,\"582\":8,\"583\":3,\"588\":4,\"592\":1,\"606\":2,\"607\":6,\"621\":1,\"623\":3,\"627\":1,\"628\":16,\"629\":3,\"630\":2,\"640\":5,\"641\":6,\"652\":14,\"655\":22,\"656\":11,\"657\":14,\"664\":1,\"668\":6,\"669\":6,\"670\":6,\"673\":5,\"676\":1,\"677\":2,\"680\":6}}],[\"reverselistprint\",{\"1\":{\"371\":1}}],[\"reverselsit\",{\"1\":{\"371\":1}}],[\"reversehead\",{\"1\":{\"371\":4}}],[\"reversed\",{\"1\":{\"333\":1}}],[\"reverse=false\",{\"1\":{\"311\":1}}],[\"reverse\",{\"1\":{\"167\":2,\"180\":1,\"257\":2,\"311\":2}}],[\"regular\",{\"1\":{\"344\":1}}],[\"regex\",{\"1\":{\"166\":1}}],[\"regist\",{\"1\":{\"655\":6}}],[\"register\",{\"1\":{\"571\":2}}],[\"registry\",{\"1\":{\"94\":2,\"636\":2,\"657\":2,\"676\":3}}],[\"regionmatches\",{\"1\":{\"166\":1}}],[\"req\",{\"1\":{\"93\":3,\"95\":3}}],[\"require\",{\"1\":{\"252\":1}}],[\"requires\",{\"1\":{\"98\":3,\"249\":2,\"612\":3}}],[\"requiredtype\",{\"1\":{\"555\":1}}],[\"required一样\",{\"1\":{\"249\":1,\"612\":1}}],[\"required\",{\"1\":{\"98\":1,\"233\":2,\"249\":3,\"566\":2,\"612\":5}}],[\"required=false\",{\"1\":{\"68\":1}}],[\"requestheader\",{\"1\":{\"655\":1,\"657\":2}}],[\"requests\",{\"1\":{\"334\":4,\"566\":1}}],[\"request是对请求报文的封装\",{\"1\":{\"252\":1}}],[\"requestmethod\",{\"1\":{\"68\":1}}],[\"requestmapping\",{\"1\":{\"61\":1,\"68\":9,\"630\":1,\"641\":1,\"655\":1,\"656\":1,\"668\":1,\"669\":1,\"673\":2,\"677\":1,\"680\":1}}],[\"requestbody\",{\"1\":{\"68\":1,\"641\":2,\"655\":2,\"656\":1,\"657\":2}}],[\"requestbody标识\",{\"1\":{\"68\":1}}],[\"requestparam绑定参数关系\",{\"1\":{\"68\":1}}],[\"requestparam\",{\"1\":{\"68\":2}}],[\"requestparam完成映射\",{\"1\":{\"68\":1}}],[\"request\",{\"1\":{\"68\":3,\"90\":2,\"91\":2,\"93\":3,\"94\":6,\"228\":1,\"252\":1,\"351\":4,\"352\":4,\"353\":7,\"354\":12,\"355\":6,\"356\":6,\"361\":6,\"560\":1,\"565\":1,\"657\":2,\"676\":3}}],[\"resttemplate\",{\"1\":{\"562\":1}}],[\"restful\",{\"1\":{\"549\":1}}],[\"restcontrolleradvice\",{\"1\":{\"96\":1}}],[\"restcontroller=\",{\"1\":{\"69\":1}}],[\"restcontroller类最前边\",{\"1\":{\"68\":1}}],[\"restcontroller\",{\"1\":{\"61\":1,\"630\":1,\"641\":1,\"655\":1,\"656\":1,\"664\":2,\"670\":1}}],[\"res\",{\"1\":{\"368\":4}}],[\"resopnse\",{\"1\":{\"334\":3}}],[\"resopnse=requests\",{\"1\":{\"334\":1}}],[\"resourceholdersupport\",{\"1\":{\"609\":6}}],[\"resource使用\",{\"1\":{\"566\":1}}],[\"resource注解属于jdk扩展包\",{\"1\":{\"566\":1}}],[\"resource注解用在属性上\",{\"1\":{\"566\":1}}],[\"resource注解默认根据bean名称装配\",{\"1\":{\"566\":1}}],[\"resource注解是jdk扩展包中的\",{\"1\":{\"566\":1}}],[\"resource注解也可以完成属性注入\",{\"1\":{\"566\":1}}],[\"resource注解\",{\"1\":{\"566\":1}}],[\"resource>\",{\"1\":{\"413\":1}}],[\"resource\",{\"1\":{\"233\":1,\"241\":1,\"242\":1,\"566\":7,\"578\":1,\"579\":1,\"628\":6,\"668\":1,\"675\":2}}],[\"resources文件夹下\",{\"1\":{\"667\":1}}],[\"resources目录是spring\",{\"1\":{\"667\":1}}],[\"resources目录下\",{\"1\":{\"667\":1}}],[\"resources目录下的内容会直接放入类路径\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"resources>\",{\"1\":{\"413\":1}}],[\"resources\",{\"1\":{\"220\":1,\"223\":1,\"401\":4,\"406\":4,\"445\":4,\"493\":2,\"505\":1,\"514\":4,\"518\":1,\"557\":3,\"558\":1,\"625\":1,\"628\":3,\"630\":1,\"674\":2,\"675\":7,\"680\":1}}],[\"resource=\",{\"1\":{\"220\":1,\"493\":1,\"514\":1,\"518\":1,\"519\":2}}],[\"resource属性\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"resourcename=名字\",{\"1\":{\"75\":1}}],[\"resume\",{\"1\":{\"196\":1,\"207\":1}}],[\"result封装\",{\"1\":{\"655\":3}}],[\"resultcodeenum\",{\"1\":{\"652\":7,\"655\":6,\"657\":2}}],[\"result<t>\",{\"1\":{\"652\":12}}],[\"resultmap多表结果映射\",{\"1\":{\"540\":1}}],[\"resultmap=\",{\"1\":{\"513\":1,\"515\":1,\"517\":1,\"518\":1,\"519\":1}}],[\"resultmap>\",{\"1\":{\"513\":1,\"517\":1,\"518\":1,\"519\":1,\"521\":1}}],[\"resultmap\",{\"1\":{\"510\":2,\"515\":4,\"517\":1,\"518\":1}}],[\"result=total\",{\"1\":{\"334\":1}}],[\"result=0\",{\"1\":{\"334\":1}}],[\"resulttype返回值类型为集合\",{\"1\":{\"514\":1}}],[\"resulttype使用user别名\",{\"1\":{\"514\":1}}],[\"resulttype属性\",{\"1\":{\"509\":1,\"513\":1}}],[\"resulttype\",{\"1\":{\"220\":1,\"493\":1,\"508\":1,\"512\":1,\"515\":3}}],[\"resulttype=\",{\"1\":{\"82\":1,\"84\":1,\"220\":1,\"467\":1,\"472\":1,\"493\":1,\"502\":1,\"508\":1,\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":2,\"514\":2,\"515\":1,\"525\":1,\"527\":1,\"528\":1,\"630\":1,\"641\":1,\"656\":2,\"680\":1}}],[\"result注解手动映射封装\",{\"1\":{\"81\":1}}],[\"results\",{\"1\":{\"81\":2}}],[\"resultsetmetadata\",{\"1\":{\"11\":3}}],[\"resultset\",{\"0\":{\"7\":1},\"1\":{\"3\":1,\"6\":1,\"7\":2,\"11\":2}}],[\"result\",{\"1\":{\"45\":4,\"81\":1,\"90\":4,\"91\":4,\"93\":2,\"95\":2,\"96\":2,\"100\":2,\"213\":2,\"216\":3,\"253\":5,\"326\":3,\"334\":1,\"476\":4,\"477\":5,\"479\":3,\"505\":3,\"521\":1,\"582\":24,\"583\":6,\"588\":8,\"652\":13,\"655\":32,\"656\":14,\"657\":27}}],[\"resp\",{\"1\":{\"93\":3,\"95\":3}}],[\"response是httpresponse的类型\",{\"1\":{\"351\":1}}],[\"response是对响应报文的封装\",{\"1\":{\"252\":1}}],[\"response1\",{\"1\":{\"334\":1}}],[\"response1=requests\",{\"1\":{\"334\":2}}],[\"response\",{\"1\":{\"90\":2,\"93\":3,\"94\":6,\"252\":3,\"253\":2,\"351\":10,\"353\":4,\"354\":4,\"355\":2,\"356\":2,\"361\":2,\"657\":2,\"676\":3}}],[\"responsebody\",{\"1\":{\"69\":2,\"96\":1,\"673\":2,\"677\":1,\"680\":1}}],[\"responsetext\",{\"1\":{\"45\":1}}],[\"reset\",{\"1\":{\"34\":1}}],[\"redshift\",{\"1\":{\"460\":1}}],[\"redistemplate\",{\"1\":{\"562\":1}}],[\"redis\",{\"1\":{\"426\":5}}],[\"redis6479\",{\"1\":{\"353\":1}}],[\"red\",{\"1\":{\"34\":1,\"36\":1,\"334\":2}}],[\"reduceicon\",{\"1\":{\"22\":2}}],[\"relational\",{\"1\":{\"537\":1}}],[\"release<\",{\"1\":{\"452\":5}}],[\"releases>\",{\"1\":{\"427\":1}}],[\"releases\",{\"1\":{\"424\":2}}],[\"release\",{\"1\":{\"277\":1,\"387\":35,\"421\":1,\"636\":1}}],[\"reload\",{\"1\":{\"276\":1}}],[\"reloginiteam\",{\"1\":{\"28\":7}}],[\"rel=\",{\"1\":{\"34\":1}}],[\"repl表示替换的字符串\",{\"1\":{\"323\":1}}],[\"repl\",{\"1\":{\"323\":1}}],[\"replaceall\",{\"1\":{\"166\":1,\"180\":1}}],[\"replace\",{\"1\":{\"166\":1,\"167\":1,\"188\":2,\"317\":1}}],[\"replatitem\",{\"1\":{\"28\":7}}],[\"repr\",{\"1\":{\"295\":1}}],[\"repositories\",{\"1\":{\"665\":1}}],[\"repositories>\",{\"1\":{\"427\":1}}],[\"repository这三个注解只是在\",{\"1\":{\"564\":1}}],[\"repository这三个注解只是给开发人员看的\",{\"1\":{\"231\":1,\"564\":1}}],[\"repository>\",{\"1\":{\"427\":1}}],[\"repository<\",{\"1\":{\"395\":1,\"440\":1}}],[\"repository\",{\"1\":{\"74\":1,\"231\":1,\"241\":1,\"242\":1,\"395\":2,\"412\":1,\"425\":10,\"426\":5,\"427\":1,\"440\":2,\"449\":2,\"564\":2,\"566\":1,\"568\":1,\"575\":1,\"578\":1,\"579\":1,\"588\":25,\"606\":1}}],[\"repomanager3\",{\"1\":{\"422\":1}}],[\"reporting\",{\"1\":{\"410\":2,\"447\":2}}],[\"repo<\",{\"1\":{\"395\":1,\"440\":1}}],[\"repo\",{\"1\":{\"277\":1}}],[\"repeatable\",{\"1\":{\"248\":2,\"611\":2,\"612\":1}}],[\"repaint\",{\"1\":{\"28\":1}}],[\"remote\",{\"1\":{\"187\":1}}],[\"removeschedule\",{\"1\":{\"641\":1}}],[\"removebyhid\",{\"1\":{\"657\":2}}],[\"removebymap\",{\"1\":{\"471\":1}}],[\"removebyids\",{\"1\":{\"471\":1}}],[\"removebyid\",{\"1\":{\"471\":1,\"641\":2,\"657\":2}}],[\"remove进行操作\",{\"1\":{\"197\":1}}],[\"remove\",{\"1\":{\"170\":3,\"171\":2,\"177\":1,\"192\":1,\"197\":2,\"203\":1,\"276\":1,\"310\":1,\"313\":1,\"316\":1,\"334\":1,\"471\":1}}],[\"removeall\",{\"1\":{\"28\":1,\"170\":2,\"171\":1}}],[\"remainder\",{\"1\":{\"24\":3}}],[\"r2\",{\"1\":{\"16\":2}}],[\"r1\",{\"1\":{\"16\":2,\"17\":1}}],[\"rsa🫙1\",{\"1\":{\"387\":1}}],[\"rs=1\",{\"1\":{\"334\":1}}],[\"rstrip\",{\"1\":{\"317\":1}}],[\"rs\",{\"1\":{\"11\":11,\"387\":1,\"562\":6}}],[\"执行validationquery检测连接是否有效\",{\"1\":{\"677\":1}}],[\"执行打包\",{\"0\":{\"685\":1},\"1\":{\"660\":1}}],[\"执行抛出事务超时异常\",{\"1\":{\"609\":1}}],[\"执行后或异常抛出时记录日志\",{\"1\":{\"584\":1}}],[\"执行装配\",{\"1\":{\"566\":2}}],[\"执行插入一条学员数据\",{\"1\":{\"562\":1}}],[\"执行查询操作\",{\"1\":{\"537\":1}}],[\"执行查询\",{\"1\":{\"534\":1}}],[\"执行了otherwise\",{\"1\":{\"528\":1}}],[\"执行更新\",{\"1\":{\"483\":1}}],[\"执行效果\",{\"1\":{\"481\":1}}],[\"执行部署命令\",{\"1\":{\"426\":1}}],[\"执行命令\",{\"1\":{\"425\":1}}],[\"执行测试代码\",{\"1\":{\"404\":1}}],[\"执行测试源码\",{\"1\":{\"404\":1,\"450\":1}}],[\"执行指令的状态机\",{\"1\":{\"338\":1}}],[\"执行指定生命周期的两种方式\",{\"1\":{\"59\":1}}],[\"执行不同的写作业方法\",{\"1\":{\"334\":1}}],[\"执行不区分大小写的匹配\",{\"1\":{\"320\":1}}],[\"执行过程中会自动创建\",{\"1\":{\"186\":1}}],[\"执行完\",{\"1\":{\"154\":1}}],[\"执行java\",{\"1\":{\"152\":1}}],[\"执行\",{\"1\":{\"139\":1,\"422\":1}}],[\"执行时就不用再进行这些步骤了\",{\"1\":{\"9\":1}}],[\"执行dql语句\",{\"1\":{\"7\":1}}],[\"执行ddl语句\",{\"1\":{\"6\":1}}],[\"执行dml\",{\"1\":{\"6\":1}}],[\"执行数据库脚本\",{\"1\":{\"651\":1}}],[\"执行数据库\",{\"1\":{\"6\":1}}],[\"执行存储过程的对象\",{\"1\":{\"5\":1}}],[\"执行sql时\",{\"1\":{\"81\":1}}],[\"执行sql的对象statement\",{\"1\":{\"12\":1}}],[\"执行sql语句\",{\"1\":{\"6\":1}}],[\"执行sql\",{\"1\":{\"2\":1,\"8\":1,\"12\":1}}],[\"导出为一个war包\",{\"1\":{\"544\":1}}],[\"导致程序卡住\",{\"1\":{\"609\":1}}],[\"导致程序员在开发核心业务功能时分散了精力\",{\"1\":{\"582\":1}}],[\"导致数据库性能下降\",{\"1\":{\"492\":1}}],[\"导致硬编码内伤\",{\"1\":{\"492\":1}}],[\"导致\",{\"1\":{\"412\":2,\"449\":2}}],[\"导致无法连接至\",{\"1\":{\"412\":1,\"449\":1}}],[\"导致当我们遍历linkedhashset集合\",{\"1\":{\"173\":1}}],[\"导包import\",{\"1\":{\"160\":1}}],[\"导包\",{\"1\":{\"126\":1}}],[\"导入工具类\",{\"1\":{\"655\":1}}],[\"导入前端程序\",{\"0\":{\"637\":1},\"1\":{\"615\":1}}],[\"导入外部属性文件\",{\"1\":{\"562\":2,\"568\":1}}],[\"导入springioc相关依赖\",{\"1\":{\"557\":1}}],[\"导入分页插件\",{\"1\":{\"472\":1}}],[\"导入jackson依赖\",{\"1\":{\"415\":1}}],[\"导入jar包\",{\"1\":{\"11\":1}}],[\"导入库\",{\"1\":{\"334\":1}}],[\"导入相关依赖\",{\"1\":{\"242\":1,\"580\":1}}],[\"导入依赖错误解决\",{\"1\":{\"457\":1}}],[\"导入依赖范围\",{\"1\":{\"411\":1}}],[\"导入依赖\",{\"1\":{\"100\":1,\"220\":1,\"461\":1,\"652\":1,\"655\":1,\"679\":1,\"680\":1}}],[\"导入maven项目\",{\"1\":{\"57\":1}}],[\"导入axiosimport\",{\"1\":{\"51\":1}}],[\"导入驱动jar包\",{\"1\":{\"2\":1}}],[\"导航栏\",{\"1\":{\"1\":1}}],[\"jws<claims>\",{\"1\":{\"655\":1}}],[\"jwthelper\",{\"1\":{\"655\":11,\"657\":5}}],[\"jwt配置\",{\"1\":{\"655\":1}}],[\"jwt使用和测试\",{\"1\":{\"655\":1}}],[\"jwt可以携带很多信息\",{\"1\":{\"655\":1}}],[\"jwt由三部分组成\",{\"1\":{\"655\":1}}],[\"jwt数据组成和包含信息\",{\"1\":{\"655\":1}}],[\"jwt工作流程\",{\"1\":{\"655\":1}}],[\"jwt介绍\",{\"1\":{\"655\":1}}],[\"jwt和token介绍\",{\"1\":{\"655\":1}}],[\"jwt用于token的生成和校验\",{\"1\":{\"647\":1}}],[\"jwt实现\",{\"1\":{\"646\":1}}],[\"jwtutils\",{\"1\":{\"95\":1}}],[\"jwt校验时使用的签名密钥\",{\"1\":{\"92\":1}}],[\"jwts\",{\"1\":{\"92\":2,\"655\":3}}],[\"jwt\",{\"1\":{\"92\":3,\"93\":2,\"95\":3,\"655\":3}}],[\"jcl\",{\"1\":{\"588\":2}}],[\"jcl🫙5\",{\"1\":{\"387\":1}}],[\"j2objc\",{\"1\":{\"387\":2}}],[\"john\",{\"1\":{\"474\":2,\"478\":3,\"512\":1}}],[\"jone\",{\"1\":{\"461\":2}}],[\"job\",{\"1\":{\"273\":1}}],[\"jointpoint接口\",{\"1\":{\"589\":1}}],[\"join\",{\"1\":{\"192\":1,\"196\":1,\"203\":1,\"207\":1,\"317\":2,\"517\":5,\"518\":1,\"519\":1,\"656\":2}}],[\"joinpoint\",{\"1\":{\"100\":3,\"101\":1,\"211\":1,\"213\":10,\"215\":3,\"216\":4,\"584\":1,\"589\":12,\"591\":3,\"592\":4,\"682\":4}}],[\"jul\",{\"1\":{\"387\":1}}],[\"jupyter\",{\"1\":{\"337\":1}}],[\"jupiter\",{\"1\":{\"220\":1,\"242\":2,\"244\":1,\"431\":3,\"432\":1,\"493\":1,\"514\":3,\"557\":1,\"564\":1,\"580\":1,\"582\":1,\"588\":9,\"606\":1}}],[\"jupiter<\",{\"1\":{\"220\":1,\"242\":2,\"244\":1,\"431\":1,\"432\":1,\"493\":1,\"557\":1,\"564\":1,\"580\":1,\"582\":1,\"606\":1}}],[\"justify\",{\"0\":{\"258\":1},\"1\":{\"256\":1}}],[\"junitstarter\",{\"1\":{\"588\":1}}],[\"junit会在每一个\",{\"1\":{\"514\":2,\"518\":2}}],[\"junit测试程序\",{\"1\":{\"518\":1,\"519\":1}}],[\"junit测试\",{\"1\":{\"505\":1,\"508\":1,\"510\":1,\"511\":1,\"512\":1}}],[\"junit5\",{\"1\":{\"588\":2}}],[\"junit5会在每一个\",{\"1\":{\"505\":2}}],[\"junit5integrationtest\",{\"1\":{\"242\":1,\"580\":1}}],[\"junit5测试\",{\"1\":{\"220\":1,\"242\":2,\"244\":1,\"493\":1,\"557\":1,\"564\":1,\"580\":1,\"582\":1,\"606\":1}}],[\"junit\",{\"1\":{\"59\":2,\"220\":1,\"242\":2,\"244\":1,\"410\":2,\"411\":1,\"429\":1,\"431\":5,\"432\":1,\"447\":3,\"493\":1,\"514\":3,\"557\":1,\"564\":1,\"580\":1,\"582\":1,\"588\":25,\"606\":1}}],[\"jj\",{\"1\":{\"178\":1}}],[\"j+1\",{\"1\":{\"126\":6}}],[\"j++\",{\"1\":{\"121\":2,\"122\":1,\"125\":1,\"126\":4,\"138\":1,\"366\":3}}],[\"j=i\",{\"1\":{\"125\":1}}],[\"j=1\",{\"1\":{\"122\":1}}],[\"j=0\",{\"1\":{\"121\":2,\"126\":2,\"366\":3}}],[\"j<11\",{\"1\":{\"366\":2}}],[\"j<arr\",{\"1\":{\"126\":2}}],[\"j<=10\",{\"1\":{\"122\":1}}],[\"j<3\",{\"1\":{\"121\":1,\"125\":1,\"366\":1}}],[\"j<i+1\",{\"1\":{\"121\":1}}],[\"j\",{\"1\":{\"121\":2,\"122\":2,\"125\":4,\"126\":15,\"138\":3,\"167\":1,\"315\":2,\"356\":1,\"361\":1,\"366\":4,\"582\":24,\"583\":3,\"588\":12,\"652\":2,\"665\":1}}],[\"jvm\",{\"1\":{\"106\":1,\"549\":1}}],[\"jre\",{\"1\":{\"106\":1,\"387\":1}}],[\"jersey\",{\"1\":{\"387\":6}}],[\"jerry\",{\"1\":{\"40\":1,\"493\":1,\"625\":1}}],[\"jetbrains\",{\"1\":{\"588\":5}}],[\"jetutils\",{\"1\":{\"93\":1}}],[\"jet\",{\"1\":{\"93\":1}}],[\"js的包管理工具\",{\"1\":{\"636\":1}}],[\"js包管理工具\",{\"1\":{\"636\":1}}],[\"jsr250\",{\"1\":{\"625\":1}}],[\"jsr是java规范提案\",{\"1\":{\"566\":1}}],[\"jsr并不是直接提供特定的实现\",{\"1\":{\"566\":1}}],[\"jsr\",{\"1\":{\"566\":8}}],[\"jsr305🫙3\",{\"1\":{\"387\":1}}],[\"jsr310🫙2\",{\"1\":{\"387\":1}}],[\"jsr311\",{\"1\":{\"387\":1}}],[\"jstl<\",{\"1\":{\"625\":1}}],[\"jstl\",{\"1\":{\"524\":1,\"625\":5}}],[\"jsp需要依赖\",{\"1\":{\"625\":1}}],[\"jsp\",{\"1\":{\"401\":1,\"625\":5}}],[\"js发布版3\",{\"1\":{\"269\":1}}],[\"js平台\",{\"1\":{\"252\":1}}],[\"js里是否导入了路由import\",{\"1\":{\"52\":1}}],[\"js配置路由信息\",{\"1\":{\"52\":1}}],[\"js中引入elementui组件库\",{\"1\":{\"50\":1}}],[\"js中自定义对象\",{\"1\":{\"40\":1}}],[\"js入口js文件\",{\"1\":{\"49\":1}}],[\"js保存cue配置的文件\",{\"1\":{\"49\":1}}],[\"js文件\",{\"1\":{\"42\":1}}],[\"js可以在事件被检测到时执行代码\",{\"1\":{\"41\":1}}],[\"js事件监听\",{\"0\":{\"41\":1}}],[\"js通过dom\",{\"1\":{\"40\":1}}],[\"jsobject\",{\"1\":{\"40\":2}}],[\"jsonwebtoken\",{\"1\":{\"655\":1}}],[\"jsonwebtoken<\",{\"1\":{\"92\":1,\"655\":1}}],[\"jsonpath\",{\"1\":{\"425\":2}}],[\"jsonparam\",{\"1\":{\"68\":2}}],[\"json等处理\",{\"1\":{\"390\":1}}],[\"json🫙2\",{\"1\":{\"387\":1}}],[\"jsonobject\",{\"1\":{\"95\":1}}],[\"jsonnobject\",{\"1\":{\"93\":2,\"95\":1}}],[\"json数据键名与形参对象属性名相同\",{\"1\":{\"68\":1}}],[\"json参数\",{\"1\":{\"68\":2}}],[\"json模块的基本信息\",{\"1\":{\"49\":1}}],[\"jsonstr\",{\"1\":{\"40\":1}}],[\"json是通过js对象标记法书写的文本\",{\"1\":{\"40\":1}}],[\"json\",{\"1\":{\"40\":3,\"64\":1,\"92\":1,\"355\":2,\"356\":1,\"361\":2,\"425\":8,\"655\":1,\"657\":2}}],[\"js对象转为json字符串\",{\"1\":{\"40\":1}}],[\"js对象转为json对象\",{\"1\":{\"40\":1}}],[\"js对象\",{\"0\":{\"40\":1}}],[\"js函数\",{\"0\":{\"39\":1}}],[\"js时一门弱类型语言\",{\"1\":{\"38\":1}}],[\"js语法\",{\"0\":{\"38\":1}}],[\"js负责网页的行为\",{\"1\":{\"33\":1}}],[\"js\",{\"0\":{\"37\":1},\"1\":{\"32\":1,\"37\":1,\"38\":3,\"42\":2,\"45\":2,\"401\":1,\"445\":1,\"636\":2,\"640\":2,\"675\":1}}],[\"jbt\",{\"1\":{\"29\":4}}],[\"jbutton\",{\"1\":{\"23\":22,\"24\":10,\"25\":4,\"26\":6,\"27\":2,\"29\":2}}],[\"jpa用于使用jpa进行数据库访问\",{\"1\":{\"665\":1}}],[\"jpa\",{\"1\":{\"492\":1,\"537\":1}}],[\"jpa等\",{\"1\":{\"243\":1,\"604\":1}}],[\"jpasswordfield\",{\"1\":{\"29\":2}}],[\"jpasswordfiled\",{\"1\":{\"29\":1}}],[\"jpg\",{\"1\":{\"0\":1,\"34\":1,\"352\":1}}],[\"jtextfield\",{\"1\":{\"29\":2}}],[\"jtestfiled\",{\"1\":{\"29\":1}}],[\"jtb2\",{\"1\":{\"26\":7}}],[\"jtb1\",{\"1\":{\"26\":7,\"27\":4}}],[\"jtb\",{\"1\":{\"26\":6}}],[\"jmenuitem\",{\"1\":{\"28\":16}}],[\"jmenu\",{\"1\":{\"28\":8}}],[\"jmenubar\",{\"1\":{\"28\":12}}],[\"jdk最低版本\",{\"1\":{\"440\":1}}],[\"jdk>\",{\"1\":{\"395\":1,\"440\":1}}],[\"jdk8🫙2\",{\"1\":{\"387\":1}}],[\"jdk8之后流式操作\",{\"1\":{\"23\":1}}],[\"jdk原生的实现方式\",{\"1\":{\"211\":1,\"583\":1,\"587\":1}}],[\"jdk动态代理技术实现\",{\"1\":{\"211\":1,\"583\":1}}],[\"jdk动态代理\",{\"1\":{\"211\":1,\"583\":1}}],[\"jdk17\",{\"1\":{\"404\":1,\"431\":1,\"450\":1,\"456\":1}}],[\"jdk15on🫙1\",{\"1\":{\"387\":2}}],[\"jdk1\",{\"1\":{\"196\":2,\"207\":2}}],[\"jdk\",{\"1\":{\"106\":1,\"393\":1,\"411\":1,\"496\":1,\"583\":1,\"588\":1,\"663\":1}}],[\"jdbxtransactionmanage\",{\"1\":{\"97\":1}}],[\"jdbc>mybatis>hibernate\",{\"1\":{\"492\":1}}],[\"jdbctemplatetest\",{\"1\":{\"562\":1}}],[\"jdbctemplate技术讲解\",{\"1\":{\"562\":1}}],[\"jdbctemplate\",{\"1\":{\"244\":7,\"562\":28,\"568\":4,\"575\":10,\"606\":12,\"607\":7,\"609\":2,\"677\":4}}],[\"jdbctemplate方式\",{\"1\":{\"243\":1,\"604\":1}}],[\"jdbc<\",{\"1\":{\"244\":1,\"461\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":1,\"652\":1,\"677\":1,\"680\":1,\"681\":1}}],[\"jdbc方式\",{\"1\":{\"243\":1,\"604\":1}}],[\"jdbc驱动\",{\"1\":{\"59\":1}}],[\"jdbc事务管理\",{\"1\":{\"5\":1}}],[\"jdbc\",{\"0\":{\"2\":1,\"3\":1},\"1\":{\"11\":4,\"12\":3,\"32\":1,\"76\":1,\"97\":1,\"212\":1,\"220\":3,\"231\":3,\"235\":2,\"236\":10,\"242\":1,\"243\":2,\"244\":2,\"411\":3,\"461\":2,\"481\":2,\"491\":1,\"492\":1,\"493\":4,\"514\":3,\"515\":4,\"524\":1,\"562\":7,\"568\":3,\"572\":10,\"575\":2,\"579\":1,\"604\":2,\"606\":4,\"607\":1,\"609\":2,\"625\":1,\"628\":16,\"652\":2,\"668\":9,\"669\":7,\"670\":3,\"671\":9,\"677\":2,\"680\":2},\"2\":{\"14\":1}}],[\"jdialog\",{\"1\":{\"23\":6}}],[\"jlabel\",{\"1\":{\"22\":5,\"28\":14}}],[\"jfrog的artifactory\",{\"1\":{\"421\":1}}],[\"jfram\",{\"1\":{\"23\":1}}],[\"jframe\",{\"1\":{\"21\":1,\"23\":23,\"24\":2,\"25\":2,\"26\":4,\"27\":2,\"28\":6,\"29\":2}}],[\"jf\",{\"1\":{\"21\":11}}],[\"jayway\",{\"1\":{\"425\":2}}],[\"jakartaee\",{\"1\":{\"625\":6}}],[\"jakarta\",{\"1\":{\"387\":3,\"588\":3,\"625\":9,\"676\":2}}],[\"jackiechan\",{\"1\":{\"539\":1,\"588\":7}}],[\"jack\",{\"1\":{\"461\":2}}],[\"jackson用于转换json\",{\"1\":{\"647\":1}}],[\"jackson需要导入三个依赖\",{\"1\":{\"448\":1}}],[\"jackson需要三个依赖\",{\"1\":{\"415\":1}}],[\"jackson\",{\"1\":{\"387\":12,\"415\":3,\"431\":4,\"432\":1,\"448\":3,\"455\":3,\"456\":5,\"625\":5}}],[\"jacascript代码必须位于<script><\",{\"1\":{\"37\":1}}],[\"java应用\",{\"0\":{\"697\":1}}],[\"java作为开发语言\",{\"1\":{\"647\":1}}],[\"javaagent\",{\"1\":{\"588\":1}}],[\"java配置类还是他们的混合用法\",{\"1\":{\"662\":1}}],[\"java配置类实现\",{\"1\":{\"573\":1}}],[\"java配置类\",{\"1\":{\"570\":1}}],[\"java配置类是一种使用java编写配置信息的方式\",{\"1\":{\"552\":1}}],[\"java配置类方式\",{\"1\":{\"552\":1}}],[\"javatype属性\",{\"1\":{\"518\":1,\"522\":1}}],[\"javatype=\",{\"1\":{\"517\":3,\"518\":1}}],[\"java代码专注业务\",{\"1\":{\"492\":1}}],[\"javase\",{\"1\":{\"457\":1}}],[\"javase工程\",{\"0\":{\"443\":1},\"1\":{\"436\":1}}],[\"javascript\",{\"1\":{\"45\":1,\"401\":1,\"445\":1,\"674\":1}}],[\"javascript将浏览器的各个组成部分封装成对象\",{\"1\":{\"40\":1}}],[\"java编译插件\",{\"1\":{\"413\":1}}],[\"java编辑器\",{\"1\":{\"108\":1}}],[\"java下的某个包中\",{\"1\":{\"413\":1}}],[\"javaprojects\",{\"1\":{\"406\":1,\"588\":2}}],[\"javax\",{\"1\":{\"387\":4,\"566\":1,\"588\":3}}],[\"java数据结构\",{\"0\":{\"365\":1}}],[\"java<\",{\"1\":{\"220\":1,\"244\":1,\"413\":1,\"416\":1,\"461\":1,\"493\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"java扩展\",{\"0\":{\"200\":1}}],[\"javawork\",{\"1\":{\"197\":2}}],[\"javaweb\",{\"0\":{\"32\":1},\"2\":{\"104\":1}}],[\"java是如何解决线程的安全问题\",{\"1\":{\"197\":1,\"208\":1}}],[\"java是一种纯粹的面向对象的编程语言\",{\"1\":{\"106\":1}}],[\"java语言的jvm允许程序运行多个线程\",{\"1\":{\"193\":1,\"204\":1}}],[\"javaio相关代码\",{\"0\":{\"188\":1}}],[\"java程序中\",{\"1\":{\"180\":1}}],[\"java集合类可以用于存储数量不等的多个对象\",{\"1\":{\"169\":1}}],[\"javaee工程\",{\"0\":{\"444\":1},\"1\":{\"436\":1}}],[\"javaee\",{\"1\":{\"165\":4}}],[\"java提供的网络类库\",{\"1\":{\"189\":1,\"200\":1}}],[\"java提供的是异常处理的抓抛模型\",{\"1\":{\"153\":1}}],[\"java提供了两种方式来处理异常类的对象\",{\"1\":{\"153\":1}}],[\"java虚拟机无法解决的严重问题\",{\"1\":{\"152\":1}}],[\"java异常处理\",{\"0\":{\"152\":1}}],[\"java中不允许多重继承\",{\"1\":{\"139\":1}}],[\"java中所有的类都继承了object类\",{\"1\":{\"130\":1}}],[\"java中有集成好的排序\",{\"1\":{\"126\":1}}],[\"java中的字符char\",{\"1\":{\"114\":1}}],[\"java不是靠缩进的\",{\"1\":{\"121\":1}}],[\"java大容量无法直接转化为小容量\",{\"1\":{\"114\":1}}],[\"java对于局部变量\",{\"1\":{\"112\":1}}],[\"java特有的文档注释\",{\"1\":{\"107\":1}}],[\"java的异常处理\",{\"1\":{\"155\":1}}],[\"java的数据类型\",{\"0\":{\"111\":1}}],[\"java的命名规则\",{\"0\":{\"110\":1}}],[\"java的输入\",{\"0\":{\"109\":1}}],[\"java的输出\",{\"0\":{\"108\":1}}],[\"java的另一种注释语法\",{\"1\":{\"107\":1}}],[\"java的注释语法\",{\"1\":{\"107\":1}}],[\"java的注释\",{\"0\":{\"107\":1}}],[\"java的源文件\",{\"1\":{\"106\":1}}],[\"javaconfig\",{\"1\":{\"238\":2,\"573\":2,\"575\":2,\"606\":2}}],[\"javac\",{\"1\":{\"106\":2}}],[\"java基础\",{\"0\":{\"105\":1},\"2\":{\"199\":1}}],[\"java注解不仅力不从心\",{\"1\":{\"82\":1}}],[\"javagui\",{\"0\":{\"20\":1},\"2\":{\"31\":1}}],[\"java8time🫙3\",{\"1\":{\"387\":1}}],[\"java8为java语言\",{\"1\":{\"16\":1}}],[\"java8于2014年3月发布\",{\"1\":{\"16\":1}}],[\"java8新特性\",{\"0\":{\"16\":1}}],[\"java8新特性个人总结\",{\"1\":{\"15\":1}}],[\"java8\",{\"0\":{\"15\":1}}],[\"java\",{\"0\":{\"162\":1,\"399\":1,\"400\":1,\"688\":1},\"1\":{\"11\":2,\"12\":5,\"106\":4,\"109\":1,\"126\":1,\"137\":2,\"146\":1,\"152\":1,\"154\":2,\"157\":1,\"158\":1,\"160\":2,\"161\":1,\"162\":1,\"163\":2,\"164\":3,\"167\":1,\"170\":4,\"180\":1,\"182\":1,\"188\":3,\"230\":1,\"243\":1,\"248\":2,\"390\":1,\"401\":6,\"438\":1,\"440\":1,\"442\":1,\"445\":6,\"461\":1,\"478\":6,\"491\":3,\"492\":1,\"508\":5,\"512\":2,\"514\":2,\"532\":1,\"549\":6,\"552\":2,\"555\":1,\"561\":1,\"564\":3,\"566\":2,\"575\":1,\"588\":6,\"602\":1,\"608\":1,\"609\":5,\"611\":2,\"626\":1,\"627\":1,\"628\":3,\"652\":2,\"655\":1,\"686\":4},\"2\":{\"13\":1,\"19\":1,\"30\":1,\"103\":1,\"198\":1,\"210\":1,\"373\":1,\"382\":1}}],[\"jar命令的说明\",{\"1\":{\"686\":1}}],[\"jar命令用于在java环境中执行可执行的jar文件\",{\"1\":{\"686\":1}}],[\"jar命令来运行打包后的spring\",{\"1\":{\"684\":1}}],[\"jar=65511\",{\"1\":{\"588\":1}}],[\"jar指的是普通的java项目打包方式\",{\"1\":{\"409\":1,\"447\":1}}],[\"jar结尾的文件\",{\"1\":{\"398\":1,\"442\":1}}],[\"jar包+配置文件\",{\"1\":{\"545\":1}}],[\"jar包必须存放在指定位置\",{\"1\":{\"387\":1}}],[\"jar包内的具体细节\",{\"1\":{\"387\":1}}],[\"jar包的版本\",{\"1\":{\"387\":1}}],[\"jar包的名称\",{\"1\":{\"387\":1}}],[\"jar包\",{\"1\":{\"231\":1,\"387\":1}}],[\"jar\",{\"0\":{\"425\":1,\"426\":1,\"427\":1},\"1\":{\"11\":1,\"59\":1,\"387\":8,\"389\":1,\"398\":1,\"406\":6,\"409\":1,\"415\":1,\"418\":3,\"424\":4,\"425\":1,\"442\":1,\"447\":1,\"450\":1,\"452\":2,\"588\":28,\"686\":5}}],[\"伙伴详细介绍\",{\"1\":{\"1\":1}}],[\"伙伴名称\",{\"1\":{\"1\":1}}],[\"书籍详细描述\",{\"1\":{\"1\":1}}],[\"书籍名称\",{\"1\":{\"1\":1}}],[\"你想设置的任何参数\",{\"1\":{\"667\":1}}],[\"你都会觉得配置文件过于复杂和繁琐\",{\"1\":{\"662\":1}}],[\"你已经学习了多种配置spring程序的方式\",{\"1\":{\"662\":1}}],[\"你知道端午有哪些创意美食吗\",{\"1\":{\"651\":1}}],[\"你只要考虑返回值\",{\"1\":{\"590\":1}}],[\"你只需要知道如何使用洗衣机\",{\"1\":{\"334\":1}}],[\"你对动态\",{\"1\":{\"524\":1}}],[\"你应该能理解根据不同条件拼接\",{\"1\":{\"524\":1}}],[\"你现在可能看不懂\",{\"1\":{\"517\":1}}],[\"你可能想把它映射到一个智能的对象模型\",{\"1\":{\"517\":1}}],[\"你可以配置helperdialect属性来指定分页插件使用哪种方言\",{\"1\":{\"628\":2}}],[\"你可以构建灵活\",{\"1\":{\"474\":1}}],[\"你可以不使用\",{\"1\":{\"388\":1}}],[\"你可以很轻松的在基于注解和xml的语句映射方式间自由移植和切换\",{\"1\":{\"82\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"1\":1}}],[\"你可以自定义版权信息\",{\"1\":{\"0\":1}}],[\"你可以自定义页脚\",{\"1\":{\"0\":1}}],[\"你可以自定义封面图片\",{\"1\":{\"0\":1}}],[\"你会立即发现省掉了将近\",{\"1\":{\"493\":1,\"515\":1}}],[\"你需要记住的\",{\"1\":{\"480\":1}}],[\"你需要补考\",{\"1\":{\"334\":1}}],[\"你还要确保自己写的爬虫是一只温柔善良的爬虫\",{\"1\":{\"334\":1}}],[\"你还需要补考\",{\"1\":{\"334\":1}}],[\"你输入的成绩无效\",{\"1\":{\"334\":1}}],[\"你也可以不遵守\",{\"1\":{\"110\":1}}],[\"你点我了一下\",{\"1\":{\"43\":1}}],[\"你好啊\",{\"1\":{\"334\":1}}],[\"你好\",{\"1\":{\"23\":2,\"38\":1,\"191\":1,\"202\":1,\"312\":1,\"327\":1,\"334\":2}}],[\"你的成绩为优秀\",{\"1\":{\"334\":1}}],[\"你的成绩为良好\",{\"1\":{\"334\":1}}],[\"你的成绩很好\",{\"1\":{\"334\":1}}],[\"你的成绩及格啦\",{\"1\":{\"334\":1}}],[\"你的自定义链接\",{\"1\":{\"1\":1}}],[\"你的伙伴链接\",{\"1\":{\"1\":1}}],[\"你的文章链接\",{\"1\":{\"1\":1}}],[\"你的书籍链接\",{\"1\":{\"1\":1}}],[\"你的项目链接\",{\"1\":{\"1\":1}}],[\"项目根路径\",{\"1\":{\"667\":1,\"674\":1,\"675\":1}}],[\"项目名\",{\"1\":{\"582\":1}}],[\"项目名称\",{\"1\":{\"1\":1}}],[\"项目创建\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"项目准备\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"项目主要应用技术框架\",{\"1\":{\"544\":1}}],[\"项目主要应用技术框架为\",{\"1\":{\"544\":1}}],[\"项目主要代码\",{\"1\":{\"401\":1,\"445\":1}}],[\"项目搭建\",{\"1\":{\"493\":1}}],[\"项目搭建和准备\",{\"1\":{\"493\":1}}],[\"项目搭建和统一构建\",{\"0\":{\"430\":1}}],[\"项目结构\",{\"1\":{\"457\":1}}],[\"项目的webapp文件夹出现小蓝点\",{\"1\":{\"444\":1}}],[\"项目的唯一id\",{\"1\":{\"409\":1,\"447\":1}}],[\"项目开发完成后\",{\"1\":{\"439\":1}}],[\"项目开发所需要模块\",{\"1\":{\"49\":1}}],[\"项目架构\",{\"1\":{\"429\":1,\"455\":1}}],[\"项目需求和结构分析\",{\"0\":{\"429\":1,\"455\":1},\"1\":{\"436\":1}}],[\"项目c依赖b\",{\"1\":{\"415\":1}}],[\"项目b依赖a\",{\"1\":{\"415\":1}}],[\"项目打成war包\",{\"1\":{\"409\":1,\"447\":1}}],[\"项目打成jar包\",{\"1\":{\"409\":1,\"447\":1}}],[\"项目打包\",{\"1\":{\"406\":1}}],[\"项目测试代码\",{\"1\":{\"401\":1,\"445\":1}}],[\"项目管理文件\",{\"1\":{\"401\":2,\"445\":2}}],[\"项目管理构建\",{\"1\":{\"390\":1}}],[\"项目下\",{\"1\":{\"400\":1,\"444\":1}}],[\"项目完成开发\",{\"1\":{\"390\":1}}],[\"项目构建管理\",{\"1\":{\"438\":1}}],[\"项目构建还能够将多个开发人员的代码汇合到一起\",{\"1\":{\"403\":1}}],[\"项目构建是软件开发过程中至关重要的一部分\",{\"1\":{\"403\":1}}],[\"项目构建是指将源代码\",{\"1\":{\"390\":1,\"403\":1,\"413\":1,\"439\":1,\"450\":1}}],[\"项目构建\",{\"1\":{\"390\":1,\"438\":1}}],[\"项目中没有webapp目录\",{\"1\":{\"675\":1}}],[\"项目中\",{\"1\":{\"387\":1,\"448\":1}}],[\"项目中使用的jar包也越来越多\",{\"1\":{\"387\":1}}],[\"项目都排在一条线\",{\"1\":{\"259\":1}}],[\"项目详细描述\",{\"1\":{\"1\":1}}],[\"dspring\",{\"1\":{\"686\":2}}],[\"dserver\",{\"1\":{\"686\":1}}],[\"d<name>=<value>\",{\"1\":{\"686\":1}}],[\"dynamic\",{\"1\":{\"651\":3}}],[\"dz5\",{\"1\":{\"544\":1}}],[\"d已经存在\",{\"1\":{\"370\":1}}],[\"d+\",{\"1\":{\"334\":1}}],[\"d=\",{\"1\":{\"334\":1}}],[\"dual\",{\"1\":{\"677\":1}}],[\"du\",{\"1\":{\"271\":1}}],[\"dfile\",{\"1\":{\"588\":1}}],[\"df\",{\"1\":{\"271\":1,\"288\":1}}],[\"dql不需要\",{\"1\":{\"220\":1,\"493\":1}}],[\"d2\",{\"1\":{\"162\":2}}],[\"d1\",{\"1\":{\"162\":3}}],[\"dptes下的任意级路径\",{\"1\":{\"94\":1}}],[\"dtd\",{\"1\":{\"82\":3,\"220\":6,\"467\":3,\"493\":6,\"514\":6,\"628\":3,\"630\":3,\"641\":3,\"680\":3}}],[\"dark\",{\"1\":{\"669\":1}}],[\"daf\",{\"1\":{\"346\":1}}],[\"daily\",{\"1\":{\"334\":4}}],[\"day01\",{\"1\":{\"461\":1,\"677\":1,\"680\":1}}],[\"days=work\",{\"1\":{\"334\":1}}],[\"days\",{\"1\":{\"334\":4}}],[\"day\",{\"1\":{\"164\":8,\"176\":10}}],[\"dao类型组件\",{\"1\":{\"564\":2}}],[\"dao组件\",{\"1\":{\"564\":2}}],[\"daos\",{\"1\":{\"226\":2,\"555\":2,\"559\":2}}],[\"dao\",{\"1\":{\"71\":1,\"231\":2,\"248\":1,\"401\":2,\"445\":2,\"493\":1,\"538\":1,\"562\":1,\"564\":2,\"568\":1,\"590\":2,\"606\":1,\"611\":1}}],[\"datatype\",{\"1\":{\"387\":4}}],[\"databind会依赖传递core\",{\"1\":{\"431\":1,\"456\":1}}],[\"databind<\",{\"1\":{\"415\":1,\"431\":1,\"432\":1,\"448\":1,\"456\":2,\"625\":1}}],[\"databind\",{\"1\":{\"415\":1,\"432\":1,\"448\":1,\"455\":1,\"456\":1,\"625\":5}}],[\"databind🫙2\",{\"1\":{\"387\":1}}],[\"databaseidprovider\",{\"1\":{\"496\":1}}],[\"database\",{\"1\":{\"82\":1,\"493\":1,\"562\":1,\"568\":1,\"575\":1,\"625\":1,\"651\":1,\"669\":1}}],[\"databasename=edcu\",{\"1\":{\"11\":2,\"12\":1}}],[\"data=data\",{\"1\":{\"355\":1}}],[\"datagramsocket\",{\"1\":{\"190\":1,\"201\":1}}],[\"datagram\",{\"1\":{\"190\":1,\"201\":1}}],[\"data是其子类\",{\"1\":{\"162\":1}}],[\"data类\",{\"0\":{\"162\":1}}],[\"data\",{\"1\":{\"42\":1,\"43\":4,\"44\":1,\"45\":4,\"69\":1,\"71\":1,\"79\":1,\"163\":2,\"334\":7,\"354\":2,\"355\":3,\"361\":6,\"366\":4,\"415\":1,\"426\":6,\"448\":1,\"461\":1,\"481\":2,\"514\":1,\"517\":2,\"537\":1,\"547\":1,\"608\":1,\"625\":1,\"634\":5,\"640\":14,\"652\":12,\"653\":1,\"655\":21,\"656\":4,\"657\":7,\"665\":1,\"677\":1}}],[\"datasource的值\",{\"1\":{\"670\":1}}],[\"datasourceproperties\",{\"1\":{\"668\":5,\"669\":5,\"670\":4}}],[\"datasourcejavaconfig\",{\"1\":{\"628\":2,\"629\":1}}],[\"datasourceutils\",{\"1\":{\"609\":2}}],[\"datasourceconfigurationproperties\",{\"1\":{\"670\":6}}],[\"datasourceconfig\",{\"1\":{\"244\":1,\"607\":2}}],[\"datasourcetransactionmanager类中的主要方法\",{\"1\":{\"243\":1,\"604\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"243\":1,\"244\":1,\"604\":1,\"607\":1,\"627\":3,\"681\":1}}],[\"datasource>\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"datasource\",{\"1\":{\"10\":1,\"76\":4,\"78\":1,\"236\":7,\"243\":1,\"244\":16,\"461\":1,\"496\":1,\"562\":2,\"568\":1,\"572\":7,\"575\":10,\"604\":1,\"606\":11,\"607\":16,\"609\":1,\"617\":1,\"620\":1,\"622\":1,\"627\":5,\"628\":28,\"652\":1,\"668\":8,\"669\":5,\"670\":2,\"671\":3,\"677\":1,\"680\":1}}],[\"date=\",{\"1\":{\"176\":1}}],[\"date1\",{\"1\":{\"163\":4}}],[\"date类的api不易于国际化\",{\"1\":{\"163\":1}}],[\"dateparam\",{\"1\":{\"68\":2}}],[\"datetimeformat\",{\"1\":{\"68\":1}}],[\"datetimeformat注解完成日期参数格式转换\",{\"1\":{\"68\":1}}],[\"datetime\",{\"1\":{\"34\":1,\"651\":2}}],[\"date\",{\"1\":{\"0\":1,\"92\":1,\"162\":5,\"163\":6,\"164\":2,\"170\":4,\"484\":1,\"508\":2,\"655\":3,\"657\":3}}],[\"ddd\",{\"1\":{\"170\":1}}],[\"dd\",{\"1\":{\"68\":1,\"163\":1}}],[\"ddl语句执行成功也可能返回0\",{\"1\":{\"6\":1}}],[\"ddl语句\",{\"1\":{\"6\":1}}],[\"downloaded\",{\"1\":{\"425\":4}}],[\"downloading\",{\"1\":{\"425\":4}}],[\"download\",{\"1\":{\"422\":1,\"636\":1}}],[\"dowork\",{\"1\":{\"226\":3,\"557\":2,\"559\":3,\"573\":2}}],[\"douban\",{\"1\":{\"334\":3,\"356\":1}}],[\"doublelinkedlist\",{\"1\":{\"371\":1}}],[\"double\",{\"1\":{\"17\":3,\"112\":5,\"124\":1,\"130\":5,\"169\":2,\"356\":1,\"493\":2,\"501\":2,\"504\":1,\"508\":4,\"625\":2}}],[\"dotall\",{\"1\":{\"320\":1}}],[\"dorollback\",{\"1\":{\"243\":1,\"604\":1}}],[\"doresume\",{\"1\":{\"243\":1,\"604\":1}}],[\"dosuspend\",{\"1\":{\"243\":1,\"604\":1}}],[\"dobegin\",{\"1\":{\"243\":1,\"604\":1}}],[\"dogdog\",{\"1\":{\"329\":1}}],[\"dog\",{\"1\":{\"146\":4,\"329\":4}}],[\"dofilter中的request\",{\"1\":{\"93\":1}}],[\"dofilter\",{\"1\":{\"93\":4}}],[\"dofilter可调用多次\",{\"1\":{\"93\":1}}],[\"domain\",{\"1\":{\"508\":6}}],[\"dom\",{\"1\":{\"40\":3}}],[\"dom是w3c的标准\",{\"1\":{\"40\":1}}],[\"dom事件做出反应\",{\"1\":{\"40\":1}}],[\"dom对象\",{\"1\":{\"40\":1}}],[\"do\",{\"1\":{\"38\":1,\"412\":2}}],[\"docs\",{\"1\":{\"393\":1,\"440\":1,\"662\":2,\"665\":2,\"667\":2,\"674\":2,\"675\":2}}],[\"docommit\",{\"1\":{\"243\":1,\"604\":1}}],[\"doc\",{\"1\":{\"182\":1}}],[\"documnent\",{\"1\":{\"40\":1}}],[\"documnet\",{\"1\":{\"40\":1}}],[\"document对象中提供了以下获取element对象的函数\",{\"1\":{\"40\":1}}],[\"document\",{\"1\":{\"38\":1,\"40\":5,\"41\":1,\"45\":1,\"253\":2}}],[\"doctype\",{\"1\":{\"34\":1,\"82\":1,\"220\":2,\"253\":1,\"334\":1,\"467\":1,\"493\":2,\"514\":2,\"628\":1,\"630\":1,\"641\":1,\"680\":1}}],[\"digest\",{\"1\":{\"652\":1}}],[\"didea\",{\"1\":{\"588\":1}}],[\"di概念总结\",{\"0\":{\"553\":1},\"1\":{\"542\":1}}],[\"dialect\",{\"1\":{\"535\":1}}],[\"dialog对话框组件\",{\"1\":{\"51\":1}}],[\"directory>\",{\"1\":{\"413\":1}}],[\"direction和flex\",{\"1\":{\"262\":1}}],[\"direction\",{\"0\":{\"257\":1},\"1\":{\"256\":2}}],[\"dir\",{\"1\":{\"412\":2}}],[\"dir=d\",{\"1\":{\"412\":1}}],[\"dict\",{\"1\":{\"315\":2}}],[\"dictionary\",{\"1\":{\"315\":1,\"334\":1}}],[\"discovery<\",{\"1\":{\"387\":1}}],[\"discovery🫙2\",{\"1\":{\"387\":1}}],[\"distributionmanagement>\",{\"1\":{\"426\":1}}],[\"dist\",{\"1\":{\"283\":1}}],[\"disable\",{\"1\":{\"277\":1}}],[\"dispose\",{\"1\":{\"23\":1}}],[\"di注解\",{\"1\":{\"235\":2,\"568\":1,\"571\":1}}],[\"di详解\",{\"0\":{\"75\":1}}],[\"di\",{\"0\":{\"73\":1,\"233\":1,\"555\":1,\"558\":1,\"566\":1,\"567\":1},\"1\":{\"221\":3,\"542\":4,\"553\":3,\"558\":4,\"613\":3,\"625\":1}}],[\"div1\",{\"1\":{\"45\":1}}],[\"div>\",{\"1\":{\"42\":1,\"43\":5,\"253\":1,\"334\":1}}],[\"divs\",{\"1\":{\"40\":1}}],[\"div\",{\"1\":{\"36\":2,\"40\":1,\"582\":3,\"583\":2,\"588\":2}}],[\"dimension\",{\"1\":{\"23\":3}}],[\"db1\",{\"1\":{\"652\":1}}],[\"db\",{\"1\":{\"480\":2,\"481\":1,\"651\":2,\"652\":1}}],[\"dbtype\",{\"1\":{\"472\":1,\"652\":1}}],[\"db2\",{\"1\":{\"460\":2,\"628\":2}}],[\"dburl\",{\"1\":{\"11\":4,\"12\":2}}],[\"dbcp\",{\"1\":{\"10\":1}}],[\"derby\",{\"1\":{\"628\":2}}],[\"deadline\",{\"1\":{\"609\":1}}],[\"denyall\",{\"1\":{\"566\":1}}],[\"detailedblogresultmap\",{\"1\":{\"517\":2}}],[\"details>\",{\"1\":{\"34\":1}}],[\"declaringtypename\",{\"1\":{\"589\":3}}],[\"declareroles\",{\"1\":{\"566\":1}}],[\"declarpointcut\",{\"1\":{\"215\":3,\"591\":3}}],[\"decimal\",{\"1\":{\"508\":1}}],[\"decode\",{\"1\":{\"317\":2,\"351\":1,\"353\":2,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"dev启动前端项目\",{\"1\":{\"649\":1}}],[\"dev\",{\"1\":{\"277\":1,\"529\":1,\"638\":1,\"649\":1,\"671\":5}}],[\"dev那个黑色输出框\",{\"1\":{\"120\":1}}],[\"development\",{\"1\":{\"106\":1,\"220\":2,\"493\":2,\"514\":2}}],[\"debug=\",{\"1\":{\"625\":1}}],[\"debug查看实际类型\",{\"1\":{\"598\":1}}],[\"debug\",{\"1\":{\"97\":1,\"592\":4,\"625\":3,\"677\":1}}],[\"demo2\",{\"1\":{\"637\":1}}],[\"demo06\",{\"1\":{\"426\":1}}],[\"demo05\",{\"1\":{\"426\":1}}],[\"demo04\",{\"1\":{\"426\":1}}],[\"demo03\",{\"1\":{\"426\":1}}],[\"demo02\",{\"1\":{\"426\":1}}],[\"demo01\",{\"1\":{\"426\":1}}],[\"demo07\",{\"1\":{\"426\":5}}],[\"demo08\",{\"1\":{\"387\":1,\"426\":1}}],[\"demo09\",{\"1\":{\"387\":1,\"426\":1}}],[\"demo\",{\"1\":{\"387\":3,\"426\":5}}],[\"demotext1\",{\"1\":{\"135\":1}}],[\"demofilter\",{\"1\":{\"93\":1}}],[\"demo10\",{\"1\":{\"387\":1,\"426\":1}}],[\"demo1\",{\"1\":{\"11\":1,\"12\":1}}],[\"definitions\",{\"1\":{\"555\":1}}],[\"def\",{\"1\":{\"197\":1,\"294\":1,\"325\":5,\"327\":2,\"328\":4,\"329\":3,\"334\":16}}],[\"defaultservlethandlerconfigurer\",{\"1\":{\"626\":1}}],[\"defaultservicelocator\",{\"1\":{\"223\":2,\"557\":2}}],[\"defaults\",{\"1\":{\"325\":1}}],[\"defaultvalue\",{\"1\":{\"235\":1,\"567\":1}}],[\"default=\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"default属性的取值是environment标签的id属性的值\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"default\",{\"1\":{\"135\":1,\"140\":1,\"144\":1,\"150\":3,\"231\":2,\"237\":5,\"283\":4,\"368\":1,\"395\":1,\"406\":6,\"440\":1,\"461\":3,\"466\":1,\"481\":1,\"484\":1,\"514\":1,\"564\":2,\"573\":5,\"612\":1,\"651\":8}}],[\"defaultl\",{\"1\":{\"59\":1}}],[\"deflate等\",{\"1\":{\"63\":1}}],[\"deprecated\",{\"1\":{\"566\":1}}],[\"department\",{\"1\":{\"501\":1}}],[\"depencies>中\",{\"1\":{\"416\":1,\"448\":1}}],[\"dependencies\",{\"1\":{\"665\":1}}],[\"dependencies标签下引入开发需要的jar包\",{\"1\":{\"413\":1}}],[\"dependencies>\",{\"1\":{\"59\":1,\"220\":1,\"244\":1,\"410\":2,\"418\":2,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"447\":2,\"452\":2,\"456\":5,\"461\":1,\"493\":1,\"557\":1,\"562\":1,\"564\":1,\"568\":1,\"575\":1,\"582\":1,\"606\":1,\"625\":1,\"652\":1,\"664\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"dependencymanagement>\",{\"1\":{\"418\":1,\"431\":1,\"452\":1,\"456\":1}}],[\"dependencymanagement\",{\"1\":{\"411\":3}}],[\"dependency\",{\"1\":{\"72\":1,\"221\":1,\"411\":1,\"547\":1,\"553\":1}}],[\"dependency>\",{\"1\":{\"59\":3,\"78\":1,\"79\":1,\"92\":2,\"100\":1,\"211\":2,\"220\":3,\"233\":1,\"242\":4,\"244\":10,\"387\":3,\"410\":2,\"412\":1,\"415\":2,\"416\":1,\"418\":10,\"431\":4,\"432\":4,\"433\":1,\"434\":1,\"447\":2,\"448\":1,\"449\":1,\"452\":10,\"456\":9,\"461\":7,\"493\":3,\"535\":1,\"557\":2,\"562\":4,\"564\":2,\"566\":1,\"568\":5,\"575\":5,\"580\":2,\"582\":4,\"588\":2,\"606\":10,\"625\":20,\"652\":8,\"655\":2,\"664\":1,\"673\":1,\"677\":5,\"680\":6,\"681\":1,\"682\":1}}],[\"deploy\",{\"1\":{\"404\":1,\"406\":1,\"426\":1,\"450\":2}}],[\"deployment\",{\"1\":{\"57\":1}}],[\"depid\",{\"1\":{\"81\":2}}],[\"depts下的一级路径\",{\"1\":{\"94\":1}}],[\"depts\",{\"1\":{\"94\":2}}],[\"deptid\",{\"1\":{\"81\":1}}],[\"dept\",{\"1\":{\"81\":3}}],[\"del\",{\"1\":{\"294\":1,\"307\":1,\"310\":1,\"315\":1,\"334\":2,\"412\":1}}],[\"deletemapping\",{\"1\":{\"641\":1}}],[\"deleteempbyid\",{\"1\":{\"628\":1}}],[\"deleteauthor\",{\"1\":{\"515\":1}}],[\"delete标签\",{\"1\":{\"515\":1}}],[\"deletetest\",{\"1\":{\"514\":1}}],[\"deleted`\",{\"1\":{\"651\":3}}],[\"deleted=1\",{\"1\":{\"481\":1}}],[\"deleted=0\",{\"1\":{\"476\":2,\"481\":2,\"656\":1}}],[\"deleted\",{\"1\":{\"476\":2,\"481\":5,\"651\":18}}],[\"deletebyprimarykey\",{\"1\":{\"539\":1}}],[\"deletebymap\",{\"1\":{\"464\":1}}],[\"deletebyid\",{\"1\":{\"85\":2,\"464\":1,\"481\":1}}],[\"deletebatchids\",{\"1\":{\"464\":1}}],[\"delete方法\",{\"0\":{\"464\":1},\"1\":{\"459\":1}}],[\"delete>\",{\"1\":{\"85\":1,\"514\":1,\"641\":1}}],[\"delete\",{\"1\":{\"45\":1,\"80\":3,\"85\":2,\"167\":2,\"182\":1,\"276\":1,\"370\":1,\"371\":1,\"460\":1,\"464\":1,\"474\":2,\"476\":2,\"481\":3,\"485\":1,\"514\":4,\"515\":2,\"634\":1,\"641\":4,\"652\":1}}],[\"del>\",{\"1\":{\"34\":1}}],[\"destruction\",{\"1\":{\"237\":1,\"573\":1}}],[\"destroy方法\",{\"1\":{\"560\":1,\"565\":1}}],[\"destroymethod\",{\"1\":{\"237\":2,\"573\":2,\"575\":1}}],[\"destroy\",{\"1\":{\"93\":2,\"227\":1,\"237\":1,\"552\":1,\"560\":1,\"573\":1}}],[\"destroyed\",{\"1\":{\"44\":1}}],[\"destorymethod\",{\"1\":{\"237\":1}}],[\"destory\",{\"1\":{\"227\":1}}],[\"destory方法\",{\"1\":{\"227\":1}}],[\"dest\",{\"1\":{\"180\":1,\"186\":2}}],[\"description\",{\"1\":{\"34\":1,\"220\":1,\"238\":1,\"493\":1,\"539\":1,\"564\":8,\"567\":1,\"573\":1,\"606\":1,\"607\":2,\"628\":1,\"640\":2}}],[\"desc\",{\"1\":{\"1\":6,\"81\":2,\"82\":1,\"84\":1,\"476\":1}}],[\"degree\",{\"1\":{\"34\":1}}],[\"draft\",{\"1\":{\"517\":2}}],[\"drop\",{\"1\":{\"461\":1,\"651\":3}}],[\"driver=com\",{\"1\":{\"562\":1,\"606\":1,\"628\":1}}],[\"driverclassname=\",{\"1\":{\"668\":1,\"669\":1,\"670\":1}}],[\"driverclassname=com\",{\"1\":{\"668\":1}}],[\"driverclassname\",{\"1\":{\"236\":3,\"562\":2,\"568\":1,\"572\":3,\"668\":7,\"669\":8,\"670\":6,\"671\":3}}],[\"driver\",{\"1\":{\"76\":2,\"220\":2,\"236\":2,\"244\":4,\"461\":2,\"493\":2,\"514\":2,\"562\":3,\"568\":1,\"572\":2,\"575\":3,\"606\":4,\"607\":4,\"628\":7,\"652\":2,\"668\":1,\"669\":1,\"671\":3,\"677\":2,\"680\":2}}],[\"drivername\",{\"1\":{\"11\":2,\"12\":1}}],[\"drivermanager\",{\"0\":{\"4\":1},\"1\":{\"3\":1,\"11\":2,\"12\":3}}],[\"driud使用步骤\",{\"0\":{\"11\":1}}],[\"druid的其他属性配置\",{\"1\":{\"677\":1}}],[\"druid兼容springboot3文件\",{\"1\":{\"652\":1}}],[\"druid用于提供数据源的连接池\",{\"1\":{\"647\":1}}],[\"druid启动器的依赖\",{\"1\":{\"461\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"druiddatasourceautoconfigure\",{\"1\":{\"461\":1,\"652\":1,\"677\":1}}],[\"druiddatasource\",{\"1\":{\"236\":4,\"244\":2,\"461\":1,\"562\":6,\"568\":3,\"572\":4,\"575\":3,\"606\":2,\"607\":2,\"628\":4,\"652\":1,\"677\":1,\"680\":1}}],[\"druid连接池\",{\"1\":{\"78\":1,\"390\":1,\"606\":1}}],[\"druid连接池是由阿里巴巴开源的数据库连接池项目\",{\"1\":{\"10\":1}}],[\"druid\",{\"1\":{\"10\":2,\"11\":1,\"78\":1,\"236\":1,\"461\":3,\"481\":1,\"562\":2,\"568\":1,\"572\":1,\"588\":2,\"625\":3,\"652\":3,\"655\":1,\"677\":5,\"680\":2}}],[\"d\",{\"1\":{\"9\":2,\"53\":1,\"108\":1,\"121\":1,\"164\":2,\"187\":1,\"188\":8,\"218\":1,\"315\":9,\"317\":2,\"318\":2,\"320\":2,\"338\":3,\"345\":2,\"347\":1,\"366\":5,\"367\":2,\"370\":2,\"406\":1,\"588\":25,\"594\":1,\"625\":1,\"652\":1,\"686\":1}}],[\"dml返回影响的行数\",{\"1\":{\"6\":1}}],[\"页码数\",{\"1\":{\"656\":3}}],[\"页大小\",{\"1\":{\"634\":1,\"656\":4}}],[\"页插件使用\",{\"1\":{\"535\":1}}],[\"页脚\",{\"1\":{\"1\":1}}],[\"页面源码没有\",{\"1\":{\"250\":1}}],[\"页面\",{\"1\":{\"49\":1}}],[\"页面中的所有元素\",{\"1\":{\"35\":1}}],[\"页面信息\",{\"1\":{\"1\":1}}],[\"页面配置\",{\"1\":{\"0\":2}}],[\"评论和标签都是类型别名\",{\"1\":{\"517\":1}}],[\"评论\",{\"1\":{\"1\":1}}],[\"上下文路径为空\",{\"1\":{\"674\":1}}],[\"上述4省份共有17个国家气象观测站最高气温突破历史极值\",{\"1\":{\"651\":1}}],[\"上图显示了\",{\"1\":{\"552\":1}}],[\"上的替代语言\",{\"1\":{\"549\":1}}],[\"上的排列方式\",{\"1\":{\"260\":1}}],[\"上传到maven私服仓库\",{\"1\":{\"404\":1,\"450\":1}}],[\"上线了\",{\"1\":{\"192\":1,\"203\":1}}],[\"上课讲的\",{\"1\":{\"187\":2}}],[\"上一节的\",{\"1\":{\"170\":1}}],[\"上一篇\",{\"1\":{\"1\":1}}],[\"上海\",{\"1\":{\"40\":1,\"43\":1}}],[\"上\",{\"1\":{\"36\":2,\"259\":1,\"544\":1}}],[\"上面两种情况其实都能够正常获取到\",{\"1\":{\"598\":1}}],[\"上面案例\",{\"1\":{\"591\":1}}],[\"上面批量插入的例子本质上是一条sql语句\",{\"1\":{\"529\":1}}],[\"上面课程中\",{\"1\":{\"517\":1}}],[\"上面的实验只是讲解了如何在xml格式的配置文件编写ioc和di配置\",{\"1\":{\"559\":1}}],[\"上面的并没有得到a\",{\"1\":{\"338\":1}}],[\"上面的无法访问\",{\"1\":{\"334\":1}}],[\"上面的是从小到大的\",{\"1\":{\"35\":1}}],[\"上面就是一个示例\",{\"1\":{\"1\":1}}],[\"贡献者\",{\"1\":{\"1\":1}}],[\"侧边栏\",{\"1\":{\"1\":1}}],[\"b9\",{\"1\":{\"628\":2}}],[\"b0\",{\"1\":{\"628\":2}}],[\"bd\",{\"1\":{\"628\":4}}],[\"bcnf\",{\"1\":{\"517\":1}}],[\"bcpkix\",{\"1\":{\"387\":1}}],[\"bcprov\",{\"1\":{\"387\":1}}],[\"bc范式\",{\"1\":{\"341\":1}}],[\"b再推出c\",{\"1\":{\"341\":1}}],[\"bs4\",{\"1\":{\"334\":3}}],[\"bs库\",{\"1\":{\"334\":1}}],[\"bs架构\",{\"1\":{\"67\":1}}],[\"bmi=user\",{\"1\":{\"334\":1}}],[\"bmi=weight\",{\"1\":{\"334\":1}}],[\"bmi<=30\",{\"1\":{\"334\":1}}],[\"bmi<=25\",{\"1\":{\"334\":1}}],[\"bmi<=18\",{\"1\":{\"334\":1}}],[\"bmi\",{\"1\":{\"334\":4}}],[\"b是另一个类\",{\"1\":{\"224\":1}}],[\"b交给ioc容器管理\",{\"1\":{\"224\":1}}],[\"bfw\",{\"1\":{\"188\":4}}],[\"bfr\",{\"1\":{\"188\":3}}],[\"b4\",{\"1\":{\"170\":2}}],[\"b3\",{\"1\":{\"170\":2}}],[\"b1\",{\"1\":{\"170\":2,\"224\":3}}],[\"bbb\",{\"1\":{\"170\":1}}],[\"bb\",{\"1\":{\"170\":4,\"177\":3}}],[\"bio\",{\"1\":{\"517\":4}}],[\"billie\",{\"1\":{\"461\":2}}],[\"bilibili\",{\"1\":{\"334\":1}}],[\"birth2\",{\"1\":{\"176\":6}}],[\"birth1\",{\"1\":{\"176\":6}}],[\"birthday=\",{\"1\":{\"176\":2}}],[\"birthday\",{\"1\":{\"176\":26}}],[\"biginteger\",{\"1\":{\"508\":2}}],[\"bigint\",{\"1\":{\"461\":1}}],[\"big\",{\"1\":{\"334\":1}}],[\"bigdecimal\",{\"1\":{\"158\":1,\"508\":3}}],[\"biglnteger类\",{\"0\":{\"158\":1}}],[\"bing\",{\"1\":{\"334\":1}}],[\"bin读取\",{\"1\":{\"188\":1}}],[\"bin\",{\"1\":{\"56\":1,\"188\":2,\"393\":1,\"440\":1,\"588\":2}}],[\"bind中\",{\"1\":{\"415\":1,\"448\":1}}],[\"bind<\",{\"1\":{\"92\":1,\"655\":1}}],[\"bind\",{\"1\":{\"43\":2,\"415\":1,\"448\":1,\"664\":2,\"673\":3}}],[\"b大\",{\"1\":{\"119\":1}}],[\"b=false\",{\"1\":{\"334\":1}}],[\"b=fis\",{\"1\":{\"183\":1}}],[\"b=new\",{\"1\":{\"183\":1}}],[\"b=10\",{\"1\":{\"119\":1}}],[\"b=3\",{\"1\":{\"114\":1}}],[\"b=\",{\"1\":{\"114\":1,\"334\":1}}],[\"b+c+a\",{\"1\":{\"114\":1}}],[\"b\",{\"1\":{\"114\":2,\"119\":1,\"121\":1,\"128\":1,\"146\":4,\"149\":2,\"155\":2,\"169\":2,\"181\":1,\"183\":6,\"185\":6,\"189\":1,\"197\":4,\"200\":1,\"218\":1,\"224\":4,\"239\":7,\"299\":2,\"305\":1,\"312\":1,\"315\":4,\"316\":2,\"320\":2,\"329\":1,\"345\":1,\"415\":6,\"416\":2,\"426\":2,\"448\":5,\"478\":1,\"517\":7,\"574\":7,\"594\":1,\"652\":4}}],[\"business\",{\"1\":{\"558\":1}}],[\"bug\",{\"1\":{\"398\":1,\"442\":1}}],[\"bu\",{\"1\":{\"398\":3,\"442\":3}}],[\"build标签中指定\",{\"1\":{\"413\":1}}],[\"building\",{\"1\":{\"406\":1}}],[\"build>\",{\"1\":{\"404\":1,\"413\":3,\"431\":1,\"450\":1,\"456\":1,\"461\":1,\"652\":1,\"677\":1,\"684\":1}}],[\"build\",{\"1\":{\"220\":1,\"406\":1,\"410\":2,\"431\":2,\"432\":2,\"433\":2,\"434\":2,\"440\":2,\"447\":2,\"456\":8,\"461\":2,\"493\":1,\"505\":1,\"514\":1,\"518\":1,\"625\":2,\"628\":2,\"652\":9,\"655\":6,\"657\":2,\"665\":1,\"673\":2,\"677\":2}}],[\"builder\",{\"1\":{\"92\":1,\"655\":1}}],[\"bufferedreader\",{\"1\":{\"188\":2,\"192\":2,\"203\":2}}],[\"bufferedwriter\",{\"1\":{\"188\":3}}],[\"buffer\",{\"1\":{\"185\":3,\"191\":7,\"202\":7,\"588\":1}}],[\"butoon\",{\"1\":{\"40\":1}}],[\"button>\",{\"1\":{\"253\":1}}],[\"button\",{\"1\":{\"34\":1,\"40\":1,\"41\":2,\"43\":1,\"253\":1}}],[\"bye\",{\"1\":{\"192\":1,\"203\":1}}],[\"bytes\",{\"1\":{\"317\":1,\"652\":6}}],[\"bytes表示二进制数据\",{\"1\":{\"317\":1}}],[\"bytearrayoutputstream\",{\"1\":{\"191\":4,\"202\":4}}],[\"byte=a\",{\"1\":{\"114\":1}}],[\"byte是一字节八位的\",{\"1\":{\"114\":1}}],[\"byte\",{\"1\":{\"112\":4,\"114\":5,\"169\":3,\"183\":2,\"185\":4,\"188\":2,\"191\":4,\"202\":4,\"501\":1,\"508\":4,\"652\":2}}],[\"by\",{\"1\":{\"81\":2,\"82\":1,\"84\":1,\"277\":3,\"476\":1,\"481\":1,\"485\":1,\"608\":1}}],[\"behavior\",{\"1\":{\"680\":1}}],[\"beautifulsoup\",{\"1\":{\"334\":2}}],[\"bean定义\",{\"1\":{\"665\":1}}],[\"bean定义组件\",{\"0\":{\"236\":1,\"572\":1},\"1\":{\"542\":1}}],[\"beanutils\",{\"1\":{\"621\":1}}],[\"bean方式处理\",{\"1\":{\"575\":1}}],[\"bean方法之间依赖\",{\"1\":{\"573\":1}}],[\"bean方法之间的依赖\",{\"0\":{\"238\":1}}],[\"bean生成beanname问题\",{\"1\":{\"573\":1}}],[\"beanpropertyrowmapper<>\",{\"1\":{\"562\":2,\"568\":1,\"575\":1,\"677\":1}}],[\"beanpropertyrowmapper就是封装好rowmapper的实现\",{\"1\":{\"562\":2,\"568\":1,\"575\":1}}],[\"bean3\",{\"1\":{\"560\":2}}],[\"bean2\",{\"1\":{\"560\":2}}],[\"bean1\",{\"1\":{\"560\":2}}],[\"bean在ioc容器中可以有多个实例\",{\"1\":{\"560\":1}}],[\"bean在ioc容器中只有一个实例\",{\"1\":{\"560\":1}}],[\"beandefinition与类概念一样\",{\"1\":{\"560\":1,\"565\":1}}],[\"beandefinition\",{\"1\":{\"560\":2,\"565\":2}}],[\"bean作用域概念\",{\"1\":{\"560\":1,\"565\":1}}],[\"bean标签\",{\"1\":{\"557\":1}}],[\"bean等注解来实现bean和依赖关系的配置\",{\"1\":{\"552\":1}}],[\"bean之间的依赖关系和配置信息\",{\"1\":{\"552\":1}}],[\"beanconfig\",{\"1\":{\"242\":1,\"580\":1}}],[\"bean源码\",{\"1\":{\"237\":1}}],[\"bean注解源码\",{\"1\":{\"573\":1}}],[\"bean注解标记和扫描\",{\"0\":{\"564\":1},\"1\":{\"542\":1}}],[\"bean注解和方法实现\",{\"1\":{\"242\":1,\"579\":1}}],[\"bean注解细节\",{\"0\":{\"237\":1,\"573\":1},\"1\":{\"542\":1}}],[\"bean注解\",{\"1\":{\"236\":1,\"572\":1}}],[\"beantwo\",{\"1\":{\"227\":2,\"237\":4,\"560\":3,\"565\":1,\"573\":4}}],[\"beanone\",{\"1\":{\"227\":2,\"232\":1,\"237\":4,\"560\":3,\"565\":2,\"573\":4}}],[\"beans<\",{\"1\":{\"418\":2,\"452\":2}}],[\"beans🫙5\",{\"1\":{\"387\":1}}],[\"beans>\",{\"1\":{\"224\":4,\"227\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"237\":1,\"555\":1,\"558\":4,\"560\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"573\":1,\"588\":1}}],[\"beans\",{\"1\":{\"224\":4,\"226\":1,\"228\":4,\"229\":4,\"231\":4,\"236\":4,\"239\":1,\"248\":1,\"429\":2,\"431\":1,\"432\":1,\"455\":2,\"456\":2,\"555\":4,\"559\":1,\"562\":8,\"564\":4,\"567\":1,\"568\":4,\"571\":4,\"572\":4,\"574\":1,\"588\":6,\"611\":1,\"668\":1,\"669\":1,\"676\":1}}],[\"bean属性赋值\",{\"0\":{\"566\":1,\"567\":1},\"1\":{\"542\":2}}],[\"bean属性指定\",{\"1\":{\"237\":1}}],[\"bean属性\",{\"1\":{\"223\":1,\"557\":1}}],[\"bean=\",{\"1\":{\"223\":1,\"557\":1}}],[\"bean>\",{\"1\":{\"223\":1,\"224\":6,\"225\":1,\"231\":1,\"236\":1,\"555\":3,\"557\":1,\"558\":5,\"560\":2,\"561\":1,\"562\":7,\"568\":2,\"572\":1}}],[\"beanfactory\",{\"1\":{\"221\":2,\"230\":4,\"552\":4,\"561\":4}}],[\"bean\",{\"0\":{\"557\":1,\"558\":1,\"560\":1,\"563\":1,\"565\":1,\"569\":1,\"598\":1},\"1\":{\"221\":1,\"223\":1,\"228\":3,\"230\":14,\"231\":5,\"233\":2,\"236\":3,\"237\":15,\"238\":14,\"239\":3,\"244\":3,\"472\":1,\"484\":1,\"485\":1,\"508\":3,\"542\":7,\"552\":1,\"553\":1,\"555\":9,\"557\":7,\"560\":5,\"561\":18,\"564\":10,\"565\":3,\"566\":5,\"572\":3,\"573\":34,\"574\":3,\"575\":2,\"598\":14,\"606\":2,\"607\":3,\"627\":1,\"628\":9,\"652\":1,\"665\":1}}],[\"bean的名称\",{\"1\":{\"573\":1}}],[\"bean的作用域\",{\"1\":{\"560\":1}}],[\"bean的作用域等信息\",{\"1\":{\"552\":1}}],[\"bean的唯一标识\",{\"1\":{\"557\":1}}],[\"bean的id标识\",{\"1\":{\"226\":2,\"559\":2}}],[\"bean的组件扫描\",{\"1\":{\"74\":1}}],[\"bean的声明\",{\"1\":{\"74\":1}}],[\"bean对象读取\",{\"1\":{\"559\":1}}],[\"bean对象\",{\"1\":{\"72\":1}}],[\"between\",{\"1\":{\"258\":1,\"261\":1,\"476\":2,\"677\":1}}],[\"be\",{\"1\":{\"239\":1,\"481\":1,\"574\":1}}],[\"begin\",{\"1\":{\"97\":1,\"100\":2}}],[\"beijing\",{\"1\":{\"68\":2}}],[\"before注解标记前置通知方法\",{\"1\":{\"589\":1}}],[\"before注解\",{\"1\":{\"588\":1,\"591\":1}}],[\"beforeeach\",{\"1\":{\"505\":1,\"514\":2,\"518\":1}}],[\"beforeeach方法\",{\"1\":{\"505\":1,\"514\":1,\"518\":1}}],[\"before标签\",{\"1\":{\"219\":1,\"596\":1}}],[\"before\",{\"1\":{\"212\":2,\"213\":1,\"215\":2,\"216\":1,\"219\":1,\"512\":1,\"588\":1,\"589\":1,\"591\":3,\"596\":1,\"655\":1,\"682\":3}}],[\"before前置通知\",{\"1\":{\"102\":1}}],[\"beforedestroy\",{\"1\":{\"44\":1}}],[\"beforeupdate\",{\"1\":{\"44\":1}}],[\"beforemount\",{\"1\":{\"44\":1}}],[\"beforecreate\",{\"1\":{\"44\":1}}],[\"befin\",{\"1\":{\"5\":1}}],[\"ba\",{\"1\":{\"628\":2}}],[\"ba5b24\",{\"1\":{\"487\":1}}],[\"baomidou<\",{\"1\":{\"461\":1,\"652\":1}}],[\"baomidou\",{\"1\":{\"460\":1,\"461\":10,\"480\":1,\"485\":1,\"487\":1}}],[\"baos\",{\"1\":{\"191\":8,\"202\":8}}],[\"batis实践\",{\"0\":{\"700\":1}}],[\"batis\",{\"0\":{\"699\":1}}],[\"batchsize\",{\"1\":{\"471\":3}}],[\"bat\",{\"1\":{\"412\":1,\"449\":1}}],[\"bashrc中添加每次启动终端要输出的\",{\"1\":{\"282\":1}}],[\"basemapper<headline>\",{\"1\":{\"656\":1}}],[\"basemapper<user>\",{\"1\":{\"461\":1,\"467\":1,\"480\":1}}],[\"basecategory1list\",{\"1\":{\"652\":1}}],[\"baseclasslist\",{\"1\":{\"329\":2}}],[\"based\",{\"1\":{\"570\":1}}],[\"basepackages\",{\"1\":{\"235\":3,\"236\":1,\"242\":1,\"571\":2,\"572\":1,\"575\":1,\"579\":1,\"588\":1}}],[\"base\",{\"1\":{\"231\":3,\"387\":3,\"406\":8,\"426\":3,\"564\":3,\"568\":1,\"571\":1,\"588\":1}}],[\"base64\",{\"1\":{\"92\":1}}],[\"baidu\",{\"1\":{\"40\":1,\"43\":1,\"324\":2,\"334\":1,\"351\":2,\"352\":2,\"353\":2,\"354\":2,\"355\":1,\"361\":1}}],[\"backend\",{\"1\":{\"406\":1,\"588\":2}}],[\"backspace键\",{\"1\":{\"345\":1}}],[\"background\",{\"1\":{\"34\":3,\"36\":1,\"334\":2}}],[\"backtotop\",{\"1\":{\"1\":1}}],[\"br>\",{\"1\":{\"250\":1}}],[\"br\",{\"1\":{\"192\":2,\"203\":2}}],[\"break跳出最深层的循环\",{\"1\":{\"334\":1}}],[\"break终止当前循环\",{\"1\":{\"304\":1}}],[\"break\",{\"0\":{\"304\":1},\"1\":{\"122\":2,\"126\":1,\"138\":1,\"192\":1,\"203\":1,\"294\":1,\"334\":1,\"368\":6,\"370\":9,\"371\":6}}],[\"breadcrumb\",{\"1\":{\"1\":1}}],[\"brand\",{\"1\":{\"63\":1}}],[\"browser\",{\"1\":{\"40\":1,\"67\":1}}],[\"b>\",{\"1\":{\"34\":1,\"334\":1}}],[\"black\",{\"1\":{\"334\":1}}],[\"blank\",{\"1\":{\"34\":1,\"345\":1}}],[\"blob\",{\"1\":{\"534\":1,\"628\":2}}],[\"blockattackinnerinterceptor\",{\"1\":{\"485\":1,\"652\":1}}],[\"block\",{\"1\":{\"328\":1}}],[\"blogs\",{\"0\":{\"689\":1},\"1\":{\"283\":1}}],[\"blog\",{\"1\":{\"53\":1,\"508\":10,\"517\":10}}],[\"bl\",{\"1\":{\"296\":2}}],[\"blue\",{\"1\":{\"21\":1,\"334\":1}}],[\"btree\",{\"1\":{\"651\":4}}],[\"btn\",{\"1\":{\"41\":2,\"253\":2}}],[\"btn9\",{\"1\":{\"24\":1}}],[\"btn8\",{\"1\":{\"24\":1}}],[\"btn7\",{\"1\":{\"24\":1}}],[\"btn6\",{\"1\":{\"24\":1}}],[\"btn5\",{\"1\":{\"24\":1}}],[\"btn4\",{\"1\":{\"24\":1}}],[\"btn3\",{\"1\":{\"24\":1}}],[\"btn2\",{\"1\":{\"24\":1,\"25\":5}}],[\"btn10\",{\"1\":{\"24\":1}}],[\"btn1\",{\"1\":{\"24\":1,\"25\":4}}],[\"btnfirst\",{\"1\":{\"23\":4}}],[\"bt6\",{\"1\":{\"23\":2}}],[\"bt5\",{\"1\":{\"23\":4}}],[\"bt4\",{\"1\":{\"23\":4}}],[\"bt3\",{\"1\":{\"23\":4}}],[\"bt2\",{\"1\":{\"23\":4}}],[\"borrow\",{\"1\":{\"677\":1}}],[\"border\",{\"1\":{\"35\":1,\"36\":2,\"253\":1}}],[\"border=\",{\"1\":{\"34\":1,\"334\":1}}],[\"borderlayout布局\",{\"1\":{\"23\":1}}],[\"borderlayout\",{\"1\":{\"23\":5}}],[\"body\",{\"1\":{\"517\":2,\"652\":4}}],[\"body>\",{\"1\":{\"34\":1,\"43\":3,\"253\":1,\"334\":1}}],[\"bouncycastle\",{\"1\":{\"387\":2}}],[\"bond\",{\"1\":{\"43\":1}}],[\"bom\",{\"1\":{\"40\":1}}],[\"box的缩写\",{\"1\":{\"255\":1}}],[\"box\",{\"1\":{\"36\":2}}],[\"both\",{\"1\":{\"24\":1,\"239\":1,\"574\":1}}],[\"boot版微头条实战\",{\"0\":{\"703\":1}}],[\"boot项目是无法找到应用程序的入口点\",{\"1\":{\"684\":1}}],[\"boot项目中添加spring\",{\"1\":{\"684\":1}}],[\"boot项目的构建文件\",{\"1\":{\"679\":1}}],[\"boot做开发\",{\"1\":{\"675\":1}}],[\"boot使用8080作为默认端口\",{\"1\":{\"674\":1}}],[\"boot的激活配置文件\",{\"1\":{\"686\":1}}],[\"boot的主应用类上添加\",{\"1\":{\"679\":1}}],[\"boot的配置文件中与web应用程序相关的一些重要配置参数\",{\"1\":{\"674\":1}}],[\"boot的web应用程序配置时\",{\"1\":{\"674\":1}}],[\"boot的自动配置机制\",{\"1\":{\"664\":1,\"665\":1}}],[\"boot会将静态资源放在classpath\",{\"1\":{\"674\":1}}],[\"boot会根据当前指定的环境来加载相应的配置文件或参数\",{\"1\":{\"671\":1}}],[\"boot会根据该属性来加载对应环境的属性文件\",{\"1\":{\"671\":1}}],[\"boot会加载相应的yaml文件\",{\"1\":{\"671\":1}}],[\"boot会自动处理依赖管理和配置\",{\"1\":{\"665\":1}}],[\"boot多环境配置的常见方法\",{\"1\":{\"671\":1}}],[\"boot中\",{\"1\":{\"671\":1}}],[\"boot默认的类路径\",{\"1\":{\"667\":1}}],[\"boot工程的src\",{\"1\":{\"667\":1}}],[\"boot框架中的核心注解\",{\"1\":{\"665\":1}}],[\"boot应用程序的上下文中\",{\"1\":{\"665\":1}}],[\"boot应用程序的配置和启动过程\",{\"1\":{\"665\":2}}],[\"boot应用程序的入口点\",{\"1\":{\"664\":1}}],[\"boot应用程序的入口类\",{\"1\":{\"664\":1}}],[\"boot应用程序变得容易\",{\"1\":{\"665\":1}}],[\"boot在启动时应如何配置和加载应用程序\",{\"1\":{\"664\":1}}],[\"boot提供的全部启动器地址\",{\"1\":{\"665\":1}}],[\"boot提供的自动配置依赖\",{\"1\":{\"664\":1}}],[\"boot提供了许多预定义的starter\",{\"1\":{\"665\":1}}],[\"boot提供了一种叫做starter的概念\",{\"1\":{\"665\":1}}],[\"boot提供了一个名为spring\",{\"1\":{\"664\":1}}],[\"boot帮我们完成各种自动配置\",{\"1\":{\"664\":1}}],[\"boot3实战\",{\"0\":{\"704\":1}}],[\"boot3\",{\"1\":{\"461\":1,\"652\":1,\"677\":1}}],[\"boot🫙2\",{\"1\":{\"387\":1}}],[\"boot<\",{\"1\":{\"100\":1,\"387\":2,\"461\":5,\"652\":6,\"664\":2,\"673\":2,\"677\":4,\"680\":4,\"681\":1,\"682\":1,\"684\":1}}],[\"boot\",{\"1\":{\"66\":1,\"78\":1,\"100\":1,\"387\":19,\"393\":1,\"461\":8,\"549\":1,\"652\":9,\"655\":2,\"662\":2,\"664\":9,\"665\":13,\"667\":1,\"668\":1,\"669\":1,\"670\":2,\"673\":2,\"674\":2,\"675\":4,\"677\":7,\"680\":5,\"681\":1,\"682\":1,\"684\":3}}],[\"boot0starter\",{\"1\":{\"66\":1}}],[\"boot简化了spring配置\",{\"1\":{\"60\":1}}],[\"boolean\",{\"1\":{\"5\":1,\"7\":1,\"11\":1,\"17\":2,\"38\":1,\"94\":1,\"95\":1,\"112\":1,\"124\":1,\"126\":1,\"138\":1,\"166\":4,\"169\":2,\"170\":3,\"171\":1,\"176\":2,\"177\":4,\"180\":1,\"229\":1,\"237\":1,\"367\":2,\"368\":1,\"370\":5,\"371\":2,\"471\":17,\"480\":1,\"508\":4,\"561\":1,\"573\":1,\"640\":5,\"655\":3,\"657\":1,\"675\":2,\"676\":1}}],[\"bookstore\",{\"1\":{\"398\":1,\"442\":1}}],[\"books\",{\"1\":{\"334\":1}}],[\"book\",{\"1\":{\"1\":1,\"23\":1,\"25\":1,\"28\":2}}],[\"n必备日用之外\",{\"1\":{\"651\":1}}],[\"n车队的张臻东斩获\",{\"1\":{\"651\":1}}],[\"n<\",{\"1\":{\"625\":1}}],[\"ns\",{\"1\":{\"345\":1}}],[\"nt\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"n高处不胜寒\",{\"1\":{\"334\":1}}],[\"n又恐琼楼玉宇\",{\"1\":{\"334\":1}}],[\"n世界\",{\"1\":{\"334\":1}}],[\"n换行\",{\"1\":{\"333\":1}}],[\"n字符串内数据\",{\"1\":{\"292\":1,\"318\":1}}],[\"n数据接收完毕\",{\"1\":{\"191\":1,\"202\":1}}],[\"nick\",{\"1\":{\"651\":4,\"656\":1}}],[\"nickname=\",{\"1\":{\"370\":1,\"371\":1}}],[\"nickname\",{\"1\":{\"370\":5,\"371\":5,\"480\":1,\"653\":1,\"655\":4}}],[\"nio🫙4\",{\"1\":{\"387\":1}}],[\"ni\",{\"1\":{\"124\":3,\"334\":1}}],[\"nihao\",{\"1\":{\"108\":1,\"114\":1,\"185\":1}}],[\"n>2\",{\"1\":{\"121\":1}}],[\"n\",{\"1\":{\"117\":1,\"120\":2,\"121\":3,\"124\":2,\"167\":4,\"188\":1,\"296\":1,\"317\":4,\"325\":2,\"334\":8,\"338\":1,\"345\":3,\"347\":3,\"367\":3,\"370\":4,\"376\":1,\"651\":59}}],[\"n=none\",{\"1\":{\"334\":1}}],[\"n=\",{\"1\":{\"124\":1}}],[\"n=3\",{\"1\":{\"121\":1}}],[\"n=++num2\",{\"1\":{\"117\":1}}],[\"n=m^n\",{\"1\":{\"116\":1}}],[\"n=5\",{\"1\":{\"116\":1}}],[\"nginx\",{\"0\":{\"283\":1},\"1\":{\"53\":2,\"283\":1}}],[\"nginx配置\",{\"1\":{\"53\":1}}],[\"npm用于项目依赖管理工具\",{\"1\":{\"647\":1}}],[\"npm依赖下载命令\",{\"1\":{\"636\":1}}],[\"npmjs\",{\"1\":{\"636\":1}}],[\"npm全称node\",{\"1\":{\"636\":1}}],[\"npm使用\",{\"1\":{\"636\":1}}],[\"npm\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"252\":2,\"269\":1,\"636\":8,\"638\":2,\"649\":4}}],[\"nosuchalgorithmexception\",{\"1\":{\"652\":2}}],[\"no+\",{\"1\":{\"370\":1,\"371\":1}}],[\"no=\",{\"1\":{\"370\":1,\"371\":1}}],[\"no\",{\"1\":{\"370\":13,\"371\":12,\"496\":1,\"571\":1}}],[\"nonlocal\",{\"1\":{\"294\":1,\"334\":1}}],[\"none\",{\"1\":{\"294\":1,\"320\":1,\"334\":1,\"480\":1,\"521\":2}}],[\"nobackup\",{\"1\":{\"286\":1}}],[\"nogpgcheck\",{\"1\":{\"277\":1}}],[\"noarch\",{\"1\":{\"277\":1}}],[\"noargsconstructor\",{\"1\":{\"79\":1,\"640\":1}}],[\"nohup\",{\"1\":{\"273\":2}}],[\"nowrap\",{\"1\":{\"259\":1}}],[\"now\",{\"1\":{\"239\":1,\"574\":1,\"656\":2}}],[\"nouniquebeandefinitionexception\",{\"1\":{\"226\":1,\"559\":1,\"598\":2}}],[\"norollbackfor属性\",{\"1\":{\"610\":1}}],[\"norollbackfor\",{\"1\":{\"247\":4,\"248\":2,\"610\":4,\"611\":2,\"612\":2}}],[\"norm\",{\"1\":{\"196\":1,\"207\":1}}],[\"north\",{\"1\":{\"23\":1}}],[\"node16\",{\"1\":{\"636\":1}}],[\"node安装和测试\",{\"1\":{\"636\":1}}],[\"node安装\",{\"1\":{\"636\":1}}],[\"node\",{\"1\":{\"49\":1,\"252\":1,\"636\":4}}],[\"nodejs用于运行环境\",{\"1\":{\"647\":1}}],[\"nodejs\",{\"1\":{\"48\":1,\"636\":2}}],[\"notice\",{\"1\":{\"393\":1}}],[\"notebook\",{\"1\":{\"337\":1}}],[\"notlogin\",{\"1\":{\"93\":4,\"95\":4,\"652\":2,\"655\":3,\"657\":2}}],[\"not\",{\"1\":{\"38\":1,\"93\":1,\"95\":1,\"98\":1,\"249\":1,\"292\":1,\"294\":1,\"334\":3,\"461\":1,\"476\":1,\"481\":2,\"514\":3,\"517\":2,\"529\":1,\"562\":2,\"568\":2,\"575\":2,\"608\":1,\"612\":1,\"621\":1,\"640\":3,\"651\":12,\"687\":1}}],[\"nu\",{\"1\":{\"286\":1}}],[\"num=float\",{\"1\":{\"334\":1}}],[\"num=10\",{\"1\":{\"149\":1}}],[\"num=num1++\",{\"1\":{\"117\":1}}],[\"num2\",{\"1\":{\"117\":1}}],[\"num2=10\",{\"1\":{\"117\":1}}],[\"num1\",{\"1\":{\"117\":1}}],[\"num1=10\",{\"1\":{\"117\":1}}],[\"num++\",{\"1\":{\"112\":1}}],[\"num\",{\"1\":{\"112\":2,\"117\":1,\"124\":2,\"145\":4,\"146\":2,\"149\":4,\"150\":3,\"154\":2,\"160\":4,\"334\":2}}],[\"number\",{\"1\":{\"38\":3,\"109\":2,\"264\":1,\"480\":1}}],[\"nullable\",{\"1\":{\"621\":1}}],[\"null和undefined\",{\"1\":{\"38\":1}}],[\"null的数据类型是object\",{\"1\":{\"38\":1}}],[\"nulllayoutfrm\",{\"1\":{\"23\":1,\"25\":3}}],[\"null\",{\"1\":{\"21\":2,\"22\":2,\"23\":4,\"24\":1,\"25\":2,\"26\":4,\"27\":2,\"28\":6,\"29\":2,\"38\":1,\"40\":1,\"170\":1,\"176\":2,\"177\":4,\"184\":1,\"185\":4,\"186\":4,\"187\":4,\"191\":10,\"202\":10,\"216\":1,\"229\":1,\"370\":7,\"371\":24,\"461\":8,\"464\":2,\"465\":2,\"466\":2,\"472\":1,\"476\":3,\"477\":3,\"479\":3,\"481\":1,\"485\":1,\"514\":3,\"517\":2,\"525\":1,\"526\":1,\"527\":1,\"528\":1,\"561\":1,\"562\":2,\"568\":2,\"575\":2,\"583\":1,\"592\":1,\"621\":1,\"628\":1,\"634\":3,\"640\":3,\"641\":3,\"651\":16,\"652\":1,\"655\":14,\"656\":2,\"657\":6}}],[\"ne\",{\"1\":{\"474\":1}}],[\"netflix\",{\"1\":{\"387\":18}}],[\"net\",{\"1\":{\"334\":1,\"425\":6}}],[\"neofetch\",{\"1\":{\"271\":1,\"288\":1}}],[\"nested\",{\"1\":{\"249\":1,\"612\":1}}],[\"never\",{\"1\":{\"98\":1,\"249\":1,\"612\":1}}],[\"nex\",{\"1\":{\"109\":1}}],[\"nexus上的各种仓库\",{\"0\":{\"424\":1}}],[\"nexus3\",{\"1\":{\"423\":1}}],[\"nexus下载安装\",{\"0\":{\"422\":1}}],[\"nexus\",{\"0\":{\"425\":1,\"426\":1},\"1\":{\"56\":1,\"395\":1,\"421\":1,\"422\":2,\"423\":1,\"424\":6,\"425\":10,\"426\":4,\"440\":1}}],[\"next=reversehead\",{\"1\":{\"371\":1}}],[\"next=temp\",{\"1\":{\"370\":1}}],[\"next=新的节点\",{\"1\":{\"370\":1}}],[\"next=\",{\"1\":{\"370\":1,\"371\":1}}],[\"next域\",{\"1\":{\"370\":1}}],[\"nextline\",{\"1\":{\"192\":2,\"203\":2}}],[\"nextline读取到换行符\",{\"1\":{\"109\":1}}],[\"nextdoule读取浮点数\",{\"1\":{\"109\":1}}],[\"next读取直到空格\",{\"1\":{\"109\":1}}],[\"nextint读取整数\",{\"1\":{\"109\":1}}],[\"nextint\",{\"1\":{\"26\":2,\"109\":1,\"154\":1,\"160\":3,\"368\":1}}],[\"next\",{\"1\":{\"1\":1,\"7\":1,\"11\":2,\"170\":5,\"176\":2,\"177\":1,\"197\":2,\"368\":1,\"370\":28,\"371\":67}}],[\"news\",{\"1\":{\"651\":7,\"652\":1,\"656\":4}}],[\"newstr\",{\"1\":{\"317\":2}}],[\"newproxyinstance\",{\"1\":{\"583\":2}}],[\"new<\",{\"1\":{\"425\":1}}],[\"newhead\",{\"1\":{\"371\":9}}],[\"newheight\",{\"1\":{\"22\":2}}],[\"newfile\",{\"1\":{\"188\":6}}],[\"newname\",{\"1\":{\"182\":1}}],[\"newval\",{\"1\":{\"180\":1}}],[\"new代表创建对象的动作\",{\"1\":{\"151\":1}}],[\"new出来的对象在堆内存中\",{\"1\":{\"150\":1}}],[\"new出来的东西\",{\"1\":{\"125\":1}}],[\"newwidth\",{\"1\":{\"22\":2}}],[\"new\",{\"1\":{\"16\":2,\"17\":4,\"21\":1,\"22\":4,\"23\":22,\"24\":13,\"25\":4,\"26\":6,\"27\":2,\"28\":22,\"29\":4,\"40\":1,\"42\":1,\"43\":3,\"44\":1,\"45\":1,\"90\":1,\"92\":2,\"98\":3,\"109\":1,\"124\":5,\"126\":2,\"130\":4,\"135\":2,\"138\":1,\"145\":4,\"146\":3,\"147\":4,\"149\":6,\"150\":2,\"151\":5,\"154\":1,\"155\":3,\"160\":2,\"162\":2,\"163\":4,\"165\":1,\"166\":2,\"169\":4,\"170\":14,\"175\":1,\"176\":23,\"177\":2,\"178\":11,\"180\":1,\"181\":1,\"182\":1,\"183\":5,\"184\":1,\"185\":11,\"186\":9,\"187\":13,\"188\":25,\"191\":9,\"192\":12,\"194\":1,\"197\":2,\"202\":9,\"203\":12,\"205\":1,\"216\":1,\"220\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":2,\"229\":1,\"236\":1,\"237\":3,\"238\":6,\"239\":3,\"244\":3,\"247\":3,\"248\":1,\"249\":2,\"253\":1,\"311\":1,\"366\":3,\"367\":3,\"368\":2,\"370\":9,\"371\":5,\"460\":2,\"462\":1,\"467\":1,\"468\":1,\"472\":4,\"474\":1,\"476\":7,\"477\":3,\"478\":6,\"479\":2,\"484\":2,\"485\":3,\"493\":1,\"505\":2,\"512\":1,\"514\":2,\"518\":1,\"535\":1,\"555\":2,\"557\":2,\"559\":2,\"560\":1,\"561\":2,\"562\":7,\"568\":2,\"571\":3,\"572\":1,\"573\":10,\"574\":3,\"575\":4,\"583\":3,\"606\":2,\"607\":3,\"609\":1,\"610\":3,\"611\":1,\"612\":4,\"621\":1,\"623\":3,\"627\":1,\"628\":15,\"629\":3,\"640\":2,\"641\":2,\"652\":8,\"655\":7,\"656\":3,\"657\":4,\"673\":1,\"675\":3,\"677\":1,\"681\":1}}],[\"nacos\",{\"1\":{\"387\":10}}],[\"native\",{\"1\":{\"277\":3}}],[\"nation=\",{\"1\":{\"130\":1}}],[\"nation\",{\"1\":{\"130\":4}}],[\"navigator\",{\"1\":{\"40\":2}}],[\"navbar\",{\"1\":{\"1\":1}}],[\"nan\",{\"1\":{\"38\":2}}],[\"nashorm引擎\",{\"1\":{\"16\":1}}],[\"named\",{\"1\":{\"566\":1}}],[\"name`\",{\"1\":{\"517\":6,\"651\":1}}],[\"name属性代表set方法标识\",{\"1\":{\"225\":1,\"558\":1}}],[\"name属性指定参数名\",{\"1\":{\"224\":1,\"558\":1}}],[\"names🫙2\",{\"1\":{\"387\":1}}],[\"names=\",{\"1\":{\"334\":1}}],[\"namespace\",{\"1\":{\"467\":1,\"680\":1}}],[\"namespace等于mapper接口类的全限定名\",{\"1\":{\"220\":1,\"493\":1,\"514\":1,\"630\":1,\"641\":1}}],[\"namespace=\",{\"1\":{\"82\":1,\"220\":1,\"467\":1,\"493\":1,\"514\":1,\"630\":1,\"641\":1,\"680\":1}}],[\"names\",{\"1\":{\"124\":2,\"334\":1,\"478\":3,\"651\":1}}],[\"name+\",{\"1\":{\"68\":2,\"127\":1}}],[\"name>\",{\"1\":{\"56\":1,\"395\":1,\"425\":1,\"426\":1,\"427\":1,\"440\":1}}],[\"name=moviecatalog\",{\"1\":{\"567\":1}}],[\"name=catname\",{\"1\":{\"334\":2}}],[\"name=com\",{\"1\":{\"76\":1}}],[\"name=input\",{\"1\":{\"334\":1}}],[\"name=a\",{\"1\":{\"318\":2}}],[\"name=红米\",{\"1\":{\"187\":1}}],[\"name=小米\",{\"1\":{\"187\":1}}],[\"name=name\",{\"1\":{\"127\":2,\"334\":2}}],[\"name=tom\",{\"1\":{\"68\":1}}],[\"name=oppo\",{\"1\":{\"63\":1}}],[\"name=\",{\"1\":{\"34\":7,\"68\":1,\"81\":1,\"130\":1,\"176\":2,\"187\":2,\"188\":1,\"220\":4,\"224\":3,\"225\":2,\"231\":2,\"233\":1,\"236\":4,\"253\":1,\"318\":2,\"325\":2,\"329\":1,\"334\":1,\"370\":1,\"371\":1,\"493\":4,\"496\":1,\"508\":1,\"509\":1,\"513\":1,\"514\":7,\"521\":1,\"525\":2,\"526\":3,\"527\":1,\"528\":2,\"529\":1,\"532\":1,\"535\":1,\"558\":5,\"560\":2,\"561\":1,\"562\":14,\"566\":1,\"568\":6,\"572\":4,\"575\":1,\"625\":2,\"628\":10}}],[\"name\",{\"1\":{\"1\":6,\"40\":1,\"53\":1,\"68\":7,\"81\":8,\"82\":2,\"84\":3,\"92\":1,\"127\":3,\"130\":6,\"135\":6,\"174\":4,\"176\":26,\"187\":10,\"188\":11,\"196\":2,\"207\":2,\"213\":2,\"220\":1,\"224\":2,\"225\":2,\"231\":3,\"235\":1,\"237\":2,\"240\":1,\"276\":2,\"283\":1,\"298\":3,\"315\":2,\"325\":1,\"327\":3,\"329\":3,\"334\":17,\"354\":2,\"370\":5,\"371\":5,\"461\":5,\"474\":2,\"476\":9,\"478\":9,\"480\":3,\"481\":3,\"485\":1,\"493\":5,\"502\":1,\"503\":1,\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":4,\"517\":4,\"518\":4,\"519\":4,\"521\":2,\"525\":1,\"527\":1,\"528\":1,\"530\":1,\"555\":1,\"558\":8,\"562\":14,\"566\":1,\"567\":5,\"568\":9,\"573\":2,\"575\":9,\"577\":1,\"606\":3,\"621\":1,\"625\":4,\"630\":1,\"641\":2,\"651\":4,\"652\":1,\"656\":1,\"669\":1,\"677\":1,\"680\":1}}],[\"pwd\",{\"1\":{\"651\":4}}],[\"pwd`\",{\"1\":{\"651\":1}}],[\"pt\",{\"1\":{\"517\":3}}],[\"pth文件\",{\"1\":{\"331\":1}}],[\"plus插件\",{\"1\":{\"652\":1}}],[\"plus配置\",{\"1\":{\"652\":1}}],[\"plus用于实现数据的curd\",{\"1\":{\"647\":1}}],[\"plus并不能为我们解决所有问题\",{\"1\":{\"486\":1}}],[\"plus为我们提供了强大的mapper和service模板\",{\"1\":{\"486\":1}}],[\"plus下\",{\"1\":{\"481\":2}}],[\"plus会自动开启驼峰命名风格映射\",{\"1\":{\"480\":1}}],[\"plus操作表的默认前缀\",{\"1\":{\"480\":1}}],[\"plus提供组件\",{\"1\":{\"647\":1}}],[\"plus提供的注解即可\",{\"1\":{\"480\":1}}],[\"plus提供的基础mapper接口\",{\"1\":{\"461\":1}}],[\"plus提供了一种基于注解的方式来定义和映射数据库操作\",{\"1\":{\"480\":1}}],[\"plus是一个基于mybatis框架的增强工具\",{\"1\":{\"480\":1}}],[\"plus的主键策略\",{\"1\":{\"480\":1}}],[\"plus的条件构造器\",{\"1\":{\"474\":1}}],[\"plus的配置\",{\"1\":{\"467\":1,\"480\":1,\"652\":1}}],[\"plus的默认mapperxml位置\",{\"1\":{\"467\":1}}],[\"plus非常的简单\",{\"1\":{\"461\":1}}],[\"plus总结\",{\"1\":{\"460\":1}}],[\"plus\",{\"1\":{\"460\":1,\"461\":3,\"462\":1,\"467\":1,\"480\":2,\"481\":1,\"537\":1,\"652\":3}}],[\"plus代码生成器\",{\"1\":{\"459\":1}}],[\"plus数据使用乐观锁\",{\"0\":{\"484\":1},\"1\":{\"459\":1}}],[\"plus高级扩展\",{\"1\":{\"459\":1}}],[\"plus高级用法\",{\"0\":{\"458\":1,\"699\":1}}],[\"plus核心功能\",{\"1\":{\"459\":1}}],[\"plus快速入门\",{\"1\":{\"459\":1}}],[\"plugin插件配置\",{\"1\":{\"684\":1}}],[\"plugin插件是为了支持将项目打包成可执行的可运行jar包\",{\"1\":{\"684\":1}}],[\"plugin标签引入插件\",{\"1\":{\"413\":1}}],[\"plugin\",{\"1\":{\"406\":6}}],[\"plugin>\",{\"1\":{\"404\":1,\"413\":2,\"431\":1,\"450\":1,\"456\":1,\"461\":1,\"535\":1,\"628\":2,\"652\":1,\"677\":1,\"684\":1}}],[\"plugin<\",{\"1\":{\"404\":1,\"413\":2,\"431\":1,\"450\":1,\"456\":1,\"461\":1,\"652\":1,\"677\":1,\"684\":1}}],[\"plugins>\",{\"1\":{\"404\":1,\"413\":1,\"431\":1,\"450\":1,\"456\":1,\"461\":1,\"535\":1,\"628\":2,\"652\":1,\"677\":1,\"684\":1}}],[\"plugins<\",{\"1\":{\"404\":1,\"413\":1,\"431\":1,\"450\":1,\"456\":1}}],[\"plugins\",{\"1\":{\"400\":1,\"413\":1,\"444\":1,\"496\":1,\"588\":2}}],[\"platform<\",{\"1\":{\"625\":1}}],[\"platform\",{\"1\":{\"588\":12}}],[\"platformtransactionmanager\",{\"1\":{\"243\":1,\"602\":1}}],[\"plain\",{\"1\":{\"491\":1}}],[\"placeholder引入外部配置文件使用\",{\"1\":{\"242\":1,\"579\":1}}],[\"placeholder标签\",{\"1\":{\"235\":3,\"571\":2}}],[\"placeholder\",{\"1\":{\"231\":1,\"235\":1,\"236\":1,\"240\":1,\"562\":2,\"567\":1,\"568\":1,\"571\":1,\"572\":1,\"577\":1}}],[\"p有默认值\",{\"1\":{\"398\":1,\"442\":1}}],[\"px\",{\"1\":{\"334\":1}}],[\"px可以换成\",{\"1\":{\"34\":1}}],[\"py\",{\"1\":{\"334\":1}}],[\"python的关键字\",{\"1\":{\"334\":1}}],[\"python的内置函数\",{\"0\":{\"333\":1}}],[\"python都会自动执行它\",{\"1\":{\"327\":1}}],[\"python3中\",{\"1\":{\"317\":1}}],[\"python自带的垃圾回收机制会自动销毁不用的列表\",{\"1\":{\"307\":1}}],[\"python中使用正则表达式\",{\"0\":{\"319\":1}}],[\"python中的包\",{\"0\":{\"332\":1}}],[\"python中的set集合是无序的\",{\"1\":{\"316\":1}}],[\"python中的集合用于保存不重复的元素\",{\"1\":{\"316\":1}}],[\"python中的字典相当于java中的map对象\",{\"1\":{\"314\":1}}],[\"python中的逻辑运算符主要包括and\",{\"1\":{\"292\":1}}],[\"python中n乘以一个序列\",{\"1\":{\"305\":1}}],[\"python中\",{\"1\":{\"292\":1}}],[\"python中跟\",{\"1\":{\"120\":1}}],[\"python从入门到精通\",{\"1\":{\"291\":1}}],[\"python\",{\"0\":{\"291\":1},\"2\":{\"336\":1}}],[\"pinia用于存储用户的数据\",{\"1\":{\"647\":1}}],[\"pip\",{\"1\":{\"334\":1}}],[\"pid=imgdetmain\",{\"1\":{\"334\":1}}],[\"pi\",{\"1\":{\"326\":1}}],[\"piece\",{\"1\":{\"269\":1}}],[\"p使用密码登录\",{\"1\":{\"277\":1}}],[\"pscache对支持游标的数据库性能提升巨大\",{\"1\":{\"677\":1}}],[\"ps\",{\"1\":{\"187\":2,\"192\":4,\"203\":4,\"515\":2}}],[\"p2\",{\"1\":{\"187\":4}}],[\"p1\",{\"1\":{\"187\":4}}],[\"p\",{\"1\":{\"174\":5,\"277\":1,\"334\":2,\"412\":1,\"517\":12}}],[\"petstore\",{\"1\":{\"555\":1}}],[\"petstoreservice\",{\"1\":{\"555\":2}}],[\"per\",{\"1\":{\"677\":1}}],[\"permitall\",{\"1\":{\"566\":1}}],[\"permanent添加端口\",{\"1\":{\"276\":1}}],[\"permanent\",{\"1\":{\"276\":2}}],[\"persistence\",{\"1\":{\"387\":2}}],[\"person\",{\"1\":{\"174\":3,\"178\":4,\"187\":18,\"515\":2}}],[\"people\",{\"1\":{\"135\":8}}],[\"phoenix\",{\"1\":{\"460\":1}}],[\"phone=\",{\"1\":{\"81\":1}}],[\"phone\",{\"1\":{\"81\":3}}],[\"php\",{\"1\":{\"283\":2}}],[\"phyw\",{\"1\":{\"92\":1}}],[\"phase\",{\"1\":{\"59\":1}}],[\"powerpoint\",{\"1\":{\"651\":1}}],[\"poweroff\",{\"1\":{\"147\":2}}],[\"poweron\",{\"1\":{\"147\":2}}],[\"pom声明\",{\"1\":{\"416\":1,\"448\":1}}],[\"pom不会讲项目打包\",{\"1\":{\"409\":1,\"447\":1}}],[\"pom\",{\"1\":{\"398\":1,\"400\":1,\"401\":2,\"404\":1,\"408\":1,\"409\":2,\"410\":1,\"411\":2,\"412\":2,\"418\":1,\"425\":8,\"431\":3,\"432\":3,\"433\":3,\"434\":3,\"442\":1,\"444\":1,\"445\":2,\"447\":2,\"449\":2,\"452\":1,\"456\":12,\"461\":2,\"493\":1,\"535\":1,\"557\":1,\"582\":1,\"625\":4,\"664\":1,\"673\":2,\"677\":2}}],[\"pom配置\",{\"1\":{\"79\":1}}],[\"poem\",{\"1\":{\"334\":2}}],[\"pop\",{\"1\":{\"316\":1,\"371\":1}}],[\"poolpreparedstatements自动触发修改为true\",{\"1\":{\"677\":1}}],[\"pool\",{\"1\":{\"236\":1,\"461\":1,\"562\":2,\"568\":1,\"572\":1,\"652\":1,\"677\":3,\"680\":1}}],[\"pooled\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"pojo\",{\"1\":{\"220\":1,\"491\":1,\"492\":1,\"493\":2,\"514\":2,\"539\":3,\"625\":1,\"628\":3,\"640\":2,\"652\":1,\"673\":2,\"680\":2}}],[\"port来更改端口号\",{\"1\":{\"674\":1}}],[\"portalvo\",{\"1\":{\"656\":23}}],[\"portalcontroller\",{\"1\":{\"656\":1}}],[\"portal\",{\"1\":{\"656\":4}}],[\"port>\",{\"1\":{\"413\":1}}],[\"port=8080\",{\"1\":{\"686\":1}}],[\"port=80\",{\"1\":{\"276\":1,\"668\":1}}],[\"ports\",{\"1\":{\"276\":1}}],[\"port\",{\"1\":{\"191\":4,\"192\":2,\"202\":4,\"203\":2,\"276\":2,\"652\":1,\"669\":2,\"674\":2,\"675\":1,\"680\":1}}],[\"polarbear\",{\"1\":{\"188\":2}}],[\"pointcut\",{\"1\":{\"101\":1,\"211\":1,\"215\":1,\"219\":7,\"584\":1,\"590\":1,\"591\":5,\"596\":7}}],[\"posts\",{\"1\":{\"517\":1}}],[\"postgresql\",{\"1\":{\"460\":1,\"515\":1,\"628\":2}}],[\"postgre\",{\"1\":{\"460\":1}}],[\"post的请求的参数\",{\"1\":{\"355\":1}}],[\"postconstruct\",{\"1\":{\"232\":1,\"237\":1,\"565\":2,\"566\":1}}],[\"postconstruct在销毁方法之前添加注解\",{\"1\":{\"232\":1}}],[\"posthandle\",{\"1\":{\"94\":2,\"676\":1}}],[\"postmapping\",{\"1\":{\"68\":1,\"641\":1,\"655\":3,\"656\":2,\"657\":4}}],[\"postman是一款功能强大的网页调试与发送网页http请求的chrome插件\",{\"1\":{\"68\":1}}],[\"postman\",{\"1\":{\"68\":1}}],[\"post请求的参数必须进行编码\",{\"1\":{\"361\":1}}],[\"post请求的参数必须要进行编码\",{\"1\":{\"355\":1}}],[\"post请求的参数\",{\"1\":{\"355\":1}}],[\"post请求方式的参数\",{\"1\":{\"354\":1}}],[\"post请求方式\",{\"1\":{\"354\":1}}],[\"post请求\",{\"0\":{\"254\":1}}],[\"post请求参数写在请求体里面即可\",{\"1\":{\"68\":1}}],[\"post请求大小没有限制\",{\"1\":{\"63\":1}}],[\"post\",{\"1\":{\"34\":3,\"45\":1,\"517\":16,\"634\":1,\"655\":6,\"656\":2,\"657\":4}}],[\"publish\",{\"1\":{\"657\":5}}],[\"publisher\",{\"1\":{\"651\":18,\"656\":8}}],[\"public存放项目的静态文件\",{\"1\":{\"49\":1}}],[\"public\",{\"1\":{\"11\":3,\"12\":3,\"16\":4,\"17\":10,\"22\":1,\"23\":12,\"24\":3,\"25\":3,\"26\":7,\"27\":8,\"28\":18,\"29\":4,\"56\":1,\"61\":2,\"68\":9,\"76\":2,\"80\":2,\"81\":4,\"82\":1,\"85\":1,\"90\":2,\"91\":2,\"92\":2,\"93\":4,\"94\":6,\"95\":1,\"96\":2,\"100\":2,\"108\":2,\"109\":2,\"127\":6,\"130\":14,\"135\":8,\"136\":1,\"138\":5,\"139\":3,\"140\":1,\"141\":1,\"143\":1,\"144\":4,\"145\":13,\"146\":13,\"147\":13,\"149\":5,\"150\":7,\"151\":11,\"154\":2,\"155\":9,\"160\":2,\"162\":2,\"163\":2,\"164\":2,\"165\":2,\"170\":2,\"174\":1,\"175\":1,\"176\":35,\"177\":2,\"178\":1,\"185\":2,\"186\":3,\"187\":8,\"188\":8,\"189\":1,\"191\":2,\"192\":13,\"194\":3,\"195\":1,\"196\":4,\"197\":5,\"200\":1,\"202\":2,\"203\":13,\"205\":3,\"206\":1,\"207\":4,\"212\":4,\"213\":4,\"214\":1,\"215\":4,\"216\":1,\"220\":4,\"222\":2,\"223\":2,\"229\":3,\"232\":3,\"233\":2,\"235\":2,\"236\":2,\"237\":10,\"238\":9,\"239\":5,\"242\":2,\"244\":4,\"247\":5,\"248\":2,\"366\":2,\"367\":8,\"368\":1,\"370\":22,\"371\":19,\"395\":1,\"424\":1,\"425\":10,\"440\":1,\"461\":6,\"467\":2,\"470\":2,\"472\":3,\"476\":6,\"477\":2,\"478\":6,\"479\":1,\"480\":4,\"481\":4,\"484\":2,\"485\":2,\"493\":6,\"505\":3,\"508\":2,\"510\":1,\"511\":1,\"512\":1,\"514\":12,\"517\":6,\"518\":5,\"519\":2,\"535\":1,\"539\":1,\"557\":6,\"558\":10,\"560\":6,\"561\":6,\"562\":30,\"564\":10,\"565\":8,\"566\":20,\"567\":3,\"568\":22,\"571\":1,\"572\":2,\"573\":30,\"574\":5,\"575\":25,\"580\":2,\"582\":11,\"583\":8,\"588\":18,\"589\":6,\"590\":2,\"591\":18,\"592\":1,\"594\":3,\"596\":2,\"606\":10,\"607\":8,\"608\":3,\"609\":2,\"610\":5,\"611\":2,\"612\":10,\"623\":1,\"625\":1,\"626\":2,\"627\":2,\"628\":16,\"629\":1,\"630\":6,\"640\":11,\"641\":12,\"652\":21,\"653\":1,\"655\":16,\"656\":9,\"657\":12,\"664\":4,\"665\":1,\"668\":11,\"669\":11,\"670\":12,\"673\":13,\"675\":4,\"676\":6,\"677\":4,\"680\":16,\"681\":1,\"682\":2}}],[\"putmapping\",{\"1\":{\"641\":1}}],[\"putall\",{\"1\":{\"177\":1}}],[\"put\",{\"1\":{\"45\":1,\"92\":2,\"177\":10,\"178\":8,\"505\":2,\"634\":1,\"655\":2,\"656\":7,\"657\":1}}],[\"push\",{\"1\":{\"40\":1,\"371\":1}}],[\"p><\",{\"1\":{\"34\":1}}],[\"p>\",{\"1\":{\"34\":6,\"334\":3}}],[\"png图标\",{\"1\":{\"23\":1}}],[\"png\",{\"1\":{\"22\":1,\"23\":1,\"25\":1,\"28\":2}}],[\"pasthours\",{\"1\":{\"656\":8}}],[\"pass表示空语句\",{\"1\":{\"304\":1}}],[\"passwd\",{\"1\":{\"272\":1}}],[\"password123\",{\"1\":{\"669\":1}}],[\"passworderror\",{\"1\":{\"652\":1}}],[\"password=root\",{\"1\":{\"562\":1,\"606\":1,\"628\":1,\"668\":1}}],[\"password=\",{\"1\":{\"514\":1,\"668\":1,\"669\":1,\"670\":1,\"680\":1}}],[\"password=kdyq1108\",{\"1\":{\"76\":1}}],[\"password>\",{\"1\":{\"425\":1}}],[\"password\",{\"1\":{\"8\":1,\"12\":2,\"34\":1,\"220\":1,\"231\":2,\"236\":5,\"244\":4,\"277\":4,\"423\":1,\"461\":1,\"493\":1,\"512\":2,\"514\":8,\"517\":4,\"562\":4,\"568\":2,\"572\":5,\"575\":3,\"606\":3,\"607\":4,\"628\":6,\"652\":2,\"655\":1,\"668\":7,\"669\":9,\"670\":6,\"671\":3,\"673\":5,\"677\":1,\"680\":7}}],[\"pass\",{\"0\":{\"304\":1},\"1\":{\"29\":5,\"294\":1,\"334\":2}}],[\"paginationinnerinterceptor\",{\"1\":{\"472\":1,\"652\":1}}],[\"pageviews\",{\"1\":{\"656\":8}}],[\"pagedata\",{\"1\":{\"656\":2}}],[\"pagebean封装\",{\"1\":{\"641\":1}}],[\"pagebean<>\",{\"1\":{\"641\":1}}],[\"pagebean<schedule>\",{\"1\":{\"641\":3}}],[\"pagebean<t>\",{\"1\":{\"640\":1}}],[\"pagebean\",{\"1\":{\"640\":1,\"641\":5}}],[\"pageautodialect\",{\"1\":{\"628\":2}}],[\"pagenum\",{\"1\":{\"535\":3,\"656\":4}}],[\"pageinterceptor\",{\"1\":{\"535\":2,\"628\":7}}],[\"pageinfomap\",{\"1\":{\"656\":4,\"657\":2}}],[\"pageinfomap=new\",{\"1\":{\"656\":2,\"657\":1}}],[\"pageinfo<schedule>\",{\"1\":{\"641\":1}}],[\"pageinfo<>\",{\"1\":{\"535\":1,\"641\":1}}],[\"pageinfo<teacher>\",{\"1\":{\"535\":1}}],[\"pageinfo\",{\"1\":{\"1\":1,\"535\":8,\"641\":5,\"656\":9}}],[\"pagehelper<\",{\"1\":{\"535\":1,\"625\":1}}],[\"pagehelper\",{\"1\":{\"534\":4,\"535\":5,\"625\":4,\"628\":6,\"641\":1}}],[\"pagehelper插件使用\",{\"0\":{\"535\":1},\"1\":{\"489\":1}}],[\"pagesize\",{\"1\":{\"535\":3,\"634\":2,\"640\":1,\"641\":7,\"656\":4}}],[\"pages\",{\"1\":{\"472\":3,\"480\":1,\"487\":1,\"535\":3}}],[\"page<>\",{\"1\":{\"472\":1,\"656\":1}}],[\"page<user>\",{\"1\":{\"472\":1}}],[\"page\",{\"1\":{\"352\":2,\"466\":3,\"472\":11,\"651\":18,\"656\":10}}],[\"pause\",{\"1\":{\"412\":3}}],[\"packaging>\",{\"1\":{\"400\":1,\"409\":1,\"418\":1,\"419\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"444\":1,\"447\":1,\"452\":1,\"453\":1,\"456\":4,\"625\":1}}],[\"packaging定义规则\",{\"1\":{\"398\":1,\"442\":1}}],[\"packaging\",{\"1\":{\"398\":5,\"442\":5}}],[\"package即可\",{\"1\":{\"406\":1}}],[\"package=\",{\"1\":{\"231\":3,\"564\":3,\"568\":1,\"571\":1,\"588\":1}}],[\"package指令范围内\",{\"1\":{\"59\":1}}],[\"package\",{\"1\":{\"11\":1,\"12\":1,\"49\":1,\"59\":1,\"138\":1,\"188\":1,\"197\":1,\"238\":1,\"248\":1,\"404\":2,\"405\":1,\"406\":1,\"439\":1,\"450\":4,\"493\":1,\"514\":1,\"539\":1,\"557\":1,\"567\":1,\"573\":1,\"582\":2,\"588\":2,\"611\":1,\"628\":1,\"636\":1,\"652\":1,\"655\":1,\"664\":2,\"668\":1,\"669\":1,\"670\":1,\"673\":2,\"675\":1,\"676\":2,\"680\":2}}],[\"pay\",{\"1\":{\"334\":5}}],[\"payload\",{\"1\":{\"92\":2,\"655\":1}}],[\"parent的父项目是spring\",{\"1\":{\"665\":1}}],[\"parent的工程\",{\"1\":{\"664\":1}}],[\"parent\",{\"1\":{\"425\":4,\"621\":3,\"664\":1,\"665\":1}}],[\"parent>\",{\"1\":{\"418\":1,\"432\":1,\"433\":1,\"434\":1,\"452\":1,\"456\":3,\"461\":1,\"652\":1,\"664\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"parent<\",{\"1\":{\"418\":2,\"444\":1,\"452\":2,\"461\":1,\"652\":1,\"664\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"part04\",{\"1\":{\"625\":1}}],[\"part01\",{\"1\":{\"588\":2}}],[\"part03\",{\"1\":{\"406\":1}}],[\"partial\",{\"1\":{\"521\":3}}],[\"parttimeemployee\",{\"1\":{\"334\":2}}],[\"parallel\",{\"1\":{\"192\":1,\"203\":1}}],[\"param形成参数\",{\"1\":{\"656\":1,\"657\":2}}],[\"param形式\",{\"1\":{\"655\":2}}],[\"param注解指定的名称来引用传入的参数\",{\"1\":{\"529\":1}}],[\"param注解指定一个具体的名字\",{\"1\":{\"529\":1}}],[\"param注解明确声明变量的名称\",{\"1\":{\"529\":1}}],[\"param注解一个一个传入又太麻烦了\",{\"1\":{\"505\":1}}],[\"parammap\",{\"1\":{\"505\":5}}],[\"parametertype=\",{\"1\":{\"512\":1}}],[\"parameters\",{\"1\":{\"481\":1,\"529\":1}}],[\"parameter\",{\"1\":{\"387\":1,\"529\":1}}],[\"parameter表示接受任意多个类似关键字参数一样显示赋值的实际参数\",{\"1\":{\"325\":1}}],[\"parameter表示接收任意多个实际参数并将其放在一个元组中\",{\"1\":{\"325\":1}}],[\"parameterlist\",{\"1\":{\"325\":1}}],[\"param\",{\"1\":{\"81\":1,\"216\":1,\"244\":6,\"464\":3,\"465\":3,\"466\":9,\"474\":1,\"493\":1,\"498\":2,\"504\":2,\"529\":1,\"607\":6,\"628\":3,\"641\":5,\"652\":2,\"655\":3,\"656\":5,\"657\":3,\"676\":1}}],[\"parsejwt\",{\"1\":{\"93\":1,\"95\":1}}],[\"parseclaimsjws\",{\"1\":{\"92\":1,\"655\":2}}],[\"parser\",{\"1\":{\"92\":1,\"334\":2,\"655\":2}}],[\"parse\",{\"1\":{\"40\":1,\"163\":2,\"354\":7,\"355\":2,\"356\":1,\"361\":1}}],[\"parseint\",{\"1\":{\"38\":3,\"68\":1,\"169\":1}}],[\"padding\",{\"1\":{\"35\":1,\"36\":1}}],[\"patter\",{\"1\":{\"320\":1}}],[\"pattern>\",{\"1\":{\"625\":1}}],[\"pattern\",{\"1\":{\"320\":4,\"321\":1,\"322\":1,\"323\":1,\"324\":3}}],[\"pattern=\",{\"1\":{\"68\":1}}],[\"path属性来指定自定义的上下文路径\",{\"1\":{\"674\":1}}],[\"path>\",{\"1\":{\"413\":1}}],[\"path=d\",{\"1\":{\"412\":1,\"449\":1}}],[\"path中\",{\"1\":{\"331\":1}}],[\"pathvariable\",{\"1\":{\"68\":3,\"641\":3}}],[\"pathvariable获取路径参数\",{\"1\":{\"68\":1}}],[\"pathparam2\",{\"1\":{\"68\":1}}],[\"pathparam\",{\"1\":{\"68\":1}}],[\"path\",{\"1\":{\"22\":2,\"68\":4,\"395\":2,\"412\":2,\"425\":4,\"440\":3,\"652\":1,\"668\":1,\"669\":1,\"674\":2,\"675\":1,\"680\":1}}],[\"patmt\",{\"1\":{\"8\":1,\"11\":3}}],[\"practice\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"prtname\",{\"1\":{\"329\":2}}],[\"prt\",{\"1\":{\"150\":2}}],[\"profiles\",{\"1\":{\"671\":6,\"686\":2}}],[\"profile>\",{\"1\":{\"395\":1,\"440\":1}}],[\"prod\",{\"1\":{\"671\":4}}],[\"product\",{\"1\":{\"422\":1}}],[\"processor<\",{\"1\":{\"625\":1}}],[\"processor\",{\"1\":{\"625\":3}}],[\"proceed\",{\"1\":{\"100\":1,\"216\":1,\"592\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"100\":1,\"215\":1,\"216\":1,\"591\":1,\"592\":1}}],[\"program\",{\"1\":{\"588\":6}}],[\"programming面向切面编程\",{\"1\":{\"584\":1}}],[\"programming\",{\"1\":{\"211\":1,\"584\":1}}],[\"prohibition\",{\"1\":{\"485\":1}}],[\"prone\",{\"1\":{\"387\":1}}],[\"prometheus\",{\"1\":{\"387\":1}}],[\"protobuf\",{\"1\":{\"588\":3}}],[\"prototype\",{\"1\":{\"228\":2,\"232\":1,\"560\":2,\"565\":2,\"573\":1,\"575\":1}}],[\"protected\",{\"1\":{\"135\":1,\"150\":1,\"327\":1,\"621\":1,\"623\":3,\"629\":3,\"652\":1}}],[\"proxyfactory\",{\"1\":{\"583\":4}}],[\"proxy\",{\"1\":{\"211\":1,\"424\":1,\"481\":1,\"582\":2,\"583\":6,\"584\":1,\"588\":5,\"591\":4}}],[\"propagation属性\",{\"1\":{\"612\":1}}],[\"propagation\",{\"1\":{\"98\":4,\"249\":9,\"612\":19}}],[\"property属性\",{\"1\":{\"518\":1,\"519\":1,\"522\":2}}],[\"property属性用于指定java实体类属性名\",{\"1\":{\"513\":1}}],[\"property=\",{\"1\":{\"513\":3,\"517\":16,\"518\":5,\"519\":5,\"521\":5}}],[\"property转换后的属性不能重新赋值\",{\"1\":{\"328\":1}}],[\"propertysource\",{\"1\":{\"235\":4,\"236\":1,\"242\":1,\"244\":1,\"571\":3,\"572\":1,\"575\":1,\"579\":1,\"606\":1,\"607\":1,\"628\":2}}],[\"property标签仍然可以用来通过setxxx\",{\"1\":{\"561\":1}}],[\"property标签\",{\"1\":{\"225\":1,\"558\":1}}],[\"property\",{\"1\":{\"81\":1,\"225\":1,\"231\":1,\"235\":4,\"236\":1,\"240\":1,\"242\":1,\"328\":4,\"558\":1,\"562\":2,\"567\":1,\"568\":1,\"571\":3,\"572\":1,\"577\":1,\"579\":1}}],[\"properties等文件\",{\"1\":{\"671\":1}}],[\"properties和application\",{\"1\":{\"671\":1}}],[\"properties取决于实际需求和团队的偏好\",{\"1\":{\"669\":1}}],[\"properties的优先级更高\",{\"1\":{\"667\":1}}],[\"properties或application\",{\"1\":{\"667\":1,\"679\":1,\"686\":1}}],[\"properties>\",{\"1\":{\"395\":1,\"410\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"440\":1,\"447\":1,\"456\":4,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"properties文件具有更好的层次结构表示\",{\"1\":{\"669\":1}}],[\"properties文件需要使用转义符或将长文本拆分为多行\",{\"1\":{\"669\":1}}],[\"properties文件不支持注释\",{\"1\":{\"669\":1}}],[\"properties文件相比\",{\"1\":{\"669\":1}}],[\"properties文件\",{\"1\":{\"236\":1,\"572\":1}}],[\"properties配置文件\",{\"1\":{\"231\":1}}],[\"properties中通过spring\",{\"1\":{\"671\":1}}],[\"properties中\",{\"1\":{\"80\":1,\"81\":1}}],[\"properties中引入数据库连接信息\",{\"1\":{\"80\":1}}],[\"properties\",{\"1\":{\"76\":1,\"179\":1,\"231\":1,\"235\":2,\"236\":3,\"242\":2,\"244\":1,\"401\":1,\"445\":1,\"496\":1,\"562\":3,\"567\":2,\"568\":1,\"571\":2,\"572\":3,\"575\":1,\"579\":2,\"606\":2,\"607\":1,\"628\":8,\"655\":1,\"667\":4,\"668\":3,\"669\":2,\"670\":2,\"671\":1,\"674\":2,\"675\":2}}],[\"provider\",{\"1\":{\"426\":6}}],[\"provided\",{\"1\":{\"59\":1,\"411\":2,\"415\":1,\"447\":1}}],[\"province\",{\"1\":{\"68\":1}}],[\"project>\",{\"1\":{\"419\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"453\":1,\"456\":4,\"461\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"project2<\",{\"1\":{\"419\":1,\"453\":1}}],[\"project1<\",{\"1\":{\"419\":1,\"453\":1}}],[\"project<\",{\"1\":{\"419\":1,\"453\":1}}],[\"projectname\",{\"1\":{\"220\":1,\"238\":1,\"248\":1,\"493\":1,\"514\":1,\"564\":8,\"567\":1,\"573\":1,\"606\":1,\"607\":3,\"611\":1,\"626\":1,\"627\":1,\"628\":1,\"640\":2}}],[\"projectlombok<\",{\"1\":{\"79\":1,\"461\":1,\"625\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"project01\",{\"1\":{\"49\":1}}],[\"project\",{\"1\":{\"1\":1,\"409\":3,\"410\":2,\"418\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"447\":5,\"452\":1,\"456\":4,\"461\":1,\"544\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"projects\",{\"1\":{\"1\":1,\"547\":1}}],[\"prices\",{\"1\":{\"334\":1}}],[\"prices=soup\",{\"1\":{\"334\":1}}],[\"price\",{\"1\":{\"334\":10}}],[\"price=sorted\",{\"1\":{\"334\":1}}],[\"price=min\",{\"1\":{\"334\":1}}],[\"price=max\",{\"1\":{\"334\":1}}],[\"price=\",{\"1\":{\"334\":1}}],[\"privileges\",{\"1\":{\"277\":2}}],[\"private成员变量\",{\"1\":{\"176\":1}}],[\"privated的方法只有接口自己才能调用\",{\"1\":{\"144\":1}}],[\"private\",{\"1\":{\"28\":6,\"69\":3,\"94\":1,\"127\":2,\"130\":3,\"135\":4,\"138\":1,\"142\":2,\"144\":2,\"150\":2,\"176\":10,\"192\":4,\"203\":4,\"214\":1,\"222\":2,\"223\":1,\"233\":2,\"242\":1,\"247\":2,\"248\":1,\"327\":1,\"367\":4,\"370\":5,\"371\":1,\"461\":5,\"467\":1,\"480\":12,\"481\":10,\"484\":1,\"493\":3,\"505\":1,\"514\":4,\"517\":17,\"518\":1,\"557\":3,\"558\":6,\"561\":1,\"562\":13,\"566\":11,\"567\":1,\"568\":8,\"573\":2,\"575\":12,\"580\":1,\"583\":2,\"588\":1,\"590\":1,\"594\":1,\"596\":1,\"606\":7,\"607\":2,\"609\":1,\"610\":2,\"611\":1,\"612\":4,\"625\":3,\"628\":8,\"630\":2,\"640\":10,\"641\":2,\"652\":6,\"653\":7,\"655\":6,\"656\":6,\"657\":2,\"668\":5,\"669\":5,\"670\":6,\"673\":4,\"675\":6,\"676\":1,\"677\":1,\"680\":5}}],[\"pripority\",{\"1\":{\"196\":3,\"207\":3}}],[\"print内的类型要保持一致\",{\"1\":{\"334\":1}}],[\"printlogfinallyend\",{\"1\":{\"588\":1,\"591\":1}}],[\"printlogafterexception\",{\"1\":{\"588\":1,\"591\":1}}],[\"printlogaftersuccess\",{\"1\":{\"588\":1,\"591\":1}}],[\"printlogaftercoreexception\",{\"1\":{\"219\":1,\"589\":1,\"596\":1}}],[\"printlogaftercoresuccess\",{\"1\":{\"219\":1,\"589\":1,\"596\":1}}],[\"printlogcorefinallyend\",{\"1\":{\"219\":1,\"596\":1}}],[\"printlogbeforecore\",{\"1\":{\"219\":1,\"588\":1,\"589\":1,\"591\":1,\"596\":1}}],[\"printlogbeforecoreoperation\",{\"1\":{\"215\":1,\"591\":1}}],[\"println自带换行\",{\"1\":{\"108\":1}}],[\"println\",{\"1\":{\"11\":7,\"12\":1,\"16\":8,\"17\":14,\"26\":1,\"27\":5,\"28\":8,\"29\":2,\"61\":1,\"68\":8,\"90\":1,\"92\":2,\"100\":1,\"108\":1,\"109\":1,\"112\":1,\"114\":1,\"116\":4,\"117\":5,\"119\":2,\"121\":4,\"122\":1,\"124\":2,\"126\":1,\"127\":3,\"130\":5,\"135\":1,\"138\":2,\"145\":9,\"146\":8,\"147\":9,\"149\":3,\"150\":1,\"151\":4,\"154\":3,\"160\":1,\"162\":3,\"163\":4,\"164\":3,\"165\":6,\"170\":18,\"176\":2,\"177\":6,\"178\":1,\"182\":1,\"186\":1,\"187\":3,\"188\":1,\"189\":4,\"191\":3,\"192\":4,\"194\":3,\"197\":5,\"200\":4,\"202\":3,\"203\":4,\"205\":3,\"212\":3,\"213\":1,\"216\":3,\"220\":1,\"242\":1,\"366\":6,\"367\":2,\"368\":11,\"370\":7,\"371\":7,\"461\":2,\"472\":11,\"476\":5,\"477\":2,\"478\":7,\"479\":1,\"493\":1,\"514\":5,\"535\":7,\"557\":1,\"560\":2,\"561\":2,\"562\":4,\"566\":1,\"568\":1,\"573\":1,\"575\":1,\"580\":1,\"582\":8,\"583\":6,\"588\":4,\"589\":6,\"591\":4,\"596\":1,\"606\":1,\"607\":1,\"628\":1,\"655\":7,\"668\":1,\"669\":1,\"670\":2,\"676\":3,\"682\":2}}],[\"printnumber\",{\"1\":{\"194\":3,\"205\":3}}],[\"printstream\",{\"1\":{\"192\":4,\"203\":4}}],[\"printstacktrace\",{\"1\":{\"93\":1,\"95\":1,\"96\":1,\"154\":1,\"155\":1,\"183\":2,\"184\":2,\"185\":5,\"186\":5,\"187\":4,\"189\":1,\"191\":7,\"192\":3,\"200\":1,\"202\":7,\"203\":3,\"583\":1,\"652\":1}}],[\"print\",{\"1\":{\"108\":1,\"121\":4,\"122\":1,\"124\":1,\"127\":1,\"135\":3,\"170\":2,\"183\":3,\"191\":1,\"202\":1,\"292\":1,\"293\":2,\"294\":1,\"296\":1,\"298\":1,\"299\":1,\"305\":3,\"306\":1,\"307\":1,\"310\":1,\"312\":1,\"315\":5,\"316\":7,\"317\":9,\"318\":3,\"320\":2,\"324\":1,\"325\":6,\"326\":1,\"327\":3,\"328\":2,\"329\":2,\"333\":1,\"334\":84,\"351\":1,\"353\":1,\"354\":2,\"355\":1,\"361\":2,\"566\":1,\"594\":1,\"657\":1}}],[\"printf格式化输出\",{\"1\":{\"108\":1}}],[\"printf\",{\"1\":{\"108\":2,\"120\":1,\"121\":3,\"338\":1,\"366\":3,\"367\":1,\"370\":2}}],[\"primary\",{\"1\":{\"75\":1,\"461\":1,\"493\":1,\"514\":1,\"517\":2,\"562\":1,\"568\":1,\"575\":1,\"625\":1,\"640\":1,\"651\":3}}],[\"preparing\",{\"1\":{\"481\":1}}],[\"prepared\",{\"1\":{\"515\":7,\"677\":2}}],[\"preparedstatement预编译功能开启\",{\"1\":{\"9\":1}}],[\"preparedstatement原理\",{\"0\":{\"9\":1}}],[\"preparedstatement对象\",{\"1\":{\"8\":1}}],[\"preparedstatement\",{\"0\":{\"8\":1},\"1\":{\"3\":1,\"5\":1,\"8\":1,\"11\":1,\"515\":4}}],[\"preparecall\",{\"1\":{\"5\":1}}],[\"preparestatement\",{\"1\":{\"5\":1,\"8\":1,\"11\":1,\"515\":1}}],[\"predestroy\",{\"1\":{\"237\":1,\"565\":1,\"566\":1}}],[\"predestory\",{\"1\":{\"232\":1}}],[\"predicate<string>\",{\"1\":{\"17\":2}}],[\"predicate<t>断定式接口\",{\"1\":{\"17\":1}}],[\"prefix定义视图的前缀\",{\"1\":{\"674\":1}}],[\"prefix和spring\",{\"1\":{\"674\":1}}],[\"prefix=\",{\"1\":{\"527\":1,\"670\":1}}],[\"prefixoverrides属性指定要动态去掉的前缀\",{\"1\":{\"527\":1}}],[\"prefixoverrides属性\",{\"1\":{\"527\":1}}],[\"prefix属性指定要动态添加的前缀\",{\"1\":{\"527\":1}}],[\"prefix属性\",{\"1\":{\"527\":1}}],[\"prefix\",{\"1\":{\"166\":1,\"317\":1,\"480\":2,\"652\":1,\"655\":1,\"670\":1}}],[\"prehandle\",{\"1\":{\"94\":2,\"95\":1,\"657\":1,\"676\":1}}],[\"pre\",{\"1\":{\"17\":2,\"371\":5}}],[\"press\",{\"1\":{\"1\":1}}],[\"prev\",{\"1\":{\"1\":1}}],[\"lts\",{\"1\":{\"636\":1}}],[\"lt\",{\"1\":{\"376\":1,\"526\":1,\"527\":1,\"528\":2}}],[\"ld\",{\"1\":{\"338\":1}}],[\"lstrip\",{\"1\":{\"317\":1}}],[\"ls1\",{\"1\":{\"197\":2}}],[\"l列出可以打印的图像\",{\"1\":{\"279\":1}}],[\"lrzsz\",{\"1\":{\"274\":1}}],[\"l\",{\"1\":{\"253\":1,\"273\":1,\"317\":5,\"334\":2}}],[\"ljava\",{\"1\":{\"213\":1}}],[\"l5z04jmc\",{\"1\":{\"92\":1}}],[\"llection\",{\"1\":{\"85\":1}}],[\"lmbok\",{\"1\":{\"80\":1}}],[\"leading\",{\"1\":{\"608\":1}}],[\"le\",{\"1\":{\"376\":1}}],[\"less\",{\"1\":{\"338\":1}}],[\"let\",{\"1\":{\"334\":1}}],[\"letter\",{\"1\":{\"333\":1}}],[\"len++\",{\"1\":{\"371\":1}}],[\"len求长度\",{\"1\":{\"334\":1}}],[\"len=is\",{\"1\":{\"191\":2,\"202\":2}}],[\"len=fis\",{\"1\":{\"183\":1,\"185\":1}}],[\"len\",{\"1\":{\"181\":3,\"183\":2,\"185\":5,\"186\":6,\"191\":5,\"202\":5,\"305\":1,\"317\":1,\"334\":4,\"371\":2}}],[\"length呢\",{\"1\":{\"183\":1}}],[\"length长度的字符串是否equals\",{\"1\":{\"166\":1}}],[\"length+\",{\"1\":{\"124\":2}}],[\"length\",{\"1\":{\"40\":2,\"63\":1,\"64\":1,\"124\":3,\"126\":8,\"166\":2,\"167\":1,\"170\":1,\"182\":1,\"185\":1,\"188\":7,\"252\":1,\"366\":2,\"367\":1,\"652\":2,\"656\":1}}],[\"level=\",{\"1\":{\"625\":2}}],[\"level\",{\"1\":{\"97\":1,\"677\":1}}],[\"left\",{\"1\":{\"23\":1,\"517\":5,\"518\":1,\"519\":1,\"656\":2}}],[\"limit\",{\"1\":{\"471\":1,\"478\":2}}],[\"limit=20\",{\"1\":{\"356\":1}}],[\"license\",{\"1\":{\"393\":1}}],[\"lisi\",{\"1\":{\"334\":2,\"651\":1}}],[\"lisi=parttimeemployee\",{\"1\":{\"334\":1}}],[\"listobjs\",{\"1\":{\"471\":4}}],[\"listmaps\",{\"1\":{\"471\":2}}],[\"listbymap\",{\"1\":{\"471\":1}}],[\"listbyids\",{\"1\":{\"471\":1}}],[\"listname\",{\"1\":{\"309\":2,\"311\":4}}],[\"listname不常使用\",{\"1\":{\"307\":1}}],[\"listfiles\",{\"1\":{\"182\":1}}],[\"list1\",{\"1\":{\"180\":1,\"307\":2,\"315\":3,\"316\":4}}],[\"listhashset插入性能略低于hashset\",{\"1\":{\"173\":1}}],[\"listhashset\",{\"0\":{\"173\":1},\"1\":{\"173\":1}}],[\"list常用的方法\",{\"1\":{\"171\":1}}],[\"list中相对collection\",{\"1\":{\"171\":1}}],[\"list的主要实现类\",{\"0\":{\"171\":1}}],[\"list接口\",{\"1\":{\"169\":1}}],[\"list<schedule>\",{\"1\":{\"641\":2}}],[\"list<student>\",{\"1\":{\"562\":8,\"568\":7,\"575\":7}}],[\"list<string>\",{\"1\":{\"17\":5,\"68\":1,\"478\":1,\"555\":1}}],[\"list<type>\",{\"1\":{\"656\":1}}],[\"list<teacher>\",{\"1\":{\"535\":2}}],[\"list<t>\",{\"1\":{\"466\":3,\"471\":2,\"640\":1}}],[\"list<order>\",{\"1\":{\"517\":2,\"519\":1}}],[\"list<object>\",{\"1\":{\"466\":1,\"471\":2,\"589\":1}}],[\"list<employee>\",{\"1\":{\"501\":1,\"511\":3,\"525\":1,\"527\":1,\"528\":1,\"529\":1,\"630\":5}}],[\"list<v>\",{\"1\":{\"471\":2}}],[\"list<map<string\",{\"1\":{\"466\":1,\"471\":2,\"476\":1}}],[\"list<integer>\",{\"1\":{\"85\":1}}],[\"list<user>\",{\"1\":{\"76\":1,\"81\":1,\"461\":1,\"467\":1,\"472\":1,\"476\":2,\"478\":3,\"514\":2,\"680\":5}}],[\"listparam\",{\"1\":{\"68\":2}}],[\"listenablefuture🫙9999\",{\"1\":{\"387\":1}}],[\"listener\",{\"1\":{\"93\":1,\"552\":1}}],[\"listen\",{\"1\":{\"53\":1,\"252\":1,\"283\":1}}],[\"list2\",{\"1\":{\"17\":3,\"315\":2,\"316\":4}}],[\"list\",{\"1\":{\"17\":5,\"76\":1,\"81\":1,\"82\":1,\"84\":1,\"169\":1,\"171\":1,\"180\":11,\"182\":2,\"276\":2,\"307\":1,\"315\":1,\"316\":7,\"328\":2,\"333\":1,\"334\":10,\"356\":1,\"370\":2,\"371\":1,\"460\":1,\"471\":2,\"472\":3,\"476\":2,\"478\":1,\"501\":1,\"508\":2,\"514\":1,\"529\":1,\"552\":1,\"630\":1,\"641\":2,\"656\":3,\"680\":1}}],[\"linux写的笔记有点杂乱\",{\"1\":{\"270\":1}}],[\"linux\",{\"0\":{\"270\":1},\"2\":{\"290\":1}}],[\"lines\",{\"1\":{\"334\":1}}],[\"lines=f\",{\"1\":{\"334\":1}}],[\"line\",{\"1\":{\"192\":2,\"203\":2,\"334\":2}}],[\"linkedhashmap\",{\"1\":{\"169\":1}}],[\"linkedhashset\",{\"1\":{\"169\":1}}],[\"linkedlist\",{\"1\":{\"169\":1}}],[\"link>\",{\"1\":{\"52\":1}}],[\"link\",{\"1\":{\"1\":7,\"334\":2}}],[\"like\",{\"1\":{\"81\":2,\"82\":1,\"84\":1,\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"474\":2,\"476\":4,\"477\":2,\"656\":2}}],[\"lib\",{\"1\":{\"50\":1,\"393\":1,\"588\":4}}],[\"li>\",{\"1\":{\"34\":6,\"334\":6}}],[\"later\",{\"1\":{\"663\":2}}],[\"latest\",{\"1\":{\"269\":1}}],[\"launcher\",{\"1\":{\"588\":2}}],[\"lasrindexxof\",{\"1\":{\"166\":1}}],[\"last\",{\"1\":{\"471\":1,\"478\":2}}],[\"lastmodified\",{\"1\":{\"182\":1}}],[\"lastindexof\",{\"1\":{\"166\":1,\"171\":1}}],[\"lastupdated文件\",{\"1\":{\"412\":1}}],[\"lastupdated\",{\"1\":{\"1\":1,\"412\":5,\"449\":1}}],[\"laber\",{\"1\":{\"122\":3}}],[\"label>\",{\"1\":{\"34\":2}}],[\"label\",{\"1\":{\"22\":1}}],[\"lang🫙2\",{\"1\":{\"387\":1}}],[\"lang\",{\"1\":{\"146\":1,\"152\":1,\"157\":1,\"161\":1,\"167\":1,\"174\":1,\"193\":1,\"204\":1,\"213\":1,\"387\":1,\"508\":1,\"512\":2,\"588\":1}}],[\"language\",{\"1\":{\"63\":1,\"669\":1}}],[\"lang=\",{\"1\":{\"34\":1,\"253\":1}}],[\"layout\",{\"1\":{\"24\":2}}],[\"lambton\",{\"1\":{\"334\":1}}],[\"lambdaexample\",{\"1\":{\"478\":1}}],[\"lambdaupdatewrapper<>\",{\"1\":{\"479\":1}}],[\"lambdaupdatewrapper<user>\",{\"1\":{\"479\":1}}],[\"lambdaupdatewrapper\",{\"1\":{\"475\":1}}],[\"lambdaquerywrapper使用案例\",{\"1\":{\"478\":1}}],[\"lambdaquerywrapper<headline>\",{\"1\":{\"656\":1}}],[\"lambdaquerywrapper<>\",{\"1\":{\"478\":2,\"655\":3,\"656\":1}}],[\"lambdaquerywrapper<user>\",{\"1\":{\"478\":2,\"655\":3}}],[\"lambdaquerywrapper对比querywrapper优势\",{\"1\":{\"478\":1}}],[\"lambdaquerywrapper\",{\"1\":{\"475\":1,\"478\":8}}],[\"lambda写法\",{\"1\":{\"17\":1}}],[\"lambda需要两个或以上的参数\",{\"1\":{\"17\":1}}],[\"lambda需要一个参数\",{\"1\":{\"17\":1}}],[\"lambda若只需要一个参数时\",{\"1\":{\"17\":1}}],[\"lambda\",{\"1\":{\"17\":1,\"294\":1,\"326\":2,\"334\":1,\"460\":2,\"475\":1,\"478\":11}}],[\"lambda表达式回顾\",{\"1\":{\"478\":1}}],[\"lambda表达式\",{\"1\":{\"26\":2}}],[\"lambda表达式的本质\",{\"1\":{\"17\":2}}],[\"lambda表达式写法\",{\"1\":{\"16\":1}}],[\"lambda使用\",{\"1\":{\"17\":1}}],[\"lambda体应该使用一对\",{\"1\":{\"17\":1}}],[\"lambda体\",{\"1\":{\"17\":1}}],[\"lambda形参列表的参数类型可以省略\",{\"1\":{\"17\":1}}],[\"lambda形参列表\",{\"1\":{\"17\":1}}],[\"lambda操作符\",{\"1\":{\"17\":1}}],[\"lambda是一个匿名函数\",{\"1\":{\"16\":1}}],[\"lamda表达式的使用\",{\"0\":{\"17\":1}}],[\"loadbalancer🫙2\",{\"1\":{\"387\":1}}],[\"loads\",{\"1\":{\"355\":1,\"361\":1}}],[\"loop\",{\"1\":{\"368\":3}}],[\"lower\",{\"1\":{\"317\":1}}],[\"lower排序不分大小写\",{\"1\":{\"311\":1}}],[\"lolcat将传过去的文本变为彩色\",{\"1\":{\"281\":1}}],[\"lolcat\",{\"1\":{\"281\":2}}],[\"love\",{\"1\":{\"184\":2,\"317\":4}}],[\"lombok简化代码\",{\"1\":{\"461\":1}}],[\"lombok插件使用\",{\"1\":{\"229\":1,\"561\":1}}],[\"lombok会在编译时\",{\"1\":{\"79\":1}}],[\"lombok是一个实用的java类库\",{\"1\":{\"79\":1}}],[\"lombok\",{\"0\":{\"79\":1},\"1\":{\"514\":1,\"625\":4,\"655\":1}}],[\"location=\",{\"1\":{\"231\":1,\"235\":1,\"236\":1,\"562\":2,\"567\":1,\"568\":1,\"571\":1,\"572\":1}}],[\"locations属性来自定义静态资源的位置\",{\"1\":{\"674\":1}}],[\"locations\",{\"1\":{\"226\":1,\"242\":1,\"467\":1,\"559\":1,\"580\":1,\"588\":1,\"596\":1,\"607\":1,\"674\":1,\"675\":3,\"680\":1}}],[\"location\",{\"1\":{\"40\":6,\"53\":1,\"283\":1}}],[\"localstorage作为用户校验token的存储手段\",{\"1\":{\"647\":1}}],[\"localrepository>\",{\"1\":{\"395\":2,\"425\":1,\"440\":2}}],[\"localrepository\",{\"1\":{\"395\":1,\"440\":1}}],[\"localdatetime\",{\"1\":{\"68\":1,\"484\":1}}],[\"local\",{\"1\":{\"34\":1,\"395\":2,\"440\":2}}],[\"localhost\",{\"1\":{\"11\":2,\"12\":1,\"53\":1,\"68\":1,\"76\":1,\"220\":1,\"277\":1,\"283\":1,\"422\":1,\"425\":9,\"426\":5,\"427\":1,\"493\":1,\"514\":1,\"562\":1,\"606\":1,\"669\":1,\"675\":2,\"677\":1}}],[\"lock\",{\"1\":{\"0\":1,\"483\":2}}],[\"longvalue\",{\"1\":{\"655\":1}}],[\"long型要在后面加l\",{\"1\":{\"112\":1}}],[\"long\",{\"1\":{\"9\":1,\"100\":2,\"112\":2,\"137\":2,\"138\":2,\"155\":1,\"169\":2,\"187\":1,\"196\":1,\"207\":1,\"461\":1,\"472\":3,\"480\":4,\"484\":2,\"507\":1,\"508\":4,\"535\":1,\"539\":2,\"640\":1,\"653\":1,\"655\":5}}],[\"logger\",{\"1\":{\"625\":1}}],[\"logging<\",{\"1\":{\"416\":2}}],[\"logging🫙2\",{\"1\":{\"387\":1}}],[\"logging\",{\"1\":{\"80\":1,\"97\":1,\"387\":2,\"480\":1,\"496\":4,\"677\":1,\"680\":1}}],[\"logback配置\",{\"1\":{\"625\":1}}],[\"logback\",{\"1\":{\"387\":4,\"625\":6}}],[\"logback<\",{\"1\":{\"59\":2,\"625\":1}}],[\"logimpl\",{\"1\":{\"496\":2,\"514\":1,\"628\":2}}],[\"logic\",{\"1\":{\"237\":2,\"481\":3,\"558\":1,\"573\":2,\"652\":1}}],[\"loginprotectinterceptor\",{\"1\":{\"657\":4}}],[\"loginexpired\",{\"1\":{\"657\":2}}],[\"logincheckinterceptor\",{\"1\":{\"94\":4}}],[\"login路径时\",{\"1\":{\"93\":1}}],[\"login只有访问\",{\"1\":{\"93\":1}}],[\"loginuser\",{\"1\":{\"91\":6,\"655\":8}}],[\"login\",{\"1\":{\"22\":2,\"90\":3,\"91\":1,\"93\":2,\"94\":1,\"95\":2,\"655\":6,\"675\":1}}],[\"logpointcut\",{\"1\":{\"219\":6,\"596\":6}}],[\"logaspect\",{\"1\":{\"215\":1,\"219\":3,\"588\":1,\"591\":1,\"596\":3}}],[\"logadvice\",{\"1\":{\"212\":1,\"682\":2}}],[\"log4j2\",{\"1\":{\"496\":1}}],[\"log4j\",{\"1\":{\"59\":1,\"387\":4,\"401\":1,\"411\":1,\"445\":1,\"496\":1}}],[\"log\",{\"1\":{\"9\":4,\"38\":1,\"40\":2,\"45\":2,\"80\":1,\"91\":2,\"93\":1,\"252\":1,\"253\":5,\"277\":2,\"480\":1,\"505\":1,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"518\":1,\"519\":3,\"592\":4,\"630\":1,\"641\":1,\"677\":1,\"680\":3}}],[\"log=1\",{\"1\":{\"9\":2}}],[\"log=output=file\",{\"1\":{\"9\":1}}],[\"logo\",{\"1\":{\"1\":1}}],[\"snowflake\",{\"1\":{\"480\":1}}],[\"sname\",{\"1\":{\"521\":1}}],[\"snakeyaml🫙1\",{\"1\":{\"387\":1}}],[\"snapshotrepository\",{\"1\":{\"426\":1}}],[\"snapshotrepository>\",{\"1\":{\"426\":1}}],[\"snapshots>\",{\"1\":{\"427\":1}}],[\"snapshots\",{\"1\":{\"424\":2,\"426\":5,\"427\":1}}],[\"snapshot版本控制等\",{\"1\":{\"421\":1}}],[\"snapshot\",{\"1\":{\"387\":3,\"399\":1,\"406\":1,\"426\":4}}],[\"snapshot<\",{\"1\":{\"58\":1,\"400\":1,\"416\":1,\"418\":3,\"426\":1,\"431\":1,\"432\":1,\"433\":2,\"434\":2,\"443\":1,\"444\":1,\"452\":3,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"sm\",{\"1\":{\"651\":2,\"652\":1}}],[\"smart\",{\"1\":{\"425\":8}}],[\"smalldog\",{\"1\":{\"564\":1,\"566\":3}}],[\"small\",{\"1\":{\"334\":1}}],[\"smooth\",{\"1\":{\"22\":1}}],[\"s=\",{\"1\":{\"334\":1}}],[\"s进行ascii匹配\",{\"1\":{\"320\":1}}],[\"sz\",{\"1\":{\"274\":1}}],[\"sybase\",{\"1\":{\"460\":1}}],[\"syntax\",{\"1\":{\"286\":1}}],[\"synchronized\",{\"1\":{\"197\":1,\"208\":1}}],[\"sys\",{\"1\":{\"480\":4}}],[\"sysout\",{\"1\":{\"178\":1}}],[\"sysout+alt+\",{\"1\":{\"108\":1}}],[\"systems\",{\"1\":{\"665\":1}}],[\"systempath\",{\"1\":{\"411\":1}}],[\"systemctl\",{\"1\":{\"277\":1}}],[\"system类提供的public\",{\"1\":{\"161\":1}}],[\"system类\",{\"1\":{\"131\":1}}],[\"system\",{\"1\":{\"11\":7,\"12\":1,\"16\":8,\"17\":14,\"26\":1,\"27\":5,\"28\":8,\"29\":2,\"61\":1,\"68\":8,\"90\":1,\"92\":3,\"100\":3,\"108\":3,\"109\":2,\"112\":1,\"114\":1,\"116\":4,\"117\":5,\"119\":2,\"121\":8,\"122\":2,\"124\":3,\"126\":1,\"127\":3,\"130\":5,\"135\":1,\"138\":4,\"145\":9,\"146\":8,\"147\":9,\"149\":3,\"150\":1,\"151\":4,\"154\":4,\"160\":1,\"161\":1,\"162\":3,\"163\":4,\"164\":3,\"165\":6,\"170\":20,\"176\":2,\"177\":6,\"182\":1,\"183\":3,\"186\":1,\"187\":3,\"188\":1,\"189\":4,\"191\":4,\"192\":3,\"194\":3,\"197\":5,\"200\":4,\"202\":4,\"203\":3,\"205\":3,\"212\":3,\"213\":1,\"216\":3,\"220\":1,\"242\":1,\"366\":9,\"367\":3,\"368\":12,\"370\":9,\"371\":7,\"411\":1,\"461\":2,\"472\":11,\"476\":5,\"477\":2,\"478\":6,\"479\":1,\"493\":1,\"514\":5,\"535\":7,\"557\":1,\"560\":2,\"561\":2,\"562\":4,\"566\":2,\"568\":1,\"573\":1,\"575\":1,\"580\":1,\"582\":8,\"583\":6,\"588\":4,\"589\":6,\"591\":4,\"594\":1,\"596\":1,\"606\":1,\"607\":1,\"628\":1,\"655\":8,\"668\":1,\"669\":1,\"670\":2,\"676\":3,\"682\":2}}],[\"s架构\",{\"1\":{\"189\":2,\"200\":2}}],[\"sb\",{\"1\":{\"188\":5}}],[\"swap\",{\"1\":{\"180\":1,\"483\":1}}],[\"swithcase语句\",{\"1\":{\"121\":1}}],[\"switch\",{\"1\":{\"38\":1,\"368\":1}}],[\"swingutilities\",{\"1\":{\"23\":3}}],[\"swing\",{\"1\":{\"22\":1}}],[\"shiro<\",{\"1\":{\"456\":2}}],[\"shiro\",{\"1\":{\"455\":1,\"456\":3}}],[\"shutdownoutput\",{\"1\":{\"191\":1,\"202\":1}}],[\"shuffle\",{\"1\":{\"180\":1}}],[\"shop<\",{\"1\":{\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4}}],[\"shopping\",{\"1\":{\"334\":10}}],[\"shop\",{\"0\":{\"431\":1},\"1\":{\"320\":6,\"456\":1}}],[\"shorted\",{\"1\":{\"334\":2}}],[\"short类型相互转化时\",{\"1\":{\"114\":1}}],[\"short\",{\"1\":{\"81\":1,\"112\":2,\"114\":2,\"117\":2,\"169\":2,\"180\":2,\"501\":1,\"508\":4}}],[\"showheadlinedetail\",{\"1\":{\"656\":5}}],[\"showlist\",{\"1\":{\"641\":1}}],[\"showqueue\",{\"1\":{\"367\":1,\"368\":1,\"370\":1}}],[\"shownum\",{\"1\":{\"145\":2}}],[\"show=\",{\"1\":{\"43\":1,\"328\":1}}],[\"show\",{\"1\":{\"43\":2,\"130\":3,\"146\":1,\"328\":11,\"368\":1,\"426\":1,\"566\":3}}],[\"sdf1\",{\"1\":{\"163\":3}}],[\"sdf\",{\"1\":{\"163\":3}}],[\"sdl\",{\"1\":{\"7\":1}}],[\"sqrt\",{\"1\":{\"138\":1,\"334\":4}}],[\"sql语句中可以不使用别名\",{\"1\":{\"513\":1}}],[\"sql语句中的参数值\",{\"1\":{\"8\":1}}],[\"sql语句\",{\"1\":{\"502\":1,\"503\":1,\"504\":1,\"505\":1,\"508\":1,\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"562\":1}}],[\"sql语句编写位置发生改变\",{\"1\":{\"493\":1}}],[\"sql语句专注数据\",{\"1\":{\"492\":1}}],[\"sql片段\",{\"0\":{\"530\":1},\"1\":{\"489\":1}}],[\"sqlite\",{\"1\":{\"460\":2,\"628\":2}}],[\"sqlsession和httpsession区别\",{\"1\":{\"493\":1}}],[\"sqlsession的\",{\"1\":{\"493\":1}}],[\"sqlsession\",{\"1\":{\"220\":1,\"493\":3,\"505\":1,\"514\":2,\"518\":1,\"628\":10}}],[\"sqlsessionfactorybean和mapperscannerconfigurer在配置类中通常是用来配置mybatis相关的bean\",{\"1\":{\"628\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"628\":27}}],[\"sqlsessionfactorybean源码展示\",{\"1\":{\"628\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"220\":1,\"493\":1,\"505\":1,\"514\":2,\"518\":1,\"628\":4}}],[\"sqlsessionfactory\",{\"1\":{\"220\":2,\"493\":2,\"628\":15}}],[\"sqlserver2012\",{\"1\":{\"628\":4}}],[\"sqlserverdriver\",{\"1\":{\"11\":2,\"12\":1}}],[\"sqlserver\",{\"1\":{\"11\":4,\"12\":2,\"460\":2,\"628\":2}}],[\"sql>\",{\"1\":{\"86\":1,\"530\":1}}],[\"sql防注入\",{\"1\":{\"11\":1}}],[\"sqlexception\",{\"1\":{\"11\":2,\"12\":2,\"78\":1,\"608\":1}}],[\"sql注入是通过操作输入来修改事先定义好的sql语句\",{\"1\":{\"8\":1}}],[\"sql注入\",{\"1\":{\"8\":1}}],[\"sql\",{\"1\":{\"5\":2,\"6\":2,\"8\":2,\"11\":5,\"12\":6,\"162\":1,\"460\":1,\"474\":1,\"475\":1,\"491\":1,\"492\":5,\"493\":1,\"514\":1,\"515\":4,\"524\":7,\"525\":1,\"534\":3,\"537\":13,\"562\":8,\"568\":2,\"575\":2,\"606\":4,\"608\":1,\"651\":1,\"677\":2}}],[\"s+=1\",{\"1\":{\"117\":1}}],[\"s2\",{\"1\":{\"91\":2,\"130\":2}}],[\"s1+=1\",{\"1\":{\"114\":1}}],[\"s1=s1+1\",{\"1\":{\"114\":1}}],[\"s1=2\",{\"1\":{\"114\":1}}],[\"s1\",{\"1\":{\"91\":2,\"130\":4,\"187\":2}}],[\"slf4jimpl\",{\"1\":{\"628\":1,\"680\":1}}],[\"slf4j🫙2\",{\"1\":{\"387\":1}}],[\"slf4j🫙10\",{\"1\":{\"387\":1}}],[\"slf4j🫙1\",{\"1\":{\"387\":1}}],[\"slf4j\",{\"1\":{\"387\":3,\"496\":3,\"514\":1,\"518\":1,\"628\":2,\"630\":1,\"641\":1,\"677\":1,\"680\":3}}],[\"slf4j日志小技巧\",{\"1\":{\"86\":1}}],[\"sleep\",{\"1\":{\"196\":1,\"207\":1,\"609\":1}}],[\"slow\",{\"1\":{\"9\":3}}],[\"sss\",{\"1\":{\"625\":1}}],[\"ssm2023\",{\"0\":{\"698\":1}}],[\"ssm笔记提炼\",{\"0\":{\"690\":1}}],[\"ssm整合配置实战\",{\"0\":{\"624\":1},\"1\":{\"615\":1}}],[\"ssm整合需要几个ioc容器\",{\"0\":{\"619\":1},\"1\":{\"615\":1}}],[\"ssm整合核心问题明确\",{\"0\":{\"618\":1},\"1\":{\"615\":1}}],[\"ssm整合理解\",{\"0\":{\"616\":1},\"1\":{\"615\":1}}],[\"ssm整合原理和实战\",{\"0\":{\"614\":1,\"702\":1}}],[\"ssm\",{\"1\":{\"544\":1,\"625\":2}}],[\"ssh2过渡到了ssm\",{\"1\":{\"545\":1}}],[\"ssh\",{\"0\":{\"285\":1}}],[\"ss\",{\"1\":{\"68\":1,\"163\":1,\"625\":1}}],[\"src\",{\"1\":{\"180\":1,\"186\":2,\"401\":7,\"445\":7}}],[\"src下的文件\",{\"1\":{\"49\":1}}],[\"src存放项目的源代码\",{\"1\":{\"49\":1}}],[\"src=\",{\"1\":{\"34\":1,\"42\":1,\"45\":1,\"334\":1}}],[\"software\",{\"1\":{\"491\":1}}],[\"sonatype\",{\"1\":{\"422\":1,\"423\":1}}],[\"sonatype的nexus\",{\"1\":{\"421\":1}}],[\"soterd\",{\"1\":{\"311\":1}}],[\"soldier\",{\"1\":{\"566\":1}}],[\"soldierdao中声明方法\",{\"1\":{\"566\":1}}],[\"soldierdao\",{\"1\":{\"566\":11}}],[\"soldierservice中声明方法\",{\"1\":{\"566\":1}}],[\"soldierservice\",{\"1\":{\"233\":2,\"564\":1,\"566\":25}}],[\"soldiercontroller中声明方法\",{\"1\":{\"566\":1}}],[\"soldiercontroller\",{\"1\":{\"233\":2,\"564\":3,\"566\":8}}],[\"solid\",{\"1\":{\"36\":1,\"253\":1}}],[\"socker\",{\"1\":{\"190\":1,\"201\":1}}],[\"socket相关api\",{\"0\":{\"191\":1,\"202\":1}}],[\"socket此类实现客户端套接字\",{\"1\":{\"190\":1,\"201\":1}}],[\"socket分类\",{\"1\":{\"190\":1,\"201\":1}}],[\"socket允许程序把网络连接当成一个流\",{\"1\":{\"190\":1,\"201\":1}}],[\"socket\",{\"1\":{\"190\":2,\"191\":17,\"192\":34,\"201\":2,\"202\":17,\"203\":34}}],[\"socket类\",{\"0\":{\"190\":1,\"201\":1}}],[\"sorted\",{\"1\":{\"333\":1}}],[\"sort\",{\"1\":{\"126\":1,\"311\":1}}],[\"sourcing\",{\"1\":{\"398\":1,\"442\":1}}],[\"sourceencoding>\",{\"1\":{\"410\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"447\":1,\"456\":4,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"sourceencoding>utf\",{\"1\":{\"410\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"447\":1,\"456\":4,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"source>\",{\"1\":{\"395\":1,\"413\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"440\":1,\"456\":4,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"source>17<\",{\"1\":{\"395\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"440\":1,\"456\":4,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"source\",{\"1\":{\"26\":3,\"677\":1}}],[\"soup\",{\"1\":{\"334\":2}}],[\"soup=beautifulsoup\",{\"1\":{\"334\":2}}],[\"south\",{\"1\":{\"23\":1}}],[\"spider\",{\"1\":{\"355\":1}}],[\"speed\",{\"1\":{\"651\":1}}],[\"specification\",{\"1\":{\"566\":1}}],[\"speak\",{\"1\":{\"334\":2}}],[\"spendtime\",{\"1\":{\"138\":2}}],[\"sparsearr\",{\"1\":{\"366\":15}}],[\"space\",{\"1\":{\"258\":2,\"261\":2}}],[\"span\",{\"1\":{\"36\":1,\"334\":1}}],[\"span>也可以换行\",{\"1\":{\"334\":1}}],[\"span>\",{\"1\":{\"34\":1,\"43\":3}}],[\"split\",{\"0\":{\"324\":1},\"1\":{\"166\":1,\"317\":2,\"324\":3}}],[\"splice\",{\"1\":{\"40\":1}}],[\"sportman\",{\"1\":{\"130\":8}}],[\"spqn>\",{\"1\":{\"43\":3}}],[\"spring容器会首先处理bean的定义和初始化\",{\"1\":{\"628\":1}}],[\"spring<\",{\"1\":{\"625\":1}}],[\"spring管理业务层\",{\"1\":{\"617\":1}}],[\"spring管理组件的容器\",{\"1\":{\"552\":1}}],[\"spring接管一切\",{\"1\":{\"617\":1}}],[\"spring核心功能\",{\"1\":{\"613\":1}}],[\"spring核心掌握总结\",{\"0\":{\"613\":1},\"1\":{\"542\":1}}],[\"spring家族和spring\",{\"1\":{\"613\":1}}],[\"spring配置文件\",{\"1\":{\"606\":1}}],[\"spring声明式事务对应事务管理器接口\",{\"1\":{\"604\":1}}],[\"spring声明式事务对应依赖\",{\"1\":{\"243\":1,\"604\":1}}],[\"spring会将这个类型的对象传给我们\",{\"1\":{\"592\":1}}],[\"spring会将目标方法抛出的异常对象从这里传给我们\",{\"1\":{\"589\":1}}],[\"spring会自动使用cglib技术实现代理\",{\"1\":{\"218\":1,\"594\":1}}],[\"spring就会将这个对象传入\",{\"1\":{\"589\":1}}],[\"springaop借用了aspectj中的aop注解\",{\"1\":{\"587\":1}}],[\"springaop内部帮助我们实现动态代理\",{\"1\":{\"585\":1}}],[\"springapplication\",{\"1\":{\"461\":1,\"652\":1,\"664\":3,\"673\":1,\"677\":1,\"680\":1}}],[\"springioc配置文件\",{\"1\":{\"562\":1}}],[\"springioc容器可以可以根据beandefinition对象反射创建多个bean对象实例\",{\"1\":{\"560\":1,\"565\":1}}],[\"springioc容器管理配置方式\",{\"1\":{\"552\":1}}],[\"springioc容器具体接口和实现类\",{\"1\":{\"552\":1}}],[\"springioc容器介绍\",{\"1\":{\"552\":1}}],[\"springioc容器接口\",{\"1\":{\"221\":1,\"552\":1}}],[\"springioc\",{\"1\":{\"552\":1}}],[\"spring具体的组件管理动作包含\",{\"1\":{\"551\":1}}],[\"spring充当组件管理角色\",{\"1\":{\"551\":1}}],[\"spring全家桶的其他框架都是以springframework框架为基础\",{\"1\":{\"547\":1}}],[\"spring框架理解\",{\"1\":{\"613\":1}}],[\"spring框架提供了多种配置方式\",{\"1\":{\"552\":1}}],[\"spring框架替代了程序员原有的new对象和对象属性赋值动作等\",{\"1\":{\"551\":1}}],[\"spring框架\",{\"1\":{\"547\":1}}],[\"spring框架中提供的\",{\"1\":{\"94\":1}}],[\"spring5🫙3\",{\"1\":{\"387\":1}}],[\"spring🫙3\",{\"1\":{\"387\":1}}],[\"springcloud\",{\"1\":{\"387\":1,\"544\":1}}],[\"springjunitconfig\",{\"1\":{\"242\":2,\"580\":2,\"588\":2,\"596\":1,\"606\":1,\"607\":2,\"612\":1}}],[\"springmvc都会帮我们处理\",{\"1\":{\"675\":1}}],[\"springmvc配置\",{\"0\":{\"676\":1},\"1\":{\"660\":1}}],[\"springmvc用于控制层实现前后端数据交互\",{\"1\":{\"647\":1}}],[\"springmvc相关\",{\"1\":{\"622\":1}}],[\"springmvc相关组件配置\",{\"1\":{\"626\":1}}],[\"springmvc相关组件\",{\"1\":{\"617\":1}}],[\"springmvc核心组件\",{\"1\":{\"620\":1}}],[\"springmvc管理表述层\",{\"1\":{\"617\":1}}],[\"springmvc框架负责控制层\",{\"1\":{\"617\":1}}],[\"springmvc整合\",{\"0\":{\"626\":1},\"1\":{\"615\":1}}],[\"springmvc\",{\"1\":{\"544\":1,\"545\":1,\"617\":1,\"625\":2,\"673\":1}}],[\"springmvc源码和contextloadlistener源码方式\",{\"1\":{\"226\":1,\"559\":1}}],[\"springmvc基础\",{\"1\":{\"32\":1}}],[\"spring采用后者\",{\"1\":{\"211\":1,\"584\":1}}],[\"springframework框架结构图\",{\"1\":{\"548\":1}}],[\"springframework主要功能模块\",{\"0\":{\"548\":1},\"1\":{\"542\":1}}],[\"springframework概念\",{\"0\":{\"547\":1},\"1\":{\"542\":1}}],[\"springframework介绍\",{\"0\":{\"546\":1},\"1\":{\"542\":1}}],[\"springframework实战指南\",{\"0\":{\"541\":1}}],[\"springframework<\",{\"1\":{\"211\":2,\"242\":2,\"244\":6,\"418\":10,\"431\":1,\"432\":1,\"452\":10,\"456\":3,\"557\":1,\"562\":2,\"564\":1,\"568\":2,\"575\":2,\"580\":1,\"582\":2,\"588\":2,\"606\":6,\"625\":7}}],[\"springframework\",{\"0\":{\"549\":1},\"1\":{\"97\":1,\"100\":1,\"224\":3,\"226\":1,\"228\":3,\"229\":3,\"231\":8,\"235\":3,\"236\":6,\"238\":2,\"243\":1,\"248\":4,\"387\":30,\"461\":6,\"542\":1,\"547\":1,\"555\":3,\"559\":1,\"562\":14,\"564\":8,\"566\":1,\"567\":2,\"568\":7,\"571\":9,\"572\":6,\"573\":2,\"588\":18,\"604\":1,\"609\":6,\"611\":4,\"612\":1,\"652\":7,\"655\":4,\"664\":6,\"668\":2,\"669\":2,\"670\":2,\"673\":6,\"675\":1,\"676\":7,\"677\":5,\"680\":3,\"681\":1,\"682\":1,\"684\":1}}],[\"spring事务管理器\",{\"0\":{\"604\":1},\"1\":{\"542\":1}}],[\"spring事务管理\",{\"1\":{\"97\":1}}],[\"spring提供了若干个子项目\",{\"1\":{\"60\":1}}],[\"spring发展到今天已经形成了一开发生态圈\",{\"1\":{\"60\":1}}],[\"spring\",{\"0\":{\"547\":1,\"550\":1,\"552\":1,\"553\":1,\"554\":1,\"555\":1,\"581\":1,\"585\":1,\"586\":1,\"587\":1,\"596\":1,\"597\":1,\"600\":1,\"701\":1,\"703\":1,\"704\":1},\"1\":{\"60\":2,\"66\":2,\"76\":4,\"78\":1,\"211\":1,\"215\":1,\"221\":2,\"223\":1,\"224\":2,\"228\":1,\"229\":1,\"230\":2,\"231\":6,\"235\":1,\"236\":4,\"237\":1,\"242\":1,\"243\":4,\"244\":2,\"387\":32,\"401\":2,\"429\":7,\"431\":3,\"445\":2,\"455\":6,\"456\":3,\"461\":4,\"481\":1,\"493\":1,\"537\":1,\"542\":13,\"544\":1,\"545\":1,\"547\":20,\"548\":2,\"549\":11,\"551\":3,\"552\":5,\"553\":2,\"555\":2,\"557\":8,\"558\":1,\"561\":3,\"562\":12,\"564\":10,\"566\":1,\"568\":6,\"570\":2,\"571\":3,\"572\":4,\"573\":1,\"575\":3,\"580\":1,\"582\":2,\"583\":1,\"584\":2,\"585\":1,\"588\":25,\"591\":1,\"596\":1,\"602\":1,\"604\":3,\"606\":2,\"613\":3,\"617\":1,\"623\":1,\"625\":21,\"628\":1,\"652\":3,\"662\":6,\"664\":4,\"665\":15,\"667\":2,\"668\":9,\"669\":6,\"670\":3,\"671\":8,\"674\":11,\"675\":3,\"677\":5,\"680\":4,\"681\":1}}],[\"springboot项目会自动配置一个\",{\"1\":{\"681\":1}}],[\"springboot项目运行的入口\",{\"1\":{\"664\":1}}],[\"springboot支持多环境配置让应用程序在不同的环境中使用不同的配置参数\",{\"1\":{\"671\":1}}],[\"springboot工程下\",{\"1\":{\"667\":1}}],[\"springbootconfiguration\",{\"1\":{\"665\":1}}],[\"springboot可以帮我们方便的管理项目依赖\",{\"1\":{\"664\":1}}],[\"springboot父工程依赖\",{\"1\":{\"664\":1}}],[\"springboot的主要目标是\",{\"1\":{\"662\":1}}],[\"springboot底层是spring\",{\"1\":{\"662\":1}}],[\"springboot3项目打包和运行\",{\"0\":{\"683\":1},\"1\":{\"660\":1}}],[\"springboot3整合情况下\",{\"1\":{\"677\":1}}],[\"springboot3整合mybatis\",{\"0\":{\"678\":1},\"1\":{\"660\":1}}],[\"springboot3整合druid数据源\",{\"0\":{\"677\":1},\"1\":{\"660\":1}}],[\"springboot3整合springmvc\",{\"0\":{\"672\":1},\"1\":{\"660\":1}}],[\"springboot3配置文件\",{\"0\":{\"666\":1},\"1\":{\"660\":1}}],[\"springboot3简介\",{\"0\":{\"662\":1},\"1\":{\"660\":1}}],[\"springboot3介绍\",{\"0\":{\"661\":1},\"1\":{\"660\":1}}],[\"springboot3实战\",{\"0\":{\"659\":1}}],[\"springboot作为项目基础架构\",{\"1\":{\"647\":1}}],[\"springboot版微头条实战\",{\"0\":{\"643\":1}}],[\"springboot下测试环境注解\",{\"1\":{\"461\":1}}],[\"springboottest\",{\"1\":{\"461\":1,\"655\":2}}],[\"springbootapplication添加到启动类上\",{\"1\":{\"665\":1}}],[\"springbootapplication注解的主要作用是简化spring\",{\"1\":{\"665\":1}}],[\"springbootapplication注解的功效\",{\"1\":{\"665\":1}}],[\"springbootapplication注解本身就是一个组合注解\",{\"1\":{\"665\":1}}],[\"springbootapplication注解包含了\",{\"1\":{\"665\":2}}],[\"springbootapplication注解包含以下三个注解的功能\",{\"1\":{\"664\":1}}],[\"springbootapplication注解起到以下几个主要作用\",{\"1\":{\"665\":1}}],[\"springbootapplication注解是spring\",{\"1\":{\"665\":1}}],[\"springbootapplication注解\",{\"1\":{\"664\":1,\"665\":1}}],[\"springbootapplication注解所在类的包及其子包中的组件\",{\"1\":{\"664\":1,\"665\":1}}],[\"springbootapplication是一个特殊的注解\",{\"1\":{\"664\":1}}],[\"springbootapplication\",{\"1\":{\"461\":1,\"652\":1,\"664\":2,\"665\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"springbootapplocation中\",{\"1\":{\"74\":1}}],[\"springboot应用打包插件\",{\"1\":{\"461\":1,\"652\":1,\"677\":1,\"684\":1}}],[\"springboot方式\",{\"1\":{\"68\":1}}],[\"springbootweb入门\",{\"0\":{\"61\":1}}],[\"springboot\",{\"1\":{\"32\":1,\"387\":1,\"544\":1,\"547\":1,\"662\":2,\"668\":1,\"669\":1}}],[\"springbott基础\",{\"1\":{\"32\":1}}],[\"sid\",{\"1\":{\"521\":1}}],[\"sidebar\",{\"1\":{\"1\":1}}],[\"since\",{\"1\":{\"480\":1,\"481\":1,\"508\":4}}],[\"singlelinkedlist\",{\"1\":{\"370\":9}}],[\"singlelinkedlistdemo\",{\"1\":{\"370\":1}}],[\"singleton\",{\"1\":{\"228\":1,\"232\":1,\"560\":2,\"565\":2,\"566\":1,\"573\":1}}],[\"simpleclient🫙0\",{\"1\":{\"387\":1}}],[\"simplemovielister\",{\"1\":{\"225\":2,\"558\":3}}],[\"simplename\",{\"1\":{\"213\":2}}],[\"simpledateformat\",{\"1\":{\"163\":5}}],[\"simpledateformat类易于国际化\",{\"1\":{\"163\":1}}],[\"simpledateformat类\",{\"0\":{\"163\":1}}],[\"simplepojo\",{\"1\":{\"68\":3}}],[\"simpleparam\",{\"1\":{\"68\":5}}],[\"signwith\",{\"1\":{\"92\":1,\"655\":1}}],[\"signaturealgorithm\",{\"1\":{\"92\":1,\"655\":1}}],[\"signature\",{\"1\":{\"92\":1,\"589\":5,\"592\":3,\"655\":1}}],[\"site\",{\"1\":{\"59\":1,\"404\":1,\"450\":2}}],[\"sizing\",{\"1\":{\"36\":1}}],[\"size=1048576\",{\"1\":{\"588\":1}}],[\"size\",{\"1\":{\"34\":1,\"170\":3,\"171\":1,\"177\":2,\"180\":1,\"370\":1,\"371\":3,\"677\":2}}],[\"s\",{\"1\":{\"17\":3,\"117\":1,\"166\":4,\"167\":1,\"170\":2,\"318\":2,\"320\":2,\"334\":4,\"338\":1,\"345\":2,\"347\":1,\"353\":1,\"354\":2,\"368\":2,\"406\":1,\"425\":4,\"426\":13,\"521\":2}}],[\"suv又可以分为实用型\",{\"1\":{\"651\":1}}],[\"suv可以分为大型\",{\"1\":{\"651\":1}}],[\"surefire\",{\"1\":{\"406\":1}}],[\"sug\",{\"1\":{\"355\":1,\"361\":1}}],[\"summary\",{\"1\":{\"426\":1}}],[\"summary>\",{\"1\":{\"34\":1}}],[\"sum++\",{\"1\":{\"366\":1}}],[\"sum+1\",{\"1\":{\"365\":1,\"366\":1}}],[\"sum=0\",{\"1\":{\"366\":1}}],[\"sum计算元素和\",{\"1\":{\"333\":1}}],[\"sum\",{\"1\":{\"311\":1,\"478\":2}}],[\"sudo\",{\"1\":{\"272\":1,\"285\":1,\"288\":4}}],[\"suspend\",{\"1\":{\"196\":1,\"207\":1}}],[\"suffix定义视图的后缀\",{\"1\":{\"674\":1}}],[\"suffixoverrides=\",{\"1\":{\"527\":1}}],[\"suffixoverrides属性指定要动态去掉的后缀\",{\"1\":{\"527\":1}}],[\"suffixoverrides属性\",{\"1\":{\"527\":1}}],[\"suffix属性指定要动态添加的后缀\",{\"1\":{\"527\":1}}],[\"suffix属性\",{\"1\":{\"527\":1}}],[\"suffix\",{\"1\":{\"166\":1,\"674\":1}}],[\"success\",{\"1\":{\"90\":2,\"91\":2,\"406\":1,\"426\":11,\"652\":3,\"655\":8,\"656\":2,\"657\":5}}],[\"subject\",{\"1\":{\"517\":4}}],[\"sub\",{\"0\":{\"323\":1},\"1\":{\"317\":4,\"323\":2,\"582\":3,\"588\":2,\"591\":1}}],[\"sublist\",{\"1\":{\"171\":1}}],[\"subtemplat\",{\"1\":{\"138\":2}}],[\"substring\",{\"1\":{\"40\":1,\"166\":2,\"167\":1}}],[\"submit\",{\"1\":{\"34\":1}}],[\"sub>\",{\"1\":{\"34\":1}}],[\"suppresswarnings\",{\"1\":{\"566\":1}}],[\"support🫙1\",{\"1\":{\"387\":1}}],[\"supportedsourceversion\",{\"1\":{\"566\":1}}],[\"supportedannotationtypes\",{\"1\":{\"566\":1}}],[\"supported\",{\"1\":{\"98\":1,\"249\":1,\"612\":1}}],[\"supports\",{\"1\":{\"98\":1,\"249\":1,\"612\":1}}],[\"support\",{\"1\":{\"97\":1,\"609\":3}}],[\"supplier<t>供给型接口\",{\"1\":{\"17\":1}}],[\"super只能有一个\",{\"1\":{\"136\":1}}],[\"super父类构造调用\",{\"1\":{\"136\":1}}],[\"super关键字用来访问父类内容\",{\"1\":{\"129\":1}}],[\"super关键字\",{\"0\":{\"129\":1}}],[\"super和this两种构造调用\",{\"1\":{\"128\":1}}],[\"super\",{\"1\":{\"93\":2,\"94\":3,\"130\":1,\"136\":1,\"155\":1,\"176\":3,\"187\":2,\"192\":3,\"197\":1,\"203\":3,\"329\":1,\"334\":2,\"471\":3}}],[\"sup>\",{\"1\":{\"34\":1}}],[\"sun\",{\"1\":{\"10\":1,\"78\":1,\"387\":3}}],[\"schedulemapper\",{\"1\":{\"641\":8}}],[\"scheduleserviceimpl\",{\"1\":{\"641\":1}}],[\"scheduleservice\",{\"1\":{\"641\":7}}],[\"schedulecontroller\",{\"1\":{\"641\":1}}],[\"schedule\",{\"1\":{\"634\":4,\"640\":3,\"641\":24}}],[\"schemalocation=\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"schema\",{\"1\":{\"224\":3,\"228\":3,\"229\":3,\"231\":6,\"236\":6,\"555\":3,\"562\":12,\"564\":6,\"568\":6,\"571\":6,\"572\":6,\"588\":9}}],[\"sconfig\",{\"1\":{\"521\":1}}],[\"score=\",{\"1\":{\"334\":1}}],[\"score=int\",{\"1\":{\"334\":2}}],[\"score<60\",{\"1\":{\"334\":1}}],[\"score>=60\",{\"1\":{\"334\":1}}],[\"score\",{\"1\":{\"124\":1,\"334\":1}}],[\"scores\",{\"1\":{\"124\":3}}],[\"scope属性\",{\"1\":{\"560\":2}}],[\"scope属性是可选的\",{\"1\":{\"410\":1,\"447\":1}}],[\"scope注解\",{\"1\":{\"237\":1}}],[\"scope作用域\",{\"1\":{\"237\":1,\"573\":1}}],[\"scopename\",{\"1\":{\"232\":2,\"565\":2}}],[\"scope\",{\"1\":{\"232\":4,\"411\":2,\"565\":4,\"573\":2,\"575\":2}}],[\"scope=\",{\"1\":{\"228\":1,\"560\":2}}],[\"scope值\",{\"1\":{\"59\":1}}],[\"scope>\",{\"1\":{\"59\":2,\"242\":2,\"244\":1,\"410\":1,\"416\":1,\"431\":1,\"432\":1,\"447\":1,\"580\":1,\"582\":1,\"606\":1,\"625\":1,\"652\":1}}],[\"scan标签指定注解范围使用\",{\"1\":{\"242\":1,\"579\":1}}],[\"scan标签指定注解范围\",{\"1\":{\"241\":1,\"578\":1}}],[\"scan标签实现注解扫描\",{\"1\":{\"235\":2,\"571\":1}}],[\"scan标签\",{\"1\":{\"235\":1,\"571\":1}}],[\"scan>\",{\"1\":{\"231\":2,\"564\":2}}],[\"scan\",{\"1\":{\"231\":3,\"564\":3,\"568\":1,\"571\":1,\"588\":1}}],[\"scanner\",{\"1\":{\"109\":7,\"154\":3,\"192\":4,\"203\":4,\"368\":6}}],[\"scale=1\",{\"1\":{\"34\":1,\"253\":1}}],[\"scaledicon\",{\"1\":{\"22\":3}}],[\"scaledimage\",{\"1\":{\"22\":2}}],[\"scale\",{\"1\":{\"22\":1}}],[\"screen\",{\"1\":{\"40\":1}}],[\"scream<\",{\"1\":{\"34\":1}}],[\"script>\",{\"1\":{\"37\":1,\"41\":2,\"42\":2,\"43\":3,\"44\":1,\"45\":2,\"253\":1}}],[\"script>标签之间\",{\"1\":{\"37\":1}}],[\"sc\",{\"1\":{\"11\":1}}],[\"safevarargs\",{\"1\":{\"566\":1}}],[\"safari\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"sayhello\",{\"1\":{\"478\":3,\"668\":1,\"669\":1}}],[\"saveschedule\",{\"1\":{\"641\":3}}],[\"saveorupdatebatch\",{\"1\":{\"471\":2}}],[\"saveorupdate\",{\"1\":{\"471\":2,\"485\":1}}],[\"savebatch\",{\"1\":{\"471\":2}}],[\"save\",{\"1\":{\"471\":1}}],[\"sampletest\",{\"1\":{\"461\":1}}],[\"sandy\",{\"1\":{\"461\":2}}],[\"salary>\",{\"1\":{\"525\":3,\"527\":1}}],[\"salary=\",{\"1\":{\"504\":1,\"505\":1,\"510\":1,\"526\":4}}],[\"salary=daily\",{\"1\":{\"334\":1}}],[\"salary=monthly\",{\"1\":{\"334\":1}}],[\"salary\",{\"1\":{\"220\":1,\"334\":8,\"493\":5,\"502\":1,\"503\":1,\"509\":1,\"510\":3,\"511\":1,\"512\":1,\"513\":4,\"525\":1,\"527\":1,\"528\":3,\"530\":1,\"625\":4,\"630\":1}}],[\"sa\",{\"1\":{\"11\":2,\"12\":1}}],[\"se\",{\"1\":{\"566\":3}}],[\"section\",{\"1\":{\"517\":5}}],[\"security用于安全认证和授权等等\",{\"1\":{\"665\":1}}],[\"security\",{\"1\":{\"387\":4,\"429\":1,\"547\":1,\"549\":1,\"652\":2}}],[\"semaphore\",{\"1\":{\"483\":1}}],[\"se工程\",{\"0\":{\"399\":1}}],[\"sex\",{\"1\":{\"354\":1,\"673\":5}}],[\"search\",{\"0\":{\"321\":1},\"1\":{\"321\":2}}],[\"sep指定分隔符\",{\"1\":{\"317\":1}}],[\"sep\",{\"1\":{\"317\":1}}],[\"separator属性\",{\"1\":{\"529\":1}}],[\"separator=\",{\"1\":{\"85\":1,\"529\":2}}],[\"separator\",{\"1\":{\"85\":1}}],[\"sequence\",{\"1\":{\"460\":1}}],[\"sequence关键字in也可以用not\",{\"1\":{\"305\":1}}],[\"seq\",{\"1\":{\"309\":1}}],[\"seo\",{\"1\":{\"250\":1}}],[\"serivalversionuid\",{\"1\":{\"187\":1}}],[\"serializable>\",{\"1\":{\"464\":2,\"466\":2,\"471\":2}}],[\"serializable\",{\"1\":{\"187\":3,\"188\":1,\"248\":1,\"464\":2,\"466\":2,\"471\":2,\"611\":1,\"653\":1}}],[\"serialversionuid\",{\"1\":{\"155\":1,\"653\":1}}],[\"servo\",{\"1\":{\"387\":2}}],[\"servo🫙0\",{\"1\":{\"387\":1}}],[\"servletcontext\",{\"1\":{\"221\":2,\"552\":1}}],[\"servletcomponentscan开启servletcomponentscan开启servlet组件支持\",{\"1\":{\"93\":1}}],[\"servletresponse\",{\"1\":{\"93\":3}}],[\"servletrequest\",{\"1\":{\"93\":3}}],[\"servletexception\",{\"1\":{\"93\":2}}],[\"servlet\",{\"1\":{\"93\":1,\"411\":1,\"447\":1,\"552\":2,\"621\":1,\"625\":5,\"652\":1,\"663\":1,\"674\":3,\"675\":1,\"676\":6,\"680\":1}}],[\"servlet程序需要依赖于tomcat才能运行\",{\"1\":{\"65\":1}}],[\"serviceimpl<headlinemapper\",{\"1\":{\"656\":1}}],[\"serviceimpl<usermapper\",{\"1\":{\"470\":1,\"655\":1}}],[\"servicejavaconfig\",{\"1\":{\"622\":1,\"623\":1,\"627\":2,\"629\":1}}],[\"service开头类的私有返回值int的无参数方法\",{\"1\":{\"590\":1}}],[\"service类型组件\",{\"1\":{\"564\":2}}],[\"service组件\",{\"1\":{\"564\":2}}],[\"service层\",{\"1\":{\"606\":1}}],[\"service层的方法自动添加事务\",{\"1\":{\"469\":1}}],[\"service层及dao层的实现类\",{\"1\":{\"73\":1}}],[\"service添加了批量方法\",{\"1\":{\"469\":1}}],[\"service<\",{\"1\":{\"432\":1,\"433\":2,\"434\":5,\"456\":3}}],[\"service=service\",{\"1\":{\"276\":1}}],[\"service等\",{\"1\":{\"231\":1,\"564\":1,\"571\":1}}],[\"services\",{\"1\":{\"226\":2,\"555\":2,\"559\":2,\"665\":1}}],[\"servicelocator\",{\"1\":{\"223\":2,\"557\":2}}],[\"service\",{\"0\":{\"432\":1,\"433\":1,\"434\":1},\"1\":{\"58\":2,\"71\":1,\"74\":1,\"97\":1,\"231\":4,\"241\":1,\"242\":1,\"247\":2,\"248\":4,\"276\":2,\"401\":2,\"429\":2,\"433\":1,\"434\":1,\"445\":2,\"456\":3,\"460\":2,\"468\":1,\"470\":1,\"552\":2,\"555\":2,\"562\":1,\"564\":7,\"566\":3,\"568\":2,\"575\":1,\"578\":1,\"579\":1,\"584\":1,\"590\":2,\"591\":1,\"594\":1,\"606\":2,\"607\":2,\"608\":1,\"609\":1,\"610\":2,\"611\":4,\"612\":2,\"620\":1,\"622\":1,\"627\":2,\"628\":1,\"630\":2,\"641\":5,\"655\":5,\"656\":3,\"657\":3,\"680\":2,\"682\":1}}],[\"servelt容器\",{\"1\":{\"65\":1}}],[\"servelt\",{\"1\":{\"59\":1}}],[\"server配置\",{\"1\":{\"652\":1}}],[\"server>\",{\"1\":{\"413\":1,\"425\":1}}],[\"serversocket\",{\"1\":{\"190\":1,\"191\":7,\"192\":2,\"201\":1,\"202\":7,\"203\":2}}],[\"server\",{\"1\":{\"53\":2,\"65\":1,\"67\":1,\"192\":3,\"203\":3,\"252\":1,\"253\":1,\"277\":2,\"283\":2,\"285\":1,\"423\":1,\"425\":1,\"515\":1,\"652\":1,\"668\":1,\"669\":1,\"674\":4,\"675\":2,\"680\":1}}],[\"serve\",{\"1\":{\"12\":1,\"49\":1}}],[\"sessionfactory\",{\"1\":{\"220\":2,\"493\":2}}],[\"session2\",{\"1\":{\"91\":1}}],[\"session1\",{\"1\":{\"91\":1}}],[\"session\",{\"0\":{\"91\":1},\"1\":{\"89\":1,\"91\":6,\"220\":4,\"228\":1,\"493\":4,\"505\":5,\"508\":1,\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"514\":11,\"518\":5,\"519\":1,\"535\":1,\"560\":1,\"565\":1,\"628\":2}}],[\"sendtoother\",{\"1\":{\"192\":4,\"203\":4}}],[\"send\",{\"1\":{\"45\":1,\"192\":7,\"203\":7,\"252\":1,\"253\":1,\"254\":1}}],[\"self必要参数\",{\"1\":{\"327\":1}}],[\"self允许单个项目有与其他项目不一样的对其方式\",{\"1\":{\"265\":1}}],[\"self控制子项自己在侧轴的排列方式\",{\"1\":{\"263\":1}}],[\"self\",{\"0\":{\"265\":1},\"1\":{\"34\":1,\"283\":1,\"327\":3,\"328\":8,\"329\":3,\"334\":42}}],[\"selectdetailmap\",{\"1\":{\"656\":4}}],[\"selectcustomerwithorderlistresultmap\",{\"1\":{\"519\":2}}],[\"selectcustomerwithorderlist\",{\"1\":{\"519\":4}}],[\"selectcount\",{\"1\":{\"466\":1,\"655\":1}}],[\"selectperson\",{\"1\":{\"515\":4}}],[\"selectpagemap\",{\"1\":{\"656\":3}}],[\"selectpagevo\",{\"1\":{\"472\":3}}],[\"selectpage\",{\"1\":{\"466\":1,\"472\":1}}],[\"selectkey>\",{\"1\":{\"512\":1}}],[\"selectkey\",{\"1\":{\"512\":6,\"515\":1}}],[\"select语句中可以不给字段设置别名\",{\"1\":{\"509\":1}}],[\"selectempnameandmaxsalary\",{\"1\":{\"510\":4}}],[\"selectempcount\",{\"1\":{\"508\":3}}],[\"selectemployeebyconditionbychoose\",{\"1\":{\"528\":2}}],[\"selectemployeebyconditionbytrim\",{\"1\":{\"527\":2}}],[\"selectemployeebycondition\",{\"1\":{\"525\":2}}],[\"selectemployeebyrm\",{\"1\":{\"513\":2}}],[\"selectemployeebyrmresultmap\",{\"1\":{\"513\":2}}],[\"selectemployee\",{\"1\":{\"220\":2,\"493\":3,\"502\":2,\"509\":2,\"513\":3}}],[\"select或者mapper\",{\"1\":{\"467\":1}}],[\"selectorderwithcustomerresultmap\",{\"1\":{\"518\":2}}],[\"selectorderwithcustomer\",{\"1\":{\"518\":4}}],[\"selectobjs\",{\"1\":{\"466\":1}}],[\"selectone\",{\"1\":{\"466\":1,\"655\":2}}],[\"selectmapspage\",{\"1\":{\"466\":1}}],[\"selectmaps\",{\"1\":{\"466\":1,\"476\":2}}],[\"selectblogdetails\",{\"1\":{\"517\":1}}],[\"selectbyprimarykey\",{\"1\":{\"539\":1}}],[\"selectbymap\",{\"1\":{\"466\":1}}],[\"selectbyidtest\",{\"1\":{\"514\":1}}],[\"selectbyid\",{\"1\":{\"466\":1,\"484\":2,\"514\":6,\"655\":1,\"657\":2}}],[\"selectbatchids\",{\"1\":{\"466\":1}}],[\"selectlist\",{\"1\":{\"461\":1,\"466\":1,\"476\":2,\"478\":3,\"481\":1}}],[\"selectalltest\",{\"1\":{\"514\":1}}],[\"selectall\",{\"1\":{\"461\":1,\"511\":4,\"514\":3}}],[\"select方法\",{\"0\":{\"466\":1},\"1\":{\"459\":1}}],[\"select标签\",{\"1\":{\"220\":1,\"493\":1,\"508\":1,\"515\":1}}],[\"select>\",{\"1\":{\"34\":1,\"82\":1,\"84\":1,\"220\":1,\"467\":1,\"472\":1,\"493\":1,\"502\":1,\"508\":1,\"509\":1,\"510\":1,\"511\":1,\"513\":3,\"514\":2,\"515\":1,\"517\":1,\"518\":1,\"519\":1,\"525\":1,\"527\":1,\"528\":1,\"630\":1,\"641\":1,\"656\":2,\"680\":1}}],[\"select\",{\"1\":{\"8\":1,\"11\":2,\"76\":2,\"81\":10,\"82\":1,\"84\":1,\"220\":1,\"467\":1,\"472\":1,\"476\":4,\"481\":1,\"493\":1,\"498\":2,\"502\":1,\"508\":1,\"509\":1,\"510\":3,\"511\":1,\"512\":3,\"513\":3,\"514\":2,\"515\":5,\"517\":1,\"518\":1,\"519\":1,\"525\":1,\"527\":1,\"528\":1,\"530\":1,\"562\":3,\"568\":1,\"575\":1,\"630\":1,\"641\":1,\"656\":2,\"677\":3,\"680\":1}}],[\"setversion\",{\"1\":{\"656\":1,\"657\":1}}],[\"setvisible\",{\"1\":{\"21\":1,\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"setflag\",{\"1\":{\"640\":1}}],[\"setjdbctemplate\",{\"1\":{\"562\":1}}],[\"setjmenubar\",{\"1\":{\"28\":2}}],[\"setgender\",{\"1\":{\"562\":2,\"568\":1,\"575\":1}}],[\"set>\",{\"1\":{\"526\":1}}],[\"set<map\",{\"1\":{\"510\":1}}],[\"set标签\",{\"0\":{\"526\":1},\"1\":{\"489\":1}}],[\"setenvironment\",{\"1\":{\"621\":1}}],[\"setempsalary\",{\"1\":{\"512\":1}}],[\"setempname\",{\"1\":{\"512\":1}}],[\"setemail\",{\"1\":{\"476\":1,\"477\":1,\"485\":1}}],[\"setexpiration\",{\"1\":{\"92\":1,\"655\":1}}],[\"sethid\",{\"1\":{\"656\":1}}],[\"setheader\",{\"1\":{\"252\":1}}],[\"sethappymachine\",{\"1\":{\"238\":2,\"573\":3}}],[\"setupdatetime\",{\"1\":{\"657\":2}}],[\"setuserpwd\",{\"1\":{\"655\":2}}],[\"setusername\",{\"1\":{\"236\":1,\"244\":1,\"514\":2,\"572\":1,\"575\":1,\"606\":1,\"607\":1,\"628\":2,\"668\":1,\"669\":1,\"670\":1,\"673\":2}}],[\"seturl\",{\"1\":{\"236\":1,\"244\":1,\"572\":1,\"575\":1,\"606\":1,\"607\":1,\"628\":2,\"668\":1,\"669\":1,\"670\":1}}],[\"setpublisher\",{\"1\":{\"657\":1}}],[\"setproperties\",{\"1\":{\"628\":1}}],[\"setproperty\",{\"1\":{\"628\":1}}],[\"setpriority\",{\"1\":{\"196\":1,\"207\":1}}],[\"setpageviews\",{\"1\":{\"656\":1,\"657\":1}}],[\"setparent\",{\"1\":{\"621\":1}}],[\"setpassword\",{\"1\":{\"236\":1,\"244\":1,\"514\":2,\"572\":1,\"575\":1,\"606\":1,\"607\":1,\"628\":2,\"668\":1,\"669\":1,\"670\":1,\"673\":2,\"680\":1,\"681\":1}}],[\"set2\",{\"1\":{\"177\":2}}],[\"set1\",{\"1\":{\"177\":2,\"178\":2}}],[\"setyear\",{\"1\":{\"176\":1}}],[\"setmessage\",{\"1\":{\"652\":4}}],[\"setmapunderscoretocamelcase\",{\"1\":{\"628\":1}}],[\"setmachinename\",{\"1\":{\"561\":2,\"573\":1}}],[\"setmoviename\",{\"1\":{\"558\":1}}],[\"setmoviefinder\",{\"1\":{\"558\":1}}],[\"setmonth\",{\"1\":{\"176\":1}}],[\"setminimumsize\",{\"1\":{\"23\":3}}],[\"setdata\",{\"1\":{\"640\":1,\"652\":2}}],[\"setdatasource\",{\"1\":{\"244\":1,\"575\":1,\"606\":1,\"607\":1,\"627\":1,\"628\":3}}],[\"setday\",{\"1\":{\"176\":1}}],[\"setdriverclassname\",{\"1\":{\"236\":1,\"244\":1,\"572\":1,\"575\":1,\"606\":1,\"607\":1,\"628\":2,\"668\":1,\"669\":1,\"670\":1}}],[\"setdefaultcloseoperation\",{\"1\":{\"21\":1,\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":11,\"29\":1}}],[\"set中的元素是如何存储的呢\",{\"1\":{\"172\":1}}],[\"set中常用的方法都是collection下定义的\",{\"1\":{\"169\":1}}],[\"set存储的元素是无序的\",{\"1\":{\"172\":1}}],[\"set的主要实现类\",{\"0\":{\"172\":1}}],[\"set接口\",{\"1\":{\"169\":1}}],[\"setcreatetime\",{\"1\":{\"657\":1}}],[\"setcode\",{\"1\":{\"640\":1,\"652\":4}}],[\"setconfiguration\",{\"1\":{\"628\":1}}],[\"setconfiglocation\",{\"1\":{\"621\":1,\"628\":2}}],[\"setconfiglocations\",{\"1\":{\"226\":1,\"559\":1}}],[\"setclasses\",{\"1\":{\"562\":2,\"568\":1,\"575\":1}}],[\"setclaims\",{\"1\":{\"92\":1}}],[\"setcharat\",{\"1\":{\"167\":2}}],[\"setradius\",{\"1\":{\"130\":1}}],[\"setresizable\",{\"1\":{\"21\":2,\"23\":3}}],[\"setid\",{\"1\":{\"562\":2,\"568\":1,\"575\":1,\"680\":1,\"681\":1}}],[\"setint\",{\"1\":{\"515\":1}}],[\"setinfo\",{\"1\":{\"130\":2}}],[\"seticon\",{\"1\":{\"25\":1}}],[\"seticonimage\",{\"1\":{\"23\":1}}],[\"setname\",{\"1\":{\"127\":1,\"135\":2,\"176\":2,\"196\":1,\"207\":1,\"316\":1,\"485\":1,\"562\":2,\"567\":1,\"568\":1,\"575\":1}}],[\"set方法\",{\"1\":{\"79\":1,\"240\":1}}],[\"setaccount\",{\"1\":{\"680\":1,\"681\":1}}],[\"setautomappingbehavior\",{\"1\":{\"628\":1}}],[\"setautocommit\",{\"1\":{\"5\":1,\"602\":1}}],[\"seta\",{\"1\":{\"197\":6}}],[\"setage\",{\"1\":{\"127\":1,\"135\":2,\"176\":2,\"476\":1,\"477\":1,\"484\":2,\"562\":2,\"568\":1,\"575\":1,\"673\":2}}],[\"setattribute\",{\"1\":{\"91\":1}}],[\"setalwaysontop\",{\"1\":{\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"settypealiasespackage\",{\"1\":{\"628\":1}}],[\"setter方法上\",{\"1\":{\"566\":2}}],[\"setter方法\",{\"1\":{\"176\":2,\"225\":3,\"558\":3}}],[\"setter+\",{\"1\":{\"79\":1}}],[\"setter\",{\"1\":{\"79\":2,\"135\":1,\"221\":1,\"328\":1,\"493\":1,\"553\":1,\"558\":2}}],[\"setting配置\",{\"1\":{\"680\":1}}],[\"setting属性\",{\"1\":{\"521\":1}}],[\"settings>\",{\"1\":{\"496\":1,\"509\":1,\"513\":1,\"514\":1,\"628\":2}}],[\"settings设置项\",{\"1\":{\"496\":1}}],[\"settings\",{\"1\":{\"395\":2,\"396\":2,\"400\":1,\"425\":1,\"426\":1,\"440\":4,\"444\":1,\"496\":1,\"628\":3,\"669\":1}}],[\"setting\",{\"1\":{\"56\":2}}],[\"settimeout\",{\"1\":{\"40\":1}}],[\"settitle\",{\"1\":{\"21\":1,\"23\":3,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"settooltiptext\",{\"1\":{\"25\":1}}],[\"setsex\",{\"1\":{\"673\":2}}],[\"setsubject\",{\"1\":{\"655\":1}}],[\"setsoldierservice\",{\"1\":{\"566\":1}}],[\"setstudentservice\",{\"1\":{\"562\":1}}],[\"setstudentdao\",{\"1\":{\"562\":1}}],[\"setstring\",{\"1\":{\"11\":1}}],[\"setsigningkey\",{\"1\":{\"92\":1,\"655\":2}}],[\"setsize\",{\"1\":{\"23\":4,\"24\":1,\"25\":1,\"26\":3,\"27\":1,\"28\":3,\"29\":1}}],[\"setbasepackage\",{\"1\":{\"628\":3}}],[\"setbackground\",{\"1\":{\"21\":1}}],[\"setbirthday\",{\"1\":{\"176\":2}}],[\"setbounds\",{\"1\":{\"21\":1,\"25\":2,\"26\":3,\"27\":1,\"28\":3,\"29\":3}}],[\"setlogimpl\",{\"1\":{\"628\":1}}],[\"setlocation\",{\"1\":{\"23\":2,\"26\":1}}],[\"setlocationrelativeto\",{\"1\":{\"21\":1,\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"setlnterval\",{\"1\":{\"40\":1}}],[\"setlayout\",{\"1\":{\"21\":1,\"23\":3,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1}}],[\"set\",{\"1\":{\"12\":1,\"64\":1,\"81\":1,\"164\":1,\"169\":1,\"171\":2,\"176\":14,\"177\":6,\"178\":1,\"197\":5,\"286\":6,\"316\":7,\"334\":5,\"412\":3,\"449\":1,\"465\":1,\"476\":1,\"477\":4,\"479\":5,\"481\":1,\"483\":1,\"501\":1,\"504\":1,\"505\":1,\"514\":1,\"526\":3,\"529\":1,\"552\":1,\"606\":2,\"636\":1,\"641\":1,\"651\":12,\"668\":1,\"669\":1}}],[\"setxxx\",{\"1\":{\"8\":1,\"513\":1,\"566\":1}}],[\"svg\",{\"1\":{\"1\":1}}],[\"store\",{\"1\":{\"395\":1,\"440\":1}}],[\"stop\",{\"1\":{\"196\":1,\"207\":1,\"317\":1,\"333\":1}}],[\"step\",{\"1\":{\"306\":1}}],[\"stereotype\",{\"1\":{\"231\":2,\"248\":1,\"564\":2,\"566\":1,\"567\":1,\"588\":1,\"611\":1,\"655\":1,\"668\":1,\"669\":1,\"670\":1,\"673\":1,\"676\":1}}],[\"studb\",{\"1\":{\"562\":3,\"568\":2,\"575\":2,\"606\":1}}],[\"studnet\",{\"1\":{\"169\":1}}],[\"studentcontroller\",{\"1\":{\"562\":7,\"568\":5,\"575\":5}}],[\"studentlist\",{\"1\":{\"562\":10,\"568\":7,\"575\":7}}],[\"students\",{\"1\":{\"521\":1,\"562\":6,\"568\":3,\"575\":3,\"606\":2}}],[\"studentserviceimpl\",{\"1\":{\"562\":2,\"568\":1,\"575\":1}}],[\"studentservice\",{\"1\":{\"247\":2,\"248\":1,\"562\":12,\"568\":5,\"575\":5,\"606\":4,\"607\":4,\"609\":1,\"610\":2,\"611\":1,\"612\":7}}],[\"studentdaoimpl\",{\"1\":{\"562\":2,\"568\":1,\"575\":1}}],[\"studentdao\",{\"1\":{\"247\":10,\"248\":5,\"562\":12,\"568\":5,\"575\":5,\"606\":5,\"607\":4,\"609\":4,\"610\":10,\"611\":5,\"612\":6}}],[\"student\",{\"1\":{\"11\":1,\"12\":1,\"169\":1,\"187\":4,\"334\":4,\"521\":1,\"562\":11,\"568\":3,\"575\":3}}],[\"stu\",{\"1\":{\"169\":2,\"187\":2,\"562\":7}}],[\"stundent\",{\"1\":{\"169\":1}}],[\"stdoutimpl\",{\"1\":{\"80\":1,\"480\":1}}],[\"stdout\",{\"1\":{\"80\":1,\"480\":1,\"496\":1,\"625\":3}}],[\"style>\",{\"1\":{\"36\":1,\"253\":1}}],[\"style=\",{\"1\":{\"34\":6,\"334\":2}}],[\"stylesheet\",{\"1\":{\"34\":1}}],[\"strsrc\",{\"1\":{\"652\":2}}],[\"structure\",{\"1\":{\"400\":1,\"651\":3}}],[\"strnew\",{\"1\":{\"317\":1}}],[\"strng\",{\"1\":{\"214\":1}}],[\"strip\",{\"1\":{\"317\":2}}],[\"strict\",{\"1\":{\"317\":3}}],[\"strinfbuffer\",{\"1\":{\"167\":4}}],[\"string=title\",{\"1\":{\"334\":1}}],[\"string表示要被查找替换的原始字符串\",{\"1\":{\"323\":1}}],[\"stringbuilder\",{\"0\":{\"168\":1}}],[\"stringbuffer\",{\"1\":{\"167\":1,\"188\":3}}],[\"stringbuffer代表可变的字符序列\",{\"1\":{\"167\":1}}],[\"stringbuffer类\",{\"0\":{\"167\":1},\"1\":{\"131\":1}}],[\"string是final的\",{\"1\":{\"165\":1}}],[\"string是引用数据类型\",{\"1\":{\"113\":1}}],[\"string代表不可变的字符序列\",{\"1\":{\"165\":1}}],[\"string类型主键\",{\"1\":{\"480\":1}}],[\"string类\",{\"0\":{\"165\":1}}],[\"string就是object的子类\",{\"1\":{\"137\":1}}],[\"stringutils\",{\"1\":{\"93\":1,\"95\":1,\"476\":2,\"478\":2,\"655\":3,\"656\":1,\"657\":2}}],[\"stringify\",{\"1\":{\"40\":1}}],[\"string字符串格式化\",{\"0\":{\"298\":1}}],[\"string字符串\",{\"1\":{\"40\":1}}],[\"string\",{\"1\":{\"7\":1,\"8\":1,\"11\":14,\"12\":10,\"17\":5,\"22\":1,\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1,\"38\":2,\"40\":1,\"61\":1,\"68\":14,\"69\":1,\"81\":1,\"92\":1,\"93\":4,\"95\":4,\"108\":1,\"109\":1,\"112\":1,\"114\":1,\"119\":1,\"124\":7,\"127\":3,\"130\":10,\"135\":4,\"138\":1,\"145\":2,\"146\":2,\"147\":3,\"149\":1,\"150\":1,\"151\":2,\"154\":1,\"155\":3,\"160\":1,\"162\":1,\"163\":3,\"164\":1,\"165\":9,\"166\":20,\"167\":6,\"169\":9,\"170\":8,\"176\":13,\"177\":2,\"181\":2,\"182\":2,\"183\":2,\"184\":1,\"185\":3,\"186\":4,\"187\":10,\"188\":4,\"189\":2,\"191\":4,\"192\":7,\"194\":1,\"196\":2,\"197\":2,\"200\":2,\"202\":4,\"203\":7,\"205\":1,\"207\":2,\"213\":3,\"214\":1,\"220\":1,\"226\":1,\"235\":1,\"236\":4,\"237\":4,\"239\":1,\"244\":4,\"317\":2,\"320\":5,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"334\":5,\"366\":1,\"368\":1,\"370\":6,\"371\":5,\"461\":3,\"467\":2,\"476\":1,\"478\":3,\"480\":9,\"481\":4,\"493\":2,\"498\":2,\"501\":2,\"508\":2,\"510\":1,\"512\":2,\"514\":2,\"515\":1,\"517\":6,\"555\":1,\"558\":5,\"559\":1,\"561\":3,\"562\":17,\"567\":3,\"568\":11,\"572\":4,\"573\":7,\"574\":1,\"575\":15,\"589\":4,\"590\":6,\"592\":1,\"606\":7,\"607\":4,\"608\":1,\"621\":1,\"623\":2,\"625\":1,\"628\":8,\"629\":2,\"640\":1,\"652\":12,\"653\":3,\"655\":11,\"656\":1,\"657\":4,\"664\":2,\"668\":14,\"669\":14,\"670\":14,\"673\":10,\"675\":3,\"677\":2,\"680\":8}}],[\"str表示unicode字符\",{\"1\":{\"317\":1}}],[\"stretch\",{\"1\":{\"260\":1,\"261\":1}}],[\"stream\",{\"1\":{\"180\":1,\"190\":1,\"201\":1,\"283\":1}}],[\"strat从0开始\",{\"1\":{\"166\":1}}],[\"strat\",{\"1\":{\"166\":1}}],[\"str7\",{\"1\":{\"165\":2}}],[\"str6\",{\"1\":{\"165\":4}}],[\"str5\",{\"1\":{\"165\":4,\"169\":1}}],[\"str4\",{\"1\":{\"165\":4,\"169\":2}}],[\"str3\",{\"1\":{\"165\":3,\"169\":1}}],[\"str2\",{\"1\":{\"165\":2,\"169\":2}}],[\"str1\",{\"1\":{\"165\":5,\"169\":2,\"318\":4}}],[\"str\",{\"1\":{\"17\":8,\"28\":3,\"119\":2,\"166\":1,\"167\":4,\"169\":3,\"170\":2,\"181\":1,\"182\":2,\"183\":2,\"186\":2,\"191\":2,\"192\":5,\"202\":2,\"203\":5,\"295\":2,\"317\":23,\"320\":2,\"325\":1,\"327\":2,\"333\":1,\"334\":1,\"361\":1}}],[\"stmt\",{\"1\":{\"7\":1,\"11\":3,\"12\":3}}],[\"stack\",{\"1\":{\"371\":4}}],[\"stack<heronode>\",{\"1\":{\"371\":2}}],[\"stack栈\",{\"1\":{\"371\":1}}],[\"staitic\",{\"1\":{\"141\":1}}],[\"stat\",{\"1\":{\"677\":1}}],[\"statistics🫙0\",{\"1\":{\"387\":1}}],[\"staticlocations\",{\"1\":{\"675\":2}}],[\"static目录下\",{\"1\":{\"674\":1}}],[\"static<t>\",{\"1\":{\"652\":1}}],[\"static查看所有连接选项\",{\"1\":{\"338\":1}}],[\"static可以查看所有编译选项\",{\"1\":{\"338\":1}}],[\"static的使用\",{\"1\":{\"130\":1}}],[\"static的属性\",{\"1\":{\"130\":1}}],[\"static修饰属性\",{\"1\":{\"130\":1}}],[\"static关键字\",{\"0\":{\"130\":1}}],[\"static\",{\"1\":{\"11\":2,\"12\":2,\"23\":7,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1,\"108\":1,\"109\":1,\"130\":11,\"132\":1,\"135\":1,\"138\":2,\"142\":1,\"143\":3,\"144\":3,\"145\":2,\"146\":2,\"147\":1,\"149\":1,\"150\":1,\"151\":2,\"154\":1,\"155\":3,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"170\":1,\"176\":2,\"177\":2,\"185\":1,\"186\":2,\"187\":5,\"188\":1,\"189\":1,\"191\":2,\"192\":4,\"194\":1,\"197\":1,\"200\":1,\"202\":2,\"203\":4,\"205\":1,\"222\":2,\"223\":1,\"239\":1,\"338\":1,\"366\":1,\"368\":1,\"370\":1,\"401\":1,\"445\":1,\"461\":1,\"478\":2,\"557\":3,\"574\":1,\"640\":2,\"652\":5,\"653\":1,\"664\":1,\"673\":1,\"674\":2,\"675\":6,\"677\":1,\"680\":1}}],[\"statustext\",{\"1\":{\"253\":1}}],[\"status=1请求大小有限制\",{\"1\":{\"63\":1}}],[\"status\",{\"1\":{\"45\":1,\"253\":3,\"277\":1,\"334\":1}}],[\"statements\",{\"1\":{\"677\":1}}],[\"statementtype=\",{\"1\":{\"515\":3}}],[\"statementtype\",{\"1\":{\"515\":2}}],[\"statement\",{\"0\":{\"6\":1},\"1\":{\"3\":1,\"5\":1,\"11\":1,\"12\":1,\"327\":1,\"329\":1,\"515\":4,\"677\":1}}],[\"stareindex\",{\"1\":{\"167\":1}}],[\"started\",{\"1\":{\"662\":2}}],[\"starter目前最新版本是1\",{\"1\":{\"677\":1}}],[\"starters\",{\"1\":{\"665\":1}}],[\"starter也提供了一致的依赖项版本管理\",{\"1\":{\"665\":1}}],[\"starter的组织结构使得应用程序的不同模块可以进行分离和解耦\",{\"1\":{\"665\":1}}],[\"starter使得从零开始构建一个完整的spring\",{\"1\":{\"665\":1}}],[\"starter遵循\",{\"1\":{\"665\":1}}],[\"starter可以自动配置spring\",{\"1\":{\"665\":1}}],[\"starter在应用程序启动时自动配置所需的组件和功能\",{\"1\":{\"665\":1}}],[\"starter通过捆绑和管理一组相关的依赖项\",{\"1\":{\"665\":1}}],[\"starter包含了一组相关的依赖项\",{\"1\":{\"665\":1}}],[\"starter🫙2\",{\"1\":{\"387\":2}}],[\"starter<\",{\"1\":{\"78\":1,\"461\":3,\"652\":2,\"677\":1,\"680\":2}}],[\"starter\",{\"1\":{\"66\":1,\"100\":1,\"387\":13,\"461\":5,\"652\":5,\"664\":4,\"665\":7,\"673\":3,\"677\":4,\"680\":3,\"681\":1,\"682\":1}}],[\"startpage\",{\"1\":{\"535\":1,\"641\":1}}],[\"startpoint\",{\"1\":{\"166\":3}}],[\"start=0\",{\"1\":{\"356\":1}}],[\"start=\",{\"1\":{\"334\":1}}],[\"startindex\",{\"1\":{\"167\":1}}],[\"startswith\",{\"1\":{\"166\":1,\"317\":2}}],[\"start\",{\"1\":{\"5\":1,\"40\":1,\"97\":1,\"138\":2,\"167\":1,\"185\":2,\"192\":3,\"194\":2,\"196\":1,\"203\":3,\"205\":2,\"207\":1,\"212\":1,\"213\":1,\"258\":1,\"260\":1,\"261\":1,\"306\":1,\"317\":6,\"320\":1,\"333\":1,\"334\":2}}],[\"star\",{\"1\":{\"0\":1}}],[\"sticky\",{\"1\":{\"0\":1}}],[\"禁用了如下功能\",{\"1\":{\"1\":1}}],[\"禁用\",{\"1\":{\"1\":1}}],[\"禁止转载\",{\"1\":{\"0\":1}}],[\"44\",{\"1\":{\"651\":2}}],[\"48\",{\"1\":{\"651\":2}}],[\"480\",{\"1\":{\"23\":7,\"24\":1,\"25\":1}}],[\"42\",{\"1\":{\"651\":4}}],[\"463\",{\"1\":{\"425\":1}}],[\"47+08\",{\"1\":{\"406\":1}}],[\"4小时快速入门总结而成\",{\"1\":{\"268\":1}}],[\"45\",{\"1\":{\"177\":1}}],[\"456\",{\"1\":{\"170\":1,\"177\":2}}],[\"43\",{\"1\":{\"176\":2,\"609\":1,\"651\":6}}],[\"41位\",{\"1\":{\"480\":1}}],[\"41\",{\"1\":{\"163\":3,\"651\":2}}],[\"4字节\",{\"1\":{\"112\":2}}],[\"4xx客户端错误\",{\"1\":{\"64\":1}}],[\"401\",{\"1\":{\"253\":1}}],[\"403\",{\"1\":{\"253\":1,\"426\":1}}],[\"404\",{\"1\":{\"253\":1,\"425\":1,\"687\":1}}],[\"404资源不存在\",{\"1\":{\"64\":1}}],[\"40\",{\"1\":{\"29\":1,\"651\":4,\"656\":5}}],[\"4000\",{\"1\":{\"609\":1}}],[\"400\",{\"1\":{\"21\":1}}],[\"4\",{\"0\":{\"240\":1,\"241\":1,\"242\":1,\"396\":1,\"401\":1,\"406\":1,\"411\":1,\"424\":1,\"445\":1,\"450\":1,\"452\":1,\"453\":1,\"473\":1,\"474\":1,\"475\":1,\"476\":1,\"477\":1,\"486\":1,\"487\":1,\"503\":1,\"510\":1,\"514\":1,\"520\":1,\"521\":1,\"522\":1,\"524\":1,\"525\":1,\"526\":1,\"527\":2,\"528\":1,\"529\":1,\"530\":1,\"555\":1,\"556\":1,\"557\":1,\"558\":1,\"559\":1,\"560\":2,\"561\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":2,\"568\":1,\"569\":2,\"570\":2,\"571\":2,\"572\":2,\"573\":3,\"574\":2,\"575\":2,\"576\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"585\":1,\"590\":1,\"609\":1,\"622\":1,\"628\":1,\"640\":1,\"641\":1,\"642\":1,\"655\":1,\"656\":1,\"657\":1,\"665\":1,\"670\":1,\"676\":1,\"682\":1},\"1\":{\"1\":1,\"11\":1,\"12\":1,\"22\":1,\"45\":1,\"116\":1,\"121\":1,\"122\":1,\"124\":2,\"126\":1,\"132\":1,\"139\":1,\"163\":4,\"170\":1,\"176\":4,\"177\":1,\"183\":1,\"184\":1,\"187\":1,\"191\":1,\"196\":1,\"202\":1,\"207\":1,\"220\":2,\"252\":1,\"253\":3,\"254\":1,\"286\":1,\"305\":3,\"306\":1,\"307\":1,\"310\":2,\"312\":2,\"315\":1,\"316\":7,\"317\":1,\"334\":5,\"351\":1,\"366\":1,\"370\":1,\"371\":1,\"375\":2,\"379\":1,\"380\":1,\"387\":12,\"398\":1,\"406\":2,\"425\":4,\"431\":3,\"432\":3,\"433\":3,\"434\":3,\"436\":4,\"442\":1,\"456\":12,\"459\":7,\"460\":1,\"461\":5,\"478\":1,\"489\":14,\"493\":2,\"542\":39,\"551\":1,\"552\":1,\"562\":1,\"568\":1,\"575\":1,\"584\":1,\"588\":2,\"589\":1,\"590\":1,\"615\":5,\"625\":3,\"626\":1,\"627\":1,\"628\":1,\"634\":1,\"641\":1,\"644\":3,\"651\":8,\"652\":2,\"655\":3,\"656\":2,\"657\":1,\"660\":4,\"673\":3,\"677\":3}}],[\">0\",{\"1\":{\"656\":1}}],[\">system\",{\"1\":{\"478\":1}}],[\">service\",{\"1\":{\"74\":1}}],[\">settings\",{\"1\":{\"57\":1}}],[\">f\",{\"1\":{\"416\":2,\"448\":2}}],[\">float\",{\"1\":{\"114\":1}}],[\">x\",{\"1\":{\"416\":4,\"448\":4}}],[\">emp\",{\"1\":{\"528\":2}}],[\">e\",{\"1\":{\"416\":2,\"448\":2}}],[\">c\",{\"1\":{\"416\":1,\"448\":1}}],[\">b\",{\"1\":{\"415\":1,\"416\":1,\"448\":1}}],[\">build\",{\"1\":{\"57\":2}}],[\">project\",{\"1\":{\"400\":1}}],[\">压缩\",{\"1\":{\"365\":1}}],[\">json对象\",{\"1\":{\"355\":1}}],[\">jvm\",{\"1\":{\"106\":1}}],[\">ua\",{\"1\":{\"353\":1}}],[\">查看网址\",{\"1\":{\"353\":1}}],[\">刷新\",{\"1\":{\"353\":1}}],[\">网络\",{\"1\":{\"353\":1}}],[\">$53\",{\"1\":{\"334\":1}}],[\">百度<\",{\"1\":{\"334\":1}}],[\">g\",{\"1\":{\"287\":1}}],[\">准备<\",{\"1\":{\"196\":1,\"207\":1}}],[\">死亡\",{\"1\":{\"196\":2,\"207\":2}}],[\">运行\",{\"1\":{\"196\":2,\"207\":2}}],[\">就绪<\",{\"1\":{\"196\":1,\"207\":1}}],[\">字符数组\",{\"1\":{\"169\":1}}],[\">字符串\",{\"1\":{\"169\":3}}],[\">字节数组\",{\"1\":{\"169\":1}}],[\">字节码\",{\"1\":{\"106\":1}}],[\">基本数据类型\",{\"1\":{\"169\":1}}],[\">日期\",{\"1\":{\"163\":1}}],[\">文本\",{\"1\":{\"163\":1}}],[\">a\",{\"1\":{\"415\":1}}],[\">arr\",{\"1\":{\"126\":2}}],[\">acolumn\",{\"1\":{\"81\":1}}],[\">>\",{\"1\":{\"297\":1}}],[\">>>\",{\"1\":{\"116\":1,\"652\":1}}],[\">>右移\",{\"1\":{\"116\":1}}],[\">d\",{\"1\":{\"416\":1,\"448\":1}}],[\">double\",{\"1\":{\"114\":1}}],[\">dao\",{\"1\":{\"74\":1}}],[\">long\",{\"1\":{\"114\":1}}],[\">int\",{\"1\":{\"114\":1}}],[\">机器码\",{\"1\":{\"106\":1}}],[\">编译器\",{\"1\":{\"106\":1}}],[\">阿里巴巴fastjson\",{\"1\":{\"93\":1,\"95\":1}}],[\">maven\",{\"1\":{\"57\":1}}],[\">经判定\",{\"1\":{\"43\":1}}],[\">中年人<\",{\"1\":{\"43\":2}}],[\">年轻人<\",{\"1\":{\"43\":3}}],[\">链接2<\",{\"1\":{\"43\":1}}],[\">链接1<\",{\"1\":{\"43\":1}}],[\">=\",{\"1\":{\"38\":1,\"253\":1,\"371\":2}}],[\"><\",{\"1\":{\"34\":1,\"42\":1,\"45\":1,\"224\":2,\"253\":1}}],[\">硕士<\",{\"1\":{\"34\":1}}],[\">本科<\",{\"1\":{\"34\":1}}],[\">大专<\",{\"1\":{\"34\":1}}],[\">女<\",{\"1\":{\"34\":1}}],[\">男<\",{\"1\":{\"34\":1}}],[\">who<\",{\"1\":{\"34\":1}}],[\">又一个段落\",{\"1\":{\"34\":1}}],[\">又一个标题<\",{\"1\":{\"34\":1}}],[\">段落\",{\"1\":{\"34\":1}}],[\">标题<\",{\"1\":{\"34\":1}}],[\">这是一块红色<\",{\"1\":{\"334\":1}}],[\">这是一张图片\",{\"1\":{\"34\":1}}],[\">这是学习文档的连接<\",{\"1\":{\"34\":1}}],[\">一级标题<\",{\"1\":{\"34\":1}}],[\">右边\",{\"1\":{\"17\":2}}],[\">左边\",{\"1\":{\"17\":2}}],[\">\",{\"1\":{\"0\":1,\"1\":1,\"16\":2,\"17\":11,\"25\":1,\"26\":1,\"34\":28,\"35\":2,\"40\":1,\"41\":2,\"42\":2,\"43\":7,\"59\":1,\"78\":1,\"82\":4,\"84\":3,\"85\":2,\"86\":2,\"126\":2,\"135\":1,\"150\":3,\"177\":2,\"178\":1,\"194\":1,\"195\":1,\"205\":1,\"206\":1,\"211\":1,\"219\":25,\"220\":30,\"222\":1,\"223\":4,\"224\":32,\"225\":6,\"227\":2,\"228\":4,\"229\":6,\"231\":23,\"235\":1,\"236\":12,\"237\":1,\"242\":2,\"244\":6,\"253\":3,\"316\":1,\"334\":3,\"338\":1,\"370\":1,\"371\":1,\"387\":3,\"395\":4,\"400\":1,\"404\":1,\"409\":5,\"410\":7,\"413\":6,\"415\":1,\"416\":6,\"418\":12,\"425\":1,\"431\":10,\"432\":7,\"433\":4,\"434\":4,\"440\":4,\"444\":1,\"447\":12,\"448\":4,\"450\":1,\"452\":12,\"453\":1,\"456\":23,\"461\":8,\"467\":5,\"472\":3,\"476\":3,\"477\":1,\"478\":10,\"493\":30,\"496\":2,\"502\":1,\"503\":1,\"504\":1,\"505\":1,\"508\":4,\"509\":12,\"510\":3,\"511\":2,\"512\":6,\"513\":20,\"514\":38,\"515\":4,\"517\":21,\"518\":19,\"519\":18,\"521\":11,\"525\":9,\"526\":7,\"527\":12,\"528\":3,\"529\":6,\"530\":4,\"532\":1,\"535\":2,\"555\":12,\"557\":11,\"558\":36,\"560\":9,\"561\":7,\"562\":39,\"564\":20,\"567\":2,\"568\":18,\"571\":7,\"572\":12,\"573\":1,\"575\":4,\"580\":1,\"582\":3,\"583\":1,\"588\":8,\"596\":25,\"606\":6,\"621\":1,\"623\":4,\"625\":26,\"628\":24,\"629\":4,\"630\":6,\"641\":8,\"652\":5,\"655\":2,\"656\":5,\"664\":2,\"673\":3,\"677\":7,\"680\":8,\"684\":1}}],[\"<when\",{\"1\":{\"528\":2}}],[\"<where>元素只会在子元素有内容的情况下才插入where字句\",{\"1\":{\"84\":1}}],[\"<where>\",{\"1\":{\"84\":2,\"525\":1}}],[\"<v>\",{\"1\":{\"471\":3}}],[\"<version>$\",{\"1\":{\"410\":1,\"431\":4,\"447\":1,\"456\":4,\"625\":20}}],[\"<version>5\",{\"1\":{\"220\":1,\"242\":2,\"244\":1,\"493\":1,\"535\":1,\"557\":1,\"564\":1,\"580\":1,\"582\":1,\"606\":1}}],[\"<version>8\",{\"1\":{\"220\":1,\"244\":1,\"461\":1,\"493\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"<version>3\",{\"1\":{\"220\":1,\"404\":1,\"431\":1,\"450\":1,\"456\":1,\"461\":2,\"493\":1,\"652\":2,\"664\":1,\"673\":1,\"677\":1,\"680\":2}}],[\"<version>6\",{\"1\":{\"211\":2,\"242\":2,\"244\":6,\"418\":5,\"557\":1,\"562\":2,\"564\":1,\"568\":2,\"575\":2,\"580\":1,\"582\":2,\"588\":2,\"606\":6}}],[\"<version>2\",{\"1\":{\"92\":1,\"233\":1,\"244\":1,\"413\":1,\"415\":1,\"448\":1,\"566\":1,\"568\":1,\"575\":1,\"582\":1,\"606\":1,\"655\":1}}],[\"<version>0\",{\"1\":{\"92\":1,\"655\":1}}],[\"<version>4\",{\"1\":{\"59\":1,\"452\":5}}],[\"<version>1\",{\"1\":{\"58\":1,\"59\":2,\"78\":1,\"244\":1,\"400\":1,\"409\":1,\"410\":1,\"412\":1,\"415\":1,\"416\":1,\"418\":3,\"419\":1,\"431\":1,\"432\":1,\"433\":2,\"434\":2,\"444\":1,\"447\":2,\"449\":1,\"452\":3,\"453\":1,\"456\":4,\"461\":3,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":1,\"652\":3,\"673\":1,\"677\":3,\"680\":2}}],[\"<name>nexus\",{\"1\":{\"425\":1,\"426\":1,\"427\":1}}],[\"<name>aliyun\",{\"1\":{\"56\":1,\"395\":1,\"440\":1}}],[\"<root\",{\"1\":{\"625\":1}}],[\"<router\",{\"1\":{\"52\":2}}],[\"<result\",{\"1\":{\"513\":2,\"517\":7,\"518\":2,\"519\":2,\"521\":2}}],[\"<resultmap\",{\"1\":{\"513\":1,\"517\":1,\"518\":1,\"519\":1,\"521\":1}}],[\"<resource>\",{\"1\":{\"413\":1}}],[\"<resources>\",{\"1\":{\"413\":1}}],[\"<releases>\",{\"1\":{\"427\":1}}],[\"<repository>\",{\"1\":{\"427\":1}}],[\"<repositories>\",{\"1\":{\"427\":1}}],[\"<finalname>定义打包名称<\",{\"1\":{\"413\":1}}],[\"<foreach\",{\"1\":{\"85\":1,\"529\":2}}],[\"<form>\",{\"1\":{\"34\":2}}],[\"<form\",{\"1\":{\"34\":2}}],[\"<jar文件名>\",{\"1\":{\"686\":1}}],[\"<jakarta\",{\"1\":{\"625\":3}}],[\"<jackson\",{\"1\":{\"431\":1,\"456\":1,\"625\":1}}],[\"<junit\",{\"1\":{\"410\":1,\"431\":1,\"447\":1}}],[\"<jdk>17<\",{\"1\":{\"395\":1,\"440\":1}}],[\"<>\",{\"1\":{\"321\":1}}],[\"<charset>utf\",{\"1\":{\"625\":1}}],[\"<choose>\",{\"1\":{\"528\":1}}],[\"<collection\",{\"1\":{\"517\":3,\"519\":1,\"521\":1}}],[\"<commons\",{\"1\":{\"431\":1,\"456\":1}}],[\"<configuration\",{\"1\":{\"625\":1}}],[\"<configuration>\",{\"1\":{\"220\":1,\"413\":2,\"493\":1,\"514\":1,\"628\":1}}],[\"<context\",{\"1\":{\"231\":6,\"235\":4,\"236\":1,\"242\":2,\"562\":2,\"564\":5,\"567\":1,\"568\":2,\"571\":4,\"572\":1,\"579\":2,\"588\":1}}],[\"<constructor>\",{\"1\":{\"517\":1}}],[\"<constructor\",{\"1\":{\"224\":11,\"558\":10}}],[\"<class\",{\"1\":{\"316\":1}}],[\"<<\",{\"1\":{\"297\":1}}],[\"<<左移几位就相当于乘以2的几次方\",{\"1\":{\"116\":1}}],[\"<encoder>\",{\"1\":{\"625\":1}}],[\"<encoding>utf\",{\"1\":{\"413\":1}}],[\"<enabled>true<\",{\"1\":{\"427\":2}}],[\"<environment\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"<environments\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"<exclusion>\",{\"1\":{\"59\":1,\"416\":1}}],[\"<exclusions>\",{\"1\":{\"59\":1,\"416\":1}}],[\"<groupid>log4j<\",{\"1\":{\"410\":1,\"447\":1}}],[\"<groupid>mysql<\",{\"1\":{\"220\":1,\"244\":1,\"461\":1,\"493\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"<groupid>jakarta\",{\"1\":{\"233\":1,\"244\":1,\"566\":1,\"568\":1,\"575\":1,\"582\":1,\"606\":1,\"625\":3}}],[\"<groupid>javax\",{\"1\":{\"92\":1,\"655\":1}}],[\"<groupid>junit<\",{\"1\":{\"59\":2,\"410\":1,\"447\":1}}],[\"<groupid>io\",{\"1\":{\"92\":1,\"655\":1}}],[\"<groupid>commons\",{\"1\":{\"416\":1,\"431\":1,\"432\":1,\"456\":2}}],[\"<groupid>com\",{\"1\":{\"78\":1,\"244\":1,\"387\":1,\"400\":1,\"409\":1,\"412\":1,\"415\":2,\"416\":1,\"418\":3,\"419\":1,\"431\":2,\"432\":2,\"433\":2,\"434\":2,\"444\":1,\"447\":1,\"448\":1,\"449\":1,\"452\":3,\"453\":1,\"456\":6,\"461\":3,\"535\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":4,\"652\":3,\"673\":1,\"677\":2,\"680\":1}}],[\"<groupid>ch\",{\"1\":{\"59\":2,\"625\":1}}],[\"<groupid>org\",{\"1\":{\"58\":1,\"79\":1,\"100\":1,\"211\":2,\"220\":2,\"242\":4,\"244\":7,\"387\":2,\"404\":1,\"413\":2,\"418\":10,\"431\":3,\"432\":2,\"450\":1,\"452\":10,\"456\":6,\"461\":6,\"493\":2,\"557\":2,\"562\":2,\"564\":2,\"568\":2,\"575\":2,\"580\":2,\"582\":3,\"588\":2,\"606\":7,\"625\":12,\"652\":7,\"664\":2,\"673\":2,\"677\":5,\"680\":5,\"681\":1,\"682\":1,\"684\":1}}],[\"<update\",{\"1\":{\"504\":1,\"505\":1,\"514\":1,\"515\":1,\"526\":1,\"529\":1,\"641\":1}}],[\"<username>admin<\",{\"1\":{\"425\":1}}],[\"<uriencoding>utf\",{\"1\":{\"413\":1}}],[\"<url>http\",{\"1\":{\"56\":1,\"395\":1,\"425\":1,\"426\":1,\"427\":1,\"440\":1}}],[\"<u>这样可以加下划线<\",{\"1\":{\"334\":1}}],[\"<ul>\",{\"1\":{\"34\":1,\"334\":1}}],[\"<mysql\",{\"1\":{\"625\":1}}],[\"<mybatis\",{\"1\":{\"625\":2}}],[\"<module>order\",{\"1\":{\"434\":1}}],[\"<module>user\",{\"1\":{\"434\":1}}],[\"<module>common\",{\"1\":{\"434\":1}}],[\"<module>child\",{\"1\":{\"419\":2,\"453\":2}}],[\"<modules>\",{\"1\":{\"419\":1,\"434\":1,\"453\":1}}],[\"<modelversion>4\",{\"1\":{\"409\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"447\":1,\"456\":4,\"461\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"<maven\",{\"1\":{\"395\":3,\"431\":2,\"432\":2,\"433\":2,\"434\":2,\"440\":3,\"456\":8,\"461\":2,\"625\":2,\"652\":2,\"673\":2,\"677\":2}}],[\"<mappers>\",{\"1\":{\"220\":1,\"493\":1,\"514\":1,\"518\":1,\"519\":1,\"532\":1}}],[\"<mapper\",{\"1\":{\"82\":1,\"220\":2,\"467\":1,\"493\":2,\"514\":2,\"518\":1,\"519\":2,\"628\":3,\"630\":1,\"641\":1,\"680\":1}}],[\"<mirrorof>central<\",{\"1\":{\"56\":1,\"395\":1,\"425\":1,\"440\":1}}],[\"<mirror>\",{\"1\":{\"56\":1,\"395\":1,\"425\":1,\"440\":1}}],[\"<meta\",{\"1\":{\"34\":2,\"253\":2}}],[\"<35\",{\"1\":{\"43\":1}}],[\"<60\",{\"1\":{\"43\":1}}],[\"<druid\",{\"1\":{\"625\":1}}],[\"<distributionmanagement>\",{\"1\":{\"426\":1}}],[\"<directory>src\",{\"1\":{\"413\":1}}],[\"<div\",{\"1\":{\"42\":1,\"43\":5,\"253\":1,\"334\":1}}],[\"<datasource\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"<delete\",{\"1\":{\"85\":1,\"514\":1,\"515\":1,\"641\":1}}],[\"<del>删除字<\",{\"1\":{\"34\":1}}],[\"<dependencymanagement>\",{\"1\":{\"418\":1,\"431\":1,\"452\":1,\"456\":1}}],[\"<dependency>\",{\"1\":{\"59\":3,\"78\":1,\"79\":1,\"92\":2,\"100\":1,\"211\":2,\"220\":3,\"233\":1,\"242\":4,\"244\":10,\"387\":3,\"410\":2,\"412\":1,\"415\":2,\"416\":1,\"418\":10,\"431\":4,\"432\":4,\"433\":1,\"434\":1,\"447\":2,\"448\":1,\"449\":1,\"452\":10,\"456\":9,\"461\":7,\"493\":3,\"535\":1,\"557\":2,\"562\":4,\"564\":2,\"566\":1,\"568\":5,\"575\":5,\"580\":2,\"582\":4,\"588\":2,\"606\":10,\"625\":20,\"652\":8,\"655\":2,\"664\":1,\"673\":1,\"677\":5,\"680\":6,\"681\":1,\"682\":1}}],[\"<dependencies>\",{\"1\":{\"59\":1,\"220\":1,\"244\":1,\"410\":2,\"418\":2,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"447\":2,\"452\":2,\"456\":5,\"461\":1,\"493\":1,\"557\":1,\"562\":1,\"564\":1,\"568\":1,\"575\":1,\"582\":1,\"606\":1,\"625\":1,\"652\":1,\"664\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"<details>\",{\"1\":{\"34\":1}}],[\"<otherwise>1=1<\",{\"1\":{\"528\":1}}],[\"<optional>true<\",{\"1\":{\"415\":1}}],[\"<option\",{\"1\":{\"34\":3}}],[\"<ol>\",{\"1\":{\"34\":1,\"334\":1}}],[\"<logger\",{\"1\":{\"625\":1}}],[\"<logback\",{\"1\":{\"625\":1}}],[\"<lombok\",{\"1\":{\"625\":1}}],[\"<localrepository>d\",{\"1\":{\"395\":1,\"425\":1,\"440\":1}}],[\"<localrepository>\",{\"1\":{\"395\":1,\"440\":1}}],[\"<label><input\",{\"1\":{\"34\":2}}],[\"<li>我是无序的3<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<li>我是无序的2<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<li>我是无序的1<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<li>我是第三项<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<li>我是第二项<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<li>我是第一项<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<link\",{\"1\":{\"34\":1}}],[\"<t>\",{\"1\":{\"652\":4}}],[\"<typealias\",{\"1\":{\"508\":2}}],[\"<typealiases>\",{\"1\":{\"508\":2,\"514\":1,\"628\":2}}],[\"<target>1\",{\"1\":{\"413\":1}}],[\"<table\",{\"1\":{\"34\":1,\"334\":1}}],[\"<tbody>\",{\"1\":{\"334\":1}}],[\"<thead>\",{\"1\":{\"334\":1}}],[\"<th>第三行<\",{\"1\":{\"34\":1}}],[\"<th>第二行<\",{\"1\":{\"34\":1}}],[\"<th>第一行<\",{\"1\":{\"34\":1}}],[\"<title>这是一个网页标题<\",{\"1\":{\"334\":1}}],[\"<title>ajax\",{\"1\":{\"253\":1}}],[\"<title>html学习<\",{\"1\":{\"34\":1}}],[\"<trim\",{\"1\":{\"527\":1}}],[\"<transactionmanager\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"<tr>\",{\"1\":{\"34\":4,\"334\":4}}],[\"<textarea\",{\"1\":{\"34\":1}}],[\"<textarea>\",{\"1\":{\"34\":1}}],[\"<td>头部3<\",{\"1\":{\"334\":1}}],[\"<td>头部2<\",{\"1\":{\"334\":1}}],[\"<td>头部1<\",{\"1\":{\"334\":1}}],[\"<td>888<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<td>777<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<td>666<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<td>555<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<td>444<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<td>333<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<td>222<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<td>111<\",{\"1\":{\"34\":1,\"334\":1}}],[\"<shiro\",{\"1\":{\"456\":1}}],[\"<spring\",{\"1\":{\"431\":1,\"456\":1,\"625\":1}}],[\"<span\",{\"1\":{\"43\":7}}],[\"<span>没有任何语义的标签\",{\"1\":{\"34\":1}}],[\"<snapshots>\",{\"1\":{\"427\":1}}],[\"<snapshotrepository>\",{\"1\":{\"426\":1}}],[\"<source>1\",{\"1\":{\"413\":1}}],[\"<sql\",{\"1\":{\"86\":1,\"530\":1}}],[\"<sql>定义可重用的sql片段\",{\"1\":{\"86\":1}}],[\"<set>\",{\"1\":{\"526\":1}}],[\"<set>动态地在行首插入set关键字\",{\"1\":{\"84\":1}}],[\"<setting\",{\"1\":{\"496\":1,\"509\":1,\"513\":1,\"514\":2,\"521\":1,\"628\":6}}],[\"<settings>\",{\"1\":{\"496\":1,\"509\":1,\"513\":1,\"514\":1,\"628\":2}}],[\"<server>\",{\"1\":{\"425\":1}}],[\"<server>tomcat7<\",{\"1\":{\"413\":1}}],[\"<selectkey\",{\"1\":{\"512\":1}}],[\"<select\",{\"1\":{\"34\":1,\"82\":1,\"84\":1,\"220\":1,\"467\":1,\"472\":1,\"493\":1,\"502\":1,\"508\":1,\"509\":1,\"510\":1,\"511\":1,\"513\":3,\"514\":2,\"515\":1,\"517\":1,\"518\":1,\"519\":1,\"525\":1,\"527\":1,\"528\":1,\"630\":1,\"641\":1,\"656\":2,\"680\":1}}],[\"<select>\",{\"1\":{\"34\":1}}],[\"<scope>provided<\",{\"1\":{\"625\":1}}],[\"<scope>compile<\",{\"1\":{\"416\":1}}],[\"<scope>runtime<\",{\"1\":{\"410\":1,\"447\":1}}],[\"<scope>test<\",{\"1\":{\"59\":1,\"242\":2,\"244\":1,\"431\":1,\"432\":1,\"580\":1,\"582\":1,\"606\":1,\"652\":1}}],[\"<script\",{\"1\":{\"42\":1,\"45\":1}}],[\"<script>标签不能自闭合\",{\"1\":{\"37\":1}}],[\"<script>\",{\"1\":{\"37\":1,\"41\":2,\"42\":1,\"43\":3,\"44\":1,\"45\":1,\"253\":1}}],[\"<style>\",{\"1\":{\"36\":1,\"253\":1}}],[\"<summary>未来世界中心\",{\"1\":{\"34\":1}}],[\"<sup>上标字<\",{\"1\":{\"34\":1}}],[\"<sub>下标字<\",{\"1\":{\"34\":1}}],[\"<idarg\",{\"1\":{\"517\":1}}],[\"<id\",{\"1\":{\"513\":1,\"517\":4,\"518\":2,\"519\":2,\"521\":2}}],[\"<id>nexus\",{\"1\":{\"425\":2,\"426\":1,\"427\":1}}],[\"<id>jdk\",{\"1\":{\"395\":1,\"440\":1}}],[\"<id>alimaven<\",{\"1\":{\"56\":1,\"395\":1,\"440\":1}}],[\"<i>斜体<\",{\"1\":{\"334\":1}}],[\"<if\",{\"1\":{\"84\":2,\"525\":2,\"526\":2,\"527\":4,\"656\":2}}],[\"<if>用于判断条件是否成立\",{\"1\":{\"84\":1}}],[\"<if>\",{\"1\":{\"84\":1}}],[\"<insert\",{\"1\":{\"503\":1,\"512\":2,\"514\":1,\"515\":1,\"641\":1}}],[\"<ins>插入字<\",{\"1\":{\"34\":1}}],[\"<include>\",{\"1\":{\"413\":1}}],[\"<include>通过属性refid\",{\"1\":{\"86\":1}}],[\"<includes>\",{\"1\":{\"413\":1}}],[\"<include\",{\"1\":{\"86\":1,\"530\":1}}],[\"<input\",{\"1\":{\"34\":3,\"40\":1,\"41\":2,\"42\":1,\"43\":2}}],[\"<input>\",{\"1\":{\"34\":1}}],[\"<img>\",{\"1\":{\"40\":1}}],[\"<img\",{\"1\":{\"34\":1,\"334\":1}}],[\"<pattern>\",{\"1\":{\"625\":1}}],[\"<path>\",{\"1\":{\"413\":1}}],[\"<pagehelper\",{\"1\":{\"625\":1}}],[\"<package\",{\"1\":{\"508\":1,\"514\":1,\"532\":1,\"628\":5}}],[\"<packaging>pom<\",{\"1\":{\"418\":1,\"419\":1,\"431\":1,\"452\":1,\"453\":1,\"456\":1}}],[\"<packaging>jar<\",{\"1\":{\"432\":1,\"456\":1}}],[\"<packaging>jar\",{\"1\":{\"409\":1,\"447\":1}}],[\"<packaging>war<\",{\"1\":{\"400\":1,\"433\":1,\"434\":1,\"444\":1,\"456\":2,\"625\":1}}],[\"<password>atguigu<\",{\"1\":{\"425\":1}}],[\"<parent>\",{\"1\":{\"418\":1,\"432\":1,\"433\":1,\"434\":1,\"452\":1,\"456\":3,\"461\":1,\"652\":1,\"664\":1,\"673\":1,\"677\":1,\"680\":1}}],[\"<port>8090<\",{\"1\":{\"413\":1}}],[\"<plugin\",{\"1\":{\"535\":1,\"628\":2}}],[\"<plugin>\",{\"1\":{\"404\":1,\"413\":2,\"431\":1,\"450\":1,\"456\":1,\"461\":1,\"652\":1,\"677\":1,\"684\":1}}],[\"<plugins>\",{\"1\":{\"404\":1,\"413\":1,\"431\":1,\"450\":1,\"456\":1,\"461\":1,\"535\":1,\"628\":2,\"652\":1,\"677\":1,\"684\":1}}],[\"<project>\",{\"1\":{\"419\":1,\"453\":1}}],[\"<project\",{\"1\":{\"410\":2,\"431\":2,\"432\":2,\"433\":2,\"434\":2,\"447\":2,\"456\":8,\"461\":2,\"625\":2,\"652\":1,\"673\":2,\"677\":2}}],[\"<properties>\",{\"1\":{\"395\":1,\"410\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"440\":1,\"447\":1,\"456\":4,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"<property\",{\"1\":{\"220\":4,\"225\":2,\"231\":2,\"236\":4,\"240\":1,\"493\":4,\"514\":4,\"535\":1,\"558\":2,\"560\":2,\"561\":1,\"562\":13,\"568\":5,\"572\":4,\"577\":1,\"628\":2}}],[\"<profile>\",{\"1\":{\"395\":1,\"440\":1,\"686\":2}}],[\"<p>这样<span\",{\"1\":{\"334\":1}}],[\"<p>这是一个文本段落这是一个文本段落\",{\"1\":{\"334\":1}}],[\"<p><cite>the\",{\"1\":{\"34\":1}}],[\"<p><abbr\",{\"1\":{\"34\":1}}],[\"<p>epcot\",{\"1\":{\"34\":1}}],[\"<p>第一段落<\",{\"1\":{\"34\":1}}],[\"<p\",{\"1\":{\"34\":2,\"334\":1}}],[\"<build>\",{\"1\":{\"404\":1,\"413\":3,\"431\":1,\"450\":1,\"456\":1,\"461\":1,\"652\":1,\"677\":1,\"684\":1}}],[\"<button>点击发送请求<\",{\"1\":{\"253\":1}}],[\"<b>加粗字体<\",{\"1\":{\"334\":1}}],[\"<b>粗体<\",{\"1\":{\"34\":1}}],[\"<bean标签包含基本信息\",{\"1\":{\"240\":1,\"577\":1}}],[\"<beans>\",{\"1\":{\"224\":3,\"227\":1,\"237\":1,\"558\":4,\"560\":1,\"573\":1}}],[\"<beans\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":2,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":2,\"588\":1}}],[\"<bean\",{\"1\":{\"219\":2,\"222\":1,\"223\":2,\"224\":9,\"225\":2,\"227\":2,\"228\":1,\"229\":1,\"231\":1,\"236\":2,\"237\":1,\"242\":1,\"555\":5,\"557\":5,\"558\":10,\"560\":5,\"561\":1,\"562\":7,\"565\":1,\"568\":2,\"572\":2,\"573\":1,\"579\":1,\"596\":2}}],[\"<br><br>\",{\"1\":{\"43\":1}}],[\"<br\",{\"1\":{\"34\":2}}],[\"<body>\",{\"1\":{\"43\":3,\"253\":1,\"334\":1}}],[\"<body>第二段落<\",{\"1\":{\"34\":1}}],[\"<body\",{\"1\":{\"34\":1}}],[\"<appender\",{\"1\":{\"625\":2}}],[\"<association\",{\"1\":{\"517\":2,\"518\":1}}],[\"<activebydefault>true<\",{\"1\":{\"395\":1,\"440\":1}}],[\"<activation>\",{\"1\":{\"395\":1,\"440\":1}}],[\"<aop\",{\"1\":{\"219\":8,\"588\":2,\"596\":8}}],[\"<artifactid>hibernate\",{\"1\":{\"625\":2}}],[\"<artifactid>shiro\",{\"1\":{\"456\":2}}],[\"<artifactid>springboot\",{\"1\":{\"461\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"<artifactid>spring\",{\"1\":{\"100\":1,\"211\":2,\"242\":2,\"244\":6,\"387\":3,\"418\":10,\"431\":1,\"432\":1,\"452\":10,\"456\":3,\"461\":5,\"557\":1,\"562\":2,\"564\":1,\"568\":2,\"575\":2,\"580\":1,\"582\":2,\"588\":2,\"606\":6,\"625\":7,\"652\":6,\"664\":2,\"673\":2,\"677\":4,\"680\":3,\"681\":1,\"682\":1,\"684\":1}}],[\"<artifactid>order\",{\"1\":{\"434\":1,\"456\":1}}],[\"<artifactid>user\",{\"1\":{\"433\":1,\"456\":1}}],[\"<artifactid>common\",{\"1\":{\"432\":1,\"433\":1,\"434\":1,\"456\":1}}],[\"<artifactid>commons\",{\"1\":{\"416\":1,\"431\":1,\"432\":1,\"456\":2}}],[\"<artifactid>part04\",{\"1\":{\"625\":1}}],[\"<artifactid>parent\",{\"1\":{\"419\":1,\"453\":1}}],[\"<artifactid>pagehelper<\",{\"1\":{\"535\":1,\"625\":1}}],[\"<artifactid>pro04\",{\"1\":{\"418\":1,\"452\":1}}],[\"<artifactid>pro03\",{\"1\":{\"418\":2,\"452\":2}}],[\"<artifactid>pro01\",{\"1\":{\"416\":1}}],[\"<artifactid>project<\",{\"1\":{\"409\":1,\"447\":1}}],[\"<artifactid>tomcat7\",{\"1\":{\"413\":1}}],[\"<artifactid>micro\",{\"1\":{\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4}}],[\"<artifactid>maven\",{\"1\":{\"400\":1,\"404\":1,\"413\":1,\"431\":1,\"444\":1,\"450\":1,\"456\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"461\":1,\"625\":1,\"652\":1,\"680\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"220\":1,\"493\":1,\"625\":1}}],[\"<artifactid>mysql\",{\"1\":{\"220\":1,\"244\":1,\"461\":1,\"493\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"<artifactid>log4j<\",{\"1\":{\"410\":1,\"447\":1}}],[\"<artifactid>logback\",{\"1\":{\"59\":2,\"625\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"79\":1,\"461\":1,\"625\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"<artifactid>druid<\",{\"1\":{\"244\":1,\"412\":1,\"415\":1,\"449\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":1}}],[\"<artifactid>druid\",{\"1\":{\"78\":1,\"461\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"<artifactid>junit\",{\"1\":{\"220\":1,\"242\":2,\"244\":1,\"431\":1,\"432\":1,\"493\":1,\"557\":1,\"564\":1,\"580\":1,\"582\":1,\"606\":1}}],[\"<artifactid>junit<\",{\"1\":{\"59\":2,\"410\":1,\"447\":1}}],[\"<artifactid>jackson\",{\"1\":{\"415\":1,\"431\":1,\"432\":1,\"448\":1,\"456\":2,\"625\":1}}],[\"<artifactid>jakarta\",{\"1\":{\"233\":1,\"244\":1,\"566\":1,\"568\":1,\"575\":1,\"582\":1,\"606\":1,\"625\":3}}],[\"<artifactid>jaxb\",{\"1\":{\"92\":1,\"655\":1}}],[\"<artifactid>java\",{\"1\":{\"58\":1}}],[\"<artifactid>jjwt<\",{\"1\":{\"92\":1,\"655\":1}}],[\"<address><\",{\"1\":{\"34\":1}}],[\"<a\",{\"1\":{\"34\":1,\"43\":2,\"334\":1}}],[\"<hibernate\",{\"1\":{\"625\":1}}],[\"<h6>我是最小号六级标题<\",{\"1\":{\"334\":1}}],[\"<h2>我是二级标题<\",{\"1\":{\"334\":1}}],[\"<h2\",{\"1\":{\"34\":1}}],[\"<hr\",{\"1\":{\"34\":2}}],[\"<h1>我是一级标题<\",{\"1\":{\"334\":1}}],[\"<h1>sss<\",{\"1\":{\"35\":1}}],[\"<h1\",{\"1\":{\"34\":2,\"35\":2}}],[\"<head>\",{\"1\":{\"34\":1,\"253\":1,\"334\":1}}],[\"<html>\",{\"1\":{\"252\":1,\"334\":1}}],[\"<html\",{\"1\":{\"34\":1,\"253\":1}}],[\"<==\",{\"1\":{\"481\":1}}],[\"<=35\",{\"1\":{\"43\":1}}],[\"<=\",{\"1\":{\"11\":1,\"38\":1,\"138\":2}}],[\"<\",{\"1\":{\"0\":1,\"1\":1,\"34\":30,\"35\":2,\"36\":1,\"37\":1,\"38\":1,\"41\":2,\"42\":2,\"43\":11,\"44\":1,\"45\":1,\"56\":2,\"59\":8,\"78\":2,\"79\":1,\"82\":4,\"84\":4,\"85\":2,\"86\":1,\"92\":2,\"100\":1,\"121\":1,\"126\":2,\"135\":1,\"160\":1,\"170\":1,\"211\":3,\"219\":18,\"220\":30,\"223\":3,\"224\":21,\"225\":3,\"227\":1,\"228\":3,\"229\":3,\"231\":17,\"233\":1,\"236\":5,\"237\":1,\"242\":6,\"244\":17,\"252\":1,\"253\":7,\"334\":15,\"367\":1,\"387\":6,\"395\":9,\"400\":1,\"404\":4,\"409\":5,\"410\":13,\"412\":1,\"413\":18,\"415\":3,\"416\":6,\"418\":26,\"419\":2,\"425\":4,\"426\":3,\"427\":5,\"431\":24,\"432\":14,\"433\":8,\"434\":9,\"440\":9,\"444\":1,\"447\":18,\"448\":2,\"449\":1,\"450\":4,\"452\":26,\"453\":3,\"456\":52,\"461\":21,\"467\":5,\"472\":1,\"493\":30,\"496\":2,\"502\":1,\"503\":1,\"504\":1,\"505\":1,\"508\":3,\"509\":12,\"510\":3,\"511\":2,\"512\":6,\"513\":17,\"514\":33,\"515\":1,\"517\":9,\"518\":15,\"519\":13,\"521\":6,\"525\":10,\"526\":8,\"527\":12,\"528\":6,\"529\":6,\"530\":3,\"532\":1,\"535\":3,\"555\":10,\"557\":10,\"558\":23,\"560\":6,\"561\":4,\"562\":28,\"564\":20,\"566\":1,\"567\":1,\"568\":17,\"571\":5,\"572\":5,\"573\":1,\"575\":10,\"580\":3,\"582\":8,\"588\":7,\"596\":18,\"606\":17,\"625\":67,\"628\":21,\"630\":6,\"641\":8,\"652\":20,\"655\":2,\"656\":5,\"664\":5,\"673\":7,\"677\":18,\"680\":16,\"681\":1,\"682\":1,\"684\":4}}],[\"features\",{\"1\":{\"669\":1}}],[\"feign\",{\"1\":{\"387\":5}}],[\"f1加拿大大奖赛正赛\",{\"1\":{\"651\":1}}],[\"fp\",{\"1\":{\"356\":3}}],[\"ffmpeg\",{\"1\":{\"337\":1}}],[\"ftp\",{\"1\":{\"189\":1,\"200\":1}}],[\"fw\",{\"1\":{\"186\":5,\"188\":6}}],[\"fully\",{\"1\":{\"570\":1}}],[\"full\",{\"1\":{\"521\":3,\"628\":3,\"680\":1}}],[\"fulltimeemployee\",{\"1\":{\"334\":3}}],[\"fu当中没有methodzi方法\",{\"1\":{\"145\":1}}],[\"fu\",{\"1\":{\"145\":6,\"146\":3,\"197\":4}}],[\"functionalinterface\",{\"1\":{\"566\":1}}],[\"function<\",{\"1\":{\"471\":3}}],[\"function<t\",{\"1\":{\"17\":1}}],[\"functionbody\",{\"1\":{\"325\":1}}],[\"functionname=function\",{\"1\":{\"39\":1}}],[\"functionname\",{\"1\":{\"39\":1,\"325\":1}}],[\"function\",{\"1\":{\"39\":1,\"40\":2,\"41\":1,\"43\":1,\"45\":2,\"253\":2,\"478\":1}}],[\"functionijmenu\",{\"1\":{\"28\":13}}],[\"flex属性定义子项目分配剩余空间\",{\"1\":{\"264\":1}}],[\"flex属性\",{\"0\":{\"264\":1}}],[\"flex子项目占的份数\",{\"1\":{\"263\":1}}],[\"flex布局子项常见属性\",{\"0\":{\"263\":1}}],[\"flex布局默认是不换行的\",{\"1\":{\"259\":1}}],[\"flex布局父项常见属性\",{\"0\":{\"256\":1}}],[\"flex\",{\"0\":{\"257\":1,\"259\":1,\"262\":1},\"1\":{\"255\":2,\"256\":4,\"258\":2,\"259\":2,\"260\":2,\"261\":2,\"262\":2,\"264\":1}}],[\"flex是flexible\",{\"1\":{\"255\":1}}],[\"flush\",{\"1\":{\"181\":1,\"187\":3,\"188\":1,\"277\":1}}],[\"flags\",{\"1\":{\"320\":2,\"321\":1,\"322\":1,\"323\":1,\"324\":1}}],[\"flag\",{\"1\":{\"126\":1,\"138\":4,\"370\":9,\"371\":6,\"634\":4,\"640\":6}}],[\"flag=false\",{\"1\":{\"126\":1}}],[\"flag=true\",{\"1\":{\"126\":1}}],[\"flaot\",{\"1\":{\"112\":1}}],[\"flow属性是flex\",{\"1\":{\"262\":1}}],[\"flow\",{\"0\":{\"262\":1},\"1\":{\"256\":1,\"262\":1}}],[\"flowlayout\",{\"1\":{\"23\":3}}],[\"flowlayout和gridlayout布局\",{\"1\":{\"23\":2}}],[\"float类型要在后面加f\",{\"1\":{\"112\":1}}],[\"float\",{\"1\":{\"112\":1,\"124\":1,\"169\":2,\"295\":1,\"334\":1,\"508\":4}}],[\"f\",{\"0\":{\"298\":1},\"1\":{\"108\":1,\"197\":7,\"279\":1,\"298\":1,\"334\":21,\"345\":3,\"361\":1,\"416\":2,\"448\":2,\"652\":1}}],[\"f=open\",{\"1\":{\"334\":1}}],[\"f=\",{\"1\":{\"108\":1,\"334\":1}}],[\"fxkplfgtg0mubr9ntttq158\",{\"1\":{\"92\":1}}],[\"field\",{\"1\":{\"481\":1,\"652\":1}}],[\"firebird\",{\"1\":{\"460\":1}}],[\"firewall\",{\"1\":{\"276\":2}}],[\"firststarts\",{\"1\":{\"166\":1}}],[\"fish\",{\"1\":{\"288\":1}}],[\"fis\",{\"1\":{\"183\":6,\"185\":9,\"187\":3,\"188\":5}}],[\"finished\",{\"1\":{\"406\":1}}],[\"findlist\",{\"1\":{\"680\":2}}],[\"findlastindex\",{\"1\":{\"371\":1}}],[\"findheadlinebyhid\",{\"1\":{\"657\":5}}],[\"findnewpage\",{\"1\":{\"656\":4}}],[\"findnewspage\",{\"1\":{\"656\":1}}],[\"findbypage\",{\"1\":{\"641\":2}}],[\"findbycolumn\",{\"1\":{\"498\":1}}],[\"findbugs\",{\"1\":{\"387\":1}}],[\"find\",{\"1\":{\"317\":3,\"334\":2}}],[\"findalltypes\",{\"1\":{\"656\":3}}],[\"findallteachers\",{\"1\":{\"535\":1}}],[\"findall返回一个可迭代对象\",{\"1\":{\"334\":1}}],[\"findall\",{\"0\":{\"322\":1},\"1\":{\"63\":1,\"322\":2,\"334\":3,\"562\":5,\"568\":5,\"575\":5,\"630\":2,\"676\":3}}],[\"final<\",{\"1\":{\"625\":1}}],[\"finalname>\",{\"1\":{\"413\":1}}],[\"finally结构围绕整个被代理的目标方法\",{\"1\":{\"211\":1,\"584\":1}}],[\"finally②throws\",{\"1\":{\"155\":1}}],[\"finally进行处理\",{\"1\":{\"155\":1}}],[\"finally中存放的是一定会被执行的代码\",{\"1\":{\"154\":1}}],[\"finally是可选的\",{\"1\":{\"154\":1}}],[\"finally\",{\"1\":{\"154\":1,\"183\":1,\"184\":1,\"185\":2,\"186\":2,\"187\":2,\"191\":2,\"192\":1,\"202\":2,\"203\":1,\"212\":1,\"216\":1,\"294\":1,\"334\":2,\"583\":1,\"592\":2,\"602\":1}}],[\"final修饰\",{\"1\":{\"131\":1}}],[\"final修饰属性\",{\"1\":{\"131\":1}}],[\"final修饰方法\",{\"1\":{\"131\":1}}],[\"final修饰类\",{\"1\":{\"131\":1}}],[\"final关键字\",{\"0\":{\"131\":1}}],[\"final\",{\"1\":{\"114\":1,\"131\":1,\"138\":1,\"143\":3,\"144\":1,\"149\":1,\"155\":1,\"187\":1,\"625\":2,\"652\":1,\"653\":1,\"675\":3}}],[\"film\",{\"1\":{\"328\":2}}],[\"fill\",{\"1\":{\"24\":1}}],[\"filters=\",{\"1\":{\"231\":1,\"564\":1}}],[\"filters属性\",{\"1\":{\"231\":1,\"564\":1}}],[\"filterstring\",{\"1\":{\"17\":3}}],[\"filter标签\",{\"1\":{\"231\":2,\"564\":2}}],[\"filterchain\",{\"1\":{\"93\":2}}],[\"filterconfig\",{\"1\":{\"93\":3}}],[\"filter类上面加\",{\"1\":{\"93\":1}}],[\"filter过滤器\",{\"1\":{\"93\":1}}],[\"filter\",{\"1\":{\"32\":1,\"93\":4,\"231\":2,\"552\":1,\"564\":2}}],[\"filterlist\",{\"1\":{\"17\":3}}],[\"file对应之前修改的settings\",{\"1\":{\"396\":1}}],[\"fileupload🫙1\",{\"1\":{\"387\":1}}],[\"fileupload\",{\"1\":{\"387\":1}}],[\"filename=\",{\"1\":{\"352\":2}}],[\"filename文件的名字\",{\"1\":{\"352\":1}}],[\"filenotfoundexception\",{\"1\":{\"155\":2,\"247\":4,\"248\":3,\"610\":4,\"611\":3,\"612\":3}}],[\"filetest\",{\"1\":{\"186\":1}}],[\"filewriter\",{\"1\":{\"186\":3,\"188\":4}}],[\"filereader\",{\"0\":{\"186\":1},\"1\":{\"186\":4,\"188\":4}}],[\"fileinputoutputstream复制\",{\"0\":{\"185\":1}}],[\"fileinputstream\",{\"0\":{\"183\":1},\"1\":{\"183\":4,\"185\":4,\"187\":3,\"188\":4,\"247\":3,\"248\":2,\"610\":3,\"611\":2,\"612\":1}}],[\"fileoutputstream\",{\"0\":{\"184\":1},\"1\":{\"184\":2,\"185\":4,\"187\":3,\"188\":4}}],[\"file2一定不存在\",{\"1\":{\"182\":1}}],[\"file2\",{\"1\":{\"182\":1,\"185\":4}}],[\"file1重命名file2\",{\"1\":{\"182\":1}}],[\"file1\",{\"1\":{\"182\":1,\"185\":4}}],[\"file是无能为力的\",{\"1\":{\"182\":1}}],[\"file是一个类\",{\"1\":{\"182\":1}}],[\"file中的方法\",{\"1\":{\"182\":1}}],[\"file类的对象\",{\"1\":{\"182\":1}}],[\"file类对象是与平台无关的\",{\"1\":{\"182\":1}}],[\"file类\",{\"0\":{\"182\":1},\"1\":{\"182\":1}}],[\"filesystemxmlapplicationcontext\",{\"1\":{\"221\":2,\"552\":1}}],[\"files\",{\"1\":{\"53\":1,\"588\":6}}],[\"file=\",{\"1\":{\"9\":2}}],[\"file\",{\"1\":{\"0\":1,\"34\":1,\"182\":5,\"183\":8,\"184\":4,\"185\":8,\"186\":8,\"187\":8,\"188\":19,\"338\":1,\"400\":1,\"440\":1,\"444\":1}}],[\"fail\",{\"1\":{\"640\":1}}],[\"failureaccess🫙1\",{\"1\":{\"387\":1}}],[\"fatal\",{\"1\":{\"621\":1}}],[\"favouritesection\",{\"1\":{\"517\":1}}],[\"favourite\",{\"1\":{\"517\":3}}],[\"fasterxml\",{\"1\":{\"387\":6,\"415\":2,\"431\":1,\"432\":1,\"448\":2,\"456\":2,\"625\":1}}],[\"fanyi\",{\"1\":{\"355\":1,\"361\":1}}],[\"factorybean机制\",{\"1\":{\"561\":1}}],[\"factorybean应用\",{\"1\":{\"561\":1}}],[\"factorybean使用场景\",{\"1\":{\"561\":1}}],[\"factorybean简介\",{\"1\":{\"561\":1}}],[\"factorybean特性和使用\",{\"0\":{\"561\":1},\"1\":{\"542\":1}}],[\"factorybean和beanfactory区别\",{\"0\":{\"230\":1},\"1\":{\"561\":1}}],[\"factorybean<sqlsessionfactory>\",{\"1\":{\"628\":1}}],[\"factorybean<happymachine>\",{\"1\":{\"561\":1}}],[\"factorybean<a>\",{\"1\":{\"229\":1}}],[\"factorybean<t>\",{\"1\":{\"229\":1,\"561\":1}}],[\"factorybean1\",{\"1\":{\"229\":2}}],[\"factorybean\",{\"0\":{\"229\":1},\"1\":{\"229\":1,\"230\":4,\"561\":6}}],[\"factory\",{\"1\":{\"222\":2,\"223\":4,\"226\":1,\"248\":1,\"557\":6,\"559\":1,\"567\":1,\"583\":2,\"611\":1,\"668\":1,\"669\":1,\"676\":1}}],[\"family\",{\"1\":{\"34\":2}}],[\"false属性表示\",{\"1\":{\"233\":1,\"566\":1}}],[\"false为手动提交事务提交事务\",{\"1\":{\"5\":1}}],[\"false\",{\"1\":{\"1\":12,\"21\":2,\"23\":3,\"38\":2,\"95\":2,\"112\":1,\"138\":2,\"165\":2,\"170\":1,\"176\":4,\"229\":1,\"231\":1,\"233\":1,\"237\":1,\"247\":3,\"248\":1,\"294\":1,\"334\":1,\"368\":1,\"370\":3,\"371\":2,\"515\":1,\"560\":1,\"561\":1,\"564\":1,\"566\":2,\"573\":1,\"602\":1,\"608\":2,\"609\":1,\"610\":3,\"611\":1,\"612\":1,\"634\":2,\"640\":11,\"655\":1,\"657\":1,\"675\":1,\"677\":3}}],[\"found\",{\"1\":{\"529\":1,\"687\":1}}],[\"foundation迁移到了google\",{\"1\":{\"491\":1}}],[\"foo2\",{\"1\":{\"238\":2,\"573\":2}}],[\"foo1\",{\"1\":{\"238\":2,\"573\":2}}],[\"foo\",{\"1\":{\"238\":5,\"573\":5}}],[\"footer\",{\"1\":{\"0\":1,\"1\":1}}],[\"fos=new\",{\"1\":{\"184\":1}}],[\"fos\",{\"1\":{\"181\":1,\"184\":4,\"185\":11,\"187\":3,\"188\":6}}],[\"font\",{\"1\":{\"34\":3}}],[\"foreign\",{\"1\":{\"651\":2}}],[\"foreach标签\",{\"0\":{\"529\":1},\"1\":{\"489\":1,\"540\":1}}],[\"foreach>\",{\"1\":{\"85\":1,\"529\":2}}],[\"foreach\",{\"1\":{\"40\":4,\"461\":1,\"472\":1,\"476\":3,\"478\":2,\"535\":1}}],[\"fortunes\",{\"1\":{\"280\":1}}],[\"fortune\",{\"1\":{\"280\":2,\"281\":1}}],[\"form🫙3\",{\"1\":{\"387\":1}}],[\"form\",{\"1\":{\"387\":3}}],[\"format方法\",{\"1\":{\"334\":1}}],[\"format\",{\"1\":{\"163\":2,\"318\":2,\"334\":5,\"651\":3}}],[\"form>\",{\"1\":{\"34\":4}}],[\"for循环\",{\"0\":{\"303\":1},\"1\":{\"121\":1}}],[\"for循环不管有值无值都遍历\",{\"1\":{\"40\":1}}],[\"for=\",{\"1\":{\"43\":2}}],[\"for\",{\"1\":{\"11\":1,\"17\":1,\"38\":1,\"43\":2,\"90\":1,\"112\":1,\"121\":7,\"122\":2,\"125\":2,\"126\":8,\"138\":2,\"160\":1,\"170\":3,\"177\":3,\"178\":1,\"182\":1,\"183\":1,\"192\":1,\"194\":1,\"203\":1,\"205\":1,\"294\":1,\"303\":1,\"307\":1,\"311\":2,\"312\":2,\"315\":4,\"325\":1,\"334\":11,\"361\":2,\"366\":11,\"367\":1,\"370\":1,\"371\":1,\"412\":4,\"510\":1,\"511\":1,\"519\":1,\"555\":3,\"651\":3,\"652\":1}}],[\"framework实战指南\",{\"0\":{\"701\":1}}],[\"frameworkservlet\",{\"1\":{\"621\":1}}],[\"framework框架\",{\"1\":{\"613\":1}}],[\"framework\",{\"1\":{\"545\":1,\"547\":6,\"549\":6}}],[\"free\",{\"1\":{\"288\":1}}],[\"frequency\",{\"1\":{\"180\":1}}],[\"fr\",{\"1\":{\"186\":10,\"188\":6}}],[\"frm\",{\"1\":{\"23\":38}}],[\"front是指向队列的第一个元素\",{\"1\":{\"370\":1}}],[\"front初始值=0\",{\"1\":{\"370\":1}}],[\"front\",{\"1\":{\"370\":10}}],[\"front就指向队列的第一个元素\",{\"1\":{\"370\":1}}],[\"front变量的含义做一个调整\",{\"1\":{\"370\":1}}],[\"frontmatter\",{\"1\":{\"1\":1}}],[\"frot++\",{\"1\":{\"367\":1}}],[\"frot\",{\"1\":{\"367\":5}}],[\"frozenset\",{\"1\":{\"316\":1}}],[\"fromkeys\",{\"1\":{\"315\":1}}],[\"fromindex\",{\"1\":{\"171\":1}}],[\"from\",{\"1\":{\"8\":1,\"11\":2,\"50\":1,\"51\":1,\"52\":1,\"76\":1,\"80\":1,\"81\":5,\"82\":1,\"84\":1,\"85\":2,\"220\":1,\"294\":1,\"330\":2,\"334\":5,\"425\":8,\"467\":1,\"472\":1,\"474\":1,\"476\":4,\"481\":1,\"493\":1,\"498\":1,\"502\":1,\"508\":1,\"509\":1,\"510\":3,\"511\":1,\"513\":3,\"514\":3,\"515\":2,\"517\":1,\"518\":1,\"519\":1,\"525\":1,\"527\":1,\"528\":1,\"530\":1,\"562\":3,\"568\":1,\"575\":1,\"630\":1,\"641\":2,\"656\":2,\"677\":2,\"680\":1}}],[\"friend\",{\"1\":{\"1\":1}}],[\"mvcconfig\",{\"1\":{\"676\":1}}],[\"mvc\",{\"1\":{\"547\":1,\"548\":1,\"674\":4}}],[\"mvnrepository\",{\"1\":{\"410\":1,\"415\":1,\"431\":1,\"447\":1,\"448\":1,\"625\":2}}],[\"mvn\",{\"1\":{\"56\":1,\"59\":1,\"394\":1,\"404\":11,\"406\":1,\"425\":1,\"426\":1,\"439\":1,\"440\":1,\"450\":13}}],[\"md5加密\",{\"1\":{\"655\":1}}],[\"md5加密出错\",{\"1\":{\"652\":1}}],[\"md5加密工具类\",{\"1\":{\"652\":1}}],[\"md5\",{\"1\":{\"652\":1}}],[\"md5util\",{\"1\":{\"652\":1,\"655\":2}}],[\"md5用于用户密码的加密\",{\"1\":{\"647\":1}}],[\"md\",{\"1\":{\"534\":1,\"628\":2,\"652\":3}}],[\"mul\",{\"1\":{\"582\":3,\"588\":2}}],[\"multilang\",{\"1\":{\"398\":1,\"442\":1}}],[\"multiline\",{\"1\":{\"320\":1}}],[\"multiple\",{\"1\":{\"22\":3}}],[\"mutex\",{\"1\":{\"483\":1}}],[\"mp\",{\"1\":{\"460\":1}}],[\"mp4\",{\"1\":{\"352\":1}}],[\"m2\",{\"1\":{\"395\":1,\"440\":1,\"588\":7}}],[\"mr\",{\"1\":{\"320\":7}}],[\"m\",{\"1\":{\"317\":2,\"320\":1,\"334\":1,\"347\":1}}],[\"mh\",{\"1\":{\"192\":2,\"203\":2}}],[\"mkdirs\",{\"1\":{\"182\":1,\"188\":1}}],[\"mkdir\",{\"1\":{\"182\":1}}],[\"m>0\",{\"1\":{\"121\":1}}],[\"m=f\",{\"1\":{\"334\":1}}],[\"m=0\",{\"1\":{\"121\":1}}],[\"m=m^n\",{\"1\":{\"116\":2}}],[\"m=12\",{\"1\":{\"116\":1}}],[\"mm\",{\"1\":{\"68\":2,\"163\":2,\"178\":2,\"334\":1,\"625\":1}}],[\"micro\",{\"0\":{\"431\":1},\"1\":{\"456\":1}}],[\"microsoft\",{\"1\":{\"11\":2,\"12\":1}}],[\"millis\",{\"1\":{\"196\":1,\"207\":1,\"677\":2}}],[\"minidev\",{\"1\":{\"425\":10}}],[\"mine\",{\"1\":{\"425\":8,\"426\":4}}],[\"mine<\",{\"1\":{\"425\":3,\"426\":1,\"427\":2}}],[\"min\",{\"1\":{\"180\":2,\"196\":1,\"207\":1,\"334\":2,\"677\":2}}],[\"mirror\",{\"1\":{\"425\":2,\"426\":1}}],[\"mirror>\",{\"1\":{\"56\":1,\"395\":1,\"425\":1,\"440\":1}}],[\"mirrorof>\",{\"1\":{\"56\":1,\"395\":1,\"425\":1,\"440\":1}}],[\"mime\",{\"1\":{\"53\":1,\"283\":1}}],[\"may\",{\"1\":{\"609\":1}}],[\"machinename\",{\"1\":{\"560\":1,\"561\":7,\"573\":5}}],[\"male\",{\"1\":{\"527\":1}}],[\"maomi\",{\"1\":{\"509\":1,\"513\":1}}],[\"maomiservice222\",{\"1\":{\"233\":1,\"566\":1}}],[\"mail\",{\"1\":{\"485\":1}}],[\"mainapplication\",{\"1\":{\"461\":2,\"664\":3,\"673\":2,\"677\":2,\"680\":2}}],[\"main目录\",{\"1\":{\"447\":2}}],[\"main外边\",{\"1\":{\"112\":1}}],[\"main文件夹范围内\",{\"1\":{\"59\":1}}],[\"main\",{\"1\":{\"11\":2,\"12\":2,\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1,\"49\":1,\"108\":1,\"109\":1,\"130\":2,\"135\":1,\"138\":1,\"145\":2,\"146\":2,\"147\":1,\"149\":1,\"150\":1,\"151\":2,\"154\":1,\"155\":2,\"160\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"170\":1,\"176\":2,\"177\":2,\"185\":1,\"186\":2,\"187\":4,\"188\":1,\"189\":1,\"191\":2,\"192\":2,\"194\":1,\"197\":1,\"200\":1,\"202\":2,\"203\":2,\"205\":1,\"239\":1,\"338\":1,\"366\":2,\"368\":1,\"370\":1,\"401\":5,\"413\":2,\"445\":5,\"461\":1,\"478\":2,\"574\":1,\"652\":3,\"664\":1,\"667\":2,\"673\":1,\"677\":1,\"680\":1}}],[\"managetransaction\",{\"1\":{\"592\":1}}],[\"managed\",{\"1\":{\"481\":1}}],[\"manager\",{\"1\":{\"426\":3,\"636\":1}}],[\"mandatory\",{\"1\":{\"98\":1,\"249\":1,\"612\":1}}],[\"markup\",{\"1\":{\"669\":1}}],[\"marketplace\",{\"1\":{\"400\":1,\"444\":1}}],[\"mariadb\",{\"1\":{\"460\":1,\"628\":2}}],[\"margin\",{\"1\":{\"35\":1,\"36\":1}}],[\"master\",{\"1\":{\"188\":2,\"534\":1,\"628\":2}}],[\"match方法用于从字符串的开始处进行匹配\",{\"1\":{\"320\":1}}],[\"match\",{\"0\":{\"320\":1},\"1\":{\"320\":3}}],[\"mat\",{\"1\":{\"177\":1}}],[\"math提供了一系列静态方法用于科学计算\",{\"1\":{\"157\":1}}],[\"math\",{\"0\":{\"157\":1},\"1\":{\"138\":1,\"158\":1,\"326\":2,\"334\":4}}],[\"mapping\",{\"1\":{\"537\":1,\"680\":1}}],[\"mapper配置类\",{\"1\":{\"628\":1}}],[\"mapper配置文件中的resultmap标签内\",{\"1\":{\"522\":2}}],[\"mapper扫描等\",{\"1\":{\"628\":1}}],[\"mapper映射器实例\",{\"1\":{\"628\":1}}],[\"mapperjavaconfignew\",{\"1\":{\"628\":1}}],[\"mapperjavaconfig\",{\"1\":{\"622\":1,\"623\":1,\"628\":4,\"629\":1}}],[\"mapper等\",{\"1\":{\"620\":1}}],[\"mapper批量处理\",{\"1\":{\"540\":1}}],[\"mapper批量映射优化\",{\"0\":{\"532\":1},\"1\":{\"489\":1}}],[\"mapper接口扫描配置\",{\"1\":{\"680\":1}}],[\"mapper接口实现\",{\"1\":{\"680\":1}}],[\"mapper接口准备\",{\"1\":{\"680\":1}}],[\"mapper接口\",{\"1\":{\"630\":1,\"641\":4}}],[\"mapper接口定义\",{\"1\":{\"514\":1}}],[\"mapper接口的抽象方法\",{\"1\":{\"509\":1,\"510\":1}}],[\"mapper接口中抽象方法\",{\"1\":{\"511\":1}}],[\"mapper接口中抽象方法的声明\",{\"1\":{\"502\":1,\"503\":1,\"504\":1,\"505\":1}}],[\"mapper接口中的抽象方法\",{\"1\":{\"508\":1,\"512\":1}}],[\"mapperxml位置\",{\"1\":{\"680\":1}}],[\"mapperxml\",{\"1\":{\"656\":2}}],[\"mapperxml编写\",{\"1\":{\"514\":1}}],[\"mapperxml标签总结\",{\"0\":{\"515\":1},\"1\":{\"489\":1}}],[\"mapperxml文件\",{\"1\":{\"220\":1,\"641\":4}}],[\"mapperlocations\",{\"1\":{\"467\":1}}],[\"mappers目录下创建一个名为\",{\"1\":{\"514\":1}}],[\"mapperscan注解\",{\"1\":{\"679\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"628\":21}}],[\"mapperscan\",{\"1\":{\"461\":1,\"652\":1,\"680\":1}}],[\"mappers>\",{\"1\":{\"220\":1,\"493\":1,\"514\":1,\"518\":1,\"519\":1,\"532\":1}}],[\"mappers\",{\"1\":{\"220\":1,\"493\":2,\"496\":1,\"514\":1,\"518\":1,\"519\":2,\"630\":1}}],[\"mapper标签\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"mapper注册\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"mapper>\",{\"1\":{\"82\":1,\"220\":1,\"467\":1,\"493\":1,\"514\":1,\"630\":1,\"641\":1,\"680\":1}}],[\"mapper\",{\"1\":{\"76\":1,\"80\":1,\"82\":3,\"220\":5,\"460\":2,\"461\":3,\"467\":7,\"468\":1,\"471\":3,\"493\":10,\"505\":2,\"514\":7,\"532\":10,\"538\":2,\"539\":3,\"621\":1,\"622\":1,\"628\":3,\"630\":7,\"641\":8,\"652\":1,\"656\":2,\"680\":8}}],[\"mapunderscoretocamelcase\",{\"1\":{\"509\":1,\"513\":1,\"514\":1,\"628\":2}}],[\"map类型参数\",{\"1\":{\"489\":1}}],[\"maps\",{\"1\":{\"476\":2}}],[\"map中的key用set来存放\",{\"1\":{\"177\":1}}],[\"map中的key和value都可以是任何引用数据类型的数据\",{\"1\":{\"177\":1}}],[\"map与collection并列存在\",{\"1\":{\"177\":1}}],[\"map的主要实现类\",{\"1\":{\"169\":1}}],[\"map接口\",{\"0\":{\"177\":1},\"1\":{\"169\":2}}],[\"map<string\",{\"1\":{\"92\":1,\"464\":2,\"466\":2,\"471\":3,\"505\":2,\"510\":3,\"656\":3,\"657\":1}}],[\"map\",{\"1\":{\"81\":1,\"177\":21,\"178\":13,\"464\":2,\"466\":2,\"501\":1,\"508\":2,\"510\":2,\"655\":3,\"656\":5,\"680\":1}}],[\"maxsize==\",{\"1\":{\"370\":1}}],[\"maxsize==front\",{\"1\":{\"370\":1}}],[\"maxsize\",{\"1\":{\"367\":4,\"370\":11}}],[\"maxsplit可选参数\",{\"1\":{\"324\":1}}],[\"maxsplit指定分割次数\",{\"1\":{\"317\":1}}],[\"maxsplit\",{\"1\":{\"317\":1,\"324\":1}}],[\"max\",{\"1\":{\"64\":1,\"180\":2,\"196\":1,\"207\":1,\"334\":2,\"510\":1,\"677\":3}}],[\"maven配置文件修改\",{\"1\":{\"457\":1}}],[\"mavensearch\",{\"1\":{\"447\":1}}],[\"mavensearch插件搜索\",{\"1\":{\"410\":1,\"447\":1}}],[\"maven项目信息属性配置和读取\",{\"1\":{\"447\":1}}],[\"maven版本\",{\"1\":{\"440\":1}}],[\"maven软件就会自动下载并复制这些依赖项到项目中\",{\"1\":{\"439\":1}}],[\"maven软件工作原理模型图\",{\"0\":{\"391\":1}}],[\"maven核心掌握总结\",{\"0\":{\"457\":1},\"1\":{\"436\":1}}],[\"maven核心功能依赖和构建管理\",{\"0\":{\"446\":1},\"1\":{\"436\":1}}],[\"maven实战案例\",{\"0\":{\"454\":1},\"1\":{\"436\":1}}],[\"maven继承和聚合特性\",{\"0\":{\"451\":1},\"1\":{\"436\":1}}],[\"maven主要作用理解\",{\"0\":{\"439\":1},\"1\":{\"436\":1}}],[\"maven入门和进阶\",{\"0\":{\"435\":1,\"697\":1}}],[\"maven综合案例\",{\"0\":{\"428\":1}}],[\"maven也能够正常运行\",{\"1\":{\"421\":1}}],[\"maven私服位于局域网内\",{\"1\":{\"421\":1}}],[\"maven私服简介\",{\"0\":{\"421\":1}}],[\"maven私服\",{\"0\":{\"420\":1}}],[\"maven自动解决依赖冲突问题能力\",{\"1\":{\"416\":1,\"448\":1}}],[\"maven依赖冲突特性\",{\"0\":{\"416\":1}}],[\"maven依赖传递特性\",{\"0\":{\"415\":1}}],[\"maven依赖传递和依赖冲突\",{\"0\":{\"414\":1}}],[\"maven依赖管理项目构建工具\",{\"0\":{\"383\":1}}],[\"maven依赖管理\",{\"0\":{\"59\":1}}],[\"maven规定的固定的key\",{\"1\":{\"410\":1,\"447\":1}}],[\"maven仓库信息官网\",{\"1\":{\"410\":1,\"447\":1}}],[\"maven会将该项目打成的jar包放本地路径\",{\"1\":{\"409\":1,\"447\":1}}],[\"maven工程加入到本地或者私服仓库\",{\"1\":{\"450\":1}}],[\"maven工程相对之前的工程\",{\"1\":{\"442\":1}}],[\"maven工程相对之前的项目\",{\"1\":{\"398\":1}}],[\"maven工程中配置\",{\"1\":{\"426\":1,\"427\":1}}],[\"maven工程聚合关系\",{\"0\":{\"419\":1,\"453\":1},\"1\":{\"436\":1}}],[\"maven工程继承关系\",{\"0\":{\"418\":1,\"452\":1},\"1\":{\"436\":1}}],[\"maven工程继承和聚合关系\",{\"0\":{\"417\":1}}],[\"maven工程build构建配置\",{\"0\":{\"413\":1}}],[\"maven工程依赖下载失败错误解决\",{\"0\":{\"412\":1}}],[\"maven工程依赖管理配置\",{\"0\":{\"410\":1}}],[\"maven工程核心信息配置和解读\",{\"0\":{\"409\":1}}],[\"maven工程项目结构说明\",{\"0\":{\"401\":1,\"445\":1},\"1\":{\"436\":1}}],[\"maven选用编译项目的jdk版本\",{\"1\":{\"395\":1,\"440\":1}}],[\"maven下载镜像3\",{\"1\":{\"440\":1}}],[\"maven下载镜像\",{\"1\":{\"395\":1}}],[\"maven功能配置\",{\"0\":{\"395\":1}}],[\"maven环境配置\",{\"0\":{\"394\":1}}],[\"maven需要本机安装java环境\",{\"1\":{\"393\":1,\"440\":1}}],[\"maven安装\",{\"0\":{\"393\":1},\"1\":{\"457\":1}}],[\"maven安装和配置\",{\"0\":{\"392\":1,\"440\":1},\"1\":{\"436\":1}}],[\"maven就会自动下载并复制这些依赖项到项目中\",{\"1\":{\"390\":1}}],[\"maven就是一个软件\",{\"1\":{\"390\":1,\"438\":1}}],[\"maven介绍\",{\"0\":{\"390\":1,\"438\":1},\"1\":{\"436\":1}}],[\"maven是一个构建工具\",{\"0\":{\"388\":1}}],[\"maven是一个依赖管理工具\",{\"0\":{\"387\":1}}],[\"maven简介和快速入门\",{\"0\":{\"437\":1},\"1\":{\"436\":1}}],[\"maven简介\",{\"0\":{\"385\":1}}],[\"maven中有三套项目独立的生命周期\",{\"1\":{\"59\":1}}],[\"maven中的坐标是资源的唯一标识\",{\"1\":{\"58\":1}}],[\"maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一\",{\"1\":{\"59\":1}}],[\"maven的作用\",{\"1\":{\"55\":1}}],[\"maven坐标的主要组成\",{\"1\":{\"58\":1}}],[\"maven坐标\",{\"0\":{\"58\":1}}],[\"maven<\",{\"1\":{\"56\":1,\"58\":1,\"395\":1,\"413\":1,\"416\":1,\"418\":3,\"440\":1,\"452\":3}}],[\"maven时apache旗下的一个开源项目\",{\"1\":{\"55\":1}}],[\"maven\",{\"0\":{\"55\":1,\"695\":1},\"1\":{\"32\":1,\"56\":3,\"387\":3,\"388\":1,\"390\":9,\"393\":2,\"395\":6,\"398\":1,\"401\":4,\"403\":1,\"404\":1,\"406\":6,\"408\":7,\"411\":7,\"412\":8,\"413\":2,\"416\":1,\"418\":5,\"419\":1,\"421\":5,\"424\":5,\"425\":13,\"426\":9,\"427\":1,\"431\":7,\"432\":6,\"433\":6,\"434\":6,\"438\":4,\"439\":5,\"440\":8,\"442\":1,\"445\":4,\"447\":5,\"448\":3,\"449\":7,\"450\":1,\"452\":5,\"453\":1,\"456\":25,\"460\":1,\"461\":7,\"538\":1,\"625\":6,\"636\":1,\"652\":3,\"663\":1,\"673\":6,\"677\":7,\"684\":3}}],[\"mywebappinitializer\",{\"1\":{\"623\":1,\"629\":1}}],[\"myconfig\",{\"1\":{\"588\":2}}],[\"myconfiguration\",{\"1\":{\"235\":1,\"236\":1,\"571\":3,\"572\":1,\"573\":1}}],[\"mything\",{\"1\":{\"573\":1}}],[\"myselectsql\",{\"1\":{\"530\":2}}],[\"mysql8用于项目存储数据\",{\"1\":{\"647\":1}}],[\"mysql80\",{\"1\":{\"277\":1}}],[\"mysql配置主键自增长\",{\"1\":{\"480\":1}}],[\"mysql数据库驱动和jackson等\",{\"1\":{\"439\":1}}],[\"mysql数据库驱动和jackson\",{\"1\":{\"390\":1}}],[\"mysql3306\",{\"1\":{\"353\":1}}],[\"mysqld\",{\"1\":{\"277\":2}}],[\"mysql默认是repeatable\",{\"1\":{\"248\":1,\"611\":1,\"612\":1}}],[\"mysql默认自动提交事务\",{\"1\":{\"5\":1}}],[\"mysql驱动\",{\"1\":{\"220\":1,\"493\":1,\"625\":1}}],[\"mysql\",{\"1\":{\"9\":2,\"12\":2,\"32\":1,\"76\":2,\"80\":1,\"189\":1,\"200\":1,\"220\":2,\"230\":1,\"277\":10,\"426\":1,\"447\":1,\"460\":2,\"461\":2,\"472\":1,\"493\":2,\"512\":1,\"514\":2,\"515\":1,\"529\":1,\"534\":1,\"535\":1,\"561\":1,\"562\":2,\"588\":3,\"606\":2,\"625\":4,\"628\":7,\"652\":3,\"665\":1,\"668\":2,\"669\":2,\"671\":6,\"677\":2,\"680\":2}}],[\"mysql事务管理\",{\"1\":{\"5\":1}}],[\"myindex\",{\"1\":{\"529\":2}}],[\"myinterceptor拦截器的aftercompletion方法执行\",{\"1\":{\"676\":1}}],[\"myinterceptor拦截器的posthandle方法执行\",{\"1\":{\"676\":1}}],[\"myinterceptor拦截器的prehandle方法执行\",{\"1\":{\"676\":1}}],[\"myinterceptor\",{\"1\":{\"676\":5}}],[\"myinterface\",{\"1\":{\"151\":6}}],[\"myinterfaceimpl\",{\"1\":{\"151\":3}}],[\"myint=12\",{\"1\":{\"110\":1}}],[\"myapp\",{\"1\":{\"401\":1,\"445\":1,\"686\":2}}],[\"my\",{\"0\":{\"699\":1,\"700\":1},\"1\":{\"298\":1}}],[\"mybatiis配置文件\",{\"1\":{\"220\":1}}],[\"mybatis提取一个配置类即可解决\",{\"1\":{\"628\":1}}],[\"mybatis提供\",{\"1\":{\"628\":1}}],[\"mybatis提供了提供封装sqlsessionfactory和mapper实例化的逻辑的factorybean组件\",{\"1\":{\"628\":1}}],[\"mybatis配置类\",{\"1\":{\"628\":1}}],[\"mybatis配置信息\",{\"1\":{\"628\":1}}],[\"mybatis配置文件\",{\"1\":{\"514\":1,\"628\":1}}],[\"mybatis配置文件设计标签和顶层结构如下\",{\"1\":{\"496\":1}}],[\"mybatis和持久层配置类\",{\"1\":{\"628\":1}}],[\"mybatis其他的功能\",{\"1\":{\"628\":1}}],[\"mybatis的功能配置等\",{\"1\":{\"679\":1}}],[\"mybatis的api实例化需要复杂的过程\",{\"1\":{\"628\":1}}],[\"mybatis的内置的事务管理器\",{\"1\":{\"220\":1,\"493\":1,\"514\":1}}],[\"mybatis核心api介绍回顾\",{\"1\":{\"628\":1}}],[\"mybatis核心api使用回顾\",{\"1\":{\"628\":1}}],[\"mybatis相关\",{\"1\":{\"622\":1}}],[\"mybatis等相关组件\",{\"1\":{\"621\":1}}],[\"mybatis框架负责数据库访问层\",{\"1\":{\"617\":1}}],[\"mybatis框架应用到项目中\",{\"1\":{\"617\":1}}],[\"mybatis框架配置文件\",{\"1\":{\"493\":1}}],[\"mybatis整合实践\",{\"0\":{\"680\":1},\"1\":{\"660\":1}}],[\"mybatis整合步骤\",{\"0\":{\"679\":1},\"1\":{\"660\":1}}],[\"mybatis整合思路总结\",{\"1\":{\"628\":1}}],[\"mybatis整合思路理解\",{\"1\":{\"628\":1}}],[\"mybatis整合思路\",{\"1\":{\"628\":1}}],[\"mybatis整合\",{\"0\":{\"628\":1},\"1\":{\"615\":1}}],[\"mybatis扩展\",{\"1\":{\"540\":1}}],[\"mybatis多表\",{\"1\":{\"540\":1}}],[\"mybatis多表映射\",{\"0\":{\"516\":1},\"1\":{\"489\":1}}],[\"mybatis全局注册mapper文件\",{\"1\":{\"518\":1,\"519\":1}}],[\"mybatis是将自增主键的值设置到实体类对象中\",{\"1\":{\"512\":1}}],[\"mybatis是一款优秀的持久层框架\",{\"1\":{\"76\":1}}],[\"mybatis负责把sql语句中的\",{\"1\":{\"509\":1,\"513\":1}}],[\"mybatis会将拿到的主键值存入这个属性\",{\"1\":{\"512\":1}}],[\"mybatis会将sql语句中的\",{\"1\":{\"497\":1}}],[\"mybatis会根据\",{\"1\":{\"503\":1}}],[\"mybatis会自动封装\",{\"1\":{\"81\":1}}],[\"mybatis最初是apache的一个开源项目ibatis\",{\"1\":{\"491\":1}}],[\"mybatis总结\",{\"0\":{\"540\":1},\"1\":{\"489\":1}}],[\"mybatis总体机制概括\",{\"1\":{\"489\":1}}],[\"mybatis高级扩展\",{\"0\":{\"531\":1},\"1\":{\"489\":1}}],[\"mybatis动态语句概念\",{\"1\":{\"540\":1}}],[\"mybatis动态语句\",{\"0\":{\"523\":1},\"1\":{\"489\":1,\"540\":1}}],[\"mybatis动态sql\",{\"0\":{\"84\":1}}],[\"mybatis日志输出配置\",{\"1\":{\"489\":1}}],[\"mybatis基础\",{\"1\":{\"540\":1}}],[\"mybatis基础操作\",{\"0\":{\"80\":1}}],[\"mybatis基本使用\",{\"0\":{\"494\":1},\"1\":{\"489\":1}}],[\"mybatis简介\",{\"0\":{\"490\":1},\"1\":{\"489\":1}}],[\"mybatis实践\",{\"0\":{\"488\":1}}],[\"mybatisplusexception\",{\"1\":{\"485\":1}}],[\"mybatisplus\",{\"1\":{\"485\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"472\":4,\"484\":4,\"485\":4,\"652\":4}}],[\"mybatisx逆向工程\",{\"0\":{\"653\":1},\"1\":{\"644\":1}}],[\"mybatisx\",{\"1\":{\"539\":3}}],[\"mybatisx一款基于\",{\"1\":{\"486\":1}}],[\"mybatisx快速代码生成\",{\"0\":{\"487\":1},\"1\":{\"459\":1}}],[\"mybatisx插件逆向工程\",{\"0\":{\"486\":1},\"1\":{\"459\":1}}],[\"mybatisx插件\",{\"0\":{\"83\":1},\"1\":{\"459\":1}}],[\"mybatis逆向工程插件等等\",{\"1\":{\"413\":1}}],[\"mybatis分页插件\",{\"1\":{\"413\":1}}],[\"mybatis中有时会将用于编写sql语句的映射文件和mapper接口都写在src\",{\"1\":{\"413\":1}}],[\"mybatis方式的事务实现\",{\"1\":{\"243\":1,\"604\":1}}],[\"mybatisconfigfilepath\",{\"1\":{\"220\":2,\"493\":2}}],[\"mybatistest\",{\"1\":{\"220\":1,\"493\":1,\"514\":1,\"518\":1}}],[\"mybatis自带\",{\"1\":{\"220\":1,\"493\":1,\"625\":1}}],[\"mybatis底层依赖jdbc驱动实现\",{\"1\":{\"220\":1,\"493\":1,\"625\":1}}],[\"mybatis<\",{\"1\":{\"220\":1,\"493\":1,\"625\":2}}],[\"mybatis依赖\",{\"1\":{\"220\":2,\"493\":1,\"625\":1}}],[\"mybatis\",{\"0\":{\"76\":1,\"458\":1},\"1\":{\"32\":1,\"80\":2,\"81\":1,\"82\":3,\"220\":8,\"401\":2,\"406\":9,\"445\":2,\"459\":4,\"460\":5,\"461\":2,\"462\":2,\"467\":6,\"480\":6,\"481\":3,\"486\":2,\"491\":5,\"492\":1,\"493\":11,\"496\":1,\"502\":1,\"505\":1,\"508\":4,\"509\":2,\"511\":1,\"513\":3,\"514\":9,\"515\":10,\"517\":2,\"518\":1,\"521\":1,\"524\":4,\"527\":1,\"528\":1,\"529\":1,\"532\":1,\"534\":5,\"535\":2,\"537\":2,\"538\":4,\"539\":2,\"544\":1,\"545\":1,\"617\":1,\"620\":1,\"625\":10,\"628\":11,\"630\":3,\"641\":3,\"647\":1,\"652\":3,\"680\":5}}],[\"mydoc\",{\"1\":{\"188\":1}}],[\"mydate\",{\"1\":{\"176\":23}}],[\"mydate类\",{\"1\":{\"176\":1}}],[\"mydate类呢\",{\"1\":{\"176\":1}}],[\"mydate类包含\",{\"1\":{\"176\":1}}],[\"myfile\",{\"1\":{\"188\":5}}],[\"myexception\",{\"1\":{\"155\":4}}],[\"mygridbaglayoutfrm\",{\"1\":{\"24\":3}}],[\"mozilla\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"movie\",{\"1\":{\"334\":3,\"356\":1}}],[\"moviename\",{\"1\":{\"225\":1,\"558\":5}}],[\"moviefinder\",{\"1\":{\"225\":4,\"558\":12}}],[\"monkey\",{\"1\":{\"188\":5}}],[\"monthly\",{\"1\":{\"334\":9}}],[\"month=\",{\"1\":{\"176\":1}}],[\"month\",{\"1\":{\"164\":4,\"176\":10}}],[\"money+\",{\"1\":{\"17\":1}}],[\"money\",{\"1\":{\"17\":5}}],[\"module>\",{\"1\":{\"419\":2,\"434\":3,\"453\":2}}],[\"module<\",{\"1\":{\"418\":1,\"452\":1}}],[\"modulename\",{\"1\":{\"330\":1}}],[\"module\",{\"1\":{\"277\":1,\"387\":2,\"418\":3,\"452\":2,\"544\":1}}],[\"modules>\",{\"1\":{\"419\":1,\"434\":1,\"453\":1}}],[\"modules\",{\"1\":{\"49\":1}}],[\"modification\",{\"1\":{\"608\":1}}],[\"modifier\",{\"1\":{\"213\":1}}],[\"modifiers\",{\"1\":{\"213\":2,\"589\":3}}],[\"modi\",{\"1\":{\"213\":2}}],[\"modcount\",{\"1\":{\"197\":1}}],[\"modelversion>\",{\"1\":{\"409\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"447\":1,\"456\":4,\"461\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"modelname\",{\"1\":{\"330\":1}}],[\"modelandview\",{\"1\":{\"94\":3,\"676\":3}}],[\"model=\",{\"1\":{\"42\":1,\"43\":2}}],[\"model\",{\"1\":{\"40\":2,\"43\":2,\"401\":1,\"445\":1,\"460\":2,\"651\":3}}],[\"mounted\",{\"1\":{\"44\":2}}],[\"mouse\",{\"1\":{\"147\":7}}],[\"mouseexited\",{\"1\":{\"27\":1,\"28\":1}}],[\"mouseentered\",{\"1\":{\"27\":1,\"28\":1}}],[\"mouseevent\",{\"1\":{\"27\":5,\"28\":5}}],[\"mousereleased\",{\"1\":{\"27\":1,\"28\":1}}],[\"mousepressed\",{\"1\":{\"27\":1,\"28\":1}}],[\"mouseclicked\",{\"1\":{\"27\":1,\"28\":1}}],[\"mouselistener\",{\"1\":{\"25\":1,\"27\":1,\"28\":1}}],[\"more\",{\"1\":{\"0\":1,\"1\":1,\"555\":1}}],[\"msi\",{\"1\":{\"636\":1}}],[\"msg\",{\"1\":{\"69\":1,\"625\":1,\"652\":2}}],[\"ms\",{\"1\":{\"0\":1,\"426\":1}}],[\"memorials\",{\"1\":{\"426\":1}}],[\"membermember用于指定要导入的变量\",{\"1\":{\"330\":1}}],[\"menu\",{\"1\":{\"412\":4}}],[\"messsge=\",{\"1\":{\"334\":3}}],[\"messagedigest\",{\"1\":{\"652\":3}}],[\"messagehandler\",{\"1\":{\"192\":4,\"203\":4}}],[\"message\",{\"1\":{\"42\":3,\"155\":2,\"192\":2,\"203\":2,\"652\":13,\"655\":13,\"656\":3,\"657\":7}}],[\"mean\",{\"1\":{\"334\":7}}],[\"mean=\",{\"1\":{\"334\":1}}],[\"meta\",{\"1\":{\"461\":1,\"675\":2}}],[\"metadata\",{\"1\":{\"11\":8,\"426\":4}}],[\"methodb\",{\"1\":{\"612\":2}}],[\"methoda\",{\"1\":{\"612\":1}}],[\"method所对应方法的参数\",{\"1\":{\"583\":1}}],[\"methodreferenceexample\",{\"1\":{\"478\":1}}],[\"methodname\",{\"1\":{\"328\":1,\"589\":6,\"592\":5}}],[\"method在ioc容器实例化时\",{\"1\":{\"227\":1}}],[\"method属性\",{\"1\":{\"219\":1,\"596\":1}}],[\"method2\",{\"1\":{\"151\":2}}],[\"method1\",{\"1\":{\"151\":3,\"155\":3}}],[\"methodzi\",{\"1\":{\"145\":2,\"146\":2}}],[\"methodfu\",{\"1\":{\"145\":4,\"146\":3}}],[\"methods\",{\"1\":{\"43\":2,\"44\":1}}],[\"method\",{\"1\":{\"34\":1,\"45\":1,\"68\":1,\"145\":6,\"146\":4,\"149\":2,\"150\":2,\"151\":5,\"155\":1,\"187\":1,\"222\":1,\"223\":1,\"227\":1,\"237\":2,\"327\":2,\"461\":1,\"534\":2,\"557\":2,\"573\":2,\"583\":4}}],[\"method=\",{\"1\":{\"34\":2,\"219\":5,\"222\":1,\"223\":1,\"227\":2,\"557\":2,\"560\":2,\"596\":5}}],[\"me\",{\"0\":{\"0\":1}}],[\"3空间不足的槽点\",{\"1\":{\"651\":1}}],[\"3的放大版\",{\"1\":{\"651\":1}}],[\"3共用平台\",{\"1\":{\"651\":1}}],[\"35\",{\"1\":{\"651\":2}}],[\"3℃\",{\"1\":{\"651\":1}}],[\"3数据输出\",{\"0\":{\"506\":1},\"1\":{\"489\":1}}],[\"37\",{\"1\":{\"651\":2}}],[\"371\",{\"1\":{\"426\":1}}],[\"376\",{\"1\":{\"425\":1}}],[\"39\",{\"1\":{\"387\":2}}],[\"3a90\",{\"1\":{\"356\":1}}],[\"3nf\",{\"1\":{\"341\":1}}],[\"3f\",{\"1\":{\"334\":2}}],[\"362\",{\"1\":{\"426\":1}}],[\"36\",{\"1\":{\"315\":1,\"334\":4,\"353\":2,\"354\":4,\"355\":2,\"356\":2,\"361\":2,\"651\":6}}],[\"3600\",{\"1\":{\"92\":1}}],[\"3小括号也可以去掉\",{\"1\":{\"312\":1}}],[\"330\",{\"1\":{\"566\":1}}],[\"3306\",{\"1\":{\"12\":1,\"76\":1,\"189\":1,\"200\":1,\"220\":1,\"493\":1,\"514\":1,\"562\":1,\"606\":1,\"677\":1}}],[\"33\",{\"1\":{\"176\":2,\"315\":1,\"493\":1,\"625\":1}}],[\"312\",{\"1\":{\"426\":1}}],[\"314\",{\"1\":{\"326\":1}}],[\"31\",{\"1\":{\"158\":1,\"189\":1,\"200\":1,\"651\":4}}],[\"34岁的罗斯在刚刚结束的赛季队内角色严重下滑\",{\"1\":{\"651\":1}}],[\"341\",{\"1\":{\"609\":1}}],[\"345665346\",{\"1\":{\"334\":1}}],[\"34\",{\"1\":{\"126\":1,\"651\":4}}],[\"3xx重定向\",{\"1\":{\"64\":1}}],[\"3<<4\",{\"1\":{\"116\":1}}],[\"3<\",{\"1\":{\"59\":2,\"625\":1}}],[\"30000\",{\"1\":{\"677\":1}}],[\"3000000000000003如果进行比较可以做差看误差大小\",{\"1\":{\"112\":1}}],[\"3000<\",{\"1\":{\"528\":1}}],[\"3000\",{\"1\":{\"526\":1,\"527\":1,\"528\":2}}],[\"300\",{\"1\":{\"253\":1,\"426\":1}}],[\"30px\",{\"1\":{\"36\":1}}],[\"30\",{\"1\":{\"25\":2,\"29\":3,\"34\":1,\"387\":2,\"461\":1,\"474\":2,\"476\":1,\"484\":1}}],[\"324\",{\"1\":{\"426\":1}}],[\"32位有符号整数\",{\"1\":{\"112\":1}}],[\"32768~32767\",{\"1\":{\"112\":1}}],[\"320\",{\"1\":{\"23\":1,\"24\":1,\"25\":1}}],[\"32\",{\"1\":{\"16\":2,\"539\":1,\"651\":4}}],[\"3\",{\"0\":{\"242\":1,\"389\":1,\"391\":1,\"395\":1,\"400\":1,\"405\":1,\"410\":1,\"423\":1,\"440\":1,\"444\":1,\"447\":1,\"448\":1,\"449\":2,\"450\":1,\"472\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"481\":1,\"482\":1,\"483\":1,\"484\":1,\"485\":2,\"493\":1,\"498\":1,\"502\":1,\"507\":1,\"508\":1,\"509\":2,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"517\":1,\"518\":1,\"519\":2,\"520\":1,\"521\":1,\"522\":1,\"526\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":2,\"549\":1,\"551\":1,\"552\":1,\"553\":2,\"559\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":2,\"567\":1,\"568\":1,\"572\":1,\"579\":1,\"584\":1,\"589\":1,\"604\":1,\"608\":1,\"621\":1,\"627\":1,\"632\":1,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":2,\"642\":1,\"653\":1,\"657\":1,\"664\":1,\"669\":1,\"673\":1,\"674\":1,\"675\":2,\"676\":1,\"681\":1,\"686\":1},\"1\":{\"0\":1,\"11\":1,\"12\":1,\"21\":1,\"23\":1,\"28\":2,\"34\":1,\"38\":1,\"40\":1,\"45\":1,\"50\":1,\"52\":1,\"56\":1,\"78\":1,\"82\":2,\"92\":1,\"100\":1,\"112\":1,\"114\":1,\"116\":1,\"121\":6,\"124\":5,\"126\":1,\"132\":1,\"139\":1,\"160\":2,\"170\":2,\"176\":3,\"177\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":1,\"191\":1,\"202\":1,\"220\":6,\"231\":1,\"242\":2,\"244\":1,\"247\":3,\"248\":1,\"252\":1,\"253\":2,\"254\":1,\"305\":2,\"306\":3,\"307\":1,\"310\":2,\"311\":1,\"312\":2,\"315\":6,\"316\":8,\"325\":1,\"334\":8,\"351\":1,\"365\":1,\"366\":1,\"368\":1,\"370\":2,\"371\":3,\"387\":31,\"393\":1,\"395\":1,\"398\":2,\"406\":2,\"412\":2,\"421\":1,\"423\":1,\"425\":8,\"436\":7,\"440\":4,\"442\":2,\"459\":11,\"460\":2,\"461\":4,\"467\":2,\"477\":2,\"478\":1,\"479\":3,\"480\":2,\"481\":2,\"489\":24,\"491\":2,\"493\":6,\"496\":1,\"508\":5,\"514\":4,\"524\":1,\"542\":19,\"551\":5,\"552\":6,\"557\":1,\"560\":1,\"562\":1,\"564\":2,\"566\":1,\"568\":1,\"571\":1,\"575\":1,\"580\":1,\"582\":1,\"583\":1,\"584\":1,\"588\":23,\"589\":1,\"590\":1,\"606\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":1,\"615\":11,\"625\":3,\"626\":1,\"627\":1,\"628\":3,\"630\":2,\"634\":1,\"641\":3,\"644\":2,\"651\":2,\"652\":3,\"655\":7,\"656\":9,\"657\":7,\"660\":9,\"662\":1,\"663\":4,\"664\":4,\"670\":1,\"677\":2,\"680\":3}}],[\"irkt\",{\"1\":{\"609\":1}}],[\"icecreammachine\",{\"1\":{\"561\":1}}],[\"icon\",{\"1\":{\"0\":1,\"1\":7,\"28\":4}}],[\"i文件中\",{\"1\":{\"338\":1}}],[\"i>\",{\"1\":{\"334\":1}}],[\"ignorecase\",{\"1\":{\"320\":1}}],[\"ignore\",{\"1\":{\"317\":1}}],[\"isdeleted\",{\"1\":{\"652\":1,\"653\":1}}],[\"isdirectory\",{\"1\":{\"182\":1}}],[\"isflag\",{\"1\":{\"640\":1}}],[\"isfile\",{\"1\":{\"182\":1}}],[\"isassignablefrom\",{\"1\":{\"621\":1}}],[\"isalive\",{\"1\":{\"196\":1,\"207\":1}}],[\"isnull\",{\"1\":{\"476\":2,\"477\":1}}],[\"isnullable\",{\"1\":{\"11\":3}}],[\"isnotnull\",{\"1\":{\"476\":1}}],[\"isexpire\",{\"1\":{\"655\":2}}],[\"isexpiration\",{\"1\":{\"655\":3,\"657\":2}}],[\"iservice<user>\",{\"1\":{\"470\":1}}],[\"isempty\",{\"1\":{\"170\":2,\"177\":1,\"367\":4,\"370\":4,\"476\":2,\"478\":2,\"655\":2,\"656\":1,\"657\":2}}],[\"isemptu\",{\"1\":{\"170\":1}}],[\"isolation\",{\"1\":{\"248\":4,\"611\":4,\"612\":3}}],[\"isoldierservice\",{\"1\":{\"233\":2,\"566\":2}}],[\"issingleton\",{\"1\":{\"229\":1,\"561\":1}}],[\"is\",{\"1\":{\"191\":5,\"202\":5,\"294\":1,\"298\":1,\"334\":1,\"390\":1,\"438\":1,\"476\":7,\"477\":1,\"558\":1,\"608\":1,\"621\":1,\"651\":18,\"656\":1}}],[\"i+\",{\"1\":{\"169\":1}}],[\"i+1\",{\"1\":{\"126\":1}}],[\"i++\",{\"1\":{\"11\":1,\"112\":1,\"121\":3,\"122\":1,\"125\":1,\"126\":4,\"138\":1,\"160\":1,\"170\":1,\"183\":1,\"194\":1,\"205\":1,\"366\":4,\"367\":1,\"370\":1,\"371\":1,\"652\":1}}],[\"i=front\",{\"1\":{\"370\":1}}],[\"i=1\",{\"1\":{\"122\":1,\"194\":1,\"205\":1,\"366\":1}}],[\"i=0\",{\"1\":{\"112\":1,\"121\":2,\"125\":1,\"126\":4,\"160\":1,\"183\":1,\"366\":2,\"371\":1}}],[\"i<size\",{\"1\":{\"371\":1}}],[\"i<sparsearr\",{\"1\":{\"366\":2}}],[\"i<front+size\",{\"1\":{\"370\":1}}],[\"i<11\",{\"1\":{\"366\":2}}],[\"i<=100\",{\"1\":{\"194\":1,\"205\":1}}],[\"i<len\",{\"1\":{\"183\":1}}],[\"i<arr\",{\"1\":{\"126\":4}}],[\"i<5\",{\"1\":{\"122\":1}}],[\"i<4\",{\"1\":{\"121\":1}}],[\"i<3\",{\"1\":{\"112\":1,\"121\":1,\"125\":1}}],[\"io<\",{\"1\":{\"431\":2,\"432\":2,\"456\":4}}],[\"io🫙2\",{\"1\":{\"387\":1}}],[\"io包下\",{\"1\":{\"182\":1}}],[\"io包下提供了各种\",{\"1\":{\"180\":1}}],[\"io\",{\"1\":{\"182\":1,\"188\":1,\"248\":2,\"387\":11,\"429\":1,\"431\":1,\"432\":1,\"455\":1,\"456\":2,\"514\":2,\"547\":1,\"611\":2,\"655\":1,\"662\":1,\"665\":1,\"667\":1,\"674\":1,\"675\":1}}],[\"io流用来处理设备之间的数据传输\",{\"1\":{\"180\":1}}],[\"ioexception\",{\"1\":{\"93\":1,\"155\":3,\"183\":2,\"184\":1,\"185\":2,\"186\":4,\"187\":5,\"188\":5,\"191\":9,\"192\":4,\"202\":9,\"203\":4,\"220\":1,\"493\":1,\"505\":1,\"514\":2,\"518\":1}}],[\"ioc和di注解需要在启动类的同包或者子包下方可生效\",{\"1\":{\"664\":1}}],[\"ioc初始化方式和配置位置\",{\"0\":{\"623\":1},\"1\":{\"615\":1}}],[\"ioc方式总结\",{\"1\":{\"575\":1}}],[\"ioc方式问题总结\",{\"1\":{\"568\":1}}],[\"ioc也开始实例组件对象\",{\"1\":{\"555\":1}}],[\"ioc实践和应用\",{\"0\":{\"554\":1},\"1\":{\"542\":1}}],[\"ioc具体容器实现选择annotationconfigapplicationcontext对象\",{\"1\":{\"242\":1,\"579\":1}}],[\"ioc具体容器实现选择classpathxmlapplicationcontext对象\",{\"1\":{\"240\":1,\"241\":1,\"577\":1,\"578\":1}}],[\"ioc的配置一定是实现类\",{\"1\":{\"226\":1,\"559\":1}}],[\"ioccontainerannotation\",{\"1\":{\"571\":4}}],[\"ioccontainer\",{\"1\":{\"226\":3,\"559\":3,\"560\":5,\"561\":3}}],[\"ioc详解\",{\"0\":{\"74\":1}}],[\"ioc容器之间关系和调用方向\",{\"0\":{\"621\":1},\"1\":{\"615\":1}}],[\"ioc容器对象\",{\"1\":{\"571\":1}}],[\"ioc容器实例化逻辑的可插拔性点\",{\"1\":{\"561\":1}}],[\"ioc容器初始化时创建对象\",{\"1\":{\"560\":1}}],[\"ioc容器管理\",{\"1\":{\"555\":1}}],[\"ioc容器就可以管理这些bean之间的依赖关系\",{\"1\":{\"552\":1}}],[\"ioc容器中同类型的\",{\"1\":{\"598\":1}}],[\"ioc容器中\",{\"1\":{\"552\":1}}],[\"ioc容器中创建\",{\"1\":{\"72\":1}}],[\"ioc容器来管理bean之间的依赖关系\",{\"1\":{\"552\":1}}],[\"ioc容器通过xml文件或者注解\",{\"1\":{\"551\":1}}],[\"ioc容器通过依赖注入机制\",{\"1\":{\"551\":1}}],[\"ioc容器处理\",{\"1\":{\"551\":1}}],[\"ioc容器创建和使用\",{\"0\":{\"559\":1},\"1\":{\"542\":1}}],[\"ioc容器和容器实现\",{\"0\":{\"552\":1},\"1\":{\"542\":1}}],[\"ioc容器和核心概念\",{\"0\":{\"550\":1},\"1\":{\"542\":1}}],[\"ioc容器\",{\"1\":{\"221\":1,\"553\":1,\"613\":1,\"621\":2}}],[\"ioc容器为提供该类型的bean对象\",{\"1\":{\"73\":1}}],[\"ioc\",{\"0\":{\"73\":1,\"221\":1,\"553\":1,\"555\":1,\"557\":1,\"564\":1},\"1\":{\"221\":12,\"224\":5,\"228\":4,\"229\":1,\"231\":2,\"236\":1,\"238\":2,\"542\":4,\"548\":1,\"551\":1,\"552\":6,\"553\":6,\"555\":1,\"557\":5,\"560\":5,\"561\":1,\"562\":4,\"564\":1,\"565\":3,\"566\":1,\"568\":1,\"571\":1,\"572\":1,\"573\":2,\"598\":5,\"613\":3,\"625\":1}}],[\"iy\",{\"1\":{\"92\":1}}],[\"ips\",{\"1\":{\"628\":4}}],[\"ipage\",{\"1\":{\"472\":1}}],[\"ipage<map>\",{\"1\":{\"656\":1}}],[\"ipage<map<string\",{\"1\":{\"466\":1}}],[\"ipage<headline>\",{\"1\":{\"656\":2}}],[\"ipage<\",{\"1\":{\"472\":1}}],[\"ipage<user>\",{\"1\":{\"472\":1}}],[\"ipage<t>\",{\"1\":{\"466\":4}}],[\"ip+\",{\"1\":{\"192\":2,\"203\":2}}],[\"ip参考模型\",{\"1\":{\"189\":1,\"200\":1}}],[\"ip\",{\"1\":{\"90\":1,\"192\":3,\"203\":3}}],[\"iterable可迭代对象\",{\"1\":{\"317\":1}}],[\"iterable\",{\"1\":{\"317\":1}}],[\"iterator<string>\",{\"1\":{\"197\":1}}],[\"iterator\",{\"1\":{\"170\":11,\"176\":10,\"177\":3,\"197\":5}}],[\"item属性\",{\"1\":{\"529\":1}}],[\"items属性\",{\"1\":{\"265\":1}}],[\"items\",{\"0\":{\"260\":1},\"1\":{\"256\":1,\"265\":1,\"315\":2,\"325\":1,\"334\":2,\"361\":1}}],[\"item=\",{\"1\":{\"85\":1,\"529\":2}}],[\"item\",{\"1\":{\"85\":1,\"197\":2,\"255\":1}}],[\"itheima\",{\"1\":{\"58\":1,\"90\":1,\"92\":2}}],[\"ibatis3\",{\"1\":{\"491\":1}}],[\"ibatis\",{\"1\":{\"80\":1,\"480\":1,\"509\":1,\"514\":3,\"628\":2,\"680\":1}}],[\"idle\",{\"1\":{\"677\":3}}],[\"idlist\",{\"1\":{\"464\":2,\"466\":2,\"471\":2}}],[\"id属性\",{\"1\":{\"518\":1,\"557\":1}}],[\"id属性值\",{\"1\":{\"35\":1}}],[\"id`\",{\"1\":{\"517\":8}}],[\"idtype属性可选值\",{\"1\":{\"480\":1}}],[\"idtype\",{\"1\":{\"480\":1}}],[\"ideversion5\",{\"1\":{\"588\":1}}],[\"ide\",{\"1\":{\"388\":1,\"389\":1}}],[\"identified\",{\"1\":{\"277\":3}}],[\"idea连接数据库\",{\"1\":{\"539\":1}}],[\"idea配置本地maven\",{\"1\":{\"440\":1}}],[\"idea配置本地maven软件\",{\"0\":{\"396\":1}}],[\"idea中会自动打开maven视图\",{\"1\":{\"399\":1}}],[\"idea右下角会出现以下进度条\",{\"1\":{\"399\":1}}],[\"idea构建maven\",{\"0\":{\"399\":1,\"400\":1,\"443\":1,\"444\":1},\"1\":{\"436\":2}}],[\"idea根据packaging值\",{\"1\":{\"398\":1,\"442\":1}}],[\"idea工具默认自带maven配置软件\",{\"1\":{\"396\":1,\"440\":1}}],[\"idea\",{\"1\":{\"388\":2,\"393\":1,\"486\":1,\"539\":1,\"544\":2,\"588\":7}}],[\"idea自带\",{\"1\":{\"79\":1}}],[\"idea和数据库没有建立连接\",{\"1\":{\"77\":1}}],[\"idea集成maven\",{\"0\":{\"57\":1}}],[\"ideaprojects\",{\"1\":{\"28\":2}}],[\"id是getobiect返回的对象表示\",{\"1\":{\"229\":1}}],[\"id可以自己命名\",{\"1\":{\"224\":1}}],[\"ids\",{\"1\":{\"85\":2}}],[\"id+\",{\"1\":{\"68\":1}}],[\"id>\",{\"1\":{\"56\":1,\"395\":2,\"425\":2,\"426\":1,\"427\":1,\"440\":2}}],[\"id=o\",{\"1\":{\"519\":1}}],[\"id=c\",{\"1\":{\"518\":1}}],[\"id=100\",{\"1\":{\"356\":1}}],[\"id=id\",{\"1\":{\"334\":1}}],[\"id=student\",{\"1\":{\"334\":1}}],[\"id=\",{\"1\":{\"35\":1,\"41\":1,\"42\":1,\"43\":3,\"81\":1,\"82\":1,\"84\":1,\"85\":1,\"86\":1,\"219\":3,\"220\":2,\"222\":1,\"223\":2,\"224\":9,\"225\":2,\"227\":2,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"237\":1,\"253\":1,\"412\":1,\"467\":1,\"472\":1,\"481\":1,\"493\":2,\"502\":2,\"503\":1,\"504\":2,\"505\":2,\"508\":1,\"509\":2,\"510\":1,\"511\":1,\"512\":2,\"513\":7,\"514\":9,\"515\":5,\"517\":2,\"518\":3,\"519\":3,\"521\":1,\"525\":1,\"526\":3,\"527\":1,\"528\":1,\"529\":2,\"530\":1,\"555\":3,\"557\":4,\"558\":10,\"560\":4,\"561\":1,\"562\":8,\"568\":2,\"572\":1,\"573\":1,\"575\":1,\"596\":3,\"630\":1,\"641\":4,\"656\":2,\"680\":2}}],[\"id选择器\",{\"1\":{\"35\":1}}],[\"id\",{\"1\":{\"29\":5,\"35\":1,\"68\":7,\"80\":3,\"81\":14,\"85\":4,\"92\":2,\"220\":3,\"240\":1,\"315\":2,\"334\":12,\"412\":3,\"425\":2,\"426\":2,\"460\":1,\"461\":5,\"464\":5,\"465\":1,\"466\":5,\"471\":5,\"472\":3,\"476\":4,\"477\":1,\"479\":1,\"480\":7,\"481\":3,\"484\":1,\"493\":5,\"502\":1,\"509\":1,\"511\":1,\"512\":8,\"513\":4,\"514\":10,\"515\":6,\"517\":39,\"518\":5,\"519\":5,\"521\":2,\"525\":1,\"527\":1,\"528\":1,\"530\":1,\"539\":2,\"555\":1,\"560\":1,\"562\":15,\"564\":3,\"565\":1,\"566\":1,\"568\":9,\"575\":9,\"577\":1,\"606\":6,\"625\":2,\"630\":1,\"634\":7,\"640\":3,\"641\":11,\"652\":1,\"677\":1,\"680\":6}}],[\"increment=1\",{\"1\":{\"514\":1}}],[\"increment\",{\"1\":{\"493\":1,\"514\":1,\"517\":2,\"625\":1,\"640\":1,\"651\":6}}],[\"inclass\",{\"1\":{\"150\":3}}],[\"includes>\",{\"1\":{\"413\":1}}],[\"include>\",{\"1\":{\"413\":1}}],[\"include\",{\"1\":{\"53\":2,\"231\":2,\"283\":2,\"564\":2}}],[\"injected\",{\"1\":{\"558\":1}}],[\"inject🫙1\",{\"1\":{\"387\":1}}],[\"inject\",{\"1\":{\"387\":1,\"566\":2}}],[\"injection\",{\"1\":{\"72\":1,\"221\":1,\"547\":1,\"553\":1}}],[\"in$2nf\",{\"1\":{\"341\":1}}],[\"inf\",{\"1\":{\"401\":2,\"445\":2,\"461\":1,\"675\":2,\"677\":1}}],[\"inferred\",{\"1\":{\"237\":1,\"573\":1}}],[\"informix\",{\"1\":{\"460\":1,\"628\":2}}],[\"information\",{\"1\":{\"422\":1}}],[\"info\",{\"1\":{\"91\":3,\"93\":1,\"130\":6,\"334\":4,\"406\":15,\"426\":14,\"505\":1,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"518\":1,\"519\":3,\"625\":1,\"630\":1,\"641\":1,\"677\":1,\"680\":2}}],[\"inet2\",{\"1\":{\"189\":2,\"200\":2}}],[\"inet1\",{\"1\":{\"189\":4,\"200\":4}}],[\"inetaddress\",{\"1\":{\"189\":6,\"191\":4,\"200\":6,\"202\":4}}],[\"innodb\",{\"1\":{\"651\":3}}],[\"inndex\",{\"1\":{\"171\":1}}],[\"innerhtml\",{\"1\":{\"45\":1,\"253\":1}}],[\"input=input\",{\"1\":{\"334\":2}}],[\"input\",{\"1\":{\"192\":8,\"203\":8,\"296\":1,\"334\":7,\"361\":1}}],[\"inputstreamreader\",{\"1\":{\"192\":2,\"203\":2}}],[\"inputstream|fileinputstream\",{\"1\":{\"181\":1}}],[\"inputstream\",{\"1\":{\"181\":1,\"191\":2,\"192\":4,\"202\":2,\"203\":4,\"220\":3,\"493\":3,\"628\":2}}],[\"inputmismatchexception\",{\"1\":{\"154\":2}}],[\"input后面的type可以跟text\",{\"1\":{\"34\":1}}],[\"invocationhandler\",{\"1\":{\"583\":5,\"587\":1}}],[\"invocation\",{\"1\":{\"534\":1}}],[\"invoke\",{\"1\":{\"187\":1,\"583\":2}}],[\"invokelater\",{\"1\":{\"23\":3}}],[\"inversion\",{\"1\":{\"72\":1,\"221\":1,\"553\":1}}],[\"inser\",{\"1\":{\"309\":1}}],[\"insertselective\",{\"1\":{\"539\":1}}],[\"insertauthor\",{\"1\":{\"515\":1}}],[\"insertuser\",{\"1\":{\"512\":2}}],[\"insert>\",{\"1\":{\"503\":1,\"512\":2,\"514\":1,\"641\":1}}],[\"insertemployee\",{\"1\":{\"503\":2,\"512\":4}}],[\"insert方法\",{\"0\":{\"463\":1},\"1\":{\"459\":1}}],[\"insert\",{\"1\":{\"81\":3,\"167\":2,\"313\":1,\"461\":1,\"463\":1,\"493\":3,\"503\":1,\"512\":3,\"514\":4,\"515\":7,\"517\":4,\"539\":1,\"562\":2,\"568\":1,\"575\":1,\"625\":3,\"640\":1,\"641\":4,\"651\":27,\"655\":1,\"657\":1}}],[\"inside\",{\"1\":{\"149\":3}}],[\"instantiateclass\",{\"1\":{\"621\":1}}],[\"instance\",{\"1\":{\"224\":1,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"456\":4,\"461\":1,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1,\"625\":1,\"673\":1,\"677\":1}}],[\"instanceof\",{\"1\":{\"147\":4,\"174\":1,\"175\":2,\"176\":3,\"178\":2,\"226\":1,\"559\":1}}],[\"install\",{\"1\":{\"50\":1,\"51\":1,\"52\":1,\"59\":1,\"274\":1,\"277\":2,\"279\":1,\"280\":2,\"281\":1,\"285\":1,\"288\":2,\"334\":2,\"404\":1,\"405\":1,\"406\":1,\"450\":4,\"636\":3,\"638\":1,\"649\":1}}],[\"ins>\",{\"1\":{\"34\":1}}],[\"in\",{\"1\":{\"43\":2,\"85\":2,\"109\":1,\"149\":2,\"154\":3,\"192\":1,\"203\":1,\"294\":1,\"303\":1,\"305\":2,\"307\":1,\"311\":2,\"312\":2,\"315\":4,\"317\":1,\"325\":1,\"328\":1,\"334\":14,\"361\":2,\"368\":1,\"412\":2,\"544\":1,\"621\":1}}],[\"index属性\",{\"1\":{\"529\":1}}],[\"index属性指定参数角标\",{\"1\":{\"224\":1,\"558\":1}}],[\"index>size\",{\"1\":{\"371\":1}}],[\"index<=0\",{\"1\":{\"371\":1}}],[\"index表示的是倒数index个节点\",{\"1\":{\"371\":1}}],[\"index不一样\",{\"1\":{\"265\":1}}],[\"index=\",{\"1\":{\"224\":5,\"529\":1,\"558\":3}}],[\"index从0开始\",{\"1\":{\"166\":1,\"224\":1,\"558\":1}}],[\"index是下标\",{\"1\":{\"43\":1}}],[\"indexof\",{\"1\":{\"40\":1,\"166\":2,\"167\":1,\"171\":2,\"188\":2}}],[\"index\",{\"1\":{\"34\":1,\"43\":2,\"50\":1,\"53\":4,\"166\":1,\"167\":3,\"171\":7,\"283\":4,\"307\":2,\"311\":1,\"317\":2,\"371\":3,\"401\":2,\"445\":2,\"491\":1,\"651\":1,\"675\":1}}],[\"initmethod\",{\"1\":{\"237\":3,\"573\":2}}],[\"init\",{\"1\":{\"93\":2,\"227\":2,\"232\":1,\"237\":3,\"252\":1,\"327\":2,\"328\":1,\"329\":5,\"334\":9,\"505\":1,\"514\":1,\"518\":1,\"552\":1,\"560\":3,\"565\":2,\"573\":3}}],[\"initializingbean\",{\"1\":{\"628\":1}}],[\"initialization\",{\"1\":{\"237\":1,\"573\":1,\"621\":1}}],[\"initial\",{\"1\":{\"34\":1,\"253\":1,\"677\":1}}],[\"initimage\",{\"1\":{\"28\":4}}],[\"initjmenubar\",{\"1\":{\"28\":4}}],[\"initjframe\",{\"1\":{\"28\":4}}],[\"introducing\",{\"1\":{\"662\":1}}],[\"intvalue\",{\"1\":{\"655\":2,\"657\":1}}],[\"int结尾\",{\"1\":{\"590\":1}}],[\"int是4字节32位的\",{\"1\":{\"116\":1}}],[\"into\",{\"1\":{\"81\":1,\"461\":1,\"493\":3,\"503\":1,\"512\":2,\"514\":1,\"517\":4,\"562\":2,\"568\":1,\"575\":1,\"625\":3,\"640\":1,\"641\":1,\"651\":27}}],[\"integration<\",{\"1\":{\"625\":1}}],[\"integration\",{\"1\":{\"625\":1}}],[\"integer类作为int的包装类\",{\"1\":{\"158\":1}}],[\"integer\",{\"1\":{\"16\":5,\"17\":4,\"68\":5,\"69\":1,\"80\":1,\"81\":1,\"169\":2,\"187\":4,\"461\":1,\"466\":1,\"472\":1,\"480\":3,\"481\":7,\"484\":2,\"493\":2,\"501\":1,\"502\":1,\"504\":1,\"508\":8,\"509\":1,\"513\":2,\"514\":3,\"515\":1,\"517\":6,\"518\":2,\"519\":2,\"562\":8,\"568\":6,\"575\":6,\"606\":3,\"608\":1,\"625\":1,\"640\":1,\"641\":3,\"652\":8,\"653\":3,\"655\":2,\"656\":9,\"657\":4,\"673\":3,\"680\":3}}],[\"intellij\",{\"1\":{\"539\":2,\"588\":6}}],[\"interruptedexception\",{\"1\":{\"609\":1}}],[\"intercepts\",{\"1\":{\"534\":1}}],[\"intercept\",{\"1\":{\"534\":1}}],[\"interceptor=\",{\"1\":{\"535\":1,\"628\":2}}],[\"interceptorchain\",{\"1\":{\"534\":1}}],[\"interceptorregistry\",{\"1\":{\"94\":1,\"657\":1,\"676\":2}}],[\"interceptor\",{\"1\":{\"32\":1,\"472\":3,\"484\":3,\"485\":3,\"534\":3,\"652\":5,\"676\":2}}],[\"interval\",{\"1\":{\"356\":1}}],[\"intern\",{\"1\":{\"165\":1}}],[\"interfaces\",{\"1\":{\"583\":3}}],[\"interface\",{\"1\":{\"22\":1,\"76\":1,\"80\":1,\"113\":1,\"139\":1,\"147\":1,\"151\":2,\"237\":1,\"461\":1,\"467\":1,\"470\":1,\"478\":1,\"480\":1,\"493\":1,\"514\":1,\"518\":1,\"519\":1,\"539\":1,\"562\":2,\"568\":2,\"573\":1,\"575\":2,\"582\":1,\"588\":1,\"630\":1,\"641\":1,\"656\":1,\"665\":1,\"680\":1}}],[\"int\",{\"1\":{\"6\":1,\"7\":1,\"11\":4,\"12\":1,\"16\":4,\"17\":1,\"22\":5,\"28\":1,\"68\":1,\"80\":1,\"81\":1,\"108\":1,\"109\":1,\"110\":1,\"112\":7,\"114\":4,\"116\":2,\"117\":5,\"119\":3,\"121\":8,\"122\":2,\"124\":7,\"125\":3,\"126\":15,\"127\":3,\"130\":4,\"135\":3,\"138\":2,\"145\":3,\"146\":4,\"149\":2,\"150\":1,\"154\":1,\"160\":4,\"164\":1,\"166\":15,\"167\":16,\"169\":2,\"170\":1,\"171\":13,\"174\":2,\"175\":2,\"176\":24,\"177\":1,\"178\":2,\"180\":3,\"183\":3,\"185\":2,\"186\":2,\"188\":2,\"191\":4,\"192\":1,\"194\":1,\"197\":4,\"202\":4,\"203\":1,\"205\":1,\"213\":1,\"214\":1,\"215\":3,\"295\":1,\"311\":1,\"334\":1,\"338\":1,\"365\":1,\"366\":19,\"367\":10,\"368\":2,\"370\":15,\"371\":8,\"461\":1,\"463\":1,\"464\":4,\"465\":2,\"471\":5,\"474\":1,\"476\":3,\"477\":2,\"478\":3,\"479\":1,\"481\":4,\"484\":3,\"493\":1,\"501\":2,\"503\":1,\"504\":1,\"505\":2,\"507\":1,\"508\":11,\"512\":2,\"514\":4,\"515\":1,\"517\":4,\"529\":1,\"535\":3,\"539\":5,\"558\":2,\"562\":3,\"568\":2,\"575\":2,\"582\":44,\"583\":4,\"588\":40,\"589\":10,\"590\":6,\"591\":21,\"606\":1,\"607\":1,\"612\":1,\"625\":1,\"628\":1,\"640\":6,\"641\":4,\"651\":12,\"652\":3,\"655\":3,\"657\":1}}],[\"if和where标签\",{\"0\":{\"525\":1},\"1\":{\"489\":1}}],[\"iffull\",{\"1\":{\"367\":2,\"370\":2}}],[\"if语句\",{\"1\":{\"334\":1}}],[\"if>\",{\"1\":{\"84\":2,\"525\":2,\"526\":2,\"527\":4,\"656\":2}}],[\"if=\",{\"1\":{\"43\":4}}],[\"if\",{\"0\":{\"84\":1,\"301\":1},\"1\":{\"17\":1,\"26\":2,\"28\":4,\"38\":2,\"43\":3,\"45\":1,\"90\":1,\"93\":2,\"95\":2,\"117\":1,\"121\":3,\"122\":1,\"126\":6,\"135\":1,\"138\":2,\"147\":4,\"174\":2,\"175\":2,\"176\":10,\"178\":2,\"183\":1,\"184\":1,\"185\":3,\"186\":3,\"187\":2,\"191\":4,\"192\":1,\"194\":1,\"197\":1,\"202\":4,\"203\":1,\"205\":1,\"253\":2,\"294\":1,\"299\":2,\"301\":2,\"328\":1,\"334\":9,\"366\":2,\"367\":4,\"370\":18,\"371\":22,\"412\":3,\"461\":1,\"476\":2,\"525\":1,\"540\":1,\"621\":2,\"628\":1,\"651\":3,\"652\":1,\"655\":7,\"657\":2}}],[\"i\",{\"1\":{\"11\":6,\"12\":2,\"121\":6,\"125\":4,\"126\":9,\"138\":5,\"160\":1,\"169\":2,\"170\":5,\"174\":3,\"175\":3,\"177\":3,\"178\":3,\"183\":1,\"184\":2,\"194\":2,\"205\":2,\"252\":1,\"298\":1,\"311\":1,\"312\":3,\"315\":6,\"317\":5,\"320\":3,\"334\":2,\"338\":1,\"361\":2,\"366\":11,\"367\":4,\"370\":2,\"412\":4,\"566\":1,\"582\":24,\"583\":3,\"588\":12,\"607\":1,\"612\":1,\"652\":3}}],[\"imag\",{\"1\":{\"295\":1}}],[\"image\",{\"1\":{\"22\":3,\"40\":1,\"211\":1,\"387\":2,\"388\":1,\"393\":1,\"394\":1,\"396\":1,\"399\":3,\"400\":6,\"405\":1,\"412\":1,\"421\":1,\"423\":4,\"425\":3,\"431\":1,\"432\":2,\"433\":3,\"434\":1,\"544\":1}}],[\"imagelogin\",{\"1\":{\"22\":2}}],[\"imageicon\",{\"1\":{\"22\":7,\"23\":1,\"25\":1,\"28\":4}}],[\"images\",{\"1\":{\"0\":1,\"23\":1,\"25\":1,\"28\":2,\"387\":1,\"401\":1,\"422\":1,\"423\":3,\"424\":2,\"425\":2,\"426\":1,\"445\":1}}],[\"img\",{\"1\":{\"214\":1,\"334\":1,\"352\":2,\"388\":1,\"429\":1,\"552\":2,\"557\":1,\"564\":1,\"566\":1,\"582\":1,\"583\":2,\"584\":3,\"587\":1,\"590\":2,\"593\":2,\"595\":1,\"612\":1}}],[\"imperial\",{\"1\":{\"426\":2}}],[\"impore\",{\"1\":{\"319\":1}}],[\"import扩展\",{\"0\":{\"574\":1},\"1\":{\"542\":1}}],[\"imports\",{\"1\":{\"461\":1,\"652\":1,\"677\":1}}],[\"import语句\",{\"1\":{\"330\":1}}],[\"import多个配置类合并\",{\"0\":{\"239\":1}}],[\"import\",{\"1\":{\"11\":1,\"12\":3,\"50\":2,\"109\":1,\"126\":1,\"154\":2,\"160\":1,\"162\":1,\"163\":2,\"164\":2,\"170\":4,\"188\":2,\"235\":3,\"238\":4,\"239\":2,\"248\":7,\"277\":1,\"294\":2,\"315\":1,\"326\":1,\"330\":2,\"334\":9,\"351\":2,\"352\":1,\"353\":1,\"354\":4,\"355\":3,\"356\":2,\"361\":2,\"411\":1,\"478\":3,\"493\":1,\"514\":10,\"539\":1,\"566\":1,\"567\":2,\"571\":3,\"573\":4,\"574\":2,\"588\":2,\"611\":7,\"652\":2,\"655\":7,\"664\":4,\"668\":2,\"669\":2,\"670\":2,\"673\":5,\"676\":10}}],[\"imp\",{\"1\":{\"219\":1,\"594\":1,\"596\":1}}],[\"impl\",{\"1\":{\"214\":1,\"480\":1,\"562\":2,\"584\":1,\"590\":2,\"680\":1}}],[\"impl=org\",{\"1\":{\"80\":1}}],[\"implements\",{\"1\":{\"26\":1,\"27\":1,\"28\":2,\"29\":1,\"93\":1,\"94\":2,\"139\":2,\"147\":2,\"151\":1,\"176\":1,\"187\":2,\"188\":1,\"195\":1,\"206\":1,\"229\":1,\"470\":1,\"561\":1,\"562\":2,\"568\":2,\"575\":2,\"582\":2,\"583\":1,\"588\":1,\"626\":1,\"628\":1,\"630\":1,\"641\":1,\"653\":1,\"655\":1,\"656\":1,\"657\":2,\"676\":2}}],[\"cyclic\",{\"1\":{\"588\":1}}],[\"c01\",{\"1\":{\"517\":1}}],[\"c依赖a\",{\"1\":{\"415\":1}}],[\"crossorigin\",{\"1\":{\"641\":2,\"655\":1,\"656\":1}}],[\"cross\",{\"1\":{\"584\":1}}],[\"crud强化练习\",{\"0\":{\"514\":1},\"1\":{\"489\":1}}],[\"crud\",{\"1\":{\"460\":3,\"461\":1,\"462\":1,\"468\":2}}],[\"crud方法介绍\",{\"0\":{\"471\":1},\"1\":{\"459\":1}}],[\"crypto🫙5\",{\"1\":{\"387\":1}}],[\"creatnewfile\",{\"1\":{\"182\":1}}],[\"createtoken\",{\"1\":{\"655\":3}}],[\"createtest\",{\"1\":{\"514\":1}}],[\"createwebapplicationcontext\",{\"1\":{\"621\":1}}],[\"createwindow\",{\"1\":{\"23\":9}}],[\"createclientserviceinstance\",{\"1\":{\"223\":2,\"557\":2}}],[\"createinstance\",{\"1\":{\"222\":2,\"557\":2}}],[\"create\",{\"1\":{\"49\":1,\"269\":1,\"277\":1,\"461\":1,\"478\":1,\"493\":2,\"514\":1,\"517\":2,\"562\":2,\"568\":2,\"575\":2,\"625\":2,\"640\":1,\"651\":22,\"656\":2}}],[\"createdate\",{\"1\":{\"539\":1}}],[\"createdatasource\",{\"1\":{\"236\":1,\"572\":1}}],[\"created\",{\"1\":{\"44\":1,\"517\":2}}],[\"createstatement\",{\"1\":{\"5\":1,\"11\":1,\"12\":1}}],[\"c得到一个hello\",{\"1\":{\"338\":1}}],[\"c文件和头文件展开到\",{\"1\":{\"338\":1}}],[\"c经过预处理\",{\"1\":{\"338\":1}}],[\"c++添加了class来进行面向对象编程\",{\"1\":{\"334\":1}}],[\"c=a+b\",{\"1\":{\"334\":1}}],[\"c=b>a\",{\"1\":{\"119\":1}}],[\"cd\",{\"1\":{\"283\":1,\"412\":2}}],[\"cmd2\",{\"1\":{\"412\":2}}],[\"cmd1\",{\"1\":{\"412\":2}}],[\"cmd窗口\",{\"1\":{\"394\":1}}],[\"cmd\",{\"1\":{\"276\":2}}],[\"ctcc绍兴柯桥站圆满落幕\",{\"1\":{\"651\":1}}],[\"ctx\",{\"1\":{\"239\":3,\"574\":3}}],[\"ctrl+shit+\",{\"1\":{\"107\":2}}],[\"ctrl+\",{\"1\":{\"107\":1}}],[\"cglib动态代理生效\",{\"0\":{\"218\":1,\"594\":1},\"1\":{\"542\":1}}],[\"cglib\",{\"1\":{\"211\":1,\"583\":2,\"587\":1}}],[\"cc\",{\"1\":{\"177\":2,\"178\":1}}],[\"cutting\",{\"1\":{\"584\":1}}],[\"cutecat\",{\"1\":{\"334\":6}}],[\"customized\",{\"1\":{\"675\":2}}],[\"custom\",{\"1\":{\"485\":1,\"621\":1}}],[\"customermapper\",{\"1\":{\"519\":7}}],[\"customermapper接口\",{\"1\":{\"519\":1}}],[\"customer`\",{\"1\":{\"517\":2}}],[\"customername\",{\"1\":{\"517\":3,\"518\":1,\"519\":1}}],[\"customerid\",{\"1\":{\"517\":3,\"518\":1,\"519\":4}}],[\"customer\",{\"1\":{\"175\":6,\"178\":10,\"517\":9,\"518\":9,\"519\":18}}],[\"cubrid\",{\"1\":{\"460\":1}}],[\"curd\",{\"1\":{\"406\":8,\"460\":1}}],[\"curnew\",{\"1\":{\"371\":9}}],[\"curh2\",{\"1\":{\"371\":7}}],[\"curh1\",{\"1\":{\"371\":8}}],[\"cur\",{\"1\":{\"371\":19}}],[\"currentpage\",{\"1\":{\"634\":2,\"640\":1,\"641\":7}}],[\"current\",{\"1\":{\"334\":4,\"472\":3,\"662\":1,\"665\":1,\"667\":1,\"674\":1,\"675\":1}}],[\"currentthread\",{\"1\":{\"194\":1,\"196\":1,\"205\":1,\"207\":1}}],[\"currenttimemillis\",{\"1\":{\"92\":1,\"100\":2,\"138\":2,\"161\":1,\"655\":1}}],[\"cursorline\",{\"1\":{\"286\":1}}],[\"ci\",{\"1\":{\"651\":9}}],[\"circlearray\",{\"1\":{\"370\":2}}],[\"circle\",{\"1\":{\"130\":11}}],[\"city\",{\"1\":{\"68\":1}}],[\"city=北京这样传递\",{\"1\":{\"68\":1}}],[\"city定义著作的标题\",{\"1\":{\"34\":1}}],[\"cite>是一本书<\",{\"1\":{\"34\":1}}],[\"c语言asccii码\",{\"1\":{\"106\":1}}],[\"c2m\",{\"1\":{\"346\":1}}],[\"c2\",{\"1\":{\"90\":1,\"130\":1,\"175\":3,\"178\":3}}],[\"c1\",{\"1\":{\"90\":1,\"130\":2,\"175\":3,\"178\":3,\"318\":4}}],[\"cj\",{\"1\":{\"76\":1,\"220\":1,\"461\":1,\"493\":1,\"514\":1,\"562\":1,\"606\":1,\"628\":1,\"652\":1,\"668\":1,\"671\":3,\"677\":1,\"680\":1}}],[\"csiidb\",{\"1\":{\"460\":1}}],[\"cst\",{\"1\":{\"162\":2,\"163\":2}}],[\"cs架构\",{\"1\":{\"67\":1}}],[\"cssflex\",{\"0\":{\"255\":1},\"2\":{\"267\":1}}],[\"css样式\",{\"1\":{\"43\":1}}],[\"css中的盒子模型\",{\"1\":{\"35\":1}}],[\"css选择器\",{\"1\":{\"35\":1}}],[\"css文件中\",{\"1\":{\"35\":1}}],[\"css负责网页的表现\",{\"1\":{\"33\":1}}],[\"css\",{\"0\":{\"35\":1},\"1\":{\"32\":1,\"34\":1,\"40\":1,\"50\":1,\"401\":2,\"445\":2,\"675\":1}}],[\"choose>\",{\"1\":{\"528\":1}}],[\"choose\",{\"0\":{\"528\":1},\"1\":{\"489\":1}}],[\"checklogin\",{\"1\":{\"657\":3}}],[\"checkusername\",{\"1\":{\"655\":6}}],[\"checks\",{\"1\":{\"651\":2}}],[\"checktransactiontimeout\",{\"1\":{\"609\":1}}],[\"checker\",{\"1\":{\"387\":1}}],[\"checkerframework\",{\"1\":{\"387\":1}}],[\"checkbox\",{\"1\":{\"34\":1}}],[\"chessarr2\",{\"1\":{\"366\":3}}],[\"chessarr1\",{\"1\":{\"366\":7}}],[\"chen\",{\"1\":{\"334\":5}}],[\"chen=student\",{\"1\":{\"334\":1}}],[\"chrome\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"chr\",{\"1\":{\"295\":1}}],[\"ch\",{\"1\":{\"167\":2,\"387\":2,\"625\":1}}],[\"china\",{\"1\":{\"130\":1,\"184\":1,\"185\":1}}],[\"chatgpt就运行在这个行业之上\",{\"1\":{\"651\":1}}],[\"chatgpt的影响和机会分析\",{\"1\":{\"651\":1}}],[\"changeschedule\",{\"1\":{\"641\":1}}],[\"changename\",{\"1\":{\"612\":2}}],[\"changeage\",{\"1\":{\"612\":2}}],[\"change\",{\"1\":{\"253\":1}}],[\"changeinfo\",{\"1\":{\"247\":3,\"248\":1,\"606\":2,\"607\":2,\"609\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"chain\",{\"1\":{\"93\":2,\"675\":4}}],[\"chalk\",{\"1\":{\"50\":1}}],[\"chart\",{\"1\":{\"356\":1}}],[\"charset定义字符编码的名称\",{\"1\":{\"674\":1}}],[\"charset和spring\",{\"1\":{\"674\":1}}],[\"charset>\",{\"1\":{\"625\":1}}],[\"charset=utf8\",{\"1\":{\"514\":1}}],[\"charset=\",{\"1\":{\"34\":1,\"253\":1}}],[\"chars可选参数\",{\"1\":{\"317\":1}}],[\"chars\",{\"1\":{\"317\":1,\"652\":4}}],[\"character\",{\"1\":{\"169\":1,\"501\":1,\"508\":4,\"651\":9}}],[\"charat\",{\"1\":{\"40\":1,\"166\":1,\"167\":2,\"368\":1}}],[\"char\",{\"1\":{\"112\":2,\"114\":3,\"124\":1,\"166\":2,\"167\":3,\"169\":2,\"183\":2,\"186\":4,\"188\":2,\"368\":1,\"493\":1,\"508\":4,\"517\":2,\"625\":1,\"652\":3}}],[\"central\",{\"1\":{\"424\":1}}],[\"center\",{\"1\":{\"34\":2,\"258\":1,\"260\":1,\"261\":1,\"426\":4}}],[\"cellspacing=\",{\"1\":{\"34\":1}}],[\"cellspacing\",{\"1\":{\"34\":1}}],[\"c\",{\"1\":{\"24\":26,\"28\":2,\"114\":1,\"119\":1,\"147\":2,\"164\":6,\"169\":2,\"185\":2,\"186\":6,\"189\":1,\"200\":1,\"218\":1,\"299\":2,\"305\":2,\"315\":2,\"334\":5,\"338\":7,\"415\":7,\"416\":1,\"448\":3,\"517\":6,\"518\":2,\"519\":5,\"588\":8,\"594\":1,\"652\":1}}],[\"cld\",{\"1\":{\"338\":1}}],[\"clearlastupdated\",{\"1\":{\"412\":3}}],[\"clear和vertical\",{\"1\":{\"255\":1}}],[\"clear\",{\"1\":{\"170\":2,\"177\":1,\"316\":1,\"412\":6,\"505\":1,\"514\":1,\"518\":1}}],[\"cleanup\",{\"1\":{\"227\":1,\"237\":2,\"560\":2,\"565\":1,\"573\":2}}],[\"clean\",{\"1\":{\"59\":2,\"404\":3,\"406\":2,\"425\":1,\"450\":7}}],[\"claim\",{\"1\":{\"655\":1}}],[\"claimsjws\",{\"1\":{\"655\":2}}],[\"claims\",{\"1\":{\"92\":7,\"655\":3}}],[\"cla\",{\"1\":{\"127\":3}}],[\"classloader\",{\"1\":{\"583\":4}}],[\"classes=\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"classes根目录下\",{\"1\":{\"413\":1}}],[\"classes\",{\"1\":{\"401\":1,\"445\":1,\"562\":11,\"568\":7,\"575\":7,\"588\":2,\"607\":1,\"612\":1}}],[\"classworlds类加载器框架\",{\"1\":{\"393\":1}}],[\"classic🫙1\",{\"1\":{\"387\":1}}],[\"classic<\",{\"1\":{\"59\":2,\"625\":1}}],[\"classname\",{\"1\":{\"327\":2,\"329\":1}}],[\"classnotfoundexception\",{\"1\":{\"187\":1,\"188\":2}}],[\"classpathresource\",{\"1\":{\"628\":2}}],[\"classpath\",{\"1\":{\"231\":1,\"235\":4,\"236\":3,\"242\":3,\"244\":1,\"411\":7,\"467\":2,\"555\":1,\"562\":2,\"568\":1,\"571\":2,\"572\":3,\"575\":1,\"579\":2,\"580\":1,\"588\":2,\"596\":1,\"606\":1,\"607\":2,\"628\":2,\"667\":1,\"675\":11,\"680\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"221\":2,\"226\":4,\"552\":1,\"555\":2,\"559\":3,\"560\":1,\"561\":1,\"562\":4,\"568\":1,\"571\":1}}],[\"class是factorybean1标准化工厂类\",{\"1\":{\"229\":1}}],[\"class<t>\",{\"1\":{\"555\":1}}],[\"class<\",{\"1\":{\"229\":2,\"561\":2,\"583\":1,\"621\":1,\"623\":4,\"629\":4}}],[\"class属性\",{\"1\":{\"222\":1,\"557\":2}}],[\"class属性值\",{\"1\":{\"35\":1}}],[\"classdemo\",{\"1\":{\"185\":1}}],[\"classcastexception\",{\"1\":{\"146\":1}}],[\"class里面的\",{\"1\":{\"112\":1}}],[\"class的字节码文件\",{\"1\":{\"106\":1}}],[\"class=\",{\"1\":{\"35\":1,\"219\":2,\"222\":1,\"223\":1,\"224\":9,\"225\":2,\"227\":2,\"228\":1,\"229\":1,\"231\":1,\"236\":1,\"237\":1,\"555\":3,\"557\":3,\"558\":10,\"560\":4,\"561\":1,\"562\":7,\"568\":2,\"572\":1,\"573\":1,\"596\":2,\"625\":1}}],[\"class\",{\"0\":{\"138\":1},\"1\":{\"11\":1,\"12\":1,\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1,\"40\":1,\"61\":1,\"76\":1,\"93\":1,\"94\":2,\"96\":2,\"98\":1,\"100\":1,\"106\":1,\"108\":1,\"109\":1,\"113\":1,\"127\":1,\"130\":4,\"135\":2,\"136\":1,\"138\":3,\"139\":1,\"145\":6,\"146\":7,\"147\":4,\"149\":5,\"150\":5,\"151\":3,\"154\":1,\"155\":5,\"160\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"170\":1,\"176\":3,\"185\":2,\"186\":1,\"187\":2,\"188\":2,\"192\":5,\"194\":2,\"195\":1,\"197\":4,\"203\":5,\"205\":2,\"206\":1,\"208\":1,\"212\":1,\"220\":2,\"222\":1,\"223\":1,\"226\":2,\"229\":2,\"232\":1,\"233\":2,\"235\":1,\"236\":1,\"237\":4,\"238\":2,\"239\":8,\"240\":1,\"242\":2,\"244\":1,\"247\":5,\"248\":3,\"294\":1,\"327\":3,\"328\":1,\"329\":3,\"334\":10,\"366\":1,\"367\":1,\"370\":4,\"371\":2,\"401\":1,\"445\":1,\"461\":5,\"470\":1,\"478\":2,\"480\":3,\"481\":2,\"493\":3,\"505\":1,\"508\":2,\"510\":1,\"511\":1,\"512\":1,\"514\":7,\"517\":6,\"518\":2,\"519\":1,\"535\":1,\"555\":2,\"557\":3,\"558\":6,\"559\":2,\"560\":7,\"561\":3,\"562\":19,\"564\":10,\"565\":4,\"566\":11,\"567\":1,\"568\":10,\"571\":3,\"572\":1,\"573\":10,\"574\":8,\"575\":12,\"577\":1,\"580\":2,\"582\":2,\"583\":2,\"588\":5,\"591\":1,\"594\":1,\"596\":1,\"606\":5,\"607\":4,\"608\":1,\"609\":1,\"610\":5,\"611\":3,\"612\":6,\"621\":2,\"623\":4,\"625\":1,\"626\":1,\"627\":1,\"628\":7,\"629\":5,\"630\":2,\"640\":3,\"641\":2,\"652\":5,\"653\":1,\"655\":4,\"656\":3,\"657\":2,\"664\":3,\"668\":1,\"669\":1,\"670\":2,\"673\":4,\"675\":1,\"676\":2,\"677\":5,\"680\":6,\"682\":1}}],[\"cloud<\",{\"1\":{\"387\":1}}],[\"cloud\",{\"1\":{\"387\":23,\"547\":1,\"549\":1}}],[\"cloumn\",{\"1\":{\"81\":1}}],[\"close属性\",{\"1\":{\"529\":1}}],[\"close=\",{\"1\":{\"85\":1}}],[\"closeitem\",{\"1\":{\"28\":7}}],[\"close\",{\"1\":{\"11\":4,\"12\":3,\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1,\"85\":1,\"109\":1,\"147\":4,\"183\":2,\"184\":1,\"185\":4,\"186\":3,\"187\":6,\"188\":10,\"191\":7,\"192\":2,\"202\":7,\"203\":2,\"220\":1,\"334\":1,\"356\":1,\"368\":1,\"493\":1,\"505\":1,\"514\":1,\"518\":1,\"575\":1,\"602\":1,\"628\":1}}],[\"client🫙1\",{\"1\":{\"387\":2}}],[\"client4🫙1\",{\"1\":{\"387\":1}}],[\"clientserviceimpl\",{\"1\":{\"223\":2,\"557\":2}}],[\"clientservice\",{\"1\":{\"222\":9,\"223\":4,\"557\":13}}],[\"client\",{\"1\":{\"192\":1,\"203\":1,\"398\":1,\"442\":1}}],[\"clickhouse\",{\"1\":{\"460\":1}}],[\"click\",{\"1\":{\"147\":2}}],[\"click=\",{\"1\":{\"43\":1}}],[\"cli\",{\"1\":{\"48\":1}}],[\"cli提供了如下功能\",{\"1\":{\"48\":1}}],[\"cli是vue官方提供的一个脚手架\",{\"1\":{\"48\":1}}],[\"cls\",{\"1\":{\"35\":1,\"40\":1,\"412\":2}}],[\"c3p0\",{\"1\":{\"10\":1}}],[\"caused\",{\"1\":{\"485\":1,\"608\":1}}],[\"cas\",{\"1\":{\"483\":1}}],[\"case\",{\"1\":{\"368\":5,\"680\":1}}],[\"case中或者循环中\",{\"1\":{\"122\":1}}],[\"case=true\",{\"1\":{\"81\":1}}],[\"canread\",{\"1\":{\"182\":1}}],[\"canwrite\",{\"1\":{\"182\":1}}],[\"callable\",{\"1\":{\"515\":2}}],[\"callablestatement\",{\"1\":{\"5\":1,\"515\":2}}],[\"calss\",{\"1\":{\"334\":1}}],[\"calss=\",{\"1\":{\"334\":1}}],[\"calculate\",{\"1\":{\"334\":7}}],[\"calculatorstaticproxy\",{\"1\":{\"583\":2}}],[\"calculatorlogimpl\",{\"1\":{\"582\":1,\"583\":1}}],[\"calculatorpure\",{\"1\":{\"219\":1,\"596\":1}}],[\"calculatorpureimpl\",{\"1\":{\"212\":3,\"213\":4,\"216\":1,\"219\":1,\"582\":1,\"588\":5,\"591\":4,\"596\":1}}],[\"calculator\",{\"1\":{\"215\":1,\"582\":3,\"583\":5,\"588\":5,\"589\":3,\"591\":3,\"596\":4}}],[\"calendar\",{\"1\":{\"164\":8}}],[\"calendar类\",{\"0\":{\"164\":1}}],[\"catalog\",{\"1\":{\"567\":3}}],[\"catname\",{\"1\":{\"334\":2}}],[\"cat1\",{\"1\":{\"334\":8}}],[\"cat\",{\"1\":{\"146\":6,\"147\":2,\"334\":4}}],[\"catch是可以嵌套的\",{\"1\":{\"154\":1}}],[\"catch语句内部是对异常对象的处理\",{\"1\":{\"154\":1}}],[\"catchmouse\",{\"1\":{\"146\":3,\"147\":1}}],[\"catch处理\",{\"1\":{\"96\":1}}],[\"catch\",{\"1\":{\"93\":1,\"95\":1,\"154\":3,\"155\":3,\"183\":3,\"184\":2,\"185\":5,\"186\":9,\"187\":8,\"189\":1,\"191\":9,\"192\":3,\"200\":1,\"202\":9,\"203\":3,\"211\":1,\"212\":1,\"216\":1,\"368\":2,\"583\":1,\"584\":1,\"592\":2,\"602\":1,\"609\":1,\"652\":1,\"655\":1}}],[\"category=\",{\"1\":{\"334\":4}}],[\"category\",{\"1\":{\"0\":1,\"1\":1,\"334\":1}}],[\"camel\",{\"1\":{\"81\":1,\"680\":1}}],[\"cache\",{\"1\":{\"64\":1,\"675\":4}}],[\"court\",{\"1\":{\"426\":2}}],[\"course\",{\"1\":{\"334\":6}}],[\"cout\",{\"1\":{\"334\":2}}],[\"cout=cout+1\",{\"1\":{\"334\":1}}],[\"cout=0\",{\"1\":{\"334\":1}}],[\"count可选参数\",{\"1\":{\"323\":1}}],[\"count\",{\"1\":{\"311\":1,\"317\":3,\"366\":4,\"471\":2,\"508\":4,\"655\":2}}],[\"count++\",{\"1\":{\"197\":1,\"366\":1}}],[\"cowsay\",{\"1\":{\"279\":4,\"280\":1,\"281\":1}}],[\"cowsay相关\",{\"0\":{\"279\":1}}],[\"copy\",{\"1\":{\"180\":1,\"185\":5}}],[\"copyright\",{\"1\":{\"0\":1}}],[\"co\",{\"1\":{\"85\":1,\"346\":1}}],[\"cookie的缺点\",{\"1\":{\"91\":1}}],[\"cookie不能跨域\",{\"1\":{\"90\":1}}],[\"cookies\",{\"1\":{\"90\":2}}],[\"cookie2\",{\"1\":{\"90\":1}}],[\"cookie1\",{\"1\":{\"90\":1}}],[\"cookie\",{\"0\":{\"90\":1},\"1\":{\"64\":1,\"89\":1,\"90\":6,\"251\":1}}],[\"core<\",{\"1\":{\"415\":1,\"418\":2,\"431\":1,\"432\":1,\"448\":1,\"452\":2,\"456\":4,\"625\":1}}],[\"core🫙0\",{\"1\":{\"387\":2}}],[\"core🫙9\",{\"1\":{\"387\":1}}],[\"core🫙2\",{\"1\":{\"387\":3}}],[\"core🫙1\",{\"1\":{\"387\":3}}],[\"core🫙10\",{\"1\":{\"387\":1}}],[\"core🫙5\",{\"1\":{\"387\":1}}],[\"core\",{\"1\":{\"40\":1,\"387\":3,\"415\":1,\"429\":2,\"432\":2,\"448\":1,\"455\":4,\"456\":3,\"485\":1,\"548\":1,\"562\":2,\"568\":1,\"588\":2,\"609\":1,\"625\":1}}],[\"code旗下\",{\"1\":{\"491\":1}}],[\"codec🫙1\",{\"1\":{\"387\":1}}],[\"codec\",{\"1\":{\"387\":1}}],[\"code\",{\"1\":{\"28\":2,\"69\":1,\"138\":3,\"334\":1,\"387\":1,\"491\":1,\"634\":4,\"640\":6,\"652\":15,\"655\":13,\"656\":3,\"657\":7}}],[\"col\",{\"1\":{\"365\":1}}],[\"collate\",{\"1\":{\"651\":9}}],[\"collaborators\",{\"1\":{\"555\":3}}],[\"coll2\",{\"1\":{\"170\":4}}],[\"coll1\",{\"1\":{\"170\":13}}],[\"coll\",{\"1\":{\"170\":40}}],[\"collection属性\",{\"1\":{\"529\":1}}],[\"collection标签\",{\"1\":{\"519\":1,\"522\":1}}],[\"collection>\",{\"1\":{\"517\":3,\"519\":1,\"521\":1}}],[\"collection<t>\",{\"1\":{\"471\":8}}],[\"collection<\",{\"1\":{\"464\":2,\"466\":2,\"471\":2}}],[\"collection与collections\",{\"1\":{\"180\":1}}],[\"collections🫙3\",{\"1\":{\"387\":1}}],[\"collections类中提供了多个synchronizedxxx\",{\"1\":{\"180\":1}}],[\"collections\",{\"1\":{\"180\":1,\"387\":1}}],[\"collections工具类的使用\",{\"0\":{\"180\":1}}],[\"collection\",{\"1\":{\"170\":12,\"171\":1,\"177\":2,\"180\":5,\"464\":1,\"466\":1,\"508\":2,\"519\":1,\"529\":1}}],[\"collection接口\",{\"0\":{\"170\":1},\"1\":{\"169\":2}}],[\"collection=\",{\"1\":{\"85\":1,\"529\":2}}],[\"cols=\",{\"1\":{\"34\":1}}],[\"color=cat\",{\"1\":{\"334\":2}}],[\"color\",{\"1\":{\"21\":1,\"34\":4,\"36\":1,\"334\":10,\"412\":1}}],[\"column=\",{\"1\":{\"513\":3,\"517\":12,\"518\":4,\"519\":4,\"521\":4}}],[\"column属性用于指定字段名\",{\"1\":{\"513\":1}}],[\"columnmap\",{\"1\":{\"464\":3,\"466\":3,\"471\":4}}],[\"column\",{\"1\":{\"81\":1,\"257\":2,\"464\":1,\"466\":1,\"498\":3}}],[\"columnnonulls\",{\"1\":{\"11\":1}}],[\"columnname\",{\"1\":{\"11\":2}}],[\"columncount\",{\"1\":{\"11\":3}}],[\"compressioncodecs\",{\"1\":{\"655\":1}}],[\"compresswith\",{\"1\":{\"655\":1}}],[\"completed\",{\"1\":{\"634\":7,\"640\":3,\"641\":4}}],[\"complex\",{\"1\":{\"295\":1}}],[\"componenscan\",{\"1\":{\"244\":1,\"607\":1}}],[\"component注解保证这个切面类能够放入ioc容器\",{\"1\":{\"588\":1}}],[\"component注解的基础上起了三个新的名字\",{\"1\":{\"564\":1}}],[\"componentname\",{\"1\":{\"560\":1}}],[\"component相关注解\",{\"1\":{\"236\":1,\"572\":1}}],[\"component等相关注解\",{\"1\":{\"236\":1,\"572\":1}}],[\"components\",{\"1\":{\"231\":3,\"235\":1,\"236\":1,\"242\":1,\"564\":11,\"567\":2,\"571\":2,\"572\":1,\"579\":1}}],[\"componentscan注解\",{\"1\":{\"235\":1,\"571\":1,\"665\":1}}],[\"componentscan注解虽然没有显示配置\",{\"1\":{\"74\":1}}],[\"componentscan\",{\"1\":{\"235\":4,\"236\":1,\"242\":1,\"571\":3,\"572\":1,\"575\":1,\"579\":1,\"588\":1,\"606\":1,\"626\":1,\"627\":2,\"664\":1,\"665\":1}}],[\"componentscan扫描\",{\"1\":{\"74\":1}}],[\"components可重用的组件\",{\"1\":{\"49\":1}}],[\"component的衍生注解\",{\"1\":{\"74\":3}}],[\"component\",{\"1\":{\"74\":1,\"94\":1,\"100\":1,\"212\":2,\"231\":9,\"235\":3,\"238\":2,\"241\":2,\"242\":2,\"552\":1,\"564\":10,\"567\":2,\"568\":1,\"571\":3,\"573\":2,\"578\":2,\"579\":2,\"588\":4,\"591\":1,\"652\":1,\"655\":2,\"657\":1,\"668\":2,\"669\":2,\"670\":2,\"676\":2,\"682\":1}}],[\"component将当前类交给ioc容器管理\",{\"1\":{\"73\":1}}],[\"computer\",{\"1\":{\"147\":9}}],[\"companyname\",{\"1\":{\"409\":3,\"447\":3}}],[\"compact\",{\"1\":{\"92\":1,\"655\":1}}],[\"comparable\",{\"1\":{\"176\":1}}],[\"comparable接口并重写其compareto\",{\"1\":{\"174\":1}}],[\"comparator\",{\"1\":{\"175\":2,\"176\":2,\"178\":2,\"180\":3}}],[\"comparator<integer>\",{\"1\":{\"16\":4,\"17\":5}}],[\"compara2\",{\"1\":{\"16\":2}}],[\"compara1\",{\"1\":{\"16\":2}}],[\"compareto\",{\"1\":{\"17\":2,\"166\":1,\"174\":6,\"175\":2,\"176\":2,\"178\":2}}],[\"compare3\",{\"1\":{\"16\":2}}],[\"compare\",{\"1\":{\"16\":7,\"17\":5,\"175\":1,\"176\":1,\"178\":1,\"483\":1}}],[\"compilerversion>\",{\"1\":{\"395\":1,\"440\":1}}],[\"compilerversion>17<\",{\"1\":{\"395\":1,\"440\":1}}],[\"compiler\",{\"1\":{\"395\":6,\"406\":2,\"413\":1,\"431\":4,\"432\":4,\"433\":4,\"434\":4,\"440\":6,\"456\":16,\"461\":4,\"625\":4,\"652\":4,\"673\":4,\"677\":4}}],[\"compile\",{\"1\":{\"59\":3,\"387\":93,\"404\":1,\"406\":3,\"411\":1,\"415\":1,\"425\":1,\"447\":1,\"450\":3}}],[\"com3\",{\"1\":{\"16\":2}}],[\"com2\",{\"1\":{\"16\":2,\"17\":2}}],[\"com1\",{\"1\":{\"16\":2,\"17\":2}}],[\"com\",{\"1\":{\"11\":3,\"12\":2,\"17\":2,\"34\":1,\"43\":1,\"56\":1,\"58\":1,\"64\":1,\"82\":2,\"84\":1,\"100\":1,\"138\":1,\"175\":1,\"176\":2,\"178\":2,\"188\":1,\"197\":1,\"212\":3,\"213\":3,\"215\":2,\"216\":1,\"219\":2,\"220\":4,\"224\":3,\"228\":1,\"229\":1,\"231\":6,\"235\":1,\"236\":2,\"237\":1,\"238\":4,\"242\":1,\"244\":1,\"248\":3,\"277\":2,\"324\":2,\"334\":6,\"351\":2,\"352\":1,\"353\":2,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"387\":34,\"395\":1,\"398\":3,\"401\":1,\"409\":1,\"410\":1,\"415\":2,\"422\":1,\"425\":3,\"426\":4,\"431\":1,\"440\":1,\"442\":4,\"445\":1,\"447\":2,\"448\":2,\"460\":1,\"461\":14,\"467\":1,\"474\":2,\"476\":1,\"477\":1,\"480\":1,\"481\":1,\"485\":2,\"487\":1,\"493\":7,\"502\":1,\"509\":1,\"511\":1,\"513\":3,\"514\":7,\"527\":1,\"528\":1,\"532\":1,\"534\":1,\"535\":2,\"539\":3,\"557\":2,\"560\":2,\"561\":1,\"562\":5,\"564\":13,\"567\":2,\"568\":4,\"571\":4,\"572\":2,\"573\":5,\"575\":1,\"579\":1,\"582\":2,\"584\":1,\"588\":12,\"589\":3,\"590\":9,\"591\":6,\"592\":1,\"594\":1,\"596\":2,\"606\":2,\"607\":4,\"611\":3,\"625\":4,\"626\":2,\"627\":3,\"628\":11,\"630\":2,\"640\":5,\"641\":1,\"652\":6,\"655\":2,\"664\":4,\"668\":1,\"669\":2,\"670\":1,\"671\":3,\"673\":3,\"676\":3,\"677\":3,\"680\":6,\"682\":1}}],[\"commoncomponent\",{\"1\":{\"564\":2,\"567\":1}}],[\"common\",{\"0\":{\"432\":1},\"1\":{\"429\":2,\"456\":1}}],[\"common🫙1\",{\"1\":{\"387\":1}}],[\"commons🫙2\",{\"1\":{\"387\":2}}],[\"commons\",{\"1\":{\"387\":15,\"429\":1,\"431\":3,\"455\":1,\"456\":3,\"496\":1,\"588\":4}}],[\"community\",{\"1\":{\"277\":3}}],[\"committed\",{\"1\":{\"248\":1,\"611\":1}}],[\"commit\",{\"1\":{\"5\":2,\"97\":1,\"220\":1,\"493\":1,\"505\":1,\"514\":1,\"518\":1,\"602\":1,\"628\":1}}],[\"comments\",{\"1\":{\"325\":1,\"517\":1}}],[\"comment\",{\"1\":{\"1\":1,\"40\":2,\"461\":4,\"517\":8,\"651\":20}}],[\"condition\",{\"1\":{\"476\":1,\"478\":1}}],[\"condition判断组织条件\",{\"1\":{\"476\":1}}],[\"concurrency\",{\"1\":{\"192\":1,\"203\":1}}],[\"concat\",{\"1\":{\"81\":2,\"82\":1,\"84\":1,\"166\":1,\"656\":1}}],[\"concat字符串拼接函数\",{\"1\":{\"81\":1}}],[\"conflict\",{\"1\":{\"387\":1}}],[\"conf文件\",{\"1\":{\"283\":1}}],[\"conf\",{\"1\":{\"53\":2,\"65\":1,\"283\":1,\"393\":1,\"395\":2,\"396\":1,\"440\":3}}],[\"configurer\",{\"1\":{\"626\":2}}],[\"configuredefaultservlethandling\",{\"1\":{\"626\":1}}],[\"configureandrefreshwebapplicationcontext\",{\"1\":{\"621\":1}}],[\"configurablewebapplicationcontext\",{\"1\":{\"621\":4}}],[\"configurablebeanfactory\",{\"1\":{\"232\":2,\"565\":2,\"575\":1}}],[\"configurationproperties注解声明该类要读取属性配置\",{\"1\":{\"670\":1}}],[\"configurationproperties是springboot提供的重要注解\",{\"1\":{\"670\":1}}],[\"configurationproperties\",{\"1\":{\"655\":2,\"670\":2}}],[\"configuration注解下定义\",{\"1\":{\"628\":1}}],[\"configuration注解\",{\"1\":{\"627\":1,\"665\":1}}],[\"configuration注解标记的类\",{\"1\":{\"242\":1,\"579\":1}}],[\"configuration类中可以查看能使用的配置项\",{\"1\":{\"509\":1}}],[\"configuration🫙1\",{\"1\":{\"387\":1}}],[\"configuration指定一个类为配置类\",{\"1\":{\"235\":2,\"571\":1}}],[\"configuration>\",{\"1\":{\"220\":1,\"413\":2,\"493\":1,\"514\":1,\"625\":1,\"628\":1}}],[\"configuration\",{\"1\":{\"80\":1,\"81\":1,\"94\":1,\"220\":1,\"235\":3,\"236\":1,\"237\":2,\"238\":3,\"239\":3,\"244\":1,\"387\":1,\"480\":1,\"493\":1,\"496\":1,\"508\":1,\"514\":1,\"552\":1,\"555\":3,\"570\":1,\"571\":3,\"572\":1,\"573\":7,\"574\":3,\"575\":1,\"588\":1,\"606\":1,\"607\":1,\"626\":2,\"627\":1,\"628\":12,\"655\":1,\"657\":1,\"664\":1,\"676\":2,\"680\":1}}],[\"configlocation\",{\"1\":{\"621\":3}}],[\"configb\",{\"1\":{\"239\":4,\"574\":4}}],[\"configa\",{\"1\":{\"239\":3,\"574\":3}}],[\"config>\",{\"1\":{\"219\":2,\"596\":2}}],[\"config\",{\"1\":{\"45\":4,\"49\":1,\"220\":3,\"238\":2,\"480\":4,\"481\":2,\"493\":4,\"505\":1,\"514\":4,\"518\":1,\"535\":1,\"573\":2,\"607\":1,\"626\":1,\"627\":1,\"628\":11,\"636\":1,\"652\":2,\"676\":3}}],[\"confirm\",{\"1\":{\"40\":1}}],[\"consumer\",{\"1\":{\"478\":1}}],[\"consumer<double>\",{\"1\":{\"17\":3}}],[\"consumer<t>消费型接口\",{\"1\":{\"17\":1}}],[\"consumer<string>\",{\"1\":{\"17\":3}}],[\"constants\",{\"1\":{\"464\":3,\"465\":3,\"466\":9,\"474\":1}}],[\"constructor>\",{\"1\":{\"517\":1}}],[\"constructor\",{\"1\":{\"224\":2,\"558\":3}}],[\"const\",{\"1\":{\"114\":1,\"252\":2,\"253\":3}}],[\"consoleappender\",{\"1\":{\"625\":1}}],[\"consoleappender表示输出到控制台\",{\"1\":{\"625\":1}}],[\"console\",{\"1\":{\"38\":1,\"40\":2,\"45\":2,\"252\":1,\"253\":5}}],[\"contact\",{\"1\":{\"334\":3}}],[\"contact=\",{\"1\":{\"334\":1}}],[\"container\",{\"1\":{\"255\":1,\"548\":1}}],[\"containsvalue\",{\"1\":{\"177\":1}}],[\"containskey\",{\"1\":{\"177\":1}}],[\"containsall\",{\"1\":{\"170\":2}}],[\"contains\",{\"1\":{\"17\":2,\"93\":1,\"95\":1,\"170\":2}}],[\"contextclass\",{\"1\":{\"621\":4}}],[\"context会依赖传递core\",{\"1\":{\"431\":1,\"456\":1}}],[\"context🫙2\",{\"1\":{\"387\":1}}],[\"context🫙5\",{\"1\":{\"387\":1}}],[\"contexts🫙0\",{\"1\":{\"387\":1}}],[\"context<\",{\"1\":{\"244\":1,\"418\":2,\"431\":1,\"432\":1,\"452\":2,\"456\":3,\"557\":1,\"562\":1,\"564\":1,\"568\":1,\"575\":1,\"582\":1,\"606\":1,\"625\":1}}],[\"context依赖之后\",{\"1\":{\"244\":1,\"557\":1,\"564\":1,\"582\":1,\"606\":1}}],[\"context依赖\",{\"1\":{\"244\":1,\"557\":1,\"562\":1,\"564\":1,\"568\":1,\"575\":1,\"582\":1,\"606\":1}}],[\"context=\",{\"1\":{\"231\":1,\"236\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":1}}],[\"context\",{\"1\":{\"226\":4,\"231\":8,\"235\":3,\"236\":4,\"238\":2,\"242\":1,\"387\":1,\"429\":2,\"432\":1,\"455\":2,\"456\":1,\"555\":3,\"559\":4,\"562\":8,\"564\":8,\"568\":4,\"571\":7,\"572\":4,\"573\":2,\"580\":1,\"588\":6,\"625\":1,\"652\":1,\"655\":3,\"670\":1,\"674\":3,\"675\":1,\"676\":1,\"680\":1}}],[\"content\",{\"0\":{\"258\":1,\"261\":1},\"1\":{\"35\":1,\"56\":1,\"63\":2,\"64\":3,\"251\":1,\"252\":3,\"256\":2,\"334\":5,\"351\":3,\"353\":3,\"354\":4,\"355\":2,\"356\":2,\"361\":2,\"395\":1,\"425\":1,\"440\":1}}],[\"content=requests\",{\"1\":{\"334\":1}}],[\"content=f\",{\"1\":{\"334\":2}}],[\"content=\",{\"1\":{\"34\":1,\"253\":1}}],[\"continue跳出本次循环\",{\"1\":{\"334\":1}}],[\"continue跳过当前循环进入下一次循环\",{\"1\":{\"304\":1}}],[\"continue\",{\"0\":{\"304\":1},\"1\":{\"122\":2,\"294\":1,\"334\":1}}],[\"contribs\",{\"1\":{\"387\":1}}],[\"contributors\",{\"1\":{\"1\":1}}],[\"controllers\",{\"1\":{\"665\":1}}],[\"controller类型组件\",{\"1\":{\"564\":2}}],[\"controller组件\",{\"1\":{\"564\":2}}],[\"controllertest\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"controlleradvice+\",{\"1\":{\"96\":1}}],[\"controller\",{\"1\":{\"71\":1,\"74\":3,\"100\":1,\"231\":8,\"233\":2,\"241\":1,\"242\":1,\"401\":2,\"445\":2,\"460\":1,\"562\":1,\"564\":9,\"566\":8,\"568\":2,\"571\":1,\"575\":1,\"578\":1,\"579\":1,\"620\":1,\"622\":1,\"626\":1,\"630\":1,\"641\":4,\"655\":4,\"656\":3,\"657\":5,\"664\":2,\"673\":3,\"677\":1,\"680\":2}}],[\"controller+\",{\"1\":{\"69\":1}}],[\"controller方法上\",{\"1\":{\"69\":1}}],[\"control\",{\"1\":{\"64\":1,\"72\":1,\"221\":1,\"252\":1,\"553\":1}}],[\"con\",{\"1\":{\"17\":7}}],[\"connector\",{\"1\":{\"220\":1,\"244\":1,\"461\":1,\"493\":1,\"562\":1,\"568\":1,\"575\":1,\"588\":2,\"606\":1,\"625\":1,\"652\":1,\"665\":1,\"677\":1,\"680\":1}}],[\"connectionproxyimpl\",{\"1\":{\"481\":1}}],[\"connection接口定义了3个对应的方法\",{\"1\":{\"5\":1}}],[\"connection\",{\"0\":{\"5\":1},\"1\":{\"3\":1,\"10\":2,\"11\":2,\"12\":3,\"78\":2,\"481\":1,\"602\":1,\"608\":1,\"677\":1}}],[\"conn\",{\"1\":{\"8\":1,\"11\":6,\"12\":5,\"515\":1,\"602\":5}}],[\"cover1\",{\"1\":{\"0\":1}}],[\"cover\",{\"1\":{\"0\":1}}],[\"cn\",{\"1\":{\"0\":1,\"34\":1,\"40\":1,\"45\":1,\"334\":1}}],[\"tname\",{\"1\":{\"521\":1,\"651\":5,\"656\":6}}],[\"tcr\",{\"1\":{\"651\":1}}],[\"tcr中国系列赛\",{\"1\":{\"651\":1}}],[\"tc\",{\"1\":{\"398\":1,\"442\":1}}],[\"tcp\",{\"1\":{\"189\":1,\"200\":1,\"276\":1}}],[\"tdengine\",{\"1\":{\"460\":1}}],[\"tddl\",{\"1\":{\"398\":1,\"442\":1}}],[\"td>\",{\"1\":{\"34\":8,\"334\":11}}],[\"tmall\",{\"1\":{\"398\":1,\"442\":1}}],[\"tbody>\",{\"1\":{\"334\":1}}],[\"tse2\",{\"1\":{\"334\":1}}],[\"tvshow\",{\"1\":{\"328\":7}}],[\"tuple将range函数循环出来的结果转为数值元组\",{\"1\":{\"312\":1}}],[\"tuple\",{\"1\":{\"312\":2,\"334\":1}}],[\"tux\",{\"1\":{\"281\":1}}],[\"tx相关\",{\"1\":{\"622\":1}}],[\"tx整合\",{\"0\":{\"627\":1},\"1\":{\"615\":1}}],[\"tx<\",{\"1\":{\"244\":1,\"606\":1,\"625\":1}}],[\"tx\",{\"1\":{\"243\":1,\"547\":1,\"548\":1,\"604\":1,\"613\":2,\"620\":1,\"625\":2}}],[\"txtest\",{\"1\":{\"606\":1,\"607\":1,\"612\":1}}],[\"txt文件了解可爬取的网页路径范围\",{\"1\":{\"334\":1}}],[\"txt的模板格式保存宠物数据到文本文件\",{\"1\":{\"188\":1}}],[\"txt的内容\",{\"1\":{\"188\":1}}],[\"txt中\",{\"1\":{\"188\":3}}],[\"txt\",{\"1\":{\"182\":1,\"183\":2,\"184\":1,\"185\":4,\"186\":3,\"187\":4,\"188\":8,\"334\":7,\"393\":1}}],[\"t1\",{\"1\":{\"194\":2,\"205\":2,\"327\":4}}],[\"t123\",{\"1\":{\"120\":1}}],[\"typora\",{\"1\":{\"182\":1}}],[\"type`\",{\"1\":{\"651\":7}}],[\"typehandlers\",{\"1\":{\"496\":1}}],[\"typealiases>\",{\"1\":{\"508\":2,\"514\":1,\"628\":2}}],[\"typealiases\",{\"1\":{\"496\":1,\"508\":1,\"628\":1}}],[\"type函数\",{\"1\":{\"334\":1}}],[\"type属性\",{\"1\":{\"231\":1,\"518\":1,\"564\":1}}],[\"typeservice\",{\"1\":{\"656\":3}}],[\"types\",{\"1\":{\"53\":1,\"283\":1}}],[\"typeof\",{\"1\":{\"38\":1}}],[\"type=主键策略\",{\"1\":{\"480\":1}}],[\"type=5\",{\"1\":{\"356\":1}}],[\"type=\",{\"1\":{\"34\":5,\"40\":1,\"41\":2,\"42\":1,\"43\":3,\"220\":2,\"231\":2,\"493\":2,\"508\":2,\"513\":1,\"514\":2,\"517\":1,\"518\":1,\"519\":1,\"521\":1,\"564\":2}}],[\"typename\",{\"1\":{\"11\":2,\"656\":3}}],[\"type\",{\"1\":{\"11\":2,\"63\":1,\"64\":2,\"92\":1,\"147\":2,\"188\":2,\"251\":1,\"252\":1,\"283\":1,\"316\":1,\"334\":3,\"461\":1,\"480\":2,\"621\":1,\"651\":20,\"652\":3,\"656\":15,\"657\":3,\"677\":1,\"680\":2}}],[\"t=i\",{\"1\":{\"126\":1}}],[\"t跳过了几列\",{\"1\":{\"120\":1}}],[\"tair\",{\"1\":{\"398\":1,\"442\":1}}],[\"taobao\",{\"1\":{\"398\":2,\"442\":2}}],[\"tap键\",{\"1\":{\"345\":1}}],[\"tablelogic\",{\"1\":{\"481\":2,\"653\":1}}],[\"tablefield\",{\"1\":{\"480\":2}}],[\"tablename\",{\"1\":{\"480\":3}}],[\"tablename注解\",{\"1\":{\"480\":1}}],[\"tableid注解\",{\"1\":{\"480\":1}}],[\"tableid注解来指定实体类中表示主键的字段\",{\"1\":{\"480\":1}}],[\"tableid注解是必要的\",{\"1\":{\"480\":1}}],[\"tableid\",{\"1\":{\"471\":1,\"480\":3,\"481\":2,\"653\":1}}],[\"table\",{\"1\":{\"334\":1,\"461\":2,\"480\":2,\"481\":1,\"484\":1,\"485\":1,\"493\":1,\"514\":1,\"517\":2,\"562\":1,\"568\":1,\"575\":1,\"625\":1,\"640\":1,\"651\":9,\"652\":1}}],[\"table>\",{\"1\":{\"34\":1,\"334\":1}}],[\"tabstop\",{\"1\":{\"286\":1}}],[\"tab\",{\"1\":{\"275\":1,\"286\":1}}],[\"target>\",{\"1\":{\"395\":1,\"413\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"440\":1,\"456\":4,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"target>17<\",{\"1\":{\"395\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"440\":1,\"456\":4,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"targetmethodexception\",{\"1\":{\"219\":1,\"589\":3,\"596\":1}}],[\"targetmethodreturnvalue\",{\"1\":{\"219\":1,\"589\":3,\"592\":4,\"596\":1}}],[\"target\",{\"1\":{\"101\":1,\"196\":2,\"207\":2,\"211\":1,\"406\":1,\"534\":1,\"583\":12,\"584\":1,\"588\":2}}],[\"target=\",{\"1\":{\"34\":2}}],[\"tags\",{\"1\":{\"517\":1}}],[\"tag\",{\"1\":{\"0\":1,\"1\":1,\"517\":7}}],[\"teachers\",{\"1\":{\"535\":4}}],[\"teacher\",{\"1\":{\"521\":1}}],[\"teachermapper\",{\"1\":{\"535\":4}}],[\"teachermap\",{\"1\":{\"521\":1}}],[\"telnet\",{\"1\":{\"189\":1,\"200\":1}}],[\"temdir\",{\"1\":{\"361\":2}}],[\"temkey\",{\"1\":{\"361\":2}}],[\"temp是待删除节点的前一个节点\",{\"1\":{\"371\":1}}],[\"temp就指向了链表的最后\",{\"1\":{\"370\":1,\"371\":1}}],[\"temporary\",{\"1\":{\"277\":1}}],[\"template\",{\"1\":{\"138\":2,\"562\":1}}],[\"temp\",{\"1\":{\"126\":6,\"370\":34,\"371\":28}}],[\"temp=arr\",{\"1\":{\"125\":1,\"126\":1}}],[\"temp=0\",{\"1\":{\"125\":1}}],[\"tem\",{\"1\":{\"76\":1,\"181\":1,\"188\":3,\"315\":4,\"370\":2}}],[\"textdemo1\",{\"1\":{\"187\":1}}],[\"text2\",{\"1\":{\"145\":2,\"146\":1}}],[\"textsportman\",{\"1\":{\"130\":1}}],[\"textarea>\",{\"1\":{\"34\":1}}],[\"text\",{\"1\":{\"34\":3,\"40\":2,\"42\":1,\"43\":2,\"106\":1,\"108\":1,\"109\":1,\"130\":1,\"138\":2,\"146\":1,\"147\":1,\"149\":1,\"150\":3,\"151\":2,\"154\":1,\"155\":2,\"160\":1,\"162\":1,\"163\":2,\"164\":1,\"165\":1,\"170\":1,\"334\":3,\"517\":1}}],[\"testtx\",{\"1\":{\"606\":1,\"607\":1,\"612\":1}}],[\"testteacherrelationshiptomulti\",{\"1\":{\"535\":1}}],[\"testnointerfaceproxy\",{\"1\":{\"594\":1}}],[\"testcalculator\",{\"1\":{\"588\":2,\"596\":1}}],[\"testcompile\",{\"1\":{\"406\":2}}],[\"testrun\",{\"1\":{\"562\":1,\"568\":1,\"575\":1}}],[\"testrelationshiptomulti\",{\"1\":{\"519\":1}}],[\"testrelationshiptoone\",{\"1\":{\"518\":1}}],[\"testresources\",{\"1\":{\"406\":2}}],[\"testdynamicproxy\",{\"1\":{\"583\":1}}],[\"testdqlforlistpojo\",{\"1\":{\"562\":1}}],[\"testdqlforpojo\",{\"1\":{\"562\":1}}],[\"testdml\",{\"1\":{\"562\":1}}],[\"testexperiment07\",{\"1\":{\"561\":1}}],[\"testexperiment08\",{\"1\":{\"560\":1}}],[\"testempcount\",{\"1\":{\"508\":1}}],[\"testsaveemp\",{\"1\":{\"512\":1}}],[\"testselectall\",{\"1\":{\"511\":1}}],[\"testselect\",{\"1\":{\"461\":1}}],[\"testselectemployee\",{\"1\":{\"220\":1,\"493\":1}}],[\"testqueryempnameandsalary\",{\"1\":{\"510\":1}}],[\"testquick8\",{\"1\":{\"485\":1}}],[\"testquick7\",{\"1\":{\"484\":1}}],[\"testquick6\",{\"1\":{\"481\":1}}],[\"testquick5\",{\"1\":{\"481\":1}}],[\"testquick4\",{\"1\":{\"478\":1}}],[\"testquick2\",{\"1\":{\"477\":1,\"479\":1}}],[\"testquick3\",{\"1\":{\"476\":1}}],[\"testquick\",{\"1\":{\"472\":1}}],[\"test方法后执行\",{\"1\":{\"505\":1,\"514\":1,\"518\":1}}],[\"test方法前执行\",{\"1\":{\"505\":1,\"514\":1,\"518\":1}}],[\"testupdateempnamebymap\",{\"1\":{\"505\":1}}],[\"test05\",{\"1\":{\"476\":1}}],[\"test04\",{\"1\":{\"476\":1,\"477\":1}}],[\"test03\",{\"1\":{\"476\":1}}],[\"test02\",{\"1\":{\"476\":1}}],[\"test01\",{\"1\":{\"476\":1}}],[\"testpagequery\",{\"1\":{\"472\":1}}],[\"testparsejwt\",{\"1\":{\"92\":1}}],[\"test5搭建测试环境\",{\"0\":{\"580\":1},\"1\":{\"542\":1}}],[\"test5\",{\"1\":{\"461\":2}}],[\"test4\",{\"1\":{\"461\":2}}],[\"test3\",{\"1\":{\"461\":2}}],[\"test目录\",{\"1\":{\"447\":3}}],[\"testjunit5\",{\"1\":{\"242\":1,\"580\":1}}],[\"testjwt\",{\"1\":{\"92\":1}}],[\"test<\",{\"1\":{\"242\":2,\"244\":1,\"461\":1,\"580\":1,\"582\":1,\"606\":1,\"652\":1}}],[\"test=\",{\"1\":{\"84\":2,\"525\":2,\"526\":2,\"527\":4,\"528\":2,\"656\":2}}],[\"test文件范围内\",{\"1\":{\"59\":1}}],[\"testgui\",{\"1\":{\"28\":6}}],[\"testgui2\",{\"1\":{\"26\":6,\"27\":3,\"28\":3,\"29\":3}}],[\"test2\",{\"1\":{\"17\":1,\"461\":2,\"612\":1,\"681\":2}}],[\"test\",{\"1\":{\"17\":6,\"28\":1,\"59\":2,\"66\":1,\"92\":2,\"188\":5,\"194\":1,\"205\":1,\"220\":2,\"242\":1,\"253\":1,\"325\":8,\"327\":4,\"338\":3,\"401\":3,\"404\":2,\"406\":3,\"411\":1,\"415\":1,\"445\":3,\"447\":1,\"450\":2,\"461\":2,\"472\":2,\"476\":6,\"477\":2,\"478\":1,\"479\":1,\"481\":2,\"484\":1,\"485\":1,\"493\":2,\"505\":1,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"514\":8,\"518\":1,\"519\":1,\"535\":1,\"560\":1,\"561\":1,\"562\":4,\"566\":2,\"568\":1,\"575\":1,\"580\":1,\"583\":1,\"588\":6,\"594\":1,\"596\":1,\"606\":2,\"607\":2,\"612\":1,\"655\":3,\"671\":4,\"677\":3}}],[\"test1\",{\"1\":{\"16\":2,\"17\":3,\"188\":3,\"247\":3,\"248\":1,\"461\":2,\"606\":1,\"607\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"topservice\",{\"1\":{\"612\":6}}],[\"top\",{\"1\":{\"356\":1,\"651\":1}}],[\"top250\",{\"1\":{\"334\":3}}],[\"toscrape\",{\"1\":{\"334\":1}}],[\"tostring方法\",{\"1\":{\"668\":1,\"669\":1}}],[\"tostring+\",{\"1\":{\"79\":1}}],[\"tostring\",{\"1\":{\"79\":1,\"93\":3,\"95\":2,\"130\":2,\"162\":1,\"176\":3,\"187\":2,\"188\":2,\"191\":2,\"202\":2,\"213\":1,\"370\":1,\"371\":1,\"562\":1,\"568\":1,\"575\":1,\"583\":1,\"668\":1,\"669\":1,\"670\":1,\"677\":1,\"680\":1}}],[\"tostring等方法\",{\"1\":{\"79\":1}}],[\"toindex\",{\"1\":{\"171\":1}}],[\"toarray\",{\"1\":{\"170\":2}}],[\"totalsize\",{\"1\":{\"656\":2}}],[\"totalpage\",{\"1\":{\"656\":2}}],[\"total=total+num\",{\"1\":{\"334\":1}}],[\"total=0\",{\"1\":{\"334\":1}}],[\"total++\",{\"1\":{\"130\":1}}],[\"total\",{\"1\":{\"130\":2,\"334\":2,\"406\":1,\"472\":3,\"535\":3,\"634\":1,\"640\":1}}],[\"todo\",{\"1\":{\"108\":1,\"109\":1,\"186\":4,\"187\":4,\"478\":1,\"562\":1,\"628\":1}}],[\"tojsonstring\",{\"1\":{\"95\":1}}],[\"tojsonobject\",{\"1\":{\"93\":2,\"95\":1}}],[\"token获取userid\",{\"1\":{\"657\":1}}],[\"token内容\",{\"1\":{\"655\":2}}],[\"tokensignkey\",{\"1\":{\"655\":7}}],[\"tokenexpiration\",{\"1\":{\"655\":5}}],[\"token是一项规范和标准\",{\"1\":{\"655\":1}}],[\"token验证标识无法直接识别用户的信息\",{\"1\":{\"655\":1}}],[\"token介绍\",{\"1\":{\"655\":1}}],[\"token\",{\"1\":{\"92\":1,\"93\":2,\"95\":1,\"655\":29,\"657\":11}}],[\"to\",{\"1\":{\"81\":1,\"277\":2,\"387\":3,\"395\":3,\"426\":4,\"440\":3,\"608\":1,\"651\":1,\"680\":1}}],[\"tom\",{\"1\":{\"91\":1,\"92\":2,\"461\":2,\"478\":1,\"493\":1,\"625\":1}}],[\"tomcat作为服务容器\",{\"1\":{\"647\":1}}],[\"tomcat插件\",{\"1\":{\"413\":2}}],[\"tomcat🫙2\",{\"1\":{\"387\":1}}],[\"tomcat\",{\"1\":{\"387\":4,\"413\":1,\"544\":1,\"663\":1}}],[\"tomcat入门程序\",{\"0\":{\"66\":1}}],[\"tomcat部署项目\",{\"1\":{\"65\":1}}],[\"tomcat也被称为web容器\",{\"1\":{\"65\":1}}],[\"tomcat是apache软件基金会一个核心项目\",{\"1\":{\"65\":1}}],[\"tomacat\",{\"0\":{\"65\":1}}],[\"tool\",{\"1\":{\"398\":1,\"440\":1,\"442\":1}}],[\"tools\",{\"1\":{\"57\":1,\"447\":1}}],[\"toolkits\",{\"1\":{\"22\":1}}],[\"tochararray\",{\"1\":{\"169\":1}}],[\"toc\",{\"1\":{\"32\":1,\"105\":1,\"384\":1}}],[\"t\",{\"1\":{\"17\":10,\"126\":5,\"150\":2,\"177\":1,\"182\":2,\"220\":1,\"229\":1,\"325\":2,\"345\":4,\"366\":5,\"463\":3,\"465\":3,\"466\":2,\"471\":9,\"476\":5,\"477\":1,\"480\":2,\"493\":2,\"502\":1,\"503\":1,\"504\":1,\"505\":1,\"508\":1,\"509\":1,\"510\":3,\"511\":1,\"512\":1,\"513\":3,\"517\":4,\"518\":2,\"519\":2,\"521\":2,\"525\":1,\"526\":2,\"527\":1,\"528\":1,\"529\":1,\"530\":1,\"555\":1,\"561\":1,\"630\":1,\"652\":7,\"656\":2,\"669\":1}}],[\"that\",{\"1\":{\"558\":1}}],[\"thymeleaf<\",{\"1\":{\"387\":1}}],[\"thymeleaf🫙3\",{\"1\":{\"387\":1}}],[\"thymeleaf🫙2\",{\"1\":{\"387\":1}}],[\"thymeleaf\",{\"1\":{\"387\":7}}],[\"th匹配thirth或fourth\",{\"1\":{\"347\":1}}],[\"th\",{\"1\":{\"334\":1}}],[\"thing\",{\"1\":{\"573\":3}}],[\"think\",{\"1\":{\"334\":2}}],[\"thir|four\",{\"1\":{\"347\":1}}],[\"this关键字\",{\"0\":{\"128\":1}}],[\"this\",{\"1\":{\"23\":7,\"24\":16,\"25\":8,\"26\":19,\"27\":9,\"28\":43,\"29\":11,\"127\":4,\"128\":2,\"130\":4,\"135\":4,\"149\":3,\"174\":4,\"176\":21,\"187\":4,\"188\":1,\"192\":3,\"197\":1,\"203\":3,\"370\":5,\"371\":3,\"555\":3,\"558\":6,\"561\":2,\"562\":8,\"566\":2,\"567\":1,\"568\":5,\"573\":2,\"575\":5,\"583\":2,\"628\":2,\"640\":3,\"652\":9,\"668\":4,\"669\":4,\"670\":4,\"673\":4,\"675\":5,\"680\":3}}],[\"thread内部声明的三个常量\",{\"1\":{\"196\":1,\"207\":1}}],[\"thread类的实例调用strat\",{\"1\":{\"195\":1,\"206\":1}}],[\"thread类的特性\",{\"1\":{\"193\":1,\"204\":1}}],[\"thread类代表线程\",{\"1\":{\"193\":1,\"204\":1}}],[\"thread\",{\"1\":{\"192\":3,\"194\":2,\"195\":2,\"196\":4,\"203\":3,\"205\":2,\"206\":2,\"207\":4,\"609\":1,\"625\":1}}],[\"throwex\",{\"1\":{\"471\":1}}],[\"throwing=\",{\"1\":{\"219\":1,\"596\":1}}],[\"throwing属性\",{\"1\":{\"219\":1,\"596\":1}}],[\"throwing标签\",{\"1\":{\"219\":1,\"596\":1}}],[\"throwing\",{\"1\":{\"213\":1,\"219\":1,\"589\":1,\"596\":1}}],[\"throw\",{\"1\":{\"135\":1,\"155\":3,\"191\":2,\"202\":2,\"216\":1,\"367\":2,\"370\":2,\"609\":1,\"621\":1,\"652\":1}}],[\"throwable\",{\"1\":{\"100\":1,\"152\":1,\"213\":3,\"216\":1,\"583\":1,\"589\":1,\"592\":1}}],[\"throws后面也可以是exception对异常进行统一处理\",{\"1\":{\"155\":1}}],[\"throws\",{\"1\":{\"11\":2,\"12\":2,\"78\":1,\"93\":2,\"94\":3,\"95\":1,\"100\":1,\"155\":3,\"187\":2,\"188\":5,\"192\":3,\"203\":3,\"220\":1,\"229\":1,\"247\":3,\"248\":1,\"493\":1,\"505\":1,\"514\":1,\"518\":1,\"561\":1,\"583\":1,\"610\":3,\"611\":1,\"612\":2,\"628\":1,\"657\":1,\"676\":3}}],[\"thu\",{\"1\":{\"162\":2,\"163\":2}}],[\"thead>\",{\"1\":{\"334\":1}}],[\"the\",{\"1\":{\"184\":1,\"395\":2,\"440\":2,\"558\":1}}],[\"then\",{\"1\":{\"45\":2}}],[\"theme\",{\"1\":{\"0\":1,\"1\":1,\"50\":1,\"669\":1}}],[\"th>\",{\"1\":{\"34\":3}}],[\"tid\",{\"1\":{\"521\":1,\"651\":5,\"656\":6}}],[\"tiandog\",{\"1\":{\"233\":2,\"564\":1,\"566\":6}}],[\"tip\",{\"1\":{\"196\":1,\"207\":1}}],[\"time`\",{\"1\":{\"651\":2}}],[\"timed\",{\"1\":{\"609\":1}}],[\"timestampdiff\",{\"1\":{\"656\":2}}],[\"timestamp\",{\"1\":{\"484\":1}}],[\"time会替换\",{\"1\":{\"334\":1}}],[\"time=time\",{\"1\":{\"334\":2}}],[\"time=\",{\"1\":{\"334\":1}}],[\"time=2\",{\"1\":{\"9\":1}}],[\"timeout=\",{\"1\":{\"515\":3}}],[\"timeout设置事务超时时间\",{\"1\":{\"247\":3,\"248\":1,\"609\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"timeout\",{\"1\":{\"246\":1,\"247\":3,\"248\":1,\"515\":2,\"609\":1,\"610\":3,\"611\":1,\"612\":1}}],[\"timeaspect\",{\"1\":{\"100\":1}}],[\"time\",{\"1\":{\"34\":1,\"334\":4,\"406\":1,\"478\":1,\"651\":36,\"656\":2,\"677\":2}}],[\"titles\",{\"1\":{\"334\":2}}],[\"titles=soup\",{\"1\":{\"334\":2}}],[\"title200\",{\"1\":{\"188\":2}}],[\"title180\",{\"1\":{\"188\":2}}],[\"title179\",{\"1\":{\"188\":2}}],[\"title175\",{\"1\":{\"188\":2}}],[\"title=\",{\"1\":{\"34\":1}}],[\"title>\",{\"1\":{\"34\":1,\"253\":1,\"334\":1}}],[\"title\",{\"1\":{\"0\":1,\"1\":1,\"334\":7,\"412\":1,\"517\":4,\"634\":7,\"640\":3,\"641\":4,\"651\":18,\"656\":8,\"657\":3}}],[\"trace\",{\"1\":{\"625\":1}}],[\"transport🫙2\",{\"1\":{\"387\":1}}],[\"transferservice\",{\"1\":{\"237\":2,\"573\":2}}],[\"transferserviceimpl\",{\"1\":{\"237\":3,\"573\":3}}],[\"transactiontimedoutexception\",{\"1\":{\"609\":1}}],[\"transactionpointcut\",{\"1\":{\"591\":1,\"592\":1}}],[\"transactionmanager\",{\"1\":{\"244\":2,\"496\":1,\"607\":2,\"627\":4}}],[\"transaction\",{\"1\":{\"216\":1,\"248\":2,\"609\":5,\"611\":2,\"612\":1}}],[\"transactional注解\",{\"1\":{\"608\":1}}],[\"transactional注解了\",{\"1\":{\"608\":1}}],[\"transactional注解中设置只读\",{\"1\":{\"608\":1}}],[\"transactional注解放在类上\",{\"1\":{\"608\":1}}],[\"transactional注解的设置不会被代理捕获\",{\"1\":{\"249\":1,\"612\":1}}],[\"transactional注解的方法调用\",{\"1\":{\"249\":1,\"612\":1}}],[\"transactional可以加在方法或者类上\",{\"1\":{\"245\":1}}],[\"transactional\",{\"1\":{\"97\":1,\"98\":2,\"245\":1,\"246\":1,\"247\":3,\"248\":2,\"249\":1,\"607\":2,\"608\":10,\"609\":1,\"610\":3,\"611\":2,\"612\":7,\"681\":2}}],[\"transaction提交事务\",{\"1\":{\"5\":1}}],[\"tranction\",{\"1\":{\"97\":1}}],[\"treeset需要使用泛型来定义\",{\"1\":{\"176\":1}}],[\"treeset练习\",{\"0\":{\"176\":1}}],[\"treeset的定制排序\",{\"1\":{\"175\":1}}],[\"treeset定制排序\",{\"0\":{\"175\":1}}],[\"treeset\",{\"0\":{\"174\":1},\"1\":{\"174\":1,\"176\":4}}],[\"treemap\",{\"0\":{\"178\":1},\"1\":{\"169\":1,\"178\":3}}],[\"treset\",{\"1\":{\"169\":1}}],[\"try中有return语句也会执行finally\",{\"1\":{\"154\":1}}],[\"try中抛出的异常类对象从上往下去匹配catch中的异常类的类型\",{\"1\":{\"154\":1}}],[\"try内声明的变量\",{\"1\":{\"154\":1}}],[\"try\",{\"1\":{\"53\":1,\"93\":1,\"95\":1,\"154\":3,\"155\":1,\"183\":2,\"184\":2,\"185\":5,\"186\":5,\"187\":4,\"189\":1,\"191\":9,\"192\":3,\"200\":1,\"202\":9,\"203\":3,\"212\":1,\"216\":1,\"294\":1,\"334\":2,\"368\":2,\"583\":1,\"592\":2,\"602\":1,\"609\":1,\"652\":1,\"655\":1}}],[\"trim>\",{\"1\":{\"527\":1}}],[\"trim标签\",{\"0\":{\"527\":1},\"1\":{\"489\":1}}],[\"trim\",{\"1\":{\"40\":1,\"166\":1}}],[\"tr>\",{\"1\":{\"34\":3,\"334\":4}}],[\"true过期\",{\"1\":{\"655\":1}}],[\"true到期\",{\"1\":{\"655\":1}}],[\"true把当前事务设置为只读\",{\"1\":{\"608\":2}}],[\"true或false\",{\"1\":{\"40\":1}}],[\"true为自动提交事务\",{\"1\":{\"5\":1}}],[\"true\",{\"1\":{\"0\":2,\"7\":1,\"21\":1,\"23\":4,\"24\":1,\"25\":1,\"26\":4,\"27\":2,\"28\":6,\"29\":2,\"38\":2,\"81\":1,\"94\":1,\"95\":2,\"109\":1,\"112\":1,\"138\":1,\"165\":4,\"170\":2,\"176\":2,\"192\":2,\"203\":2,\"229\":2,\"233\":1,\"237\":2,\"245\":1,\"294\":1,\"317\":1,\"334\":2,\"368\":1,\"370\":8,\"371\":6,\"480\":1,\"509\":1,\"512\":1,\"513\":1,\"514\":2,\"560\":1,\"561\":2,\"573\":2,\"608\":3,\"625\":1,\"628\":3,\"634\":9,\"640\":11,\"655\":1,\"657\":1,\"669\":1,\"675\":1,\"676\":1,\"677\":2,\"680\":1}}],[\"hs512\",{\"1\":{\"655\":1}}],[\"hsqldb\",{\"1\":{\"628\":2}}],[\"hsql\",{\"1\":{\"460\":2}}],[\"hs256\",{\"1\":{\"92\":2}}],[\"hystrix🫙10\",{\"1\":{\"387\":1}}],[\"hystrix\",{\"1\":{\"387\":2}}],[\"hdrhistogram🫙2\",{\"1\":{\"387\":1}}],[\"hdrhistogram\",{\"1\":{\"387\":1}}],[\"h2\",{\"1\":{\"371\":8,\"460\":2,\"628\":2}}],[\"h2>\",{\"1\":{\"34\":1,\"334\":1}}],[\"hnicknmae\",{\"1\":{\"370\":2,\"371\":2}}],[\"hname\",{\"1\":{\"370\":2,\"371\":2}}],[\"hno\",{\"1\":{\"370\":2,\"371\":2}}],[\"h3\",{\"1\":{\"334\":1}}],[\"h6>\",{\"1\":{\"334\":1}}],[\"hjkl左下右上\",{\"1\":{\"287\":1}}],[\"h\",{\"1\":{\"186\":2,\"271\":2,\"288\":2,\"317\":3,\"334\":1,\"368\":2,\"656\":4}}],[\"hid=1\",{\"1\":{\"656\":1,\"657\":2}}],[\"hid\",{\"1\":{\"651\":18,\"656\":19,\"657\":9}}],[\"hight\",{\"1\":{\"334\":2}}],[\"hihi\",{\"1\":{\"298\":1}}],[\"hibernate>mybatis>jdbc\",{\"1\":{\"492\":1}}],[\"hibernate\",{\"1\":{\"243\":1,\"492\":2,\"537\":1,\"604\":1,\"625\":13}}],[\"hikari\",{\"1\":{\"78\":1}}],[\"history\",{\"1\":{\"40\":2,\"393\":1,\"440\":1}}],[\"hh\",{\"1\":{\"68\":1,\"163\":1,\"625\":1}}],[\"hahaha\",{\"1\":{\"567\":1}}],[\"happyfactorybean\",{\"1\":{\"561\":2}}],[\"happymachine7\",{\"1\":{\"561\":4}}],[\"happymachine8\",{\"1\":{\"560\":1}}],[\"happymachine\",{\"1\":{\"238\":12,\"560\":6,\"561\":12,\"573\":21}}],[\"happycomponent8\",{\"1\":{\"560\":1}}],[\"happycomponent\",{\"1\":{\"226\":12,\"238\":15,\"557\":4,\"559\":12,\"560\":6,\"573\":17}}],[\"happytime\",{\"1\":{\"17\":4}}],[\"handoop\",{\"1\":{\"165\":1}}],[\"handler\",{\"1\":{\"94\":6,\"95\":1,\"657\":1,\"676\":3}}],[\"handlerinterceptor\",{\"1\":{\"94\":4,\"657\":1,\"676\":2}}],[\"handle\",{\"1\":{\"43\":2}}],[\"hao\",{\"1\":{\"124\":3,\"334\":1}}],[\"hasprevious\",{\"1\":{\"472\":1}}],[\"hasnextline\",{\"1\":{\"192\":1,\"203\":1}}],[\"hasnextdouble\",{\"1\":{\"109\":1}}],[\"hasnext\",{\"1\":{\"109\":1,\"170\":1,\"176\":2,\"177\":1,\"197\":1,\"472\":1}}],[\"hasnextint检查输入的是不是整数\",{\"1\":{\"109\":1}}],[\"haslength\",{\"1\":{\"93\":1,\"95\":1}}],[\"hash\",{\"1\":{\"176\":2}}],[\"hashtable\",{\"0\":{\"179\":1},\"1\":{\"169\":1}}],[\"hashmap\",{\"1\":{\"169\":1,\"177\":3,\"508\":2,\"515\":2,\"655\":2}}],[\"hashmap<>\",{\"1\":{\"92\":1,\"505\":1,\"656\":3,\"657\":1}}],[\"hashset<socket>\",{\"1\":{\"192\":2,\"203\":2}}],[\"hashset\",{\"0\":{\"172\":1},\"1\":{\"169\":1}}],[\"hashcode\",{\"1\":{\"79\":1,\"91\":2,\"170\":2,\"172\":1,\"176\":2}}],[\"hour\",{\"1\":{\"656\":2}}],[\"howtouse\",{\"1\":{\"534\":1,\"628\":2}}],[\"home变量的事\",{\"1\":{\"440\":1}}],[\"home环境变量\",{\"1\":{\"393\":1,\"440\":1}}],[\"home\",{\"1\":{\"334\":1,\"394\":1,\"395\":1,\"440\":2}}],[\"home为maven的解压目录\",{\"1\":{\"56\":1}}],[\"hosted\",{\"1\":{\"424\":1}}],[\"host\",{\"1\":{\"63\":1,\"189\":1,\"200\":1,\"251\":1,\"669\":1}}],[\"hobby\",{\"1\":{\"40\":1,\"68\":2}}],[\"hobbys\",{\"1\":{\"40\":1}}],[\"hope\",{\"1\":{\"0\":2,\"1\":1}}],[\"hreflocation\",{\"1\":{\"40\":1}}],[\"href\",{\"1\":{\"40\":2}}],[\"href=\",{\"1\":{\"34\":2,\"43\":2,\"334\":1}}],[\"h1\",{\"1\":{\"35\":1,\"40\":2,\"186\":1,\"371\":8}}],[\"h1>\",{\"1\":{\"34\":2,\"35\":3,\"334\":1}}],[\"here\",{\"1\":{\"555\":4}}],[\"heronode4\",{\"1\":{\"370\":2}}],[\"heronode3\",{\"1\":{\"370\":2}}],[\"heronode2\",{\"1\":{\"370\":2,\"371\":13}}],[\"heronode1\",{\"1\":{\"370\":2}}],[\"heronode\",{\"1\":{\"370\":34,\"371\":29}}],[\"helperdialect\",{\"1\":{\"535\":1,\"628\":5}}],[\"help\",{\"1\":{\"422\":1}}],[\"hell\",{\"1\":{\"317\":2}}],[\"hellocontroller\",{\"1\":{\"664\":2,\"670\":1}}],[\"hello请求\",{\"1\":{\"664\":1}}],[\"hello3\",{\"1\":{\"185\":1}}],[\"hello2\",{\"1\":{\"184\":1}}],[\"hello即可看到结果\",{\"1\":{\"61\":1}}],[\"hello后\",{\"1\":{\"61\":1}}],[\"hello\",{\"1\":{\"16\":1,\"17\":1,\"37\":1,\"38\":2,\"42\":1,\"61\":6,\"81\":1,\"147\":1,\"183\":2,\"185\":1,\"194\":1,\"205\":1,\"252\":1,\"298\":1,\"317\":6,\"334\":3,\"338\":7,\"478\":3,\"664\":4,\"668\":2,\"669\":2,\"670\":3}}],[\"hebing\",{\"1\":{\"371\":1}}],[\"hexchars\",{\"1\":{\"652\":3}}],[\"hex\",{\"1\":{\"295\":1}}],[\"height为盒子的高度\",{\"1\":{\"36\":1}}],[\"height\",{\"1\":{\"36\":1,\"253\":1,\"334\":1}}],[\"height=float\",{\"1\":{\"334\":1}}],[\"height=\",{\"1\":{\"34\":1}}],[\"headline开头都需要检查登陆\",{\"1\":{\"657\":1}}],[\"headlinedetail\",{\"1\":{\"656\":4}}],[\"headlinemapper\",{\"1\":{\"656\":6,\"657\":4}}],[\"headline>\",{\"1\":{\"656\":1}}],[\"headlineserviceimpl\",{\"1\":{\"656\":1}}],[\"headlineservice\",{\"1\":{\"656\":3,\"657\":4}}],[\"headline123456\",{\"1\":{\"655\":1}}],[\"headline<\",{\"1\":{\"652\":1}}],[\"headline`\",{\"1\":{\"651\":20}}],[\"headline\",{\"1\":{\"649\":1,\"651\":2,\"656\":14,\"657\":31}}],[\"head节点不存放具体数据\",{\"1\":{\"370\":1}}],[\"head\",{\"1\":{\"368\":1,\"370\":8,\"371\":24}}],[\"headqueue\",{\"1\":{\"367\":1,\"368\":1,\"370\":1}}],[\"heads\",{\"1\":{\"361\":2}}],[\"headers=headers\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1}}],[\"headers\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"header\",{\"1\":{\"92\":1,\"655\":1}}],[\"head>\",{\"1\":{\"34\":1,\"253\":1,\"334\":1}}],[\"health\",{\"1\":{\"34\":1}}],[\"htt\",{\"1\":{\"324\":2}}],[\"httpclient🫙2\",{\"1\":{\"387\":1}}],[\"httpclient🫙4\",{\"1\":{\"387\":1}}],[\"httpcore\",{\"1\":{\"387\":1}}],[\"httpcore🫙4\",{\"1\":{\"387\":1}}],[\"httpcomponents\",{\"1\":{\"387\":4}}],[\"httpasyncclient🫙4\",{\"1\":{\"387\":1}}],[\"http80\",{\"1\":{\"353\":1}}],[\"http超文本传输协议\",{\"1\":{\"62\":1}}],[\"http协议中支持的技术\",{\"1\":{\"90\":1}}],[\"http协议默认端口号为80\",{\"1\":{\"65\":1}}],[\"http协议是无状态的协议\",{\"1\":{\"62\":1}}],[\"http协议\",{\"0\":{\"62\":1}}],[\"https443\",{\"1\":{\"353\":1}}],[\"https协议\",{\"1\":{\"353\":1}}],[\"httpsession是java程序和浏览器之间的会话\",{\"1\":{\"493\":1}}],[\"httpsession\",{\"1\":{\"91\":4,\"493\":1}}],[\"httpservletrequest\",{\"1\":{\"68\":1,\"90\":1,\"91\":1,\"93\":2,\"94\":3,\"95\":1,\"657\":1,\"676\":4}}],[\"httpservletresponse\",{\"1\":{\"67\":1,\"90\":1,\"93\":2,\"94\":3,\"95\":1,\"657\":1,\"676\":4}}],[\"httpservetrequest\",{\"1\":{\"67\":1}}],[\"https\",{\"1\":{\"1\":7,\"40\":1,\"43\":1,\"220\":1,\"231\":1,\"236\":1,\"277\":2,\"334\":6,\"346\":1,\"353\":2,\"354\":2,\"355\":1,\"356\":1,\"361\":1,\"390\":1,\"393\":1,\"410\":1,\"415\":1,\"422\":1,\"431\":1,\"438\":1,\"440\":1,\"447\":1,\"448\":1,\"460\":1,\"467\":1,\"480\":1,\"487\":1,\"491\":1,\"493\":1,\"508\":1,\"514\":1,\"534\":1,\"547\":1,\"555\":1,\"562\":2,\"564\":1,\"568\":1,\"571\":1,\"572\":1,\"588\":2,\"625\":2,\"628\":2,\"630\":1,\"636\":3,\"641\":1,\"662\":1,\"665\":1,\"667\":1,\"674\":1,\"675\":1,\"680\":1}}],[\"http\",{\"1\":{\"0\":1,\"34\":1,\"45\":1,\"53\":1,\"64\":1,\"82\":1,\"220\":1,\"224\":4,\"228\":4,\"229\":4,\"231\":6,\"236\":6,\"251\":1,\"252\":1,\"253\":1,\"283\":1,\"334\":1,\"351\":2,\"352\":1,\"353\":1,\"422\":1,\"425\":9,\"426\":4,\"431\":4,\"432\":4,\"433\":4,\"434\":4,\"456\":16,\"461\":4,\"493\":1,\"514\":1,\"555\":3,\"562\":12,\"564\":6,\"568\":6,\"571\":6,\"572\":6,\"588\":8,\"625\":4,\"628\":1,\"673\":4,\"674\":4,\"675\":2,\"676\":2,\"677\":4}}],[\"htm\",{\"1\":{\"53\":1,\"283\":2}}],[\"html文件\",{\"1\":{\"675\":1}}],[\"html文档的标准模型\",{\"1\":{\"40\":1}}],[\"html=response1\",{\"1\":{\"334\":1}}],[\"html练习\",{\"1\":{\"334\":1}}],[\"html中的element对象可以通过document对象获得\",{\"1\":{\"40\":1}}],[\"html>\",{\"1\":{\"34\":2,\"252\":1,\"253\":2,\"334\":2}}],[\"html语法结构松散不严格\",{\"1\":{\"34\":1}}],[\"html不区分大小写\",{\"1\":{\"34\":1}}],[\"html负责网页的结构\",{\"1\":{\"33\":1}}],[\"html\",{\"0\":{\"34\":1},\"1\":{\"32\":1,\"40\":2,\"53\":2,\"64\":1,\"283\":2,\"334\":3,\"352\":1,\"390\":1,\"393\":1,\"401\":1,\"438\":1,\"440\":1,\"445\":2,\"491\":1,\"508\":1,\"662\":2,\"665\":2,\"667\":2,\"674\":2,\"675\":5}}],[\"||\",{\"1\":{\"38\":1,\"118\":2,\"334\":1,\"371\":2,\"657\":2}}],[\"|\",{\"1\":{\"0\":1,\"45\":1,\"64\":1,\"116\":1,\"118\":2,\"181\":13,\"280\":1,\"281\":2,\"297\":1,\"316\":1,\"324\":1,\"338\":1,\"395\":3,\"401\":46,\"440\":3,\"445\":46,\"493\":1,\"496\":6,\"527\":4,\"590\":2,\"667\":1}}],[\"ain\",{\"1\":{\"669\":1}}],[\"ai\",{\"1\":{\"651\":10}}],[\"a8\",{\"1\":{\"628\":2}}],[\"ae\",{\"1\":{\"628\":4}}],[\"a6\",{\"1\":{\"628\":2}}],[\"a都下载导入到c项目的jar包文件夹中\",{\"1\":{\"415\":1}}],[\"avg\",{\"1\":{\"510\":1}}],[\"avoid\",{\"1\":{\"387\":1}}],[\"available\",{\"1\":{\"239\":1,\"529\":1,\"574\":1}}],[\"a推出b\",{\"1\":{\"341\":1}}],[\"a+b\",{\"1\":{\"305\":1}}],[\"a++\",{\"1\":{\"117\":1}}],[\"am\",{\"1\":{\"298\":1,\"566\":1}}],[\"a显示所有系统消息\",{\"1\":{\"271\":1}}],[\"a为自己设置的另一个类\",{\"1\":{\"229\":1}}],[\"at\",{\"1\":{\"406\":1,\"425\":4,\"426\":2,\"609\":5}}],[\"attoparser🫙2\",{\"1\":{\"387\":1}}],[\"attoparser\",{\"1\":{\"387\":1}}],[\"attrs=\",{\"1\":{\"334\":2}}],[\"attribute\",{\"1\":{\"40\":2}}],[\"atm编号\",{\"1\":{\"334\":1}}],[\"atguigusecondpointcut\",{\"1\":{\"591\":1}}],[\"atguiguglobalpointcut\",{\"1\":{\"591\":1}}],[\"atguigupointcut\",{\"1\":{\"591\":1,\"592\":1}}],[\"atguigu<\",{\"1\":{\"400\":1,\"431\":1,\"432\":1,\"433\":2,\"434\":2,\"444\":1,\"456\":4,\"461\":1,\"625\":1,\"652\":1,\"673\":1,\"677\":1}}],[\"atguigu\",{\"1\":{\"215\":2,\"219\":2,\"220\":3,\"231\":5,\"235\":1,\"236\":1,\"238\":4,\"242\":1,\"244\":5,\"248\":3,\"387\":3,\"416\":1,\"418\":3,\"426\":4,\"442\":1,\"452\":3,\"461\":1,\"467\":1,\"476\":1,\"477\":1,\"493\":6,\"502\":1,\"509\":1,\"511\":1,\"513\":3,\"514\":6,\"527\":1,\"528\":1,\"529\":1,\"532\":1,\"539\":3,\"557\":2,\"560\":2,\"561\":1,\"562\":15,\"564\":13,\"567\":2,\"568\":7,\"571\":4,\"572\":1,\"573\":4,\"575\":5,\"579\":1,\"582\":2,\"588\":9,\"589\":3,\"590\":5,\"591\":6,\"592\":1,\"594\":1,\"596\":2,\"606\":10,\"607\":8,\"611\":3,\"625\":2,\"626\":2,\"627\":3,\"628\":7,\"630\":2,\"640\":5,\"641\":1,\"649\":1,\"652\":3,\"655\":1,\"664\":4,\"668\":1,\"669\":1,\"670\":1,\"673\":3,\"676\":3,\"680\":4}}],[\"a2\",{\"1\":{\"188\":1,\"224\":1}}],[\"a1+\",{\"1\":{\"188\":1}}],[\"a1\",{\"1\":{\"188\":1,\"228\":1}}],[\"a123\",{\"1\":{\"38\":1}}],[\"aaa\",{\"1\":{\"170\":1}}],[\"aa\",{\"1\":{\"170\":6,\"177\":2,\"178\":2}}],[\"analytics\",{\"1\":{\"669\":1}}],[\"anywhere\",{\"1\":{\"460\":1}}],[\"ant\",{\"1\":{\"403\":1}}],[\"annotations\",{\"1\":{\"431\":1,\"432\":1,\"455\":1,\"456\":2}}],[\"annotations🫙2\",{\"1\":{\"387\":2}}],[\"annotations🫙1\",{\"1\":{\"387\":1}}],[\"annotation<\",{\"1\":{\"233\":1,\"244\":1,\"566\":1,\"568\":1,\"575\":1,\"582\":1,\"606\":1,\"625\":1}}],[\"annotation\",{\"1\":{\"231\":2,\"233\":1,\"235\":3,\"238\":2,\"244\":1,\"248\":3,\"387\":2,\"564\":2,\"566\":1,\"567\":1,\"568\":2,\"570\":1,\"571\":3,\"573\":2,\"575\":1,\"582\":2,\"588\":9,\"606\":1,\"611\":3,\"612\":1,\"625\":9,\"655\":1,\"664\":2,\"668\":1,\"669\":1,\"673\":3,\"676\":4}}],[\"annotation取值表示根据注解来排除\",{\"1\":{\"231\":1,\"564\":1}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"221\":2,\"239\":1,\"552\":1,\"571\":6,\"574\":1,\"575\":2}}],[\"anotherstring\",{\"1\":{\"166\":1}}],[\"anobject\",{\"1\":{\"166\":1}}],[\"animal2\",{\"1\":{\"188\":2}}],[\"animal1\",{\"1\":{\"188\":2}}],[\"animal\",{\"1\":{\"146\":9,\"147\":2,\"188\":11,\"329\":4}}],[\"and|or\",{\"1\":{\"527\":1}}],[\"andy\",{\"1\":{\"493\":1,\"625\":1}}],[\"and和or关键字使用\",{\"1\":{\"476\":1}}],[\"android\",{\"1\":{\"165\":2}}],[\"and\",{\"1\":{\"8\":1,\"45\":1,\"81\":2,\"82\":1,\"84\":1,\"239\":1,\"247\":3,\"248\":1,\"294\":1,\"298\":1,\"334\":3,\"474\":2,\"476\":5,\"477\":1,\"481\":1,\"483\":1,\"527\":2,\"555\":3,\"574\":1,\"610\":4,\"611\":1,\"612\":1,\"656\":4}}],[\"a大\",{\"1\":{\"119\":1}}],[\"a对应的asii码65\",{\"1\":{\"114\":1}}],[\"a对应的ascii码97\",{\"1\":{\"114\":1}}],[\"a=true\",{\"1\":{\"334\":1}}],[\"a=2\",{\"1\":{\"334\":1}}],[\"a=math\",{\"1\":{\"334\":1}}],[\"a=a\",{\"1\":{\"334\":1}}],[\"a=a+1\",{\"1\":{\"117\":1}}],[\"a=int\",{\"1\":{\"334\":1}}],[\"a=\",{\"1\":{\"334\":2}}],[\"a=66\",{\"1\":{\"325\":1}}],[\"a=9\",{\"1\":{\"119\":1}}],[\"a=3\",{\"1\":{\"112\":1,\"325\":1}}],[\"a=0\",{\"1\":{\"117\":1}}],[\"a=0x1f\",{\"1\":{\"112\":1}}],[\"a=012\",{\"1\":{\"112\":1}}],[\"a=0b101\",{\"1\":{\"112\":1}}],[\"a=10\",{\"1\":{\"108\":1,\"112\":1,\"114\":1,\"197\":1}}],[\"afterpropertiesset\",{\"1\":{\"628\":1}}],[\"aftereach\",{\"1\":{\"505\":1,\"514\":2,\"518\":1}}],[\"aftereach方法\",{\"1\":{\"505\":1,\"514\":1,\"518\":1}}],[\"after标签\",{\"1\":{\"219\":1,\"596\":1}}],[\"after\",{\"1\":{\"212\":3,\"219\":5,\"588\":1,\"591\":1,\"596\":5}}],[\"afterthrowing注解中声明一个throwing属性设定形参名称\",{\"1\":{\"589\":1}}],[\"afterthrowing注解标记异常通知方法\",{\"1\":{\"589\":1}}],[\"afterthrowing注解的throwing属性获取目标方法抛出的异常对象\",{\"1\":{\"589\":1}}],[\"afterthrowing\",{\"1\":{\"212\":2,\"213\":1,\"588\":1,\"589\":1,\"591\":1}}],[\"afterthrowing异常后通知\",{\"1\":{\"102\":1}}],[\"afterreturning注解中通过returning属性设置一个名称\",{\"1\":{\"589\":1}}],[\"afterreturning注解标记返回通知方法\",{\"1\":{\"589\":1}}],[\"afterreturning注解的returning属性获取目标方法的返回值\",{\"1\":{\"589\":1}}],[\"afterreturning\",{\"1\":{\"212\":1,\"213\":2,\"588\":1,\"589\":1,\"591\":1}}],[\"afterreturning返回后通知\",{\"1\":{\"102\":1}}],[\"after后置通知\",{\"1\":{\"102\":1}}],[\"aftercompletion\",{\"1\":{\"94\":2,\"676\":1}}],[\"axois\",{\"1\":{\"51\":1}}],[\"axios用于前后端数据的交互\",{\"1\":{\"647\":1}}],[\"axios\",{\"1\":{\"0\":1,\"32\":1,\"45\":9,\"51\":2}}],[\"axios中文网\",{\"1\":{\"0\":1,\"45\":1}}],[\"axios中文文档\",{\"1\":{\"0\":1,\"45\":1}}],[\"a\",{\"1\":{\"38\":1,\"81\":1,\"92\":2,\"108\":1,\"114\":2,\"119\":1,\"120\":1,\"121\":1,\"128\":1,\"146\":4,\"149\":2,\"155\":5,\"197\":7,\"218\":1,\"224\":1,\"228\":1,\"229\":7,\"239\":7,\"299\":2,\"305\":1,\"307\":2,\"310\":5,\"312\":4,\"315\":4,\"316\":4,\"318\":2,\"320\":1,\"325\":7,\"327\":2,\"329\":2,\"334\":12,\"338\":5,\"345\":4,\"368\":2,\"415\":2,\"416\":6,\"448\":8,\"476\":2,\"477\":1,\"478\":3,\"517\":8,\"566\":1,\"574\":7,\"590\":7,\"594\":1,\"652\":1}}],[\"alexa和echo智能音箱又带来了语音计算\",{\"1\":{\"651\":1}}],[\"alert\",{\"1\":{\"37\":1,\"38\":2,\"40\":1,\"41\":2,\"43\":1,\"44\":1}}],[\"alpha\",{\"1\":{\"345\":1}}],[\"alnum\",{\"1\":{\"345\":1}}],[\"alter\",{\"1\":{\"277\":2,\"481\":1,\"484\":1}}],[\"alt+\",{\"1\":{\"108\":1}}],[\"allteachers\",{\"1\":{\"535\":2}}],[\"all\",{\"1\":{\"276\":1,\"277\":1,\"334\":6}}],[\"allowed\",{\"1\":{\"608\":1}}],[\"allowmultiqueries=true\",{\"1\":{\"529\":1}}],[\"allow\",{\"1\":{\"252\":1}}],[\"allargsconstructor\",{\"1\":{\"79\":1,\"640\":1}}],[\"algorithm\",{\"1\":{\"480\":1}}],[\"alg\",{\"1\":{\"92\":1}}],[\"alice\",{\"1\":{\"478\":1}}],[\"aliexpress\",{\"1\":{\"398\":1,\"442\":1}}],[\"aliases\",{\"1\":{\"652\":1,\"680\":1}}],[\"alias=\",{\"1\":{\"508\":2}}],[\"alias\",{\"1\":{\"330\":1,\"508\":1}}],[\"aliasfor\",{\"1\":{\"237\":2,\"573\":2}}],[\"aligin\",{\"0\":{\"261\":1}}],[\"align属性将失效\",{\"1\":{\"255\":1}}],[\"align\",{\"0\":{\"260\":1,\"265\":1},\"1\":{\"34\":1,\"256\":2,\"263\":1,\"265\":1}}],[\"alibaba\",{\"1\":{\"236\":1,\"387\":10,\"398\":2,\"442\":2,\"461\":2,\"481\":1,\"562\":2,\"568\":1,\"572\":1,\"588\":1,\"652\":2,\"655\":1,\"677\":2,\"680\":1}}],[\"alibaba<\",{\"1\":{\"78\":1,\"244\":1,\"412\":1,\"415\":1,\"449\":1,\"461\":1,\"562\":1,\"568\":1,\"575\":1,\"606\":1,\"625\":1,\"652\":1,\"677\":1,\"680\":1}}],[\"aliyun\",{\"1\":{\"56\":1,\"395\":1,\"425\":1,\"440\":1}}],[\"aquamarine\",{\"1\":{\"36\":1}}],[\"age>1\",{\"1\":{\"476\":1,\"478\":1}}],[\"age>35\",{\"1\":{\"43\":2}}],[\"agestr\",{\"1\":{\"68\":2}}],[\"age=cat\",{\"1\":{\"334\":2}}],[\"age=input\",{\"1\":{\"334\":1}}],[\"age=9\",{\"1\":{\"324\":2}}],[\"age=66\",{\"1\":{\"318\":1}}],[\"age=29\",{\"1\":{\"318\":1}}],[\"age=21\",{\"1\":{\"187\":1}}],[\"age=23\",{\"1\":{\"187\":1}}],[\"age=age\",{\"1\":{\"127\":2}}],[\"age=\",{\"1\":{\"81\":1,\"130\":1,\"176\":2,\"187\":2,\"318\":2,\"476\":1,\"477\":1,\"527\":1,\"562\":1,\"568\":1,\"575\":1}}],[\"age=100\",{\"1\":{\"68\":1}}],[\"age=12\",{\"1\":{\"34\":1,\"325\":2}}],[\"age=300表示最多缓存300秒\",{\"1\":{\"64\":1}}],[\"agent\",{\"1\":{\"63\":1,\"251\":1,\"334\":3,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"age<60\",{\"1\":{\"43\":1}}],[\"age<=35\",{\"1\":{\"43\":1}}],[\"age\",{\"1\":{\"34\":1,\"40\":1,\"43\":5,\"68\":5,\"81\":3,\"127\":4,\"130\":5,\"135\":8,\"145\":1,\"174\":4,\"176\":26,\"187\":10,\"224\":1,\"298\":2,\"325\":4,\"327\":2,\"334\":6,\"461\":4,\"474\":2,\"476\":17,\"477\":4,\"478\":4,\"479\":2,\"480\":3,\"481\":3,\"527\":1,\"530\":1,\"558\":5,\"562\":14,\"568\":9,\"575\":9,\"606\":3,\"673\":5}}],[\"a>1\",{\"1\":{\"334\":1}}],[\"a>b\",{\"1\":{\"119\":1,\"299\":1}}],[\"a>\",{\"1\":{\"34\":1,\"43\":2,\"334\":1}}],[\"aop整合配置\",{\"0\":{\"682\":1},\"1\":{\"660\":1}}],[\"aop注解支持\",{\"1\":{\"627\":1}}],[\"aop和aop框架和代理技术\",{\"1\":{\"613\":1}}],[\"aop切点表达式\",{\"1\":{\"590\":1}}],[\"aoptest\",{\"1\":{\"588\":2,\"596\":1}}],[\"aop=\",{\"1\":{\"588\":1}}],[\"aop后置通知\",{\"1\":{\"588\":2,\"591\":1}}],[\"aop异常通知\",{\"1\":{\"588\":1,\"589\":1,\"591\":1}}],[\"aop返回通知\",{\"1\":{\"588\":2,\"589\":1,\"591\":1}}],[\"aop前置通知\",{\"1\":{\"588\":2,\"589\":1,\"591\":1}}],[\"aop框架\",{\"1\":{\"585\":1}}],[\"aop框架介绍和关系梳理\",{\"0\":{\"585\":1},\"1\":{\"542\":1}}],[\"aop一种区别于oop的编程思维\",{\"1\":{\"585\":1}}],[\"aop的作用在于分离系统中的各种关注点\",{\"1\":{\"584\":1}}],[\"aop的实现方式之一是通过动态代理\",{\"1\":{\"584\":1}}],[\"aop术语名词介绍\",{\"1\":{\"584\":1}}],[\"aop可以应用于各种场景\",{\"1\":{\"584\":2}}],[\"aop可以说是oop\",{\"1\":{\"211\":1,\"584\":1}}],[\"aop思想主要的应用场景\",{\"1\":{\"584\":1}}],[\"aop技术恰恰相反\",{\"1\":{\"584\":1}}],[\"aop对获取bean的影响理解\",{\"0\":{\"597\":1},\"1\":{\"542\":1}}],[\"aop基于xml方式实现\",{\"0\":{\"596\":1},\"1\":{\"542\":1}}],[\"aop基于注解方式实现和细节\",{\"0\":{\"586\":1},\"1\":{\"542\":1}}],[\"aop底层技术组成\",{\"0\":{\"587\":1},\"1\":{\"542\":1}}],[\"aop面向切面编程\",{\"0\":{\"581\":1},\"1\":{\"542\":1}}],[\"aop🫙5\",{\"1\":{\"387\":1}}],[\"aop🫙2\",{\"1\":{\"387\":1}}],[\"aop实现\",{\"0\":{\"212\":1}}],[\"aop把软件系统分为两个部分\",{\"1\":{\"211\":1,\"584\":1}}],[\"aop进阶\",{\"0\":{\"102\":1}}],[\"aop核心概念\",{\"0\":{\"101\":1}}],[\"aop类\",{\"1\":{\"100\":1}}],[\"aop<\",{\"1\":{\"100\":1,\"211\":1,\"244\":1,\"418\":2,\"452\":2,\"588\":1,\"606\":1,\"625\":1,\"652\":1,\"682\":1}}],[\"aop快速入门\",{\"0\":{\"100\":1}}],[\"aop\",{\"0\":{\"99\":1,\"211\":1,\"584\":1,\"627\":1},\"1\":{\"32\":1,\"212\":3,\"213\":3,\"215\":2,\"216\":1,\"219\":10,\"542\":1,\"547\":1,\"548\":1,\"551\":1,\"552\":1,\"582\":1,\"583\":1,\"584\":2,\"588\":9,\"589\":3,\"591\":2,\"592\":5,\"594\":1,\"596\":12,\"613\":2,\"615\":1,\"620\":1,\"622\":1,\"625\":1}}],[\"ajax的post请求\",{\"0\":{\"357\":1}}],[\"ajax的get请求\",{\"0\":{\"356\":1}}],[\"ajax\",{\"0\":{\"45\":1,\"250\":1},\"1\":{\"32\":1}}],[\"actually\",{\"1\":{\"558\":1}}],[\"active=dev\",{\"1\":{\"686\":1}}],[\"active=dev来指定使用开发环境的配置\",{\"1\":{\"671\":1}}],[\"active=<profile>\",{\"1\":{\"686\":1}}],[\"active\",{\"1\":{\"671\":3,\"677\":1}}],[\"active属性指定当前的环境\",{\"1\":{\"671\":1}}],[\"active属性指定当前使用的环境\",{\"1\":{\"671\":1}}],[\"activerecord\",{\"1\":{\"460\":2}}],[\"activebydefault>\",{\"1\":{\"395\":1,\"440\":1}}],[\"activation>\",{\"1\":{\"395\":1,\"440\":1}}],[\"action=\",{\"1\":{\"34\":2,\"356\":1}}],[\"actionevent\",{\"1\":{\"26\":1,\"28\":1,\"29\":1}}],[\"actionperformed\",{\"1\":{\"26\":1,\"28\":1,\"29\":1}}],[\"actionlistener\",{\"1\":{\"25\":1,\"26\":1,\"28\":1,\"29\":1}}],[\"acme\",{\"1\":{\"237\":1,\"573\":1}}],[\"account=\",{\"1\":{\"680\":1}}],[\"account\",{\"1\":{\"680\":6}}],[\"accountiteam\",{\"1\":{\"28\":6}}],[\"accessors\",{\"1\":{\"425\":4}}],[\"access\",{\"1\":{\"71\":1,\"252\":1}}],[\"accept\",{\"1\":{\"17\":4,\"63\":3,\"191\":1,\"192\":1,\"202\":1,\"203\":1}}],[\"abc123中国人\",{\"1\":{\"169\":1}}],[\"abc123\",{\"1\":{\"169\":1}}],[\"abbr>\",{\"1\":{\"34\":1}}],[\"abstractannotationconfigdispatcherservletinitializer\",{\"1\":{\"623\":1,\"629\":1}}],[\"abstractlambdawrapper\",{\"1\":{\"475\":1}}],[\"abstractwrapper\",{\"1\":{\"475\":1}}],[\"abstract修饰方法\",{\"1\":{\"138\":1}}],[\"abstract修饰类\",{\"1\":{\"138\":1}}],[\"abstract不能用来修饰属性\",{\"1\":{\"138\":1}}],[\"abstract\",{\"1\":{\"22\":1,\"138\":4,\"139\":1,\"144\":1,\"146\":2,\"147\":2,\"149\":1,\"151\":3,\"213\":1}}],[\"aboutjmenu\",{\"1\":{\"28\":6}}],[\"about\",{\"0\":{\"0\":1}}],[\"awt\",{\"1\":{\"22\":1}}],[\"admin\",{\"1\":{\"423\":2,\"514\":1,\"669\":1}}],[\"advice\",{\"1\":{\"101\":1,\"588\":1}}],[\"adress\",{\"1\":{\"68\":1}}],[\"addmappings\",{\"1\":{\"675\":2}}],[\"addmouselistener\",{\"1\":{\"27\":1}}],[\"addplugins\",{\"1\":{\"628\":1}}],[\"addpathpatterns\",{\"1\":{\"94\":1,\"657\":1,\"676\":1}}],[\"addinnerinterceptor\",{\"1\":{\"472\":1,\"484\":1,\"485\":1,\"652\":3}}],[\"addinterceptor\",{\"1\":{\"94\":1,\"657\":1,\"676\":1}}],[\"addinterceptors\",{\"1\":{\"94\":1,\"657\":1,\"676\":1}}],[\"addbyorder\",{\"1\":{\"370\":1}}],[\"addqueue\",{\"1\":{\"367\":1,\"368\":1,\"370\":1}}],[\"addall\",{\"1\":{\"170\":2,\"171\":2}}],[\"addactionlistener\",{\"1\":{\"26\":5,\"28\":4,\"29\":1}}],[\"addcookie\",{\"1\":{\"90\":1}}],[\"addresult\",{\"1\":{\"583\":2}}],[\"address\",{\"1\":{\"68\":1}}],[\"address>\",{\"1\":{\"34\":1}}],[\"addrs\",{\"1\":{\"43\":3}}],[\"addr\",{\"1\":{\"40\":1,\"43\":4}}],[\"addkeylistener\",{\"1\":{\"28\":2}}],[\"add\",{\"1\":{\"17\":1,\"21\":1,\"23\":11,\"24\":10,\"25\":2,\"26\":3,\"27\":1,\"28\":20,\"29\":3,\"164\":1,\"170\":20,\"171\":3,\"176\":10,\"192\":1,\"203\":1,\"213\":1,\"215\":1,\"276\":4,\"316\":1,\"368\":1,\"370\":5,\"371\":1,\"481\":1,\"484\":1,\"582\":3,\"583\":2,\"588\":7,\"589\":3,\"591\":6,\"596\":1}}],[\"adouble+\",{\"1\":{\"17\":1}}],[\"adouble\",{\"1\":{\"17\":1}}],[\"association标签\",{\"1\":{\"522\":1}}],[\"association和javatype\",{\"1\":{\"518\":1}}],[\"association>\",{\"1\":{\"517\":1,\"518\":1}}],[\"assign\",{\"1\":{\"480\":1}}],[\"assert断言和unittest\",{\"1\":{\"334\":1}}],[\"assert\",{\"1\":{\"294\":1,\"334\":1}}],[\"assets静态资源\",{\"1\":{\"49\":1}}],[\"assets\",{\"1\":{\"0\":1,\"1\":1}}],[\"asc\",{\"1\":{\"476\":1}}],[\"ascii\",{\"1\":{\"320\":1}}],[\"ascii或其他\",{\"1\":{\"317\":1}}],[\"as\",{\"1\":{\"294\":1,\"330\":1,\"334\":7,\"476\":2,\"512\":1,\"517\":23,\"562\":3,\"568\":1,\"575\":1}}],[\"aspect表示这个类是一个切面类\",{\"1\":{\"588\":1}}],[\"aspectjweaver\",{\"1\":{\"588\":2}}],[\"aspectjweaver🫙1\",{\"1\":{\"387\":1}}],[\"aspectj注解支持\",{\"1\":{\"588\":1}}],[\"aspectj\",{\"1\":{\"387\":1,\"587\":1,\"588\":4}}],[\"aspect>\",{\"1\":{\"219\":1,\"596\":1}}],[\"aspect标签\",{\"1\":{\"219\":1,\"596\":1}}],[\"aspect=切点+增强\",{\"1\":{\"212\":1}}],[\"aspects\",{\"1\":{\"548\":1,\"588\":2,\"625\":1}}],[\"aspects<\",{\"1\":{\"211\":1,\"244\":1,\"588\":1,\"606\":1,\"625\":1}}],[\"aspects会帮我们传递过来aspectjweaver\",{\"1\":{\"211\":1,\"588\":1}}],[\"aspect\",{\"1\":{\"100\":1,\"101\":1,\"211\":1,\"212\":1,\"215\":1,\"219\":2,\"584\":3,\"588\":1,\"591\":1,\"592\":1,\"596\":2,\"682\":1}}],[\"asynchronous\",{\"1\":{\"45\":1}}],[\"aslist\",{\"1\":{\"17\":1,\"170\":1,\"180\":1,\"478\":1,\"589\":1,\"592\":1}}],[\"apt\",{\"1\":{\"279\":1,\"280\":2,\"281\":1,\"285\":1,\"288\":4}}],[\"apr\",{\"1\":{\"162\":2,\"163\":2}}],[\"apache的archiva\",{\"1\":{\"421\":1}}],[\"apache\",{\"1\":{\"80\":1,\"387\":9,\"390\":1,\"393\":1,\"404\":1,\"413\":2,\"431\":4,\"432\":3,\"433\":3,\"434\":3,\"438\":1,\"440\":2,\"450\":1,\"456\":15,\"461\":3,\"480\":1,\"509\":1,\"514\":3,\"625\":3,\"628\":2,\"673\":3,\"677\":3,\"680\":1}}],[\"appconfig\",{\"1\":{\"237\":2,\"573\":3,\"612\":1}}],[\"appendix\",{\"1\":{\"667\":1,\"674\":1,\"675\":1}}],[\"appender>\",{\"1\":{\"625\":1}}],[\"append\",{\"1\":{\"167\":1,\"309\":1,\"334\":4}}],[\"applewebkit\",{\"1\":{\"334\":2,\"353\":1,\"354\":2,\"355\":1,\"356\":1,\"361\":1}}],[\"application设置依然生效\",{\"1\":{\"671\":1}}],[\"applicationlistener<contextrefreshedevent>\",{\"1\":{\"628\":1}}],[\"applicationcontextexception\",{\"1\":{\"621\":1}}],[\"applicationcontext\",{\"1\":{\"221\":1,\"230\":1,\"237\":1,\"239\":1,\"552\":3,\"555\":4,\"559\":1,\"560\":1,\"561\":2,\"562\":12,\"568\":3,\"571\":4,\"573\":1,\"574\":1,\"575\":2,\"621\":1}}],[\"applicationcontext容器实现类\",{\"1\":{\"221\":2,\"552\":1}}],[\"application\",{\"1\":{\"64\":1,\"76\":1,\"80\":1,\"97\":1,\"235\":1,\"236\":1,\"242\":1,\"283\":1,\"461\":1,\"567\":2,\"571\":3,\"572\":1,\"579\":1,\"607\":1,\"652\":1,\"655\":1,\"667\":4,\"668\":2,\"671\":5,\"674\":3,\"675\":2}}],[\"applystatementsettings\",{\"1\":{\"609\":1}}],[\"applytimeout\",{\"1\":{\"609\":1}}],[\"apply\",{\"1\":{\"17\":1}}],[\"app\",{\"1\":{\"42\":2,\"43\":6,\"44\":1,\"49\":1,\"252\":3,\"669\":1}}],[\"apiguardian\",{\"1\":{\"588\":6}}],[\"api🫙1\",{\"1\":{\"387\":6}}],[\"api🫙2\",{\"1\":{\"387\":1}}],[\"api<\",{\"1\":{\"92\":1,\"220\":1,\"233\":1,\"242\":2,\"244\":2,\"431\":1,\"432\":1,\"493\":1,\"557\":1,\"564\":1,\"566\":1,\"568\":1,\"575\":1,\"580\":1,\"582\":2,\"606\":2,\"625\":3,\"655\":1}}],[\"api管理平台\",{\"0\":{\"46\":1}}],[\"api\",{\"0\":{\"3\":1},\"1\":{\"16\":1,\"59\":1,\"215\":1,\"398\":3,\"411\":1,\"426\":1,\"431\":1,\"442\":3,\"514\":3,\"537\":1,\"549\":2,\"588\":12,\"589\":3,\"590\":3,\"591\":1,\"625\":12}}],[\"are\",{\"1\":{\"529\":1,\"608\":1}}],[\"archaius\",{\"1\":{\"387\":2}}],[\"archaius🫙2\",{\"1\":{\"387\":2}}],[\"arglist\",{\"1\":{\"589\":2}}],[\"arg0\",{\"1\":{\"529\":1}}],[\"arg2\",{\"1\":{\"326\":1}}],[\"arg1\",{\"1\":{\"326\":1}}],[\"arg标签\",{\"1\":{\"224\":2,\"558\":3}}],[\"arg\",{\"1\":{\"224\":11,\"558\":10,\"571\":1}}],[\"args\",{\"1\":{\"11\":2,\"12\":2,\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"28\":3,\"29\":1,\"108\":1,\"109\":1,\"130\":2,\"135\":1,\"138\":1,\"145\":2,\"146\":2,\"147\":1,\"149\":1,\"150\":1,\"151\":2,\"154\":1,\"155\":2,\"160\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"170\":1,\"176\":2,\"177\":2,\"185\":1,\"186\":2,\"187\":4,\"188\":1,\"189\":1,\"191\":2,\"192\":2,\"194\":1,\"197\":1,\"200\":1,\"202\":2,\"203\":2,\"205\":1,\"213\":2,\"216\":2,\"239\":1,\"366\":1,\"368\":1,\"370\":1,\"461\":2,\"478\":2,\"534\":1,\"574\":1,\"583\":4,\"589\":2,\"592\":3,\"652\":2,\"664\":2,\"673\":2,\"677\":2,\"680\":2}}],[\"around注解标明环绕通知方法\",{\"1\":{\"592\":1}}],[\"around标签\",{\"1\":{\"219\":1,\"596\":1}}],[\"around环绕通知\",{\"1\":{\"102\":1}}],[\"around\",{\"0\":{\"216\":1},\"1\":{\"100\":1,\"212\":1,\"216\":1,\"219\":1,\"258\":1,\"261\":1,\"592\":1,\"596\":1}}],[\"artifact\",{\"1\":{\"415\":1,\"431\":1,\"448\":1,\"625\":2}}],[\"artifactid+verson\",{\"1\":{\"413\":1}}],[\"artifactid\",{\"1\":{\"398\":2,\"442\":2}}],[\"artifactid>\",{\"1\":{\"58\":1,\"59\":4,\"78\":1,\"79\":1,\"92\":2,\"100\":1,\"211\":2,\"220\":3,\"233\":1,\"242\":4,\"244\":10,\"387\":3,\"400\":1,\"404\":1,\"409\":1,\"410\":2,\"412\":1,\"413\":2,\"415\":2,\"416\":2,\"418\":13,\"419\":1,\"431\":6,\"432\":6,\"433\":3,\"434\":3,\"444\":1,\"447\":3,\"448\":1,\"449\":1,\"450\":1,\"452\":13,\"453\":1,\"456\":17,\"461\":10,\"493\":3,\"535\":1,\"557\":2,\"562\":4,\"564\":2,\"566\":1,\"568\":5,\"575\":5,\"580\":2,\"582\":4,\"588\":2,\"606\":10,\"625\":21,\"652\":11,\"655\":2,\"664\":2,\"673\":3,\"677\":8,\"680\":7,\"681\":1,\"682\":1,\"684\":1}}],[\"artifacts\",{\"1\":{\"395\":1,\"440\":1}}],[\"artifactld\",{\"1\":{\"58\":1,\"59\":1}}],[\"article\",{\"1\":{\"1\":1,\"651\":18,\"656\":3,\"657\":3}}],[\"arrmaxsize\",{\"1\":{\"367\":2}}],[\"arr=new\",{\"1\":{\"124\":1}}],[\"arrary\",{\"1\":{\"113\":1}}],[\"arrayqueue\",{\"1\":{\"367\":2,\"368\":7}}],[\"arraylist中\",{\"1\":{\"171\":1}}],[\"arraylist重写\",{\"1\":{\"170\":1}}],[\"arraylist\",{\"0\":{\"171\":1},\"1\":{\"169\":1,\"170\":6,\"508\":2}}],[\"arraylist<>\",{\"1\":{\"17\":1,\"170\":1}}],[\"arraylist<string>\",{\"1\":{\"17\":1}}],[\"array对象用于定义数组\",{\"1\":{\"40\":1}}],[\"array数组\",{\"1\":{\"40\":1}}],[\"arrays\",{\"1\":{\"17\":1,\"126\":2,\"170\":2,\"180\":1,\"478\":2,\"583\":1,\"589\":1,\"592\":1}}],[\"array=rs\",{\"1\":{\"11\":1}}],[\"array\",{\"1\":{\"11\":1,\"40\":1}}],[\"arr\",{\"1\":{\"40\":3,\"124\":4,\"125\":2,\"126\":24,\"188\":3,\"367\":8,\"370\":7}}],[\"arial\",{\"1\":{\"34\":1}}],[\"authenticationtype\",{\"1\":{\"566\":2}}],[\"auth\",{\"1\":{\"426\":1}}],[\"author\",{\"1\":{\"0\":1,\"107\":1,\"508\":6,\"517\":22,\"539\":1,\"656\":3,\"669\":1}}],[\"autoproxy\",{\"1\":{\"588\":2}}],[\"automappingbehavior\",{\"1\":{\"521\":2,\"628\":3}}],[\"autoconfiguration\",{\"1\":{\"461\":1,\"652\":1,\"677\":1}}],[\"autoconfigure\",{\"1\":{\"461\":2,\"652\":2,\"664\":1,\"675\":1,\"677\":2}}],[\"autoconfigure🫙2\",{\"1\":{\"387\":1}}],[\"autocommit\",{\"1\":{\"5\":1}}],[\"autoindent\",{\"1\":{\"286\":1}}],[\"autowried\",{\"1\":{\"233\":1}}],[\"autowirecandidate\",{\"1\":{\"237\":4,\"573\":4}}],[\"autowired等\",{\"1\":{\"552\":1}}],[\"autowired多个组件的时候\",{\"1\":{\"233\":1}}],[\"autowired注解用在属性上\",{\"1\":{\"566\":1}}],[\"autowired注解默认根据类型装配\",{\"1\":{\"566\":1}}],[\"autowired注解是spring框架自己的\",{\"1\":{\"566\":1}}],[\"autowired注解有什么区别\",{\"1\":{\"566\":1}}],[\"autowired注解细节\",{\"1\":{\"566\":1}}],[\"autowired注解设置required\",{\"1\":{\"233\":1,\"566\":1}}],[\"autowired注解即可\",{\"1\":{\"233\":1,\"566\":1}}],[\"autowired注解\",{\"1\":{\"233\":1,\"566\":1}}],[\"autowired\",{\"1\":{\"94\":1,\"233\":3,\"241\":1,\"242\":2,\"247\":2,\"248\":2,\"461\":1,\"566\":10,\"568\":3,\"575\":3,\"578\":1,\"579\":1,\"580\":1,\"588\":1,\"594\":1,\"596\":1,\"606\":3,\"607\":2,\"609\":1,\"610\":2,\"611\":2,\"612\":4,\"630\":2,\"641\":2,\"655\":4,\"656\":2,\"657\":2,\"668\":1,\"669\":1,\"670\":2,\"676\":2,\"677\":1,\"680\":2}}],[\"autowire注解\",{\"1\":{\"75\":1}}],[\"auto\",{\"1\":{\"36\":1,\"480\":2,\"493\":1,\"514\":2,\"517\":2,\"625\":1,\"640\":1,\"651\":6,\"652\":1,\"680\":1}}],[\"注入的属性必须添加setter方法\",{\"1\":{\"562\":1}}],[\"注入进行依赖项注入的类\",{\"1\":{\"558\":1}}],[\"注入后用注解也能使用\",{\"1\":{\"231\":1}}],[\"注入基本数据类型moviename\",{\"1\":{\"225\":1,\"558\":1}}],[\"注入moviefinder对象的标识id\",{\"1\":{\"225\":1,\"558\":1}}],[\"注入\",{\"1\":{\"224\":1}}],[\"注册用户名检查\",{\"1\":{\"655\":1}}],[\"注册功能\",{\"1\":{\"646\":1,\"648\":1}}],[\"注册\",{\"1\":{\"532\":1,\"669\":1}}],[\"注册mapper配置文件\",{\"1\":{\"518\":1,\"519\":1}}],[\"注册端口\",{\"1\":{\"189\":1,\"200\":1}}],[\"注册拦截器\",{\"1\":{\"94\":1}}],[\"注册驱动\",{\"1\":{\"2\":1,\"4\":1}}],[\"注解扫描\",{\"1\":{\"679\":1}}],[\"注解和配置属性等条件来决定要使用的功能和配置\",{\"1\":{\"664\":1}}],[\"注解aop和声明事务相关配置\",{\"1\":{\"627\":1}}],[\"注解通过\",{\"1\":{\"612\":1}}],[\"注解中的事务属性设置生效\",{\"1\":{\"608\":1}}],[\"注解中设置的事务属性也会延续影响到方法执行时的事务属性\",{\"1\":{\"608\":1}}],[\"注解中指定的名称作为\",{\"1\":{\"566\":1}}],[\"注解在类级别标记\",{\"1\":{\"608\":1}}],[\"注解提取到类上\",{\"1\":{\"608\":1}}],[\"注解+配置类\",{\"1\":{\"575\":1}}],[\"注解+xml\",{\"1\":{\"568\":1}}],[\"注解+xml扫描\",{\"1\":{\"231\":1}}],[\"注解设置\",{\"1\":{\"566\":1}}],[\"注解本身仅仅只是做一个标记\",{\"1\":{\"564\":1}}],[\"注解本身并不能执行\",{\"1\":{\"564\":1}}],[\"注解理解\",{\"1\":{\"564\":1}}],[\"注解方式ioc只是标记哪些类要被spring管理\",{\"1\":{\"564\":1}}],[\"注解方式\",{\"1\":{\"552\":1}}],[\"注解方式和java配置类方式\",{\"1\":{\"552\":1}}],[\"注解方式传入参数\",{\"1\":{\"498\":1}}],[\"注解或\",{\"1\":{\"552\":1}}],[\"注解存在更新记录\",{\"1\":{\"471\":1}}],[\"注解实现小结\",{\"0\":{\"595\":1},\"1\":{\"542\":1}}],[\"注解实现\",{\"1\":{\"242\":1,\"579\":1}}],[\"注解负责标记ioc的类和进行属性装配\",{\"1\":{\"241\":1,\"578\":1}}],[\"注解支持指定任意初始化和销毁回调方法\",{\"1\":{\"237\":1,\"573\":1}}],[\"注解指定销毁方法\",{\"1\":{\"565\":1}}],[\"注解指定\",{\"1\":{\"237\":1}}],[\"注解将一个普通的类标记为\",{\"1\":{\"235\":1,\"571\":1}}],[\"注解赋值\",{\"1\":{\"234\":1}}],[\"注解制指定初始化方法\",{\"1\":{\"232\":1,\"565\":2}}],[\"注解可以控制切面的优先级\",{\"1\":{\"217\":1,\"593\":1}}],[\"注解层\",{\"1\":{\"211\":1}}],[\"注解\",{\"0\":{\"563\":1},\"1\":{\"74\":1,\"79\":1,\"97\":1,\"231\":1,\"480\":1,\"542\":1,\"564\":2,\"566\":2,\"608\":2,\"627\":1,\"662\":1,\"681\":1}}],[\"注释支持\",{\"1\":{\"669\":2}}],[\"注释在带注释的控制器方法上启用跨源请求\",{\"1\":{\"641\":1}}],[\"注释覆盖此范围\",{\"1\":{\"573\":1}}],[\"注释定义的\",{\"1\":{\"573\":1}}],[\"注释允许从另一个配置类加载\",{\"1\":{\"239\":1,\"574\":1}}],[\"注释注释方法\",{\"1\":{\"237\":1,\"573\":1}}],[\"注释与\",{\"1\":{\"236\":1,\"572\":1}}],[\"注释用于指示方法实例化\",{\"1\":{\"236\":1,\"572\":1}}],[\"注释\",{\"1\":{\"107\":1}}],[\"注释对象\",{\"1\":{\"40\":2}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"0\":1}}],[\"注意参数符号\",{\"1\":{\"515\":1}}],[\"注意不是取出数据\",{\"1\":{\"367\":1}}],[\"注意一下集合与字典创建的区别\",{\"1\":{\"316\":1}}],[\"注意一下跨域问题\",{\"1\":{\"252\":1}}],[\"注意上面代码是如何解决出现乱码问题的\",{\"1\":{\"191\":1,\"202\":1}}],[\"注意这里面用的是employee1\",{\"1\":{\"176\":1}}],[\"注意instanceof左边如果是父类那他也会为真\",{\"1\":{\"147\":1}}],[\"注意事项\",{\"1\":{\"139\":2,\"141\":1,\"143\":1,\"146\":2}}],[\"注意\",{\"1\":{\"39\":1,\"143\":1,\"144\":5,\"149\":1,\"171\":1,\"197\":1,\"208\":1,\"222\":1,\"223\":1,\"229\":1,\"231\":1,\"265\":1,\"396\":2,\"399\":1,\"405\":1,\"426\":1,\"440\":2,\"443\":1,\"444\":1,\"466\":1,\"477\":1,\"478\":1,\"484\":1,\"493\":1,\"508\":1,\"512\":1,\"515\":1,\"538\":1,\"551\":1,\"557\":3,\"561\":2,\"564\":1,\"566\":1,\"590\":2,\"591\":1,\"612\":1,\"656\":1,\"664\":1,\"671\":1,\"686\":1}}],[\"注\",{\"1\":{\"0\":1,\"130\":1,\"154\":1,\"681\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map

import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as i,e as t}from"./app-DxhcF-_w.js";const n={},a=t('<h1 id="cssflex布局" tabindex="-1"><a class="header-anchor" href="#cssflex布局"><span>cssFlex布局</span></a></h1><p><strong>布局原理</strong> flex是flexible Box的缩写，意为&quot;弹性布局&quot;， 用来为盒子模型提供最大的灵活性，任何一个容器都可以指定为flex布局</p><ul><li>当我们为父盒子设置为flex布局以后,子元素的float,clear和vertical-align属性将失效</li><li>伸缩布局=弹性布局=伸缩盒子布局=flex布局</li></ul><p>采用Flex布局的元素,称为Flex容器(Flex container),简称&quot;容器&quot; 它的所有子元素自动成为容器成员， 称为Flex项目(flex item),简称项目。</p><ul><li>子容器可以横向排列也可以纵向排列</li></ul><p>通过给父盒子添加flex属性,来控制子盒子的位置和排列方式.</p><h2 id="flex布局父项常见属性" tabindex="-1"><a class="header-anchor" href="#flex布局父项常见属性"><span>flex布局父项常见属性</span></a></h2><ol><li>flex-direction: 设置主轴方向</li><li>justify-content: 设置主轴上的子元素排列方式</li><li>flex-wrap : 设置子元素是否换行</li><li>align-content : 设置侧轴上的子元素的排列方式(多行)</li><li>align-items : 设置侧轴上的子元素排列方式(单行)</li><li>flex-flow : 复合属性,相当于同时设置了flex-direction 和 flex-wrap</li></ol><h3 id="flex-direction" tabindex="-1"><a class="header-anchor" href="#flex-direction"><span>flex-direction</span></a></h3><p>在flex布局中，是分为主轴和侧轴两个方向,同样的叫法有:行和列.x轴y轴</p><ul><li>默认主轴方向就是x轴方向,水平向右。</li><li>默认侧轴方向就是y轴方向,水平向下。</li></ul><p><em><strong>属性</strong></em></p><ol><li>row 默认值从左到右</li><li>row-reverse 从右到左</li><li>column 从上到下</li><li>column-reverse 从上到下</li></ol><h3 id="justify-content" tabindex="-1"><a class="header-anchor" href="#justify-content"><span>justify-content</span></a></h3><p>要先确定主轴是哪一个 <em><strong>属性值</strong></em></p><ol><li>flex-start 默认值从头部开始,如果主轴是x轴,则从左到右</li><li>flex-end 从尾部开始排列</li><li>center 在主轴居中对齐(如果主轴是x轴则水平居中)</li><li>space-around 平分剩余空间</li><li>space-between 先两边贴边,再平分剩余空间(重要)</li></ol><h3 id="flex-wrap" tabindex="-1"><a class="header-anchor" href="#flex-wrap"><span>flex-wrap</span></a></h3><p>一行显示不下，会改变宽度强行塞下 <strong>flex-wrap 设置子元素是否换行</strong> 默认情况下，项目都排在一条线(又称&quot;轴线&quot;)上,flex-wrap属性定义,flex布局默认是不换行的。 <em><strong>属性值</strong></em></p><ol><li>nowrap 默认值，不换行</li><li>wrap 换行</li></ol><h3 id="align-items-设置侧轴上的子元素排列方式-单行" tabindex="-1"><a class="header-anchor" href="#align-items-设置侧轴上的子元素排列方式-单行"><span>align-items 设置侧轴上的子元素排列方式(单行)</span></a></h3><p>该属性是控制子项在侧轴(默认是y轴)上的排列方式,在子项为单项的时候使用 <em><strong>属性</strong></em></p><ol><li>flex-start 默认值，从上代下</li><li>flex-end 从下到上</li><li>center 挤在一起居中(垂直居中)</li><li>stretch 拉伸 拉伸 子盒子不要给高度</li></ol><h3 id="aligin-content-设置侧轴上子元素的排列方式-多行" tabindex="-1"><a class="header-anchor" href="#aligin-content-设置侧轴上子元素的排列方式-多行"><span>aligin-content 设置侧轴上子元素的排列方式(多行)</span></a></h3><p>设置子项在侧轴上的排列方式并且智能用于子项出现换行的情况(多行)，在单行下没有效果</p><ol><li>flex-start 默认值在侧轴的头部开始排列</li><li>flex-end 在侧轴的尾部开始排列</li><li>center 在侧轴中间显示</li><li>space-around 子项在侧轴平分剩余空间</li><li>space-between 子项在侧轴先分布在两头，再平分剩余空间</li><li>stretch 设置子项元素高度平分父元素高度</li></ol><h3 id="flex-flow" tabindex="-1"><a class="header-anchor" href="#flex-flow"><span>flex-flow</span></a></h3><p>flex-flow属性是flex-direction和flex-wrap属性的复合属性 <code>flex-flow:row erap;</code></p><h2 id="flex布局子项常见属性" tabindex="-1"><a class="header-anchor" href="#flex布局子项常见属性"><span>flex布局子项常见属性</span></a></h2><ol><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序(前后顺序)</li></ol><h3 id="flex属性" tabindex="-1"><a class="header-anchor" href="#flex属性"><span>flex属性</span></a></h3><p>flex属性定义子项目分配剩余空间,用flex来表示占多少份数</p><p><code>flex:number</code> 默认0 不给宽度，剩余空间就是整个的宽度</p><h3 id="align-self" tabindex="-1"><a class="header-anchor" href="#align-self"><span>align-self</span></a></h3><p>align-self允许单个项目有与其他项目不一样的对其方式,可覆盖align-items 默认值为auto,表示继承父元素的align-items属性，如果没有父元素，则等同于stretch</p><p>order属性定义项目排列顺序 数值越小，排列越靠前，默认为0 注意: 和z-index不一样</p>',35),o=[a];function r(s,c){return i(),l("div",null,o)}const p=e(n,[["render",r],["__file","cssFlex布局.html.vue"]]),d=JSON.parse('{"path":"/blogs/%E5%89%8D%E7%AB%AF/cssFlex%E5%B8%83%E5%B1%80.html","title":"cssFlex","lang":"zh-CN","frontmatter":{"title":"cssFlex","tag":["cssFlex"],"category":["前端"],"description":"cssFlex布局 布局原理 flex是flexible Box的缩写，意为\\"弹性布局\\"， 用来为盒子模型提供最大的灵活性，任何一个容器都可以指定为flex布局 当我们为父盒子设置为flex布局以后,子元素的float,clear和vertical-align属性将失效 伸缩布局=弹性布局=伸缩盒子布局=flex布局 采用Flex布局的元素,称为Fle...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/%E5%89%8D%E7%AB%AF/cssFlex%E5%B8%83%E5%B1%80.html"}],["meta",{"property":"og:site_name","content":"菜鸟拯救世界"}],["meta",{"property":"og:title","content":"cssFlex"}],["meta",{"property":"og:description","content":"cssFlex布局 布局原理 flex是flexible Box的缩写，意为\\"弹性布局\\"， 用来为盒子模型提供最大的灵活性，任何一个容器都可以指定为flex布局 当我们为父盒子设置为flex布局以后,子元素的float,clear和vertical-align属性将失效 伸缩布局=弹性布局=伸缩盒子布局=flex布局 采用Flex布局的元素,称为Fle..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-31T13:58:29.000Z"}],["meta",{"property":"article:author","content":"菜鸟拯救世界"}],["meta",{"property":"article:tag","content":"cssFlex"}],["meta",{"property":"article:modified_time","content":"2024-07-31T13:58:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cssFlex\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-31T13:58:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"菜鸟拯救世界\\",\\"url\\":\\"#\\"}]}"]]},"headers":[{"level":2,"title":"flex布局父项常见属性","slug":"flex布局父项常见属性","link":"#flex布局父项常见属性","children":[{"level":3,"title":"flex-direction","slug":"flex-direction","link":"#flex-direction","children":[]},{"level":3,"title":"justify-content","slug":"justify-content","link":"#justify-content","children":[]},{"level":3,"title":"flex-wrap","slug":"flex-wrap","link":"#flex-wrap","children":[]},{"level":3,"title":"align-items 设置侧轴上的子元素排列方式(单行)","slug":"align-items-设置侧轴上的子元素排列方式-单行","link":"#align-items-设置侧轴上的子元素排列方式-单行","children":[]},{"level":3,"title":"aligin-content 设置侧轴上子元素的排列方式(多行)","slug":"aligin-content-设置侧轴上子元素的排列方式-多行","link":"#aligin-content-设置侧轴上子元素的排列方式-多行","children":[]},{"level":3,"title":"flex-flow","slug":"flex-flow","link":"#flex-flow","children":[]}]},{"level":2,"title":"flex布局子项常见属性","slug":"flex布局子项常见属性","link":"#flex布局子项常见属性","children":[{"level":3,"title":"flex属性","slug":"flex属性","link":"#flex属性","children":[]},{"level":3,"title":"align-self","slug":"align-self","link":"#align-self","children":[]}]}],"git":{"createdTime":1722434309000,"updatedTime":1722434309000,"contributors":[{"name":"wzy9858","email":"wzy9858@qq.com","commits":1}]},"readingTime":{"minutes":3.39,"words":1016},"filePathRelative":"blogs/前端/cssFlex布局.md","localizedDate":"2024年7月31日","excerpt":"\\n<p><strong>布局原理</strong>\\nflex是flexible Box的缩写，意为\\"弹性布局\\"，\\n用来为盒子模型提供最大的灵活性，任何一个容器都可以指定为flex布局</p>\\n<ul>\\n<li>当我们为父盒子设置为flex布局以后,子元素的float,clear和vertical-align属性将失效</li>\\n<li>伸缩布局=弹性布局=伸缩盒子布局=flex布局</li>\\n</ul>\\n<p>采用Flex布局的元素,称为Flex容器(Flex container),简称\\"容器\\" 它的所有子元素自动成为容器成员，\\n称为Flex项目(flex item),简称项目。</p>\\n<ul>\\n<li>子容器可以横向排列也可以纵向排列</li>\\n</ul>","autoDesc":true}');export{p as comp,d as data};
